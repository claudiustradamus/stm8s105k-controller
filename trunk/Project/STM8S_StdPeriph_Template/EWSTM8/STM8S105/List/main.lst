###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             01/Aug/2013  23:38:39 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59          
     60          #ifdef __GNUC__
     61            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     62               set to 'Yes') calls __io_putchar() */
     63            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     64          #else
     65            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     66          #endif /* __GNUC__ */
     67          
     68          
     69          
     70          
     71          #define SpecialSymbol 0x1b //Esc to start message
     72          #define data_size 20
     73          #define key_time 8000
     74          #define key_time_ok 15000
     75          #define DS_Control  0x10  // Out 1s
     76          #define EEPROM_ADDR 0x4000
     77          
     78          
     79          
     80          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     81          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     82          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     83          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     84          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     85          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     86          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     87          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     88          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     89          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     90          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     91          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     92          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
     93          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     94          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     95          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
     96          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     97          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     98          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     99          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    100          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    101          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    102          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    103          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    104          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    105          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    106          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    107          u8 l=0;
   \                     l:
   \   000000                       DS8 1
    108          //u8 index=0;

   \                                 In section .near.bss, align 1
    109          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    110          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    111          
    112          
    113          
    114          
    115          
    116          
    117          
    118          
    119          /* Private function prototypes -----------------------------------------------*/
    120          void InitHardware();
    121          void GpioConfiguration();
    122          void InitClk();
    123          void InitAdc();
    124          void InitI2C();
    125          void EEPROM_INIT();
    126          bool ReadDS1307();
    127          //void InitUart();
    128          void InitLcd();
    129          void InitDelayTimer();
    130          void Delay1( u16 Delay);
    131          void Delay2( u16 Delay);
    132          void LCDInstrNibble (u8 Instr);
    133          void LCDInstr(u8 Instr);
    134          void LCDDataOut(u8 data);
    135          void LCD_Busy();
    136          void PulseEnable();
    137          //void SendData();
    138          void SendChar(u8 Char);
    139          //void Send_Hello();
    140          bool Set_Clock();
    141          bool key_ok_on();
    142          bool key_plus_on();
    143          bool key_minus_on();
    144          bool key_ok_plus();
    145          bool Init_DS1307(void);
    146          bool Check_DS1307(void);
    147          bool I2C_Start(void);
    148          bool I2C_WA(u8 address);
    149          bool I2C_WD(u8 data);
    150          bool I2C_RA(u8 address);
    151          bool Set_DS1307();
    152          bool Set_Delay_Allarm();
    153          bool Read_Allarm();
    154          bool Read_DS18();
    155          bool DS18_Write( u8 data);
    156          bool DS18_Reset();
    157          u8 DS18_Read();
    158          u8 convert_tobcd(u8 data);
    159          u8 I2C_RD(void);
    160          u8 adj(u8 min,u8 max,u8 now);
    161          u8 bcd2hex(u8 bcd);
    162          
    163          u16  Average();
    164          
    165          
    166          /* Private functions ---------------------------------------------------------*/
    167          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    168          void main(void)
    169          {
    170              /*High speed internal clock prescaler: 1*/
    171              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    172          
    173              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    174              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    175              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    176              //InitUart();
    177              enableInterrupts();
   \   00000C 9A                    RIM
    178              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   00000D A680                  LD        A, #0x80
   \   00000F 8D000000              CALLF     ??Subroutine47_0
    179              InitLcd();
   \                     ??CrossCallReturnLabel_136:
   \   000013 8D000000              CALLF     InitLcd
    180              //InitAdc();
    181              InitI2C();
   \   000017 8D000000              CALLF     InitI2C
    182              line_lcd=0;
   \   00001B 725F0000              CLR       L:line_lcd
    183              if (!Read_DS18())
   \   00001F 8D000000              CALLF     Read_DS18
   \   000023 A100                  CP        A, #0x0
   \   000025 260D                  JRNE      L:??main_0
    184              {
    185               printf("\nDS_Err_I");
   \   000027 AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   00002A 8D000000              CALLF     printf
    186                while (!key_ok_on());
   \                     ??main_1:
   \   00002E 8D000000              CALLF     ?Subroutine27
    187              }
   \                     ??CrossCallReturnLabel_84:
   \   000032 27FA                  JREQ      L:??main_1
    188          
    189              //years=bcd2hex(13);
    190              Delay1(1000);
   \                     ??main_0:
   \   000034 AE03E8                LDW       X, #0x3e8
   \   000037 8D000000              CALLF     Delay1
    191               if (!ReadDS1307())
   \   00003B 8D000000              CALLF     ReadDS1307
   \   00003F A100                  CP        A, #0x0
   \   000041 2615                  JRNE      L:??main_2
    192               {
    193                 printf("\n E2:%d",error);
   \   000043 C60000                LD        A, L:error
   \   000046 5F                    CLRW      X
   \   000047 97                    LD        XL, A
   \   000048 89                    PUSHW     X
   \   000049 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004C 8D000000              CALLF     printf
   \   000050 5B02                  ADD       SP, #0x2
    194                 // Reset the CPU: Enable the watchdog and wait until it expires
    195                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000052 35CC50E0              MOV       L:0x50e0, #0xcc
    196                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   000056 20FE                  JRA       L:??main_3
    197               }
    198               //Send_Hello();
    199              //line_lcd=0;
    200              //printf("\nHello");
    201          
    202          
    203              if (!Check_DS1307())
   \                     ??main_2:
   \   000058 8D000000              CALLF     Check_DS1307
   \   00005C A100                  CP        A, #0x0
   \   00005E 2626                  JRNE      L:??main_4
    204              {
    205                 if (error!=0)
   \   000060 C60000                LD        A, L:error
   \   000063 2712                  JREQ      L:??main_5
    206                 {
    207                  printf("\n E:%d",error);
   \   000065 5F                    CLRW      X
   \   000066 97                    LD        XL, A
   \   000067 89                    PUSHW     X
   \   000068 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00006B 8D000000              CALLF     printf
   \   00006F 5B02                  ADD       SP, #0x2
    208                   while (!key_ok_on());
   \                     ??main_6:
   \   000071 8D000000              CALLF     ?Subroutine27
    209          
    210                 }
   \                     ??CrossCallReturnLabel_85:
   \   000075 27FA                  JREQ      L:??main_6
    211               line_lcd=0;
   \                     ??main_5:
   \   000077 725F0000              CLR       L:line_lcd
    212               printf("\nSetClock");
   \   00007B AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00007E 8D000000              CALLF     printf
    213                Set_Clock();
   \   000082 8D000000              CALLF     Set_Clock
    214          
    215              }
    216          
    217          
    218              //When Start Check for Allarm and computing Daily_long_on
    219                Read_Allarm();
   \                     ??main_4:
   \   000086 8D000000              CALLF     Read_Allarm
    220                 time_on=daily_hour_on*60+daily_minute_on;
   \   00008A 8D000000              CALLF     ?Subroutine1
    221                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_1:
   \   00008E 200B                  JRA       L:??main_7
    222          
    223          
    224               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    225          
    226               // Working fuction
    227              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    228          
    229              while(1)
    230              {
    231                ADC1_Cmd (ENABLE);
    232          
    233                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    234                   Delay2(10000);
    235                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    236                   Delay2(10000);
    237          
    238                line_lcd=0;
    239               if (!ReadDS1307())
    240               {
    241                 printf("\n E2:%d",error);
    242                  //restart i2c
    243                // Reset the CPU: Enable the watchdog and wait until it expires
    244                 IWDG->KR = IWDG_KEY_ENABLE;
    245                 while ( 1 );    // Wait until reset occurs from IWDG
    246          
    247          
    248               }
    249                 else  printf("\n      ");
    250               line_lcd=1;
    251               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    252               //line_lcd=2;
    253               //printf("\n Just Test:%X", timer2);
    254                   //if (rx_data==SpecialSymbol) SendData();
    255                //SendData();
    256          
    257                if (key_ok_on())
    258                {
    259                  line_lcd=0;
    260                  printf("\n%02d:%02d:%02d",years,mounts,date);
    261                }
    262          
    263                if(key_ok_plus())
    264                {
    265                 //Set Daily Allarm
    266                  Set_Delay_Allarm();
    267                }
    268          
    269          
    270                //Check for Allarm
    271          
    272                u16 time_now=hours*60+minutes;
    273                bool allarm=FALSE;
    274          
    275          
    276                     u16 time=time_on;
    277                     do
    278                    {
    279                       if(time==time_now)
    280                       {
    281                         allarm=TRUE;
    282                          break ;
    283                       }
    284                        time++;
    285                         if( time==1441) time=0;
    286                    } while(!(time==time_off));
    287          
    288          
    289          
    290          
    291          
    292          
    293          
    294          
    295          
    296                      if(allarm)
    297                   {
    298                     // Allarm ON
    299                     line_lcd=0;
   \                     ??main_8:
   \   000090 725F0000              CLR       L:line_lcd
    300                     printf("\n ON");
   \   000094 AE0000                LDW       X, #`?<Constant "\\n ON">`
   \                     ??main_9:
   \   000097 8D000000              CALLF     printf
    301                   }
   \                     ??main_7:
   \   00009B A601                  LD        A, #0x1
   \   00009D 8D000000              CALLF     ADC1_Cmd
   \   0000A1 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_60:
   \   0000A5 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_59:
   \   0000A9 725F0000              CLR       L:line_lcd
   \   0000AD 8D000000              CALLF     ReadDS1307
   \   0000B1 A100                  CP        A, #0x0
   \   0000B3 2615                  JRNE      L:??main_10
   \   0000B5 C60000                LD        A, L:error
   \   0000B8 5F                    CLRW      X
   \   0000B9 97                    LD        XL, A
   \   0000BA 89                    PUSHW     X
   \   0000BB AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   0000BE 8D000000              CALLF     printf
   \   0000C2 5B02                  ADD       SP, #0x2
   \   0000C4 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_11:
   \   0000C8 20FE                  JRA       L:??main_11
   \                     ??main_10:
   \   0000CA AE0000                LDW       X, #`?<Constant "\\n      ">`
   \   0000CD 8D000000              CALLF     printf
   \   0000D1 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_46:
   \   0000D5 89                    PUSHW     X
   \   0000D6 C60000                LD        A, L:minutes
   \   0000D9 97                    LD        XL, A
   \   0000DA 89                    PUSHW     X
   \   0000DB C60000                LD        A, L:hours
   \   0000DE 97                    LD        XL, A
   \   0000DF 89                    PUSHW     X
   \   0000E0 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000E3 8D000000              CALLF     printf
   \   0000E7 5B06                  ADD       SP, #0x6
   \   0000E9 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_86:
   \   0000ED 271D                  JREQ      L:??main_12
   \   0000EF 725F0000              CLR       L:line_lcd
   \   0000F3 C60000                LD        A, L:`date`
   \   0000F6 5F                    CLRW      X
   \   0000F7 97                    LD        XL, A
   \   0000F8 89                    PUSHW     X
   \   0000F9 C60000                LD        A, L:mounts
   \   0000FC 97                    LD        XL, A
   \   0000FD 89                    PUSHW     X
   \   0000FE C60000                LD        A, L:years
   \   000101 97                    LD        XL, A
   \   000102 89                    PUSHW     X
   \   000103 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000106 8D000000              CALLF     printf
   \   00010A 5B06                  ADD       SP, #0x6
   \                     ??main_12:
   \   00010C 8D000000              CALLF     key_ok_plus
   \   000110 A100                  CP        A, #0x0
   \   000112 2704                  JREQ      L:??main_13
   \   000114 8D000000              CALLF     Set_Delay_Allarm
   \                     ??main_13:
   \   000118 C60000                LD        A, L:hours
   \   00011B 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_169:
   \   00011F C60000                LD        A, L:minutes
   \   000122 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_124:
   \   000126 90CE0000              LDW       Y, L:time_on
   \                     ??main_14:
   \   00012A BF00                  LDW       S:?w0, X
   \   00012C 90B300                CPW       Y, S:?w0
   \   00012F 2603                  JRNE      ??lb_0
   \   000131 CC0000                JP        L:??main_8
   \                     ??lb_0:
   \   000134 905C                  INCW      Y
   \   000136 90A305A1              CPW       Y, #0x5a1
   \   00013A 2602                  JRNE      L:??main_15
   \   00013C 905F                  CLRW      Y
   \                     ??main_15:
   \   00013E 90C30000              CPW       Y, L:time_off
   \   000142 26E6                  JRNE      L:??main_14
    302          
    303                    else
    304                    {
    305                      line_lcd=0;
   \   000144 725F0000              CLR       L:line_lcd
    306                      printf("\n OFF");
   \   000148 AE0000                LDW       X, #`?<Constant "\\n OFF">`
   \   00014B AC000000              JPF       ??main_9
    307                    }
    308          
    309          
    310              }
    311          
    312          
    313          
    314          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine51_0
   \   000002                       ;               // Fall through to label ??Subroutine51_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine21:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE2710                LDW       X, #0x2710
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine16:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_170:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_125:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 C60000                LD        A, L:daily_hour_off
   \   000014 8D000000              CALLF     ??Subroutine51_0
   \                     ??CrossCallReturnLabel_168:
   \   000018 C60000                LD        A, L:daily_minute_off
   \   00001B 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_126:
   \   00001F CF0000                LDW       L:time_off, X
   \   000022 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine43:
   \   000000 9097                  LD        YL, A
   \   000002 90BF00                LDW       S:?w0, Y
   \   000005 72BB0000              ADDW      X, S:?w0
   \   000009 87                    RETF
    315          

   \                                 In section .far_func.text, align 1, keep-with-next
    316          void InitI2C(void)
    317          {
    318             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    319             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    320             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    321          }
    322          

   \                                 In section .far_func.text, align 1, keep-with-next
    323          bool I2C_Start(void)
    324          {
    325             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    326                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    327              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_113:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    328                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    329                  {
    330                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    331                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    332                  }
    333                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    334          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    335          

   \                                 In section .far_func.text, align 1, keep-with-next
    336          bool I2C_WA(u8 address)
    337          {
    338            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    339                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    340                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_112:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    341                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    342                   {
    343                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    344                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    345                   }
    346                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    347          }
    348          

   \                                 In section .far_func.text, align 1, keep-with-next
    349          bool I2C_RA(u8 address)
    350          {
    351            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    352                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    353                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_114:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    354                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    355                   {
    356                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    357                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    358                   }
    359                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    360          }
    361          
    362          

   \                                 In section .far_func.text, align 1, keep-with-next
    363          bool I2C_WD(u8 data)
    364          {
    365           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    366             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    367             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_111:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    368              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    369              {
    370                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    371                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    372              }
    373               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    374          }
    375          

   \                                 In section .far_func.text, align 1, keep-with-next
    376          u8 I2C_RD(void)
    377          {
    378           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    379            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    380           //while((!(I2C->SR1 & 0x40))&&timeout);
    381           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    382           {
    383             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    384             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    385           }
    386           u8 data=I2C_ReceiveData();
    387           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    388          }
    389          
    390            /*
    391          bool Init_DS1307(void)
    392          {
    393             // Test DS1307
    394              error=0;
    395              if (!I2C_Start()) return FALSE;
    396              if(!I2C_WA(0xD0)) return FALSE;
    397              if(!I2C_WD(0x00)) return FALSE;
    398              if(!I2C_WD(0x00)) return FALSE;
    399              I2C_GenerateSTOP(ENABLE);
    400          
    401              // timeout=100;  error=4;
    402              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    403              //    if (!timeout)return FALSE ;
    404               return TRUE;
    405          }
    406             */
    407          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine50_0
   \   000001                       ;               // Fall through to label ??Subroutine50_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    408          bool  ReadDS1307(void)
    409          {
    410                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine33
    411                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_107:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    412                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_110:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    413                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_164:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    414                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine22
    415                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_62:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    416                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    417                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine20
    418                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_58:
   \   000028 C70000                LD        L:seconds, A
    419                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine20
    420                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_57:
   \   00002F C70000                LD        L:minutes, A
    421                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine20
    422                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_56:
   \   000036 C70000                LD        L:hours, A
    423                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine20
    424                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_55:
   \   00003D C70000                LD        L:days, A
    425                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine20
    426                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_54:
   \   000044 C70000                LD        L:`date`, A
    427                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine20
    428                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_53:
   \   00004B C70000                LD        L:mounts, A
    429                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004E 8D000000              CALLF     ?Subroutine20
    430                  years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_52:
   \   000052 C70000                LD        L:years, A
    431                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000055 8D000000              CALLF     ?Subroutine23
    432                  u8 data1 = I2C_RD();
    433                //Last read byte by I2C slave
    434                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \                     ??CrossCallReturnLabel_64:
   \   000059 8D000000              CALLF     ?Subroutine26
    435                 I2C_GenerateSTOP(ENABLE);
    436                 temp2= I2C_RD();
   \                     ??CrossCallReturnLabel_69:
   \   00005D 8D000000              CALLF     I2C_RD
   \   000061 C70000                LD        L:temp2, A
    437                 return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    438          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_120:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_119:
   \   000004 AC000000              JPF       bcd2hex
    439          

   \                                 In section .far_func.text, align 1, keep-with-next
    440          bool Check_DS1307(void)
    441          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    442             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    443                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine33
    444                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_106:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    445                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_109:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    446                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine50_0
   \                     ??CrossCallReturnLabel_167:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    447                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine22
    448                  //Last read byte by I2C slave
    449                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_61:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    450                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    451                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine23
    452                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_63:
   \   00002E B700                  LD        S:?b8, A
    453                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine26
    454                 I2C_GenerateSTOP(ENABLE);
    455                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_70:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    456                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    457          }
    458          

   \                                 In section .far_func.text, align 1, keep-with-next
    459          bool Set_DS1307()
    460          {
    461                 // convert hex or decimal to bcd format
    462          
    463          
    464                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine33
    465                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_105:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    466                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_108:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    467                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_163:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    468                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_98:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    469                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_99:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    470                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_100:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    471                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_101:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    472                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_102:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    473                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_103:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    474                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_104:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    475                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine50_0
   \                     ??CrossCallReturnLabel_165:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    476                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine50_0
   \                     ??CrossCallReturnLabel_166:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    477                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    478          
    479          
    480             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    481          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    482          
    483          

   \                                 In section .far_func.text, align 1, keep-with-next
    484          u8 convert_tobcd(u8 data)
    485          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    486             u8 data_second_decimal=data/10;
    487             u8 data_first_decimal=data - 10*data_second_decimal;
    488             data=16*data_second_decimal + data_first_decimal;
    489            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    490          }
    491          

   \                                 In section .far_func.text, align 1, keep-with-next
    492          u8 bcd2hex(u8 bcd)
    493          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    494            u8 hex=0;
    495            hex=(bcd>>4)*10 +(bcd&0x0f);
    496            bcd=0;
    497            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    498          }
    499          
    500          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    501          bool Set_Clock()
    502          {
    503              //Clear Display
    504             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine13
    505             Delay1(1000);
    506             line_lcd=0;
    507              printf("\nYears:");
   \                     ??CrossCallReturnLabel_35:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    508                do
    509              {
    510               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine17
    511               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_47:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    512                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine49_0
    513              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_156:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_77:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    514          
    515               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    516              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    517                do
    518              {
    519               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine17
    520               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_48:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    521                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    522              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_78:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    523          
    524              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine13
    525               Delay1(1000);
    526                line_lcd=0;
    527              printf("\nDate:");
   \                     ??CrossCallReturnLabel_36:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    528                do
    529              {
    530               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine17
    531               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_49:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    532                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    533              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_79:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    534          
    535          
    536              //Clear Display
    537             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine13
    538             Delay1(1000);
    539             line_lcd=0;
    540              printf("\nDays:");
   \                     ??CrossCallReturnLabel_37:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    541                do
    542              {
    543                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    544               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    545                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    546              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_80:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    547          
    548          
    549          
    550             //Clear Display
    551             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine13
    552             Delay1(1000);
    553             line_lcd=0;
    554              printf("\nHours:");
   \                     ??CrossCallReturnLabel_38:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    555                do
    556              {
    557                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine16
    558               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_43:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    559                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine49_0
    560              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_155:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_81:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    561          
    562               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    563               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    564                do
    565              {
    566                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine16
    567               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_44:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    568                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine25
    569              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_160:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_82:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    570          
    571              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    572              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    573              do
    574              {
    575                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine16
    576               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_45:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    577                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine25
    578              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_159:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_83:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    579          
    580                // Set parameter to DS1307 + time byte
    581                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    582          
    583                //bool k=Check_DS1307();
    584          
    585            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    586          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine49_0
   \   000006                       ;               // Fall through to label ??Subroutine49_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_115:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    587          
    588          

   \                                 In section .far_func.text, align 1, keep-with-next
    589          u8 adj(u8 min,u8 max,u8 now)
    590          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    591             u8 adj=now;
    592             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    593             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    594             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    595             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    596             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    597             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    598          }
    599          
    600          

   \                                 In section .far_func.text, align 1, keep-with-next
    601          bool key_ok_on()
    602          {
    603            //Read Key OK
    604            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_123:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    605             {
    606               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    607                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_122:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    608                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    609             }
    610          
    611            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    612          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    613          

   \                                 In section .far_func.text, align 1, keep-with-next
    614           bool key_plus_on()
    615          {
    616            //Read Key OK
    617              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_66:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    618               {
    619               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    620                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_24:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_65:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    621                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_25:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    622               }
    623          
    624            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    625          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    626          

   \                                 In section .far_func.text, align 1, keep-with-next
    627            bool key_minus_on()
    628          {
    629            //Read Key OK
    630             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_68:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    631               {
    632               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    633                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_22:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_67:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    634                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_23:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    635               }
    636          
    637            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    638          }
    639          
    640          

   \                                 In section .far_func.text, align 1, keep-with-next
    641          bool  key_ok_plus()
    642          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    643            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_39:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    644            {
    645                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    646                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_26:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_40:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    647                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_27:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    648            }
    649          
    650           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    651          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_121:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    652          
    653          

   \                                 In section .far_func.text, align 1, keep-with-next
    654          bool Set_Delay_Allarm()
    655          {
    656          
    657             //clr
    658             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine13
    659             Delay1(1000);
    660             line_lcd=0;
    661             printf("\nH On:");
   \                     ??CrossCallReturnLabel_30:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    662            do
    663              {
    664               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    665               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    666                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine49_0
    667              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_158:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_72:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    668          
    669             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine13
    670             Delay1(1000);
    671             line_lcd=0;
    672             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_31:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    673            do
    674              {
    675               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    676               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    677                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine25
    678              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_162:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_73:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    679          
    680              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine13
    681              Delay1(1000);
    682              line_lcd=0;
    683              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_32:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    684            do
    685              {
    686               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    687               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    688                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine49_0
    689              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_157:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_74:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    690          
    691            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine13
    692             Delay1(1000);
    693             line_lcd=0;
    694             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_33:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    695            do
    696              {
    697               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    698               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    699                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine25
    700              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_161:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_75:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    701          
    702               //Computing time_long_on
    703          
    704               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine30
    705               u8 minute=daily_minute_on;
    706               daily_long_on=0;
    707               do
    708               {
    709                    daily_long_on++;
   \                     ??CrossCallReturnLabel_94:
   \   0000DC 8D000000              CALLF     ?Subroutine11
    710                    minute++;
    711                    if (minute==60)
   \                     ??CrossCallReturnLabel_29:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    712                    {
    713                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    714                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    715                    }
    716                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    717          
    718               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_94
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_94
    719          
    720                //Display daily_long_on
    721              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine13
    722              Delay1(1000);
    723              line_lcd=0;
    724              printf("\nLong :");
   \                     ??CrossCallReturnLabel_34:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    725          
    726                do
    727              {
    728               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    729               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    730                 //daily_long_on=adj(0,1440,daily_long_on);
    731              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_76:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    732          
    733              time_on=daily_hour_on*60+daily_minute_on;
   \   000123 8D000000              CALLF     ?Subroutine1
    734              time_off= daily_hour_off*60+daily_minute_off;
    735              //Save data to eeprom
    736               EEPROM_INIT();
   \                     ??CrossCallReturnLabel_0:
   \   000127 8D000000              CALLF     EEPROM_INIT
    737               FLASH_ProgramByte(EEPROM_ADDR,daily_hour_on);
   \   00012B C60000                LD        A, L:daily_hour_on
   \   00012E AE4000                LDW       X, #0x4000
   \   000131 8D000000              CALLF     ?Subroutine4
    738               FLASH_ProgramByte(EEPROM_ADDR+1,daily_minute_on);
   \                     ??CrossCallReturnLabel_11:
   \   000135 C60000                LD        A, L:daily_minute_on
   \   000138 AE4001                LDW       X, #0x4001
   \   00013B 8D000000              CALLF     ?Subroutine4
    739               FLASH_ProgramByte(EEPROM_ADDR+2,daily_hour_off);
   \                     ??CrossCallReturnLabel_10:
   \   00013F C60000                LD        A, L:daily_hour_off
   \   000142 AE4002                LDW       X, #0x4002
   \   000145 8D000000              CALLF     ?Subroutine4
    740               FLASH_ProgramByte(EEPROM_ADDR+3,daily_minute_off);
   \                     ??CrossCallReturnLabel_9:
   \   000149 C60000                LD        A, L:daily_minute_off
   \   00014C AE4003                LDW       X, #0x4003
   \   00014F 8D000000              CALLF     ?Subroutine4
    741          
    742             return TRUE;
   \                     ??CrossCallReturnLabel_8:
   \   000153 A601                  LD        A, #0x1
   \   000155 87                    RETF
    743          
    744          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    745          

   \                                 In section .far_func.text, align 1, keep-with-next
    746          bool Read_Allarm()
    747          {
    748             daily_hour_on=FLASH_ReadByte(EEPROM_ADDR);
   \                     Read_Allarm:
   \   000000 AE4000                LDW       X, #0x4000
   \   000003 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000007 C70000                LD        L:daily_hour_on, A
    749             daily_minute_on=FLASH_ReadByte(EEPROM_ADDR+1);
   \   00000A AE4001                LDW       X, #0x4001
   \   00000D 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   000011 C70000                LD        L:daily_minute_on, A
    750             daily_hour_off=FLASH_ReadByte(EEPROM_ADDR+2);
   \   000014 AE4002                LDW       X, #0x4002
   \   000017 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   00001B C70000                LD        L:daily_hour_off, A
    751             daily_minute_off=FLASH_ReadByte(EEPROM_ADDR+3);
   \   00001E AE4003                LDW       X, #0x4003
   \   000021 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   000025 C70000                LD        L:daily_minute_off, A
    752               // Computting daily_long_on
    753               u8 hour=daily_hour_on;
   \   000028 8D000000              CALLF     ?Subroutine30
    754               u8 minute=daily_minute_on;
    755               daily_long_on=0;
    756               do
    757               {
    758                    daily_long_on++;
   \                     ??CrossCallReturnLabel_93:
   \   00002C 8D000000              CALLF     ?Subroutine11
    759                    minute++;
    760                    if (minute==60)
   \                     ??CrossCallReturnLabel_28:
   \   000030 2607                  JRNE      L:??Read_Allarm_0
    761                    {
    762                      minute=0;
   \   000032 3F00                  CLR       S:?b1
    763                      hour++;
   \   000034 B600                  LD        A, S:?b0
   \   000036 4C                    INC       A
   \   000037 B700                  LD        S:?b0, A
    764                    }
    765                    if(hour==24) hour=0;
   \                     ??Read_Allarm_0:
   \   000039 B600                  LD        A, S:?b0
   \   00003B A118                  CP        A, #0x18
   \   00003D 2602                  JRNE      L:??Read_Allarm_1
   \   00003F 3F00                  CLR       S:?b0
    766          
    767               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_1:
   \   000041 C60000                LD        A, L:daily_hour_off
   \   000044 B100                  CP        A, S:?b0
   \   000046 26E4                  JRNE      L:??CrossCallReturnLabel_93
   \   000048 C60000                LD        A, L:daily_minute_off
   \   00004B B100                  CP        A, S:?b1
   \   00004D 26DD                  JRNE      L:??CrossCallReturnLabel_93
    768          
    769            return TRUE;
   \   00004F A601                  LD        A, #0x1
   \   000051 87                    RETF
    770          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte
    771          

   \                                 In section .far_func.text, align 1, keep-with-next
    772          void EEPROM_INIT()
    773          {
    774            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    775            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    776            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    777          
    778          
    779          
    780          }
    781          
    782          

   \                                 In section .far_func.text, align 1, keep-with-next
    783          void GpioConfiguration()
    784          {
    785          
    786            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    787          
    788            // ADC PE6 NEW PB0
    789            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    790          
    791            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    792            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    793          
    794            //PD0 Led
    795            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     ?Subroutine28
    796            //I2C
    797            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_87:
   \   000032 A610                  LD        A, #0x10
   \   000034 AE5005                LDW       X, #0x5005
   \   000037 8D000000              CALLF     ?Subroutine28
    798            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_88:
   \   00003B A620                  LD        A, #0x20
   \   00003D AE5005                LDW       X, #0x5005
   \   000040 8D000000              CALLF     ?Subroutine29
    799            // Remap Pins pb4,pb5  sda,scl ;
    800          
    801             //Init KEY OK,PLUS,MINUS
    802            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_90:
   \   000044 A610                  LD        A, #0x10
   \   000046 AE5019                LDW       X, #0x5019
   \   000049 8D000000              CALLF     ?Subroutine29
    803            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_91:
   \   00004D A602                  LD        A, #0x2
   \   00004F AE5000                LDW       X, #0x5000
   \   000052 8D000000              CALLF     ?Subroutine29
    804            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_92:
   \   000056 A604                  LD        A, #0x4
   \   000058 AE5000                LDW       X, #0x5000
   \   00005B 8D000000              CALLF     ?Subroutine28
    805          
    806            //Init DS18b20 data pin
    807            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_89:
   \   00005F A604                  LD        A, #0x4
   \   000061 AE500F                LDW       X, #0x500f
   \   000064 AC000000              JPF       GPIO_Init
    808          
    809          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF
    810          

   \                                 In section .far_func.text, align 1, keep-with-next
    811          void InitClk()
    812          {
    813            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    814            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    815            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    816            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    817            CLK_SOURCE_HSI,       // Switch to internal timer.
    818            DISABLE,              // Disable the clock switch interrupt.
    819            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    820          
    821            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine31
    822            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_95:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine31
    823            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_96:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine31
    824            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_97:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    825          
    826          
    827          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    828          
    829          

   \                                 In section .far_func.text, align 1, keep-with-next
    830          void InitAdc()
    831          {
    832               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    833               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    834               /*
    835               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    836                          ADC1_CHANNEL_0,
    837                          ADC1_PRESSEL_FCPU_D4,
    838                           ADC1_EXTTRIG_TIM,
    839          
    840                 */
    841               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    842               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    843                                      ADC1_CHANNEL_0,
    844                                      ADC1_ALIGN_RIGHT
    845                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    846          
    847          
    848               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    849          
    850          
    851               //ADC1_Cmd (ENABLE);
    852               //ADC1->CR1 |= ADC1_CR1_ADON ;
    853               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    854               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    855          
    856          }
    857          
    858          /*
    859          void InitUart()
    860          {
    861             UART2_DeInit();
    862             UART2_Init((u32)9600,
    863                        UART2_WORDLENGTH_8D,
    864                        UART2_STOPBITS_1,
    865                        UART2_PARITY_NO,
    866                        UART2_SYNCMODE_CLOCK_DISABLE,
    867                        UART2_MODE_TXRX_ENABLE
    868                          );
    869          
    870             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    871             UART2_Cmd(ENABLE);
    872          
    873            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    874          }
    875            */
    876          

   \                                 In section .far_func.text, align 1, keep-with-next
    877          void SendChar( u8 Char)
    878          {
    879             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    880            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    881          }
   \   00000E 87                    RETF
    882            /*
    883          void Send_Hello()
    884          {
    885            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    886             Delay1(10);
    887             sprintf(data,"Hello");
    888              u8 i=0;
    889            do
    890           {
    891            SendChar(data[i++]);
    892           } while (data[i]!=0);
    893            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    894            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    895          
    896          
    897          
    898          }
    899              */
    900          
    901          
    902              /*
    903          
    904          void SendData()
    905          {
    906           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    907            Delay1(10);
    908            u8 i=0;
    909            sprintf(data,"%d %c",adcdata,0x0d);
    910           do
    911           {
    912             SendChar(data[i++]);
    913          
    914           } while (data[i]!=0);
    915             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    916            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    917            rx_data=0;
    918          }
    919          */
    920          

   \                                 In section .far_func.text, align 1, keep-with-next
    921          void LCDDataOut(u8 data)
    922          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    923            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_19:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_145
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine48_0
    924            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_145:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_18:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_146
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine48_0
    925            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_146:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_17:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_147
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine48_0
    926            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_147:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_16:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_148
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine48_0
    927          }
   \                     ??CrossCallReturnLabel_148:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_154:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    928          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine48_0
   \   000002                       ;               // Fall through to label ??Subroutine48_0

   \                                 In section .far_func.text, align 1, keep-with-next
    929          void InitLcd()
    930          {
    931           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine8
    932            LCD_RW(0);
    933            LCD_RS(0);
   \                     ??CrossCallReturnLabel_21:
   \   000006 8D000000              CALLF     ?Subroutine9
    934            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_143:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine15
    935          
    936            LCDInstrNibble(0x03);
    937             Delay1(10);
    938            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_42:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    939             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine15
    940            LCDInstrNibble(0x03);
    941             Delay1(10);
    942          
    943             //Line 4
    944            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_41:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    945            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    946            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    947            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    948          
    949            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    950            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
    951          
    952            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine40
    953            Delay1(250);
   \                     ??CrossCallReturnLabel_116:
   \   000048 AE00FA                LDW       X, #0xfa
   \   00004B 8D000000              CALLF     Delay1
    954          
    955            LCDInstr(0x06);
   \   00004F A606                  LD        A, #0x6
   \   000051 8D000000              CALLF     LCDInstr
    956            Delay1(10);
   \   000055 AE000A                LDW       X, #0xa
   \   000058 AC000000              JPF       Delay1
    957          
    958          
    959          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_152:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_151:
   \   00000A 87                    RETF
    960          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine48_0
   \                     ??CrossCallReturnLabel_149:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_128:
   \   00000D                       REQUIRE ??Subroutine44_0
   \   00000D                       ;               // Fall through to label ??Subroutine44_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_127:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    961          void LCDInstr(u8 Instr)
    962          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    963            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine9
    964            LCD_RW(0);
   \                     ??CrossCallReturnLabel_141:
   \   000009 2000                  JRA       ?Subroutine0
    965            LCDDataOut(Instr>>4);
    966            PulseEnable();
    967            LCDDataOut(Instr & 0x0F);
    968            PulseEnable();
    969          }
    970          

   \                                 In section .far_func.text, align 1, keep-with-next
    971          void LCDData(u8 Data)
    972          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    973            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine7
    974            LCD_RW(0);
   \                     ??CrossCallReturnLabel_15:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    975            LCDDataOut(Data>>4);
    976            PulseEnable() ;
    977            LCDDataOut(Data & 0x0F) ;
    978            PulseEnable();
    979          }
    980          

   \                                 In section .far_func.text, align 1, keep-with-next
    981          void LCDInstrNibble(u8 Instr)
    982          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    983            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine8
    984            LCD_RW(0);
    985            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_20:
   \   00000B AC000000              JPF       ??Subroutine44_0
    986            PulseEnable();
    987          }
    988          

   \                                 In section .far_func.text, align 1, keep-with-next
    989          void PulseEnable(void)
    990          {
    991            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine2
    992             Delay1(1);
    993            LCD_EN(1);
    994             Delay1(1);
    995            LCD_EN(0);
   \                     ??CrossCallReturnLabel_3:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine48_0
    996             Delay1(1);
   \                     ??CrossCallReturnLabel_144:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
    997          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_153:
   \   000006 5F                    CLRW      X
   \   000007 5C                    INCW      X
   \   000008 8D000000              CALLF     Delay1
   \   00000C A608                  LD        A, #0x8
   \   00000E AE500A                LDW       X, #0x500a
   \   000011 8D000000              CALLF     GPIO_WriteHigh
   \   000015 5F                    CLRW      X
   \   000016 5C                    INCW      X
   \   000017 AC000000              JPF       Delay1
    998          

   \                                 In section .far_func.text, align 1, keep-with-next
    999          void LCD_Busy(void)
   1000          {
   1001             //set Port D7 as Input
   1002             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1003             //Set Read
   1004             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine7
   1005             LCD_RS(0);
   \                     ??CrossCallReturnLabel_14:
   \   000013 8D000000              CALLF     ?Subroutine9
   1006             // Read Busy Flag
   1007                timer2=0;
   \                     ??CrossCallReturnLabel_142:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1008             do
   1009             {
   1010             // Enable set
   1011               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine2
   1012                Delay1(1);
   1013               LCD_EN(1);
   1014                Delay1(1);
   1015             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_2:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1016                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1017                //Clear read
   1018              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine48_0
   1019             //set Port D7 as Output
   1020             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_150:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1021          
   1022          }
   1023          
   1024          

   \                                 In section .far_func.text, align 1, keep-with-next
   1025          void LCD(u8 data)
   1026           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1027             //  static u8 linet=0;
   1028          
   1029          
   1030               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_130
   1031               {
   1032          
   1033                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
   1034                   {
   1035                   case 0:
   1036                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
   1037                     count=0;
   \   00001F 725F0000              CLR       L:count
   1038                     break;
   \   000023 2022                  JRA       L:??LCD_4
   1039                   case 1:
   1040                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
   1041                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
   1042                     break;
   \   00002F 2016                  JRA       L:??LCD_4
   1043                   case 2:
   1044                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
   1045                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
   1046                     break;
   \   00003B 200A                  JRA       L:??LCD_4
   1047                   case 3:
   1048                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
   1049                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
   1050                     break;
   1051                   //default:
   1052                    //  LCDInstr(0x80 |0x40);    //Line 1
   1053                    }
   1054                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
   1055                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
   1056                   {
   1057                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
   1058                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine40
   1059                    Delay1(2500);
   \                     ??CrossCallReturnLabel_118:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
   1060                   }
   1061          
   1062                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ??Subroutine45_0
   1063          
   1064          
   1065               }
   1066          
   1067          
   1068               if (count==20)
   \                     ??CrossCallReturnLabel_130:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
   1069                {
   1070                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
   1071                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
   1072                }
   1073                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
   1074                  {
   1075                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
   1076                    Delay1(1);
   1077                  }
   1078                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
   1079                    {
   1080                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
   1081                      count=0;
   \   000088 725F0000              CLR       L:count
   1082                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
   1083                    }
   1084                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
   1085                        {
   1086                          count=0;
   \   000092 725F0000              CLR       L:count
   1087                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine40
   1088                          Delay1(250);
   \                     ??CrossCallReturnLabel_117:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
   1089                        }
   1090          
   1091          
   1092              /*
   1093                   line++;
   1094                   if (line>3)
   1095                   {
   1096                     line=1;  //Line 0 for Time
   1097                   }
   1098                 switch(line)
   1099                   {
   1100                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1101                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1102                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1103                   default : LCDInstr(0x80 | 0x40); // Line 1
   1104                   }
   1105                   Delay(1);
   1106                   count=0;
   1107                }
   1108          
   1109               */
   1110          
   1111               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
   1112               {
   1113                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
   1114                  Delay1(1);
   \   0000AB 8D000000              CALLF     ??Subroutine45_0
   1115                 count++;
   \                     ??CrossCallReturnLabel_129:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
   1116               }
   1117           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1118          

   \                                 In section .far_func.text, align 1, keep-with-next
   1119          void InitDelayTimer()
   1120          {
   1121             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1122             //Tclock 16/8=2Mhz  /20 10us
   1123                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1124                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1125                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1126                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1127            //Enable TIM2
   1128                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1129          
   1130          }
   1131          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 8D000000              CALLF     Delay1
   \   000004                       REQUIRE ??Subroutine46_0
   \   000004                       ;               // Fall through to label ??Subroutine46_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   1132          bool DS18_Write(u8 data)
   1133          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1134          
   1135            for ( u8 i=0;i<8;i++)
   \   000006 3F00                  CLR       S:?b8
   1136            {
   1137             DS18(0);
   \                     ??DS18_Write_0:
   \   000008 8D000000              CALLF     ?Subroutine12
   1138             Delay1(0); //Start time slot 4,5 us
   \                     ??CrossCallReturnLabel_139:
   \   00000C 5F                    CLRW      X
   \   00000D 8D000000              CALLF     Delay1
   1139             if( data & (1<<i)) DS18(1)
   \   000011 5F                    CLRW      X
   \   000012 5C                    INCW      X
   \   000013 B600                  LD        A, S:?b8
   \   000015 8D000000              CALLF     L:?sll16_x_x_a
   \   000019 9F                    LD        A, XL
   \   00001A B500                  BCP       A, S:?b9
   \   00001C 2706                  JREQ      L:??DS18_Write_1
   \   00001E 8D000000              CALLF     ??Subroutine46_0
   \                     ??CrossCallReturnLabel_133:
   \   000022 2004                  JRA       L:??CrossCallReturnLabel_138
   1140               else DS18(0);
   \                     ??DS18_Write_1:
   \   000024 8D000000              CALLF     ?Subroutine12
   1141             Delay1(2);  // 60us end time slot
   \                     ??CrossCallReturnLabel_138:
   \   000028 8D000000              CALLF     ?Subroutine5
   1142             DS18(1);
   1143             Delay1(0);
   1144            }
   \                     ??CrossCallReturnLabel_13:
   \   00002C 25DA                  JRC       L:??DS18_Write_0
   1145            return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 AC000000              JPF       L:?epilogue_w4
   1146          
   1147          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine47_0
   \   000002                       ;               // Fall through to label ??Subroutine47_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 AE0002                LDW       X, #0x2
   \   000003 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_134:
   \   000007 5F                    CLRW      X
   \   000008 8D000000              CALLF     Delay1
   \   00000C B600                  LD        A, S:?b8
   \   00000E 4C                    INC       A
   \   00000F B700                  LD        S:?b8, A
   \   000011 A108                  CP        A, #0x8
   \   000013 87                    RETF
   1148          
   1149          

   \                                 In section .far_func.text, align 1, keep-with-next
   1150          u8  DS18_Read()
   1151          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1152              //Init DS18b20 data pin as Input
   1153          
   1154            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1155          
   1156            for (u8 i=0;i<8;i++)
   \   000006 3F00                  CLR       S:?b8
   1157            {
   1158              DS18(0);
   \                     ??DS18_Read_0:
   \   000008 8D000000              CALLF     ?Subroutine12
   1159              Delay1(0); //Start time slot 4,5 us
   \                     ??CrossCallReturnLabel_140:
   \   00000C 5F                    CLRW      X
   \   00000D 8D000000              CALLF     ?Subroutine6
   1160              DS18(1);
   1161              Delay1(1); // Wait for ds18b20 set bit
   1162              //Delay1(0);
   1163             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \                     ??CrossCallReturnLabel_132:
   \   000011 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_50:
   \   000015 2706                  JREQ      L:??DS18_Read_1
   \   000017 35010000              MOV       S:?b0, #0x1
   \   00001B 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   00001D 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   00001F 5F                    CLRW      X
   \   000020 5C                    INCW      X
   \   000021 B600                  LD        A, S:?b8
   \   000023 8D000000              CALLF     L:?sll16_x_x_a
   \   000027 B600                  LD        A, S:?b0
   \   000029 42                    MUL       X, A
   \   00002A 9F                    LD        A, XL
   \   00002B BB00                  ADD       A, S:?b9
   \   00002D B700                  LD        S:?b9, A
   1164              Delay1(2); // Wait 60 us until end of read slot
   \   00002F 8D000000              CALLF     ?Subroutine5
   1165              DS18(1);  // Next bit
   1166              Delay1(0);
   1167          
   1168            }
   \                     ??CrossCallReturnLabel_12:
   \   000033 25D3                  JRC       L:??DS18_Read_0
   1169              //Init DS18b20 data pin
   1170             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1171             return data;
   \   000035 B600                  LD        A, S:?b9
   \   000037 AC000000              JPF       L:?epilogue_w4
   1172          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_135:
   \   000004                       REQUIRE ??Subroutine45_0
   \   000004                       ;               // Fall through to label ??Subroutine45_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1173          

   \                                 In section .far_func.text, align 1, keep-with-next
   1174          bool DS18_Reset()
   1175          {
   1176             //Init Reset Pulse
   1177              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine12
   1178              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_137:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     ?Subroutine6
   1179              DS18(1);
   1180              Delay1(1);
   1181              timer2=0;
   \                     ??CrossCallReturnLabel_131:
   \   00000B 5F                    CLRW      X
   \   00000C CF0000                LDW       L:timer2, X
   1182              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   00000F CE0000                LDW       X, L:timer2
   \   000012 A32710                CPW       X, #0x2710
   \   000015 2406                  JRNC      L:??DS18_Reset_1
   \   000017 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_51:
   \   00001B 26F2                  JRNE      L:??DS18_Reset_0
   1183              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001D CE0000                LDW       X, L:timer2
   \   000020 A32710                CPW       X, #0x2710
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1184              // Delay1(10);
   1185              return TRUE;
   \                     ??DS18_Reset_2:
   \   000027 A601                  LD        A, #0x1
   \   000029 87                    RETF
   1186          }
   1187          

   \                                 In section .far_func.text, align 1, keep-with-next
   1188          bool Read_DS18()
   1189          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 8D000000              CALLF     L:?push_w6
   \   000008 3B0000                PUSH      S:?b14
   \   00000B 5202                  SUB       SP, #0x2
   1190          
   1191             //Init Reset Pulse
   1192              if(!DS18_Reset()) return FALSE;
   \   00000D 8D000000              CALLF     DS18_Reset
   \   000011 A100                  CP        A, #0x0
   \   000013 2604                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   000015 4F                    CLR       A
   \   000016 CC0000                JP        L:??Read_DS18_2
   1193             //Skip ROM Command 0xCC
   1194              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   000019 A6CC                  LD        A, #0xcc
   \   00001B 8D000000              CALLF     DS18_Write
   1195             //Function command  CONVERT T [44h]
   1196              DS18_Write(0x44);
   \   00001F A644                  LD        A, #0x44
   \   000021 8D000000              CALLF     DS18_Write
   1197              //Wait util end convert
   1198              timer2=0;
   \   000025 5F                    CLRW      X
   \   000026 CF0000                LDW       L:timer2, X
   1199               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??Read_DS18_3:
   \   000029 CE0000                LDW       X, L:timer2
   \   00002C A32710                CPW       X, #0x2710
   \   00002F 2408                  JRNC      L:??Read_DS18_4
   \   000031 8D000000              CALLF     DS18_Read
   \   000035 A100                  CP        A, #0x0
   \   000037 27F0                  JREQ      L:??Read_DS18_3
   1200                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_4:
   \   000039 CE0000                LDW       X, L:timer2
   \   00003C A32711                CPW       X, #0x2711
   \   00003F 24D4                  JRNC      L:??Read_DS18_1
   1201               u8 temp8=timer2;
   \   000041 CE0000                LDW       X, L:timer2
   \   000044 1F01                  LDW       (0x1,SP), X
   1202              //Init Reset Pulse
   1203              if(!DS18_Reset()) return FALSE;
   \   000046 8D000000              CALLF     DS18_Reset
   \   00004A A100                  CP        A, #0x0
   \   00004C 27C7                  JREQ      L:??Read_DS18_1
   1204              // Skip ROM Command 0xCC
   1205              DS18_Write(0xCC);
   \   00004E A6CC                  LD        A, #0xcc
   \   000050 8D000000              CALLF     DS18_Write
   1206              //Function command READ SCRATCHPAD [BEh]
   1207              DS18_Write(0xBE);
   \   000054 A6BE                  LD        A, #0xbe
   \   000056 8D000000              CALLF     DS18_Write
   1208               u8 temp1=DS18_Read();
   \   00005A 8D000000              CALLF     DS18_Read
   \   00005E B700                  LD        S:?b8, A
   1209               u8 temp2=DS18_Read();
   \   000060 8D000000              CALLF     DS18_Read
   \   000064 B700                  LD        S:?b9, A
   1210               u8 temp3=DS18_Read();
   \   000066 8D000000              CALLF     DS18_Read
   \   00006A B700                  LD        S:?b10, A
   1211               u8 temp4=DS18_Read();
   \   00006C 8D000000              CALLF     DS18_Read
   \   000070 B700                  LD        S:?b11, A
   1212               u8 temp5=DS18_Read();
   \   000072 8D000000              CALLF     DS18_Read
   \   000076 B700                  LD        S:?b12, A
   1213               u8 temp6=DS18_Read();
   \   000078 8D000000              CALLF     DS18_Read
   \   00007C B700                  LD        S:?b13, A
   1214               u8 temp7=DS18_Read();
   \   00007E 8D000000              CALLF     DS18_Read
   \   000082 B700                  LD        S:?b14, A
   1215               //u8 temp8=DS18_Read();
   1216               //u8 temp9=DS18_Read();
   1217          
   1218          
   1219          
   1220                line_lcd=0;
   \   000084 725F0000              CLR       L:line_lcd
   1221                printf("\n%x%x%x%x",temp1,temp2,temp3,temp4);
   \   000088 5F                    CLRW      X
   \   000089 41                    EXG       A, XL
   \   00008A B600                  LD        A, S:?b11
   \   00008C 41                    EXG       A, XL
   \   00008D 89                    PUSHW     X
   \   00008E 41                    EXG       A, XL
   \   00008F B600                  LD        A, S:?b10
   \   000091 41                    EXG       A, XL
   \   000092 89                    PUSHW     X
   \   000093 41                    EXG       A, XL
   \   000094 B600                  LD        A, S:?b9
   \   000096 41                    EXG       A, XL
   \   000097 89                    PUSHW     X
   \   000098 41                    EXG       A, XL
   \   000099 B600                  LD        A, S:?b8
   \   00009B 41                    EXG       A, XL
   \   00009C 89                    PUSHW     X
   \   00009D AE0000                LDW       X, #`?<Constant "\\n%x%x%x%x">`
   \   0000A0 8D000000              CALLF     printf
   \   0000A4 5B08                  ADD       SP, #0x8
   1222                line_lcd=1;
   \   0000A6 35010000              MOV       L:line_lcd, #0x1
   1223                printf("\n%x%x%x%x",temp5,temp6,temp7,temp8);
   \   0000AA 7B02                  LD        A, (0x2,SP)
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF B600                  LD        A, S:?b14
   \   0000B1 41                    EXG       A, XL
   \   0000B2 89                    PUSHW     X
   \   0000B3 41                    EXG       A, XL
   \   0000B4 B600                  LD        A, S:?b13
   \   0000B6 41                    EXG       A, XL
   \   0000B7 89                    PUSHW     X
   \   0000B8 41                    EXG       A, XL
   \   0000B9 B600                  LD        A, S:?b12
   \   0000BB 41                    EXG       A, XL
   \   0000BC 89                    PUSHW     X
   \   0000BD AE0000                LDW       X, #`?<Constant "\\n%x%x%x%x">`
   \   0000C0 8D000000              CALLF     printf
   \   0000C4 5B08                  ADD       SP, #0x8
   1224                  while (!key_ok_on());
   \                     ??Read_DS18_5:
   \   0000C6 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_71:
   \   0000CA 27FA                  JREQ      L:??Read_DS18_5
   1225          
   1226               //u8 temp3=DS18_Read();
   1227          
   1228          
   1229          
   1230          
   1231          
   1232          
   1233          
   1234          
   1235          
   1236              return TRUE;
   \   0000CC A601                  LD        A, #0x1
   \                     ??Read_DS18_2:
   \   0000CE 5B02                  ADD       SP, #0x2
   \   0000D0 320000                POP       S:?b14
   \   0000D3 AC000000              JPF       L:?epilogue_l2_w6
   1237          }
   1238          
   1239           /*
   1240          u16 Average()
   1241          {
   1242           //Find average in measure
   1243            u8 i=0;
   1244            u16 Summa=0;
   1245            do
   1246            {
   1247             Summa+=measure[i++];
   1248            } while ( measure[i]!=0);
   1249             if(i!=0) Summa=Summa/i;
   1250             return Summa;
   1251          }
   1252             */
   1253          

   \                                 In section .far_func.text, align 1, keep-with-next
   1254          PUTCHAR_PROTOTYPE
   1255          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1256            /* Place your implementation of fputc here */
   1257            /* e.g. write a character to the USART */
   1258                //USART_SendData(USART3, (u8) ch);
   1259               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1260             /* Loop until the end of transmission */
   1261              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1262            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1263          }
   1264          
   1265          

   \                                 In section .far_func.text, align 1, keep-with-next
   1266          void Delay1(u16 Delay)
   1267          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1268              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1269            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1270            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1271          }
   \   00000D 87                    RETF
   1272          

   \                                 In section .far_func.text, align 1, keep-with-next
   1273           void Delay2(u16 Delay)
   1274          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1275            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1276            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1277          }
   \   00000D 87                    RETF
   1278          
   1279          
   1280          
   1281          /*
   1282          void Delay12 (u16 Delay)
   1283          {
   1284            timer2=0;
   1285            while ( timer2 < Delay); ;
   1286          }
   1287          */
   1288          
   1289          
   1290          #ifdef USE_FULL_ASSERT
   1291          
   1292          /**
   1293            * @brief  Reports the name of the source file and the source line number
   1294            *   where the assert_param error has occurred.
   1295            * @param file: pointer to the source file name
   1296            * @param line: assert_param error line source number
   1297            * @retval : None
   1298            */

   \                                 In section .far_func.text, align 1
   1299          void assert_failed(u8* file, u32 line)
   1300          {
   1301            /* User can add his own implementation to report the file name and line number,
   1302               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1303          
   1304            /* Infinite loop */
   1305            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1306            {
   1307          
   1308            }
   1309          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n      ">`:
   \   000000 0A2020202020          DC8 "\012      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n ON">`:
   \   000000 0A204F4E00            DC8 "\012 ON"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n OFF">`:
   \   000000 0A204F464600          DC8 "\012 OFF"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%x%x%x%x">`:
   \   000000 0A2578257825          DC8 "\012%x%x%x%x"
   1310          #endif
   1311          
   1312          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     l                                 1
     result                            4
     k                                 2
     ??Subroutine47_0                  7
     ?Subroutine27                     7
     main                            335
     ?Subroutine37                     2
     ??Subroutine51_0                 12
     ?Subroutine21                    16
     ?Subroutine16                    10
     ?Subroutine1                     35
     ?Subroutine43                    10
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine36                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine35                     1
     ??Subroutine50_0                  7
     ?Subroutine34                     9
     ?Subroutine33                    11
     ReadDS1307                      103
     ?Subroutine26                    11
     ?Subroutine23                     5
     ?Subroutine41                    10
     ?Subroutine22                    13
     ?Subroutine20                     8
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine32                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine40                     6
     Set_Clock                       395
     ?Subroutine25                     6
     ??Subroutine49_0                  5
     ?Subroutine17                    10
     ?Subroutine13                    16
     adj                              77
     key_ok_on                        41
     ?Subroutine42                     7
     key_plus_on                      37
     ?Subroutine24                     7
     ?Subroutine10                     7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine14                    26
     Set_Delay_Allarm                342
     ?Subroutine30                    15
     ?Subroutine11                    15
     ?Subroutine4                      9
     Read_Allarm                      82
     ?Subroutine3                      9
     EEPROM_INIT                      15
     GpioConfiguration               104
     ?Subroutine29                     9
     ?Subroutine28                     9
     InitClk                          56
     ?Subroutine31                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine7                      7
     ??Subroutine48_0                  5
     ?Subroutine39                     7
     ?Subroutine9                      2
     InitLcd                          92
     ?Subroutine15                    17
     ?Subroutine8                     11
     ?Subroutine0                     13
     ??Subroutine44_0                 10
     ?Subroutine19                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine2                     27
     LCD_Busy                         69
     LCD                             186
     ??Subroutine45_0                  6
     InitDelayTimer                   29
     ?Subroutine38                     4
     ??Subroutine46_0                  9
     DS18_Write                       52
     ?Subroutine12                     2
     ?Subroutine5                     20
     DS18_Read                        59
     ?Subroutine6                      4
     ?Subroutine18                    12
     DS18_Reset                       42
     Read_DS18                       215
     fputc                            18
     Delay1                           14
     Delay2                           14
     assert_failed                     2
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n      ">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\n ON">               5
     ?<Constant "\n OFF">              6
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4
     ?<Constant "\n%x%x%x%x">         10

 
 3 622 bytes in section .far_func.text
    94 bytes in section .near.bss
     3 bytes in section .near.data
   202 bytes in section .near.rodata
 
 3 622 bytes of CODE  memory
   202 bytes of CONST memory
    97 bytes of DATA  memory

Errors: none
Warnings: none
