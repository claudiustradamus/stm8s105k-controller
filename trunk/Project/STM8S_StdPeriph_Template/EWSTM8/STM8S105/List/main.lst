###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             14/Aug/2013  09:39:20 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c                      #
#    Command line =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c -e -Ohz --debug      #
#                    --code_model medium --data_model medium -o               #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC C:\Users\Administrator\Desktop\stm8s105k-co #
#                    ntroller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S10 #
#                    5\List\ -lA C:\Users\Administrator\Desktop\stm8s105k-con #
#                    troller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S105 #
#                    \List\ -I C:\Users\Administrator\Desktop\stm8s105k-contr #
#                    oller\Project\STM8S_StdPeriph_Template\EWSTM8\..\ -I     #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Libraries\S #
#                    TM8S_StdPeriph_Driver\inc\ --vregs 16                    #
#    List file    =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\main.l #
#                    st                                                       #
#    Object file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\main.o  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59          
     60          //EEPROM Address;
     61          #define EEPROM_ADDR 0x4000
     62          #define EEPROM_ADR_STATUSH EEPROM_ADDR + 0
     63          #define EEPROM_ADR_STATUSL EEPROM_ADDR + 1
     64          #define EEPROM_ADR_TIME_ON_HOURS EEPROM_ADDR +2
     65          #define EEPROM_ADR_TIME_ON_MINUTES EEPROM_ADDR +3
     66          #define EEPROM_ADR_TIME_OFF_HOURS EEPROM_ADDR +4
     67          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     68          
     69          
     70          
     71          #ifdef __GNUC__
     72            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     73               set to 'Yes') calls __io_putchar() */
     74            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     75          #else
     76            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     77          #endif /* __GNUC__ */
     78          
     79          
     80          
     81          
     82          #define SpecialSymbol 0x1b //Esc to start message
     83          #define data_size 20
     84          #define key_time 8000
     85          #define key_time_ok 15000
     86          #define DS_Control  0x10  // Out 1s
     87          
     88          
     89          
     90          
     91          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     92          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     93          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     94          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     95          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     96          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     97          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     98          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     99          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    100          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    101          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    102          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    103          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    104          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    105          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    106          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    107          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    108          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    109          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    110          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    111          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    116          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    117          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    118          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    120          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 test2;
   \                     test2:
   \   000000                       DS8 1
    122          //u8 index=0;

   \                                 In section .near.bss, align 1
    123          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    124          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    125          
    126          
    127           struct   status_reg
    128           {
    129             unsigned on:1;
    130             unsigned timer_on:1;
    131             unsigned daily:1;

   \                                 In section .near.bss, align 1
    132           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    133             
    134          
    135          
    136          
    137          
    138          
    139          
    140          /* Private function prototypes -----------------------------------------------*/
    141          void InitHardware();
    142          void GpioConfiguration();
    143          void InitClk();
    144          void InitAdc();
    145          void InitI2C();
    146          void EEPROM_INIT();
    147          bool ReadDS1307();
    148          //void InitUart();
    149          void InitLcd();
    150          void InitDelayTimer();
    151          void Delay1( u16 Delay);
    152          void Delay2( u16 Delay);
    153          void Delay_us(u16 Delay);
    154          void LCDInstrNibble (u8 Instr);
    155          void LCDInstr(u8 Instr);
    156          void LCDDataOut(u8 data);
    157          void LCD_Busy();
    158          void PulseEnable();
    159          //void SendData();
    160          void SendChar(u8 Char);
    161          //void Send_Hello();
    162          bool Set_Clock();
    163          bool key_ok_on();
    164          bool key_plus_on();
    165          bool key_minus_on();
    166          bool key_ok_plus();
    167          bool Init_DS1307(void);
    168          bool Check_DS1307(void);
    169          bool I2C_Start(void);
    170          bool I2C_WA(u8 address);
    171          bool I2C_WD(u8 data);
    172          bool I2C_RA(u8 address);
    173          bool Set_DS1307();
    174          bool Set_Delay_Allarm();
    175          bool Read_Allarm();
    176          bool Read_DS18();
    177          bool DS18_Write( u8 data);
    178          bool DS18_Reset();
    179          bool DS18Set();
    180          u8 temperature();
    181          u8 DS18_Read();
    182          u8 convert_tobcd(u8 data);
    183          u8 I2C_RD(void);
    184          u8 adj(u8 min,u8 max,u8 now);
    185          u8 bcd2hex(u8 bcd);
    186          void Power_On(void);
    187          void Power_Off();
    188          void Save_Status();
    189          
    190          
    191          u16  Average();
    192          
    193          
    194          /* Private functions ---------------------------------------------------------*/
    195          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    196          void main(void)
    197          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    198              /*High speed internal clock prescaler: 1*/
    199              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    200          
    201              InitClk();
   \   000003 8D000000              CALLF     InitClk
    202              InitDelayTimer();
   \   000007 8D000000              CALLF     InitDelayTimer
    203              GpioConfiguration();
   \   00000B 8D000000              CALLF     GpioConfiguration
    204          
    205              /*
    206               for(;;)
    207              {
    208          
    209                DS18(1);
    210                Delay_us(1);
    211                DS18(0);
    212                Delay_us(160);
    213          
    214          
    215          
    216          
    217              }
    218          
    219                */
    220          
    221          
    222              //InitUart();
    223              enableInterrupts();
   \   00000F 9A                    RIM
    224              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000010 A680                  LD        A, #0x80
   \   000012 AE500F                LDW       X, #0x500f
   \   000015 8D000000              CALLF     GPIO_WriteLow
    225              InitLcd();
   \   000019 8D000000              CALLF     InitLcd
    226              //InitAdc();
    227              InitI2C();
   \   00001D 8D000000              CALLF     InitI2C
    228              //Init DS18B20
    229              //DS18Set();
    230              line_lcd=0;
   \   000021 725F0000              CLR       L:line_lcd
    231              if (!Read_DS18())
   \   000025 8D000000              CALLF     Read_DS18
   \   000029 A100                  CP        A, #0x0
   \   00002B 260D                  JRNE      L:??main_0
    232              {
    233               printf("\nDS_Err_I");
   \   00002D AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   000030 8D000000              CALLF     printf
    234                while (!key_ok_on());
   \                     ??main_1:
   \   000034 8D000000              CALLF     ?Subroutine40
    235              }
   \                     ??CrossCallReturnLabel_125:
   \   000038 27FA                  JREQ      L:??main_1
    236          
    237          
    238          
    239          
    240          
    241              //years=bcd2hex(13);
    242              Delay1(1000);
   \                     ??main_0:
   \   00003A AE03E8                LDW       X, #0x3e8
   \   00003D 8D000000              CALLF     Delay1
    243               if (!ReadDS1307())
   \   000041 8D000000              CALLF     ReadDS1307
   \   000045 A100                  CP        A, #0x0
   \   000047 2615                  JRNE      L:??main_2
    244               {
    245                 printf("\n E2:%d",error);
   \   000049 C60000                LD        A, L:error
   \   00004C 5F                    CLRW      X
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B02                  ADD       SP, #0x2
    246                 // Reset the CPU: Enable the watchdog and wait until it expires
    247                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000058 35CC50E0              MOV       L:0x50e0, #0xcc
    248                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   00005C 20FE                  JRA       L:??main_3
    249               }
    250               //Send_Hello();
    251              //line_lcd=0;
    252              //printf("\nHello");
    253          
    254          
    255              if (!Check_DS1307())
   \                     ??main_2:
   \   00005E 8D000000              CALLF     Check_DS1307
   \   000062 A100                  CP        A, #0x0
   \   000064 2626                  JRNE      L:??main_4
    256              {
    257                 if (error!=0)
   \   000066 C60000                LD        A, L:error
   \   000069 2712                  JREQ      L:??main_5
    258                 {
    259                  printf("\n E:%d",error);
   \   00006B 5F                    CLRW      X
   \   00006C 97                    LD        XL, A
   \   00006D 89                    PUSHW     X
   \   00006E AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000071 8D000000              CALLF     printf
   \   000075 5B02                  ADD       SP, #0x2
    260                   while (!key_ok_on());
   \                     ??main_6:
   \   000077 8D000000              CALLF     ?Subroutine40
    261          
    262                 }
   \                     ??CrossCallReturnLabel_126:
   \   00007B 27FA                  JREQ      L:??main_6
    263               line_lcd=0;
   \                     ??main_5:
   \   00007D 725F0000              CLR       L:line_lcd
    264               printf("\nSetClock");
   \   000081 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000084 8D000000              CALLF     printf
    265                Set_Clock();
   \   000088 8D000000              CALLF     Set_Clock
    266          
    267              }
    268          
    269                 //Read Status register from eepom and update it
    270                //size=sizeof(status);
    271               //u16 status
    272               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_4:
   \   00008C AE4000                LDW       X, #0x4000
   \   00008F 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_7:
   \   000093 B700                  LD        S:?b8, A
   \   000095 AE4001                LDW       X, #0x4001
   \   000098 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_6:
   \   00009C 905F                  CLRW      Y
   \   00009E 9097                  LD        YL, A
   \   0000A0 5F                    CLRW      X
   \   0000A1 41                    EXG       A, XL
   \   0000A2 B600                  LD        A, S:?b8
   \   0000A4 41                    EXG       A, XL
   \   0000A5 4F                    CLR       A
   \   0000A6 02                    RLWA      X, A
   \   0000A7 90BF00                LDW       S:?w0, Y
   \   0000AA 72BB0000              ADDW      X, S:?w0
   \   0000AE CF0000                LDW       L:status, X
    273                status_check = *(u16*)(&status);
   \   0000B1 CE0000                LDW       X, L:status
   \   0000B4 CF0000                LDW       L:status_check, X
    274              //When Start Check for Allarm and computing Daily_long_on
    275               if ( Read_Allarm() == TRUE)
   \   0000B7 8D000000              CALLF     Read_Allarm
   \   0000BB A101                  CP        A, #0x1
   \   0000BD 262A                  JRNE      L:??main_7
    276               {
    277                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000BF 8D000000              CALLF     ?Subroutine1
    278                 time_off= daily_hour_off*60+daily_minute_off;
    279               }
   \                     ??CrossCallReturnLabel_1:
   \   0000C3 2024                  JRA       L:??main_7
    280          
    281               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    282          
    283               // Working fuction
    284              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    285          
    286              while(1)
    287              {
    288                ADC1_Cmd (ENABLE);
    289          
    290                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    291                   Delay2(10000);
    292                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    293                   Delay2(10000);
    294                   
    295                     //status_check = *(u16*)(&status);
    296                     
    297                line_lcd=0;
    298               if (!ReadDS1307())
    299               {
    300                 printf("\n E2:%d",error);
    301                  //restart i2c
    302                // Reset the CPU: Enable the watchdog and wait until it expires
    303                 IWDG->KR = IWDG_KEY_ENABLE;
    304                 while ( 1 );    // Wait until reset occurs from IWDG
    305          
    306          
    307               }
    308                 else
    309                   //printf("\n      ");
    310               line_lcd=1;
    311               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    312               //line_lcd=2;
    313               //printf("\n Just Test:%X", timer2);
    314                   //if (rx_data==SpecialSymbol) SendData();
    315                //SendData();
    316          
    317                if (key_ok_on())
    318                {
    319                  line_lcd=0;
    320                  printf("\n%02d:%02d:%02d",years,mounts,date);
    321                  status.daily=1; //On Daily timer
    322                  Save_Status();
    323                  Delay2(50000);
    324                  //Delay2(10000);
    325                  //Delay2(10000);
    326                }
    327          
    328                if(key_ok_plus()) Set_Delay_Allarm();  //Set Daily Allarm
    329                if(key_plus_on()) Power_On();
    330                if(key_minus_on())Power_Off();
    331          
    332          
    333                //Check for Allarm
    334                    if (status.daily==1)
    335                  {
    336                u16 time_now=hours*60+minutes;
    337                status.on=0;
    338                     u16 time=time_on;
    339                     do
    340                    {
    341                       if(time==time_now)
    342                       {
    343                         status.on=1;
    344                          break ;
    345                       }
    346                        time++;
    347                         if( time==1441) time=0;
    348                    } while(!(time==time_off));
    349                      };
    350          
    351                      u8 result1=temperature();
    352                      u8 result2=0;
    353                      if(result1%2!=0) result2=5;
    354                      result1/=2;
    355          
    356                   //printf("\n%d.%d",result1,result2);
    357          
    358          
    359          
    360          
    361                      if(status.on)
    362                   {
    363                     // Allarm ON
    364                     line_lcd=0;
    365                     char result3=' ';
    366                     if (status.daily==1)  result3 ='d';
   \                     ??main_8:
   \   0000C5 90CE0000              LDW       Y, L:status
   \   0000C9 909F                  LD        A, YL
   \   0000CB A504                  BCP       A, #0x4
   \   0000CD 2704                  JREQ      L:??main_9
   \   0000CF 35640000              MOV       S:?b2, #0x64
    367                     printf("\n1 %d.%d %c",result1,result2,result3);
   \                     ??main_9:
   \   0000D3 905F                  CLRW      Y
   \   0000D5 61                    EXG       A, YL
   \   0000D6 B600                  LD        A, S:?b2
   \   0000D8 61                    EXG       A, YL
   \   0000D9 9089                  PUSHW     Y
   \   0000DB 8D000000              CALLF     L:?push_w0
   \   0000DF 89                    PUSHW     X
   \   0000E0 AE0000                LDW       X, #`?<Constant "\\n1 %d.%d %c">`
   \                     ??main_10:
   \   0000E3 8D000000              CALLF     printf
   \   0000E7 5B06                  ADD       SP, #0x6
    368                   }
   \                     ??main_7:
   \   0000E9 A601                  LD        A, #0x1
   \   0000EB 8D000000              CALLF     ADC1_Cmd
   \   0000EF 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_69:
   \   0000F3 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_68:
   \   0000F7 725F0000              CLR       L:line_lcd
   \   0000FB 8D000000              CALLF     ReadDS1307
   \   0000FF A100                  CP        A, #0x0
   \   000101 2615                  JRNE      L:??main_11
   \   000103 C60000                LD        A, L:error
   \   000106 5F                    CLRW      X
   \   000107 97                    LD        XL, A
   \   000108 89                    PUSHW     X
   \   000109 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00010C 8D000000              CALLF     printf
   \   000110 5B02                  ADD       SP, #0x2
   \   000112 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_12:
   \   000116 20FE                  JRA       L:??main_12
   \                     ??main_11:
   \   000118 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_67:
   \   00011C 89                    PUSHW     X
   \   00011D C60000                LD        A, L:minutes
   \   000120 97                    LD        XL, A
   \   000121 89                    PUSHW     X
   \   000122 C60000                LD        A, L:hours
   \   000125 97                    LD        XL, A
   \   000126 89                    PUSHW     X
   \   000127 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00012A 8D000000              CALLF     printf
   \   00012E 5B06                  ADD       SP, #0x6
   \   000130 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_127:
   \   000134 272C                  JREQ      L:??main_13
   \   000136 725F0000              CLR       L:line_lcd
   \   00013A C60000                LD        A, L:`date`
   \   00013D 5F                    CLRW      X
   \   00013E 97                    LD        XL, A
   \   00013F 89                    PUSHW     X
   \   000140 C60000                LD        A, L:mounts
   \   000143 97                    LD        XL, A
   \   000144 89                    PUSHW     X
   \   000145 C60000                LD        A, L:years
   \   000148 97                    LD        XL, A
   \   000149 89                    PUSHW     X
   \   00014A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00014D 8D000000              CALLF     printf
   \   000151 5B06                  ADD       SP, #0x6
   \   000153 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_106:
   \   000157 8D000000              CALLF     Save_Status
   \   00015B AEC350                LDW       X, #0xc350
   \   00015E 8D000000              CALLF     Delay2
   \                     ??main_13:
   \   000162 8D000000              CALLF     key_ok_plus
   \   000166 A100                  CP        A, #0x0
   \   000168 2704                  JREQ      L:??main_14
   \   00016A 8D000000              CALLF     Set_Delay_Allarm
   \                     ??main_14:
   \   00016E 8D000000              CALLF     key_plus_on
   \   000172 A100                  CP        A, #0x0
   \   000174 2704                  JREQ      L:??main_15
   \   000176 8D000000              CALLF     Power_On
   \                     ??main_15:
   \   00017A 8D000000              CALLF     key_minus_on
   \   00017E A100                  CP        A, #0x0
   \   000180 2704                  JREQ      L:??main_16
   \   000182 8D000000              CALLF     Power_Off
   \                     ??main_16:
   \   000186 CE0000                LDW       X, L:status
   \   000189 9F                    LD        A, XL
   \   00018A A504                  BCP       A, #0x4
   \   00018C 272D                  JREQ      L:??main_17
   \   00018E C60000                LD        A, L:hours
   \   000191 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_196:
   \   000195 C60000                LD        A, L:minutes
   \   000198 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_163:
   \   00019C BF00                  LDW       S:?w0, X
   \   00019E 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_108:
   \   0001A2 CE0000                LDW       X, L:time_on
   \                     ??main_18:
   \   0001A5 B300                  CPW       X, S:?w0
   \   0001A7 2606                  JRNE      L:??main_19
   \   0001A9 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_112:
   \   0001AD 200C                  JRA       L:??main_17
   \                     ??main_19:
   \   0001AF 5C                    INCW      X
   \   0001B0 A305A1                CPW       X, #0x5a1
   \   0001B3 2601                  JRNE      L:??main_20
   \   0001B5 5F                    CLRW      X
   \                     ??main_20:
   \   0001B6 C30000                CPW       X, L:time_off
   \   0001B9 26EA                  JRNE      L:??main_18
   \                     ??main_17:
   \   0001BB 8D000000              CALLF     temperature
   \   0001BF B700                  LD        S:?b1, A
   \   0001C1 3F00                  CLR       S:?b0
   \   0001C3 A501                  BCP       A, #0x1
   \   0001C5 2704                  JREQ      L:??main_21
   \   0001C7 35050000              MOV       S:?b0, #0x5
   \                     ??main_21:
   \   0001CB B600                  LD        A, S:?b1
   \   0001CD 44                    SRL       A
   \   0001CE 5F                    CLRW      X
   \   0001CF 97                    LD        XL, A
   \   0001D0 905F                  CLRW      Y
   \   0001D2 61                    EXG       A, YL
   \   0001D3 B600                  LD        A, S:?b0
   \   0001D5 61                    EXG       A, YL
   \   0001D6 90BF00                LDW       S:?w0, Y
   \   0001D9 90CE0000              LDW       Y, L:status
   \   0001DD 909F                  LD        A, YL
   \   0001DF A501                  BCP       A, #0x1
   \   0001E1 35000000              MOV       L:line_lcd, #0x0
   \   0001E5 35200000              MOV       S:?b2, #0x20
   \   0001E9 2703                  JREQ      ??lb_0
   \   0001EB CC0000                JP        L:??main_8
    369          
    370                    else
    371                    {
    372                      line_lcd=0;
    373                      char result3=' ';
    374                     if (status.daily==1)   result3 ='d';
   \                     ??lb_0:
   \   0001EE 90CE0000              LDW       Y, L:status
   \   0001F2 909F                  LD        A, YL
   \   0001F4 A504                  BCP       A, #0x4
   \   0001F6 2704                  JREQ      L:??main_22
   \   0001F8 35640000              MOV       S:?b2, #0x64
    375                      printf("\n0 %d.%d %c",result1,result2,result3);
   \                     ??main_22:
   \   0001FC 905F                  CLRW      Y
   \   0001FE 61                    EXG       A, YL
   \   0001FF B600                  LD        A, S:?b2
   \   000201 61                    EXG       A, YL
   \   000202 9089                  PUSHW     Y
   \   000204 8D000000              CALLF     L:?push_w0
   \   000208 89                    PUSHW     X
   \   000209 AE0000                LDW       X, #`?<Constant "\\n0 %d.%d %c">`
   \   00020C AC000000              JPF       ??main_10
    376                    }
    377          
    378          
    379              }
    380          
    381          
    382          
    383          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine59_0
   \   000002                       ;               // Fall through to label ??Subroutine59_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine21:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE2710                LDW       X, #0x2710
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine20:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine4:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_197:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_164:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 C60000                LD        A, L:daily_hour_off
   \   000014 8D000000              CALLF     ??Subroutine59_0
   \                     ??CrossCallReturnLabel_195:
   \   000018 C60000                LD        A, L:daily_minute_off
   \   00001B 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_165:
   \   00001F CF0000                LDW       L:time_off, X
   \   000022 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine54:
   \   000000 9097                  LD        YL, A
   \   000002 90BF00                LDW       S:?w0, Y
   \   000005 72BB0000              ADDW      X, S:?w0
   \   000009 87                    RETF
    384          

   \                                 In section .far_func.text, align 1, keep-with-next
    385          void Power_On()
    386          {
    387            status.on=1; 
   \                     Power_On:
   \   000000 8D000000              CALLF     ?Subroutine39
    388            status.daily=0; //Off Daily timer 
   \                     ??CrossCallReturnLabel_111:
   \   000004 8D000000              CALLF     ?Subroutine38
    389            Save_Status();
   \                     ??CrossCallReturnLabel_110:
   \   000008 AC000000              JPF       Save_Status
    390          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FB                  AND       A, #0xfb
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF
    391          

   \                                 In section .far_func.text, align 1, keep-with-next
    392          void Power_Off()
    393          { 
    394            status.on=0;
   \                     Power_Off:
   \   000000 8D000000              CALLF     ?Subroutine37
    395            status.daily=0; //Off Daily timer 
   \                     ??CrossCallReturnLabel_107:
   \   000004 8D000000              CALLF     ?Subroutine38
    396            Save_Status();
   \                     ??CrossCallReturnLabel_109:
   \   000008 AC000000              JPF       Save_Status
    397          }
    398          

   \                                 In section .far_func.text, align 1, keep-with-next
    399          void InitI2C(void)
    400          {
    401             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    402             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    403             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    404          }
    405          

   \                                 In section .far_func.text, align 1, keep-with-next
    406          bool I2C_Start(void)
    407          {
    408             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    409                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    410              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_130:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    411                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    412                  {
    413                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    414                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    415                  }
    416                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    417          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    418          

   \                                 In section .far_func.text, align 1, keep-with-next
    419          bool I2C_WA(u8 address)
    420          {
    421            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    422                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    423                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_129:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    424                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    425                   {
    426                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    427                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    428                   }
    429                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    430          }
    431          

   \                                 In section .far_func.text, align 1, keep-with-next
    432          bool I2C_RA(u8 address)
    433          {
    434            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    435                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    436                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_131:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    437                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    438                   {
    439                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    440                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    441                   }
    442                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    443          }
    444          
    445          

   \                                 In section .far_func.text, align 1, keep-with-next
    446          bool I2C_WD(u8 data)
    447          {
    448           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    449             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    450             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_128:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    451              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    452              {
    453                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    454                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    455              }
    456               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    457          }
    458          

   \                                 In section .far_func.text, align 1, keep-with-next
    459          u8 I2C_RD(void)
    460          {
    461           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    462            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    463           //while((!(I2C->SR1 & 0x40))&&timeout);
    464           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    465           {
    466             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    467             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    468           }
    469           u8 data=I2C_ReceiveData();
    470           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    471          }
    472          
    473            /*
    474          bool Init_DS1307(void)
    475          {
    476             // Test DS1307
    477              error=0;
    478              if (!I2C_Start()) return FALSE;
    479              if(!I2C_WA(0xD0)) return FALSE;
    480              if(!I2C_WD(0x00)) return FALSE;
    481              if(!I2C_WD(0x00)) return FALSE;
    482              I2C_GenerateSTOP(ENABLE);
    483          
    484              // timeout=100;  error=4;
    485              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    486              //    if (!timeout)return FALSE ;
    487               return TRUE;
    488          }
    489             */
    490          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine58_0
   \   000001                       ;               // Fall through to label ??Subroutine58_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    491          bool  ReadDS1307(void)
    492          {
    493                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine43
    494                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_141:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    495                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_144:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    496                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_191:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    497                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine23
    498                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_74:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    499                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    500                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine19
    501                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_63:
   \   000028 C70000                LD        L:seconds, A
    502                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine19
    503                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_62:
   \   00002F C70000                LD        L:minutes, A
    504                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine19
    505                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_61:
   \   000036 C70000                LD        L:hours, A
    506                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine19
    507                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_60:
   \   00003D C70000                LD        L:days, A
    508                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine19
    509                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_59:
   \   000044 C70000                LD        L:`date`, A
    510                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine19
    511                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_58:
   \   00004B C70000                LD        L:mounts, A
    512                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004E 8D000000              CALLF     ?Subroutine19
    513                  years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_57:
   \   000052 C70000                LD        L:years, A
    514                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000055 8D000000              CALLF     ?Subroutine24
    515                  u8 data1 = I2C_RD();
    516                //Last read byte by I2C slave
    517                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \                     ??CrossCallReturnLabel_76:
   \   000059 8D000000              CALLF     ?Subroutine26
    518                 I2C_GenerateSTOP(ENABLE);
    519                 temp2= I2C_RD();
   \                     ??CrossCallReturnLabel_77:
   \   00005D 8D000000              CALLF     I2C_RD
   \   000061 C70000                LD        L:temp2, A
    520                 return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    521          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_159:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_158:
   \   000004 AC000000              JPF       bcd2hex
    522          

   \                                 In section .far_func.text, align 1, keep-with-next
    523          bool Check_DS1307(void)
    524          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    525             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    526                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine43
    527                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_140:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    528                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_143:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    529                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_194:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    530                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine23
    531                  //Last read byte by I2C slave
    532                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_73:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    533                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    534                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine24
    535                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_75:
   \   00002E B700                  LD        S:?b8, A
    536                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine26
    537                 I2C_GenerateSTOP(ENABLE);
    538                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_78:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    539                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    540          }
    541          

   \                                 In section .far_func.text, align 1, keep-with-next
    542          bool Set_DS1307()
    543          {
    544                 // convert hex or decimal to bcd format
    545          
    546          
    547                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine43
    548                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_139:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    549                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_142:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    550                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_190:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    551                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_132:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    552                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_133:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    553                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_134:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    554                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_135:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    555                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_136:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    556                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_137:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    557                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_138:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    558                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_192:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    559                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_193:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    560                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    561          
    562          
    563             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    564          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    565          
    566          

   \                                 In section .far_func.text, align 1, keep-with-next
    567          u8 convert_tobcd(u8 data)
    568          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    569             u8 data_second_decimal=data/10;
    570             u8 data_first_decimal=data - 10*data_second_decimal;
    571             data=16*data_second_decimal + data_first_decimal;
    572            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    573          }
    574          

   \                                 In section .far_func.text, align 1, keep-with-next
    575          u8 bcd2hex(u8 bcd)
    576          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    577            u8 hex=0;
    578            hex=(bcd>>4)*10 +(bcd&0x0f);
    579            bcd=0;
    580            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    581          }
    582          
    583          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    584          bool Set_Clock()
    585          {
    586              //Clear Display
    587             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine13
    588             Delay1(1000);
    589             line_lcd=0;
    590              printf("\nYears:");
   \                     ??CrossCallReturnLabel_43:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    591                do
    592              {
    593               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine22
    594               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_70:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    595                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine57_0
    596              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_183:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_118:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    597          
    598               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    599              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    600                do
    601              {
    602               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine22
    603               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_71:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    604                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    605              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_119:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    606          
    607              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine13
    608               Delay1(1000);
    609                line_lcd=0;
    610              printf("\nDate:");
   \                     ??CrossCallReturnLabel_44:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    611                do
    612              {
    613               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine22
    614               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_72:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    615                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    616              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_120:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    617          
    618          
    619              //Clear Display
    620             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine13
    621             Delay1(1000);
    622             line_lcd=0;
    623              printf("\nDays:");
   \                     ??CrossCallReturnLabel_45:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    624                do
    625              {
    626                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    627               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    628                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    629              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_121:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    630          
    631          
    632          
    633             //Clear Display
    634             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine13
    635             Delay1(1000);
    636             line_lcd=0;
    637              printf("\nHours:");
   \                     ??CrossCallReturnLabel_46:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    638                do
    639              {
    640                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine20
    641               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_64:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    642                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine57_0
    643              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_182:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_122:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    644          
    645               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    646               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    647                do
    648              {
    649                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine20
    650               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_65:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    651                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine25
    652              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_187:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_123:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    653          
    654              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    655              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    656              do
    657              {
    658                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine20
    659               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_66:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    660                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine25
    661              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_186:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_124:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    662          
    663                // Set parameter to DS1307 + time byte
    664                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    665          
    666                //bool k=Check_DS1307();
    667          
    668            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    669          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine57_0
   \   000006                       ;               // Fall through to label ??Subroutine57_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_154:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    670          
    671          

   \                                 In section .far_func.text, align 1, keep-with-next
    672          u8 adj(u8 min,u8 max,u8 now)
    673          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    674             u8 adj=now;
    675             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    676             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    677             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    678             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    679             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    680             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    681          }
    682          
    683          

   \                                 In section .far_func.text, align 1, keep-with-next
    684          bool key_ok_on()
    685          {
    686            //Read Key OK
    687            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_162:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    688             {
    689               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    690                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_161:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    691                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    692             }
    693          
    694            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    695          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    696          

   \                                 In section .far_func.text, align 1, keep-with-next
    697           bool key_plus_on()
    698          {
    699            //Read Key OK
    700              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_97:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    701               {
    702               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    703                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_26:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_96:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    704                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_27:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    705               }
    706          
    707            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    708          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    709          

   \                                 In section .far_func.text, align 1, keep-with-next
    710            bool key_minus_on()
    711          {
    712            //Read Key OK
    713             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_99:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    714               {
    715               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    716                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_24:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_98:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    717                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_25:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    718               }
    719          
    720            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    721          }
    722          
    723          

   \                                 In section .far_func.text, align 1, keep-with-next
    724          bool  key_ok_plus()
    725          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    726            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_47:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    727            {
    728                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    729                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_28:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_48:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    730                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_29:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    731            }
    732          
    733           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    734          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_160:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    735          
    736          

   \                                 In section .far_func.text, align 1, keep-with-next
    737          bool Set_Delay_Allarm()
    738          {
    739          
    740             //clr
    741             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine13
    742             Delay1(1000);
    743             line_lcd=0;
    744             printf("\nH On:");
   \                     ??CrossCallReturnLabel_38:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    745            do
    746              {
    747               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    748               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    749                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine57_0
    750              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_185:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_113:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    751          
    752             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine13
    753             Delay1(1000);
    754             line_lcd=0;
    755             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_39:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    756            do
    757              {
    758               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    759               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    760                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine25
    761              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_189:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_114:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    762          
    763              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine13
    764              Delay1(1000);
    765              line_lcd=0;
    766              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_40:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    767            do
    768              {
    769               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    770               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    771                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine57_0
    772              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_184:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_115:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    773          
    774            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine13
    775             Delay1(1000);
    776             line_lcd=0;
    777             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_41:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    778            do
    779              {
    780               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    781               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    782                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine25
    783              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_188:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_116:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    784          
    785               //Computing time_long_on
    786          
    787               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine34
    788               u8 minute=daily_minute_on;
    789               daily_long_on=0;
    790               do
    791               {
    792                    daily_long_on++;
   \                     ??CrossCallReturnLabel_101:
   \   0000DC 8D000000              CALLF     ?Subroutine11
    793                    minute++;
    794                    if (minute==60)
   \                     ??CrossCallReturnLabel_33:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    795                    {
    796                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    797                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    798                    }
    799                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    800          
    801               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_101
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_101
    802          
    803                //Display daily_long_on
    804              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine13
    805              Delay1(1000);
    806              line_lcd=0;
    807              printf("\nLong :");
   \                     ??CrossCallReturnLabel_42:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    808          
    809                do
    810              {
    811               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    812               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    813                 //daily_long_on=adj(0,1440,daily_long_on);
    814              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_117:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    815          
    816              time_on=daily_hour_on*60+daily_minute_on;
   \   000123 8D000000              CALLF     ?Subroutine1
    817              time_off= daily_hour_off*60+daily_minute_off;
    818              //Save data to eeprom
    819                status.daily=1;
   \                     ??CrossCallReturnLabel_0:
   \   000127 8D000000              CALLF     ?Subroutine36
    820               EEPROM_INIT();
   \                     ??CrossCallReturnLabel_105:
   \   00012B 8D000000              CALLF     ?Subroutine2
    821              //u8 temp =*(u8*)(&status);
    822              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    823               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    824               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    825               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_3:
   \   00012F C60000                LD        A, L:daily_hour_on
   \   000132 AE4002                LDW       X, #0x4002
   \   000135 8D000000              CALLF     ?Subroutine5
    826               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_12:
   \   000139 C60000                LD        A, L:daily_minute_on
   \   00013C AE4003                LDW       X, #0x4003
   \   00013F 8D000000              CALLF     ?Subroutine5
    827               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_13:
   \   000143 C60000                LD        A, L:daily_hour_off
   \   000146 AE4004                LDW       X, #0x4004
   \   000149 8D000000              CALLF     ?Subroutine5
    828               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_14:
   \   00014D C60000                LD        A, L:daily_minute_off
   \   000150 AE4005                LDW       X, #0x4005
   \   000153 8D000000              CALLF     ?Subroutine5
    829               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_15:
   \   000157 A6F7                  LD        A, #0xf7
   \   000159 8D000000              CALLF     FLASH_Lock
    830          
    831             return TRUE;
   \   00015D A601                  LD        A, #0x1
   \   00015F 87                    RETF
    832          
    833          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_151:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_150:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_149:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    834          

   \                                 In section .far_func.text, align 1, keep-with-next
    835          void Save_Status()
    836          {
    837            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ?Subroutine2
    838            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    839            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    840            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_2:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    841          }
    842          

   \                                 In section .far_func.text, align 1, keep-with-next
    843          bool Read_Allarm()
    844          {
    845             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   000007 C70000                LD        L:daily_hour_on, A
    846              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    847             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   000017 C70000                LD        L:daily_minute_on, A
    848              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    849             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_9:
   \   000025 C70000                LD        L:daily_hour_off, A
    850              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    851             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   000033 C70000                LD        L:daily_minute_off, A
    852              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    853               // Computting daily_long_on
    854                u8 hour=daily_hour_on;
   \   00003D 8D000000              CALLF     ?Subroutine34
    855               u8 minute=daily_minute_on;
    856               daily_long_on=0;
    857               do
    858               {
    859                    daily_long_on++;
   \                     ??CrossCallReturnLabel_100:
   \   000041 8D000000              CALLF     ?Subroutine11
    860                    minute++;
    861                    if (minute==60)
   \                     ??CrossCallReturnLabel_32:
   \   000045 2607                  JRNE      L:??Read_Allarm_2
    862                    {
    863                      minute=0;
   \   000047 3F00                  CLR       S:?b1
    864                      hour++;
   \   000049 B600                  LD        A, S:?b0
   \   00004B 4C                    INC       A
   \   00004C B700                  LD        S:?b0, A
    865                    }
    866                    if(hour==24) hour=0;
   \                     ??Read_Allarm_2:
   \   00004E B600                  LD        A, S:?b0
   \   000050 A118                  CP        A, #0x18
   \   000052 2602                  JRNE      L:??Read_Allarm_3
   \   000054 3F00                  CLR       S:?b0
    867          
    868               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_3:
   \   000056 C60000                LD        A, L:daily_hour_off
   \   000059 B100                  CP        A, S:?b0
   \   00005B 26E4                  JRNE      L:??CrossCallReturnLabel_100
   \   00005D C60000                LD        A, L:daily_minute_off
   \   000060 B100                  CP        A, S:?b1
   \   000062 26DD                  JRNE      L:??CrossCallReturnLabel_100
    869          
    870            return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    871          }
    872          

   \                                 In section .far_func.text, align 1, keep-with-next
    873          void EEPROM_INIT()
    874          {
    875            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    876            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    877            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    878          
    879          
    880          
    881          }
    882          
    883          

   \                                 In section .far_func.text, align 1, keep-with-next
    884          void GpioConfiguration()
    885          {
    886          
    887            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    888          
    889            // ADC PE6 NEW PB0
    890            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    891          
    892            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    893            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    894          
    895            //PD0 Led
    896            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     ?Subroutine31
    897            //I2C
    898            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_90:
   \   000032 A610                  LD        A, #0x10
   \   000034 AE5005                LDW       X, #0x5005
   \   000037 8D000000              CALLF     ?Subroutine31
    899            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_91:
   \   00003B A620                  LD        A, #0x20
   \   00003D AE5005                LDW       X, #0x5005
   \   000040 8D000000              CALLF     ?Subroutine32
    900            // Remap Pins pb4,pb5  sda,scl ;
    901          
    902             //Init KEY OK,PLUS,MINUS
    903            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_93:
   \   000044 A610                  LD        A, #0x10
   \   000046 AE5019                LDW       X, #0x5019
   \   000049 8D000000              CALLF     ?Subroutine32
    904            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_94:
   \   00004D A602                  LD        A, #0x2
   \   00004F AE5000                LDW       X, #0x5000
   \   000052 8D000000              CALLF     ?Subroutine32
    905            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_95:
   \   000056 A604                  LD        A, #0x4
   \   000058 AE5000                LDW       X, #0x5000
   \   00005B 8D000000              CALLF     ?Subroutine31
    906          
    907            //Init DS18b20 data pin
    908            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_92:
   \   00005F A604                  LD        A, #0x4
   \   000061 AE500F                LDW       X, #0x500f
   \   000064 AC000000              JPF       GPIO_Init
    909          
    910          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF
    911          

   \                                 In section .far_func.text, align 1, keep-with-next
    912          void InitClk()
    913          {
    914            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    915            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    916            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    917            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    918            CLK_SOURCE_HSI,       // Switch to internal timer.
    919            DISABLE,              // Disable the clock switch interrupt.
    920            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    921          
    922            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine35
    923            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_102:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine35
    924            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_103:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine35
    925            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_104:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    926          
    927          
    928          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    929          
    930          

   \                                 In section .far_func.text, align 1, keep-with-next
    931          void InitAdc()
    932          {
    933               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    934               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    935               /*
    936               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    937                          ADC1_CHANNEL_0,
    938                          ADC1_PRESSEL_FCPU_D4,
    939                           ADC1_EXTTRIG_TIM,
    940          
    941                 */
    942               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    943               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    944                                      ADC1_CHANNEL_0,
    945                                      ADC1_ALIGN_RIGHT
    946                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    947          
    948          
    949               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    950          
    951          
    952               //ADC1_Cmd (ENABLE);
    953               //ADC1->CR1 |= ADC1_CR1_ADON ;
    954               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    955               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    956          
    957          }
    958          
    959          /*
    960          void InitUart()
    961          {
    962             UART2_DeInit();
    963             UART2_Init((u32)9600,
    964                        UART2_WORDLENGTH_8D,
    965                        UART2_STOPBITS_1,
    966                        UART2_PARITY_NO,
    967                        UART2_SYNCMODE_CLOCK_DISABLE,
    968                        UART2_MODE_TXRX_ENABLE
    969                          );
    970          
    971             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    972             UART2_Cmd(ENABLE);
    973          
    974            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    975          }
    976            */
    977          

   \                                 In section .far_func.text, align 1, keep-with-next
    978          void SendChar( u8 Char)
    979          {
    980             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    981            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    982          }
   \   00000E 87                    RETF
    983            /*
    984          void Send_Hello()
    985          {
    986            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    987             Delay1(10);
    988             sprintf(data,"Hello");
    989              u8 i=0;
    990            do
    991           {
    992            SendChar(data[i++]);
    993           } while (data[i]!=0);
    994            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    995            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    996          
    997          
    998          
    999          }
   1000              */
   1001          
   1002          
   1003              /*
   1004          
   1005          void SendData()
   1006          {
   1007           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1008            Delay1(10);
   1009            u8 i=0;
   1010            sprintf(data,"%d %c",adcdata,0x0d);
   1011           do
   1012           {
   1013             SendChar(data[i++]);
   1014          
   1015           } while (data[i]!=0);
   1016             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1017            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1018            rx_data=0;
   1019          }
   1020          */
   1021          

   \                                 In section .far_func.text, align 1, keep-with-next
   1022          void LCDDataOut(u8 data)
   1023          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1024            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_21:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_172
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine56_0
   1025            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_172:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_20:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_173
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine56_0
   1026            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_173:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_19:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_174
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine56_0
   1027            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_174:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_18:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_175
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine56_0
   1028          }
   \                     ??CrossCallReturnLabel_175:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_181:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1029          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine56_0
   \   000002                       ;               // Fall through to label ??Subroutine56_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1030          void InitLcd()
   1031          {
   1032           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine7
   1033            LCD_RW(0);
   1034            LCD_RS(0);
   \                     ??CrossCallReturnLabel_23:
   \   000006 8D000000              CALLF     ?Subroutine8
   1035            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_170:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine15
   1036          
   1037            LCDInstrNibble(0x03);
   1038             Delay1(10);
   1039            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_50:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1040             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine15
   1041            LCDInstrNibble(0x03);
   1042             Delay1(10);
   1043          
   1044             //Line 4
   1045            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_49:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1046            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1047            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1048            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1049          
   1050            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1051            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1052          
   1053            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine51
   1054            Delay1(250);
   \                     ??CrossCallReturnLabel_155:
   \   000048 AE00FA                LDW       X, #0xfa
   \   00004B 8D000000              CALLF     Delay1
   1055          
   1056            LCDInstr(0x06);
   \   00004F A606                  LD        A, #0x6
   \   000051 8D000000              CALLF     LCDInstr
   1057            Delay1(10);
   \   000055 AE000A                LDW       X, #0xa
   \   000058 AC000000              JPF       Delay1
   1058          
   1059          
   1060          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_179:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_178:
   \   00000A 87                    RETF
   1061          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine56_0
   \                     ??CrossCallReturnLabel_176:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_167:
   \   00000D                       REQUIRE ??Subroutine55_0
   \   00000D                       ;               // Fall through to label ??Subroutine55_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_166:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1062          void LCDInstr(u8 Instr)
   1063          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1064            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine8
   1065            LCD_RW(0);
   \                     ??CrossCallReturnLabel_168:
   \   000009 2000                  JRA       ?Subroutine0
   1066            LCDDataOut(Instr>>4);
   1067            PulseEnable();
   1068            LCDDataOut(Instr & 0x0F);
   1069            PulseEnable();
   1070          }
   1071          

   \                                 In section .far_func.text, align 1, keep-with-next
   1072          void LCDData(u8 Data)
   1073          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1074            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine6
   1075            LCD_RW(0);
   \                     ??CrossCallReturnLabel_17:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1076            LCDDataOut(Data>>4);
   1077            PulseEnable() ;
   1078            LCDDataOut(Data & 0x0F) ;
   1079            PulseEnable();
   1080          }
   1081          

   \                                 In section .far_func.text, align 1, keep-with-next
   1082          void LCDInstrNibble(u8 Instr)
   1083          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1084            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine7
   1085            LCD_RW(0);
   1086            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_22:
   \   00000B AC000000              JPF       ??Subroutine55_0
   1087            PulseEnable();
   1088          }
   1089          

   \                                 In section .far_func.text, align 1, keep-with-next
   1090          void PulseEnable(void)
   1091          {
   1092            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine3
   1093             Delay1(1);
   1094            LCD_EN(1);
   1095             Delay1(1);
   1096            LCD_EN(0);
   \                     ??CrossCallReturnLabel_4:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine56_0
   1097             Delay1(1);
   \                     ??CrossCallReturnLabel_171:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1098          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_180:
   \   000006 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_146:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_145:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1099          

   \                                 In section .far_func.text, align 1, keep-with-next
   1100          void LCD_Busy(void)
   1101          {
   1102             //set Port D7 as Input
   1103             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1104             //Set Read
   1105             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine6
   1106             LCD_RS(0);
   \                     ??CrossCallReturnLabel_16:
   \   000013 8D000000              CALLF     ?Subroutine8
   1107             // Read Busy Flag
   1108                timer2=0;
   \                     ??CrossCallReturnLabel_169:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1109             do
   1110             {
   1111             // Enable set
   1112               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine3
   1113                Delay1(1);
   1114               LCD_EN(1);
   1115                Delay1(1);
   1116             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_5:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1117                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1118                //Clear read
   1119              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine56_0
   1120             //set Port D7 as Output
   1121             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_177:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1122          
   1123          }
   1124          
   1125          

   \                                 In section .far_func.text, align 1, keep-with-next
   1126          void LCD(u8 data)
   1127           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1128             //  static u8 linet=0;
   1129          
   1130          
   1131               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_148
   1132               {
   1133          
   1134                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
   1135                   {
   1136                   case 0:
   1137                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
   1138                     count=0;
   \   00001F 725F0000              CLR       L:count
   1139                     break;
   \   000023 2022                  JRA       L:??LCD_4
   1140                   case 1:
   1141                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
   1142                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
   1143                     break;
   \   00002F 2016                  JRA       L:??LCD_4
   1144                   case 2:
   1145                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
   1146                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
   1147                     break;
   \   00003B 200A                  JRA       L:??LCD_4
   1148                   case 3:
   1149                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
   1150                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
   1151                     break;
   1152                   //default:
   1153                    //  LCDInstr(0x80 |0x40);    //Line 1
   1154                    }
   1155                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
   1156                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
   1157                   {
   1158                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
   1159                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine51
   1160                    Delay1(2500);
   \                     ??CrossCallReturnLabel_157:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
   1161                   }
   1162          
   1163                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ?Subroutine47
   1164          
   1165          
   1166               }
   1167          
   1168          
   1169               if (count==20)
   \                     ??CrossCallReturnLabel_148:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
   1170                {
   1171                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
   1172                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
   1173                }
   1174                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
   1175                  {
   1176                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
   1177                    Delay1(1);
   1178                  }
   1179                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
   1180                    {
   1181                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
   1182                      count=0;
   \   000088 725F0000              CLR       L:count
   1183                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
   1184                    }
   1185                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
   1186                        {
   1187                          count=0;
   \   000092 725F0000              CLR       L:count
   1188                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine51
   1189                          Delay1(250);
   \                     ??CrossCallReturnLabel_156:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
   1190                        }
   1191          
   1192          
   1193              /*
   1194                   line++;
   1195                   if (line>3)
   1196                   {
   1197                     line=1;  //Line 0 for Time
   1198                   }
   1199                 switch(line)
   1200                   {
   1201                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1202                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1203                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1204                   default : LCDInstr(0x80 | 0x40); // Line 1
   1205                   }
   1206                   Delay(1);
   1207                   count=0;
   1208                }
   1209          
   1210               */
   1211          
   1212               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
   1213               {
   1214                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
   1215                  Delay1(1);
   \   0000AB 8D000000              CALLF     ?Subroutine47
   1216                 count++;
   \                     ??CrossCallReturnLabel_147:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
   1217               }
   1218           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF
   1219          

   \                                 In section .far_func.text, align 1, keep-with-next
   1220          void InitDelayTimer()
   1221          {
   1222             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1223             //Tclock 16/8=2Mhz  /20 10us
   1224                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1225                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1226                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1227                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1228            //Enable TIM2
   1229                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1230          
   1231          }
   1232          

   \                                 In section .far_func.text, align 1, keep-with-next
   1233          bool DS18_Write(u8 data)
   1234          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1235            disableInterrupts();
   \   000006 9B                    SIM
   1236            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1237            {
   1238             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine10
   1239             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1240             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_31:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_54
   \   00001A 8D000000              CALLF     ?Subroutine16
   1241               //else DS18(0);
   1242             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_54:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1243             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine16
   1244             //Delay1(0);
   1245            }
   \                     ??CrossCallReturnLabel_53:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1246            enableInterrupts();
   \   000032 9A                    RIM
   1247            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1248          
   1249          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_152:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1250          
   1251          

   \                                 In section .far_func.text, align 1, keep-with-next
   1252          u8  DS18_Read()
   1253          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1254              //Init DS18b20 data pin as Input
   1255          
   1256            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1257              disableInterrupts();
   \   000006 9B                    SIM
   1258            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1259            {
   1260              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine10
   1261              Delay_us(1); //Start time slot 4,5 us
   1262              DS18(1);
   \                     ??CrossCallReturnLabel_30:
   \   00000D 8D000000              CALLF     ?Subroutine16
   1263              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_51:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1264              //Delay1(0);
   1265             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_56:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1266              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1267              //  DS18(1);  // Next bit
   1268             // Delay1(0);
   1269          
   1270            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1271              enableInterrupts();
   \   000046 9A                    RIM
   1272              //Init DS18b20 data pin
   1273             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1274             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1275          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1276          

   \                                 In section .far_func.text, align 1, keep-with-next
   1277          bool DS18_Reset()
   1278          {
   1279             //Init Reset Pulse
   1280              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine50
   1281              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_153:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1282              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine16
   1283              //Delay1(1);
   1284              timer2=0;
   \                     ??CrossCallReturnLabel_52:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1285              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_34:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_55:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1286              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_35:
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1287              // Delay1(10);
   1288              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000027 AE0014                LDW       X, #0x14
   \   00002A 8D000000              CALLF     Delay1
   1289          
   1290              return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 87                    RETF
   1291          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1292          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1293          u8 temperature ()
   1294          {
   \                     temperature:
   \   000000 3B0000                PUSH      S:?b8
   1295          
   1296             //Init Reset Pulse
   1297               if(!DS18_Reset()) return FALSE;
   \   000003 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_88:
   \   000007 2603                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   000009 4F                    CLR       A
   \   00000A 202A                  JRA       L:??temperature_2
   1298             //Skip ROM Command 0xCC
   1299              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000C 8D000000              CALLF     ?Subroutine28
   1300             //Function command  CONVERT T [44h]
   1301              DS18_Write(0x44);
   1302              //Wait util end convert
   1303              timer2=0;
   1304               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_82:
   \   000010 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_37:
   \   000014 2408                  JRNC      L:??temperature_3
   \   000016 8D000000              CALLF     DS18_Read
   \   00001A A100                  CP        A, #0x0
   \   00001C 27F2                  JREQ      L:??CrossCallReturnLabel_82
   1305                if (timer2>10000) return FALSE;
   \                     ??temperature_3:
   \   00001E CE0000                LDW       X, L:timer2
   \   000021 A32711                CPW       X, #0x2711
   \   000024 24E3                  JRNC      L:??temperature_1
   1306               //u8 temp8=timer2;
   1307              //Init Reset Pulse
   1308              if(!DS18_Reset()) return FALSE;
   \   000026 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_89:
   \   00002A 27DD                  JREQ      L:??temperature_1
   1309              // Skip ROM Command 0xCC
   1310              DS18_Write(0xCC);
   \   00002C 8D000000              CALLF     ?Subroutine27
   1311              //Function command READ SCRATCHPAD [BEh]
   1312              DS18_Write(0xBE);
   1313               u8 temp1=DS18_Read();
   1314               u8 temp2=DS18_Read();
   1315              DS18_Reset();
   \                     ??CrossCallReturnLabel_79:
   \   000030 8D000000              CALLF     DS18_Reset
   1316              return temp1;
   \   000034 B600                  LD        A, S:?b8
   \                     ??temperature_2:
   \   000036 320000                POP       S:?b8
   \   000039 87                    RETF
   1317          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 AC000000              JPF       DS18_Read
   1318          

   \                                 In section .far_func.text, align 1, keep-with-next
   1319          bool Read_DS18()
   1320          {
   \                     Read_DS18:
   \   000000 3B0000                PUSH      S:?b8
   1321          
   1322             //Init Reset Pulse
   1323               if(!DS18_Reset()) return FALSE;
   \   000003 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_86:
   \   000007 2603                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   000009 4F                    CLR       A
   \   00000A 205F                  JRA       L:??Read_DS18_2
   1324             //Skip ROM Command 0xCC
   1325              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000C 8D000000              CALLF     ?Subroutine28
   1326             //Function command  CONVERT T [44h]
   1327              DS18_Write(0x44);
   1328              //Wait util end convert
   1329              timer2=0;
   1330               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_81:
   \   000010 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_36:
   \   000014 2408                  JRNC      L:??Read_DS18_3
   \   000016 8D000000              CALLF     DS18_Read
   \   00001A A100                  CP        A, #0x0
   \   00001C 27F2                  JREQ      L:??CrossCallReturnLabel_81
   1331                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_3:
   \   00001E CE0000                LDW       X, L:timer2
   \   000021 A32711                CPW       X, #0x2711
   \   000024 24E3                  JRNC      L:??Read_DS18_1
   1332               //u8 temp8=timer2;
   1333              //Init Reset Pulse
   1334              if(!DS18_Reset()) return FALSE;
   \   000026 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_87:
   \   00002A 27DD                  JREQ      L:??Read_DS18_1
   1335              // Skip ROM Command 0xCC
   1336              DS18_Write(0xCC);
   \   00002C 8D000000              CALLF     ?Subroutine27
   1337              //Function command READ SCRATCHPAD [BEh]
   1338              DS18_Write(0xBE);
   1339               u8 temp1=DS18_Read();
   1340               u8 temp2=DS18_Read();
   1341               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_80:
   \   000030 8D000000              CALLF     ?Subroutine29
   1342               u8 temp4=DS18_Read();
   1343               u8 temp5=DS18_Read();
   1344               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_84:
   \   000034 8D000000              CALLF     ?Subroutine29
   1345               u8 temp7=DS18_Read();
   1346               u8 temp8=DS18_Read();
   1347               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_83:
   \   000038 8D000000              CALLF     DS18_Read
   1348          
   1349               DS18_Reset();
   \   00003C 8D000000              CALLF     DS18_Reset
   1350          
   1351                 line_lcd=0;
   \   000040 725F0000              CLR       L:line_lcd
   1352                 u8 result1=temp1/2;
   \   000044 B600                  LD        A, S:?b8
   \   000046 44                    SRL       A
   \   000047 B700                  LD        S:?b1, A
   1353                 u8 result2=0;
   \   000049 3F00                  CLR       S:?b0
   1354                 if(temp1%2!=0) result2=5;
   \   00004B B600                  LD        A, S:?b8
   \   00004D A501                  BCP       A, #0x1
   \   00004F 2704                  JREQ      L:??Read_DS18_4
   \   000051 35050000              MOV       S:?b0, #0x5
   1355          
   1356                printf("\n%d.%d",result1,result2);
   \                     ??Read_DS18_4:
   \   000055 5F                    CLRW      X
   \   000056 41                    EXG       A, XL
   \   000057 B600                  LD        A, S:?b0
   \   000059 41                    EXG       A, XL
   \   00005A 89                    PUSHW     X
   \   00005B 41                    EXG       A, XL
   \   00005C B600                  LD        A, S:?b1
   \   00005E 41                    EXG       A, XL
   \   00005F 89                    PUSHW     X
   \   000060 AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   000063 8D000000              CALLF     printf
   \   000067 5B04                  ADD       SP, #0x4
   1357                //line_lcd=1;
   1358               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1359                  // while (!key_ok_on());
   1360          
   1361               //u8 temp3=DS18_Read();
   1362          
   1363              return TRUE;
   \   000069 A601                  LD        A, #0x1
   \                     ??Read_DS18_2:
   \   00006B 320000                POP       S:?b8
   \   00006E 87                    RETF
   1364          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1365          

   \                                 In section .far_func.text, align 1, keep-with-next
   1366          bool DS18Set ()
   1367          {
   1368               //Init Reset Pulse
   1369              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_85:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1370             //Skip ROM Command 0xCC
   1371              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1372             //Function command  WRITE SCRATCHPAD 0x4E
   1373              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1374             //Write 3 bytes last is config reg
   1375              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1376              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1377              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1378          
   1379          
   1380          
   1381          
   1382            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1383          }
   1384          
   1385          
   1386          
   1387          
   1388           /*
   1389          u16 Average()
   1390          {
   1391           //Find average in measure
   1392            u8 i=0;
   1393            u16 Summa=0;
   1394            do
   1395            {
   1396             Summa+=measure[i++];
   1397            } while ( measure[i]!=0);
   1398             if(i!=0) Summa=Summa/i;
   1399             return Summa;
   1400          }
   1401             */
   1402          

   \                                 In section .far_func.text, align 1, keep-with-next
   1403          PUTCHAR_PROTOTYPE
   1404          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1405            /* Place your implementation of fputc here */
   1406            /* e.g. write a character to the USART */
   1407                //USART_SendData(USART3, (u8) ch);
   1408               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1409             /* Loop until the end of transmission */
   1410              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1411            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1412          }
   1413          
   1414          

   \                                 In section .far_func.text, align 1, keep-with-next
   1415          void Delay1(u16 Delay)
   1416          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1417              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1418            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1419            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1420          }
   \   00000D 87                    RETF
   1421          

   \                                 In section .far_func.text, align 1, keep-with-next
   1422           void Delay2(u16 Delay)
   1423          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1424            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1425            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1426          }
   \   00000D 87                    RETF
   1427          
   1428          

   \                                 In section .far_func.text, align 1, keep-with-next
   1429          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1430          {
   1431            //disableInterrupts();
   1432            do
   1433              {
   1434                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1435                nop();
   \   000001 9D                    NOP
   1436              }
   1437              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1438            //enableInterrupts();
   1439          }
   \   000005 87                    RETF
   1440          
   1441          
   1442          
   1443          /*
   1444          void Delay12 (u16 Delay)
   1445          {
   1446            timer2=0;
   1447            while ( timer2 < Delay); ;
   1448          }
   1449          */
   1450          
   1451          
   1452          #ifdef USE_FULL_ASSERT
   1453          
   1454          /**
   1455            * @brief  Reports the name of the source file and the source line number
   1456            *   where the assert_param error has occurred.
   1457            * @param file: pointer to the source file name
   1458            * @param line: assert_param error line source number
   1459            * @retval : None
   1460            */

   \                                 In section .far_func.text, align 1
   1461          void assert_failed(u8* file, u32 line)
   1462          {
   1463            /* User can add his own implementation to report the file name and line number,
   1464               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1465          
   1466            /* Infinite loop */
   1467            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1468            {
   1469          
   1470            }
   1471          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n1 %d.%d %c">`:
   \   000000 0A312025642E          DC8 "\0121 %d.%d %c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n0 %d.%d %c">`:
   \   000000 0A302025642E          DC8 "\0120 %d.%d %c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"
   1472          #endif
   1473          
   1474          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     result                            4
     k                                 2
     status                            2
     ?Subroutine40                     7
     main                            528
     ?Subroutine46                     2
     ??Subroutine59_0                 12
     ?Subroutine39                    11
     ?Subroutine37                    11
     ?Subroutine36                    11
     ?Subroutine21                    16
     ?Subroutine20                    10
     ?Subroutine4                      9
     ?Subroutine1                     35
     ?Subroutine54                    10
     Power_On                         12
     ?Subroutine38                    11
     Power_Off                        12
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine41                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine45                     1
     ??Subroutine58_0                  7
     ?Subroutine44                     9
     ?Subroutine43                    11
     ReadDS1307                      103
     ?Subroutine26                    11
     ?Subroutine24                     5
     ?Subroutine52                    10
     ?Subroutine23                    13
     ?Subroutine19                     8
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine42                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine51                     6
     Set_Clock                       395
     ?Subroutine25                     6
     ??Subroutine57_0                  5
     ?Subroutine22                    10
     ?Subroutine13                    16
     adj                              77
     key_ok_on                        41
     ?Subroutine53                     7
     key_plus_on                      37
     ?Subroutine33                     7
     ?Subroutine9                      7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine14                    26
     Set_Delay_Allarm                352
     ?Subroutine34                    15
     ?Subroutine11                    15
     ?Subroutine5                      5
     ?Subroutine2                     29
     ?Subroutine48                     9
     Save_Status                      10
     Read_Allarm                     103
     EEPROM_INIT                      15
     GpioConfiguration               104
     ?Subroutine32                     9
     ?Subroutine31                     9
     InitClk                          56
     ?Subroutine35                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine6                      7
     ??Subroutine56_0                  5
     ?Subroutine49                     7
     ?Subroutine8                      2
     InitLcd                          92
     ?Subroutine15                    17
     ?Subroutine7                     11
     ?Subroutine0                     13
     ??Subroutine55_0                 10
     ?Subroutine18                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine3                     24
     ?Subroutine47                     6
     LCD_Busy                         69
     LCD                             186
     InitDelayTimer                   29
     DS18_Write                       57
     ?Subroutine16                     9
     ?Subroutine10                    10
     ?Subroutine50                     9
     DS18_Read                        77
     ?Subroutine17                    12
     DS18_Reset                       49
     ?Subroutine12                     7
     ?Subroutine30                     7
     temperature                      58
     ?Subroutine28                    17
     ?Subroutine27                    22
     Read_DS18                       111
     ?Subroutine29                    12
     DS18Set                          41
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\n1 %d.%d %c">       12
     ?<Constant "\n0 %d.%d %c">       12
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4
     ?<Constant "\n%d.%d">             7

 
 4 033 bytes in section .far_func.text
   100 bytes in section .near.bss
     3 bytes in section .near.data
   204 bytes in section .near.rodata
 
 4 033 bytes of CODE  memory
   204 bytes of CONST memory
   103 bytes of DATA  memory

Errors: none
Warnings: none
