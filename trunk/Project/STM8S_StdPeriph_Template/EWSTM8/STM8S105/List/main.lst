###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             04/Dec/2013  20:48:04 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          #ifdef __GNUC__
     81            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     82               set to 'Yes') calls __io_putchar() */
     83            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     84          #else
     85            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     86          #endif /* __GNUC__ */
     87          
     88          
     89          
     90          
     91          #define SpecialSymbol 0x1b //Esc to start message
     92          //#define data_size 20
     93          #define key_time 8000
     94          #define key_time_ok 15000
     95          #define key_time_press 4000
     96          #define key_time_release 400
     97          #define DS_Control  0x10  // Out 1s
     98          #define time_menu 10  // 5s
     99          #define TIMEOUT_DS18B20 1000
    100          #define LCDLEDON 20
    101          //#define sync_time 30 // 30s
    102          #define power_jitter 3 //3s
    103          
    104          
    105          
    106          
    107          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    108          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    109          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    110          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    111          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    113          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    114          //char data[data_size];
    115          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    116          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    121          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    122          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    123          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    124          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    136          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    137          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    138          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    139          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    142          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    143          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    144          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    145          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          char  manu_display,sync_display,program_display,program_number;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_number:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    150          u8 button;
   \                     button:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          u8 power;
   \                     power:
   \   000000                       DS8 1
    152          //bool  ds_temperature;
    153          
    154          
    155          

   \                                 In section .near.bss, align 1
    156          char line1[8];
   \                     line1:
   \   000000                       DS8 8
    157          //char string1[10];
    158          //char string2[10];

   \                                 In section .near.bss, align 1
    159          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    160          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    161          
    162          //u8 index=0;

   \                                 In section .near.bss, align 1
    163          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    164          int volatile k=0;
   \                     k:
   \   000000                       DS8 2

   \                                 In section .near.data, align 1
    165          char *Day_Week[10] = {" Off"," Sun"," Mon"," Tues"," Wednes"," Thurs"," Fri"," Satur"," Daily"," Month" };
   \                     Day_Week:
   \   000000 000000000000          DC16 `?<Constant " Off">`, `?<Constant " Sun">`, `?<Constant " Mon">`
   \   000006 00000000              DC16 `?<Constant " Tues">`, `?<Constant " Wednes">`
   \   00000A 00000000              DC16 `?<Constant " Thurs">`, `?<Constant " Fri">`
   \   00000E 00000000              DC16 `?<Constant " Satur">`, `?<Constant " Daily">`
   \   000012 0000                  DC16 `?<Constant " Month">`
    166          //char *test[3] ={"18777","2","3"};
    167          
    168           struct   status_reg
    169           {
    170             unsigned manu:1;
    171             unsigned on:1;
    172             unsigned timer_on:1;
    173             unsigned daily:1;
    174             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    175           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    176          
    177          
    178           struct
    179           {
    180             unsigned ds1307:1;
    181             unsigned ds18B20:1;
    182             unsigned buzzer:1;
    183             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    184           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    185          
    186          
    187          
    188           typedef  struct
    189            {
    190              u8 day;
    191              u8 onhour ;
    192              u8 onminute ;
    193              u8 offhour;
    194              u8 offminute;
    195          
    196            }  program ;
    197          
    198                   // = new proram[8];

   \                                 In section .near.bss, align 1
    199             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 40
    200            /*
    201             =
    202           {
    203             {0x00,0x00,0x00,0x00,0x00},
    204             {0x00,0x00,0x00,0x00,0x00},
    205             {0x00,0x00,0x00,0x00,0x00},
    206             {0x00,0x00,0x00,0x00,0x00},
    207             {0x00,0x00,0x00,0x00,0x00},
    208             {0x00,0x00,0x00,0x00,0x00},
    209             {0x00,0x00,0x00,0x00,0x00},
    210             {0x00,0x00,0x00,0x00,0x00},
    211           };
    212              */
    213          
    214          //time_t  ltime;
    215          //struct tm ptim;
    216          
    217          
    218          
    219          
    220          
    221          /* Private function prototypes -----------------------------------------------*/
    222          void InitHardware();
    223          void GpioConfiguration();
    224          void InitClk();
    225          void InitAdc();
    226          void InitI2C();
    227          void EEPROM_INIT();
    228          bool ReadDS1307();
    229          //void InitUart();
    230          void InitLcd();
    231          void InitDelayTimer2();
    232          void InitDelayTimer3();
    233          void Delay1( u16 Delay);
    234          void Delay2( u16 Delay);
    235          void Delay_us(u16 Delay);
    236          void LCDInstrNibble (u8 Instr);
    237          void LCDInstr(u8 Instr);
    238          void LCDDataOut(u8 data);
    239          void LCD_Busy();
    240          void PulseEnable();
    241          //void SendData();
    242          void SendChar(u8 Char);
    243          //void Send_Hello();
    244          bool Set_Clock();
    245          bool key_ok_on();
    246          bool key_plus_on();
    247          bool key_minus_on();
    248          bool key_ok_plus();
    249          bool Init_DS1307(void);
    250          bool Check_DS1307(void);
    251          bool I2C_Start(void);
    252          bool I2C_WA(u8 address);
    253          bool I2C_WD(u8 data);
    254          bool I2C_RA(u8 address);
    255          bool Set_DS1307();
    256          //bool Set_Delay_Allarm();
    257          bool Set_Timer_On();
    258          bool Set_Timer_Off();
    259          bool Read_Allarm();
    260          bool Read_DS18();
    261          bool DS18_Write( u8 data);
    262          bool DS18_Reset();
    263          bool DS18Set();
    264          u8 temperature();
    265          u8 DS18_Read();
    266          u8 convert_tobcd(u8 data);
    267          u8 I2C_RD(void);
    268          u8 adj(u8 min,u8 max,u8 now);
    269          u8 bcd2hex(u8 bcd);
    270          void Power_On(void);
    271          void Power_Off();
    272          void SaveStatus();
    273          void Rotate_Line( char * line);
    274          void Display_Line(char * line);
    275          void Clear_Line1(void);
    276          void Clear_Line2(void);
    277          void Menu(void);
    278          void pressKey(void);
    279          void Display(void);
    280          bool setData(void);
    281          void initBeep(void);
    282          void beep(u16 Interval);
    283          void FirstMenu();
    284          void ProgramMenu();
    285          void SaveProgram();
    286          void ReadProgram();
    287          void ResetProgram();
    288          void CheckProgramPoint();
    289          
    290          
    291          
    292          u16  Average();
    293          
    294          
    295          /* Private functions ---------------------------------------------------------*/
    296          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_198:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_220:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    297          void main(void)
    298          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    299              /*High speed internal clock prescaler: 1*/
    300              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    301              InitClk();
   \   000003 8D000000              CALLF     InitClk
    302              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    303              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    304              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    305              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine11
    306              GPIO_WriteLow(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_21:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteLow
    307              hardware.lcdLed=0;
   \   000020 CE0000                LDW       X, L:hardware
   \   000023 01                    RRWA      X, A
   \   000024 A4F7                  AND       A, #0xf7
   \   000026 02                    RLWA      X, A
   \   000027 CF0000                LDW       L:hardware, X
    308              //InitUart();
    309               enableInterrupts();
   \   00002A 9A                    RIM
    310               initBeep();
   \   00002B 8D000000              CALLF     initBeep
    311              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    312               InitLcd();
   \   00002F 8D000000              CALLF     InitLcd
    313              //InitAdc();
    314               InitI2C();
   \   000033 8D000000              CALLF     InitI2C
    315              // Enable Timer3
    316              TIM3_Cmd(ENABLE);
   \   000037 A601                  LD        A, #0x1
   \   000039 8D000000              CALLF     TIM3_Cmd
    317              //year=bcd2hex(13);
    318              //Delay1(10000);
    319               if (!ReadDS1307())
   \   00003D 8D000000              CALLF     ReadDS1307
   \   000041 A100                  CP        A, #0x0
   \   000043 261D                  JRNE      L:??main_0
    320               {
    321                 printf("\n E2:%d",error);
   \   000045 C60000                LD        A, L:error
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004E 8D000000              CALLF     printf
   \   000052 5B02                  ADD       SP, #0x2
    322                 // Reset the CPU: Enable the watchdog and wait until it expires
    323                  hardware.ds1307=0;
   \   000054 CE0000                LDW       X, L:hardware
   \   000057 01                    RRWA      X, A
   \   000058 A4FE                  AND       A, #0xfe
   \   00005A 02                    RLWA      X, A
   \   00005B CF0000                LDW       L:hardware, X
    324                   pressKey();
   \   00005E 8D000000              CALLF     pressKey
    325                //IWDG->KR = IWDG_KEY_ENABLE;
    326                // while ( 1 );    // Wait until reset occurs from IWDG
    327               }
    328               //Send_Hello();
    329              //line_lcd=0;
    330              //printf("\nHello");
    331                hardware.lcdLed=1;
   \                     ??main_0:
   \   000062 8D000000              CALLF     ?Subroutine36
    332                 lcdLedTimer=LCDLEDON;
    333                  //GPIO_WriteLow(GPIOB,lcdLed);
    334          
    335              if (!Check_DS1307())
   \                     ??CrossCallReturnLabel_81:
   \   000066 8D000000              CALLF     Check_DS1307
   \   00006A A100                  CP        A, #0x0
   \   00006C 2624                  JRNE      L:??main_1
    336              {
    337                 if (error!=0)
   \   00006E C60000                LD        A, L:error
   \   000071 2710                  JREQ      L:??main_2
    338                 {
    339                  printf("\n E:%d",error);
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    340                   pressKey();
   \   00007F 8D000000              CALLF     pressKey
    341          
    342                 }
    343               line_lcd=0;
   \                     ??main_2:
   \   000083 725F0000              CLR       L:line_lcd
    344               printf("\nSetClock");
   \   000087 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008A 8D000000              CALLF     printf
    345                Set_Clock();
   \   00008E 8D000000              CALLF     Set_Clock
    346                 // reset program point
    347          
    348              }
    349          
    350          
    351                 //Read Status register from eepom and update it
    352                //size=sizeof(status);
    353               //u16 status
    354               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000092 AE4000                LDW       X, #0x4000
   \   000095 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_148:
   \   000099 B700                  LD        S:?b8, A
   \   00009B AE4001                LDW       X, #0x4001
   \   00009E 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_147:
   \   0000A2 905F                  CLRW      Y
   \   0000A4 9097                  LD        YL, A
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b8
   \   0000AA 41                    EXG       A, XL
   \   0000AB 4F                    CLR       A
   \   0000AC 02                    RLWA      X, A
   \   0000AD 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_208:
   \   0000B1 CF0000                LDW       L:status, X
    355                status_check = *(u16*)(&status);
   \   0000B4 CE0000                LDW       X, L:status
   \   0000B7 CF0000                LDW       L:status_check, X
    356          
    357                ReadProgram ();
   \   0000BA 8D000000              CALLF     ReadProgram
    358                //printf("%s",Day_Week[1]);
    359                // pressKey();
    360          
    361                /*
    362              //When Start Check for Allarm and computing Daily_long_on
    363               if ( Read_Allarm() == TRUE)
    364               {
    365                 time_on=daily_hour_on*60+daily_minute_on;
    366                 time_off= daily_hour_off*60+daily_minute_off;
    367               }
    368                  */
    369          
    370                     //Init DS18B20
    371              DS18Set();
   \   0000BE 8D000000              CALLF     DS18Set
    372              line_lcd=0;
   \   0000C2 725F0000              CLR       L:line_lcd
    373              if (!Read_DS18())
   \   0000C6 8D000000              CALLF     Read_DS18
   \   0000CA A100                  CP        A, #0x0
   \   0000CC 2611                  JRNE      L:??main_3
    374              {
    375               printf("\nDS_Err_T");
   \   0000CE AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000D1 8D000000              CALLF     printf
    376                 hardware.ds18B20=0;
   \   0000D5 8D000000              CALLF     ?Subroutine40
    377                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_96:
   \   0000D9 8D000000              CALLF     pressKey
   \   0000DD 2004                  JRA       L:??CrossCallReturnLabel_98
    378              }
    379               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000DF 8D000000              CALLF     ?Subroutine41
    380          
    381              //daily_dispaly=' ';
    382              //month_display=' ';
    383              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_98:
   \   0000E3 35010000              MOV       L:sync_time_ds1307, #0x1
    384          
    385                    //Same delay if  power jitter
    386              if (status.on)
   \   0000E7 CE0000                LDW       X, L:status
   \   0000EA 9F                    LD        A, XL
   \   0000EB A502                  BCP       A, #0x2
   \   0000ED 2713                  JREQ      L:??main_4
    387              {
    388               line_lcd=0;
   \   0000EF 725F0000              CLR       L:line_lcd
    389               printf("\nWait 3s.");
   \   0000F3 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   0000F6 8D000000              CALLF     ?Subroutine43
    390               timer3=0;
    391               while (timer3<=power_jitter);
   \                     ??CrossCallReturnLabel_105:
   \   0000FA CE0000                LDW       X, L:timer3
   \   0000FD A30004                CPW       X, #0x4
   \   000100 25F8                  JRC       L:??CrossCallReturnLabel_105
    392              }
    393          
    394               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    395          
    396               // Working fuction
    397              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 month,u8 hours,u8 minutes,u8 seconds)
    398          
    399          
    400          
    401              // strcpy(line1,"Hello I am here! ");
    402              //  while(1)
    403              //  {
    404              //     Display_Line(line1);
    405              //     Delay2(20000);
    406              //  }
    407              //  while (!key_ok_on());
    408                 //sprintf(line1,"TIMER ON ");
    409          
    410               /* Main Loop*/
    411          
    412              while(1)
    413              {
    414          
    415          
    416                if(key_ok_on()) FirstMenu();
   \                     ??main_4:
   \   000102 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_123:
   \   000106 2704                  JREQ      L:??main_5
   \   000108 8D000000              CALLF     FirstMenu
    417                if(key_plus_on()) Power_On();
   \                     ??main_5:
   \   00010C 8D000000              CALLF     key_plus_on
   \   000110 A100                  CP        A, #0x0
   \   000112 2704                  JREQ      L:??main_6
   \   000114 8D000000              CALLF     Power_On
    418                if(key_minus_on())Power_Off();
   \                     ??main_6:
   \   000118 8D000000              CALLF     key_minus_on
   \   00011C A100                  CP        A, #0x0
   \   00011E 2704                  JREQ      L:??main_7
   \   000120 8D000000              CALLF     Power_Off
    419                if(Time_Display) Display();  //
   \                     ??main_7:
   \   000124 C60000                LD        A, L:Time_Display
   \   000127 2704                  JREQ      L:??main_8
   \   000129 8D000000              CALLF     Display
    420          
    421                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_8:
   \   00012D C60000                LD        A, L:sync_time_ds1307
   \   000130 2729                  JREQ      L:??main_9
    422                   {
    423                    if (!ReadDS1307())
   \   000132 8D000000              CALLF     ReadDS1307
   \   000136 A100                  CP        A, #0x0
   \   000138 2619                  JRNE      L:??main_10
    424                        {
    425                          GPIO_WriteLow(GPIOD, power_pin );
   \   00013A 8D000000              CALLF     ?Subroutine11
    426                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_20:
   \   00013E C60000                LD        A, L:error
   \   000141 5F                    CLRW      X
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B02                  ADD       SP, #0x2
    427                       //restart i2c
    428                       // Reset the CPU: Enable the watchdog and wait until it expires
    429                       IWDG->KR = IWDG_KEY_ENABLE;
   \   00014D 35CC50E0              MOV       L:0x50e0, #0xcc
    430                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_11:
   \   000151 20FE                  JRA       L:??main_11
    431                        }
    432                   sync_time_ds1307=FALSE;
   \                     ??main_10:
   \   000153 725F0000              CLR       L:sync_time_ds1307
    433                   sync_display='S';
   \   000157 35530000              MOV       L:sync_display, #0x53
    434                   }
    435          
    436                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_9:
   \   00015B CE0000                LDW       X, L:status
   \   00015E 9F                    LD        A, XL
   \   00015F A502                  BCP       A, #0x2
   \   000161 2708                  JREQ      L:??main_12
   \   000163 A608                  LD        A, #0x8
   \   000165 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_259:
   \   000169 2097                  JRA       L:??main_4
    437                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_12:
   \   00016B 8D000000              CALLF     ?Subroutine11
    438          
    439          
    440          
    441              }
   \                     ??CrossCallReturnLabel_19:
   \   00016F 2091                  JRA       L:??main_4
    442          
    443          
    444          
    445          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine53:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine41:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine40:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine11:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
    446          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine85_0
   \   000004                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A501                  BCP       A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    447          void Display(void)
    448          {
    449             //Clear_Line1 ();
    450              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    451               result2=0;
   \   000007 725F0000              CLR       L:result2
    452                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    453                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    454          
    455          
    456          
    457             if (status.manu) manu_display='M';
   \   000018 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_205:
   \   00001C 2706                  JREQ      L:??Display_1
   \   00001E 354D0000              MOV       L:manu_display, #0x4d
   \   000022 2004                  JRA       L:??Display_2
    458               else manu_display='A';
   \                     ??Display_1:
   \   000024 35410000              MOV       L:manu_display, #0x41
    459               //Blink D
    460          
    461             if (status.on && !status.manu)
   \                     ??Display_2:
   \   000028 CE0000                LDW       X, L:status
   \   00002B 9F                    LD        A, XL
   \   00002C A502                  BCP       A, #0x2
   \   00002E 2717                  JREQ      L:??Display_3
   \   000030 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_206:
   \   000034 2611                  JRNE      L:??Display_3
    462             {
    463               if (program_display==' ')  program_display='P';
   \   000036 C60000                LD        A, L:program_display
   \   000039 A120                  CP        A, #0x20
   \   00003B 2606                  JRNE      L:??Display_4
   \   00003D 35500000              MOV       L:program_display, #0x50
   \   000041 2004                  JRA       L:??Display_3
    464                 else program_display=' ';
   \                     ??Display_4:
   \   000043 35200000              MOV       L:program_display, #0x20
    465             }
    466          
    467          
    468          
    469          
    470          
    471             // else if (status.on) program_display='P';
    472             //  else program_display=' ';
    473          
    474              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,sync_display,program_display,manu_display);
   \                     ??Display_3:
   \   000047 C60000                LD        A, L:sync_display
   \   00004A 5F                    CLRW      X
   \   00004B 97                    LD        XL, A
   \   00004C BF00                  LDW       S:?w1, X
   \   00004E C60000                LD        A, L:program_display
   \   000051 97                    LD        XL, A
   \   000052 BF00                  LDW       S:?w0, X
   \   000054 C60000                LD        A, L:manu_display
   \   000057 97                    LD        XL, A
   \   000058 90CE0000              LDW       Y, L:hardware
   \   00005C 909F                  LD        A, YL
   \   00005E A502                  BCP       A, #0x2
   \   000060 89                    PUSHW     X
   \   000061 2721                  JREQ      L:??Display_5
   \   000063 8D000000              CALLF     L:?push_w0
   \   000067 8D000000              CALLF     L:?push_w1
   \   00006B C60000                LD        A, L:result2
   \   00006E 97                    LD        XL, A
   \   00006F 89                    PUSHW     X
   \   000070 C60000                LD        A, L:result1
   \   000073 97                    LD        XL, A
   \   000074 89                    PUSHW     X
   \   000075 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000079 AE0000                LDW       X, #line1
   \   00007C 8D000000              CALLF     sprintf
   \   000080 5B0A                  ADD       SP, #0xa
   \   000082 2015                  JRA       L:??Display_6
    475                else sprintf(line1,"\n%c%c%c",sync_display,program_display,manu_display);
   \                     ??Display_5:
   \   000084 8D000000              CALLF     L:?push_w0
   \   000088 8D000000              CALLF     L:?push_w1
   \   00008C 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   000090 AE0000                LDW       X, #line1
   \   000093 8D000000              CALLF     sprintf
   \   000097 5B06                  ADD       SP, #0x6
    476          
    477             line_lcd=0;
   \                     ??Display_6:
   \   000099 725F0000              CLR       L:line_lcd
    478             printf(line1);
   \   00009D AE0000                LDW       X, #line1
   \   0000A0 8D000000              CALLF     ?Subroutine24
    479          
    480             line_lcd=1;
    481             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_245:
   \   0000A4 89                    PUSHW     X
   \   0000A5 C60000                LD        A, L:minutes
   \   0000A8 97                    LD        XL, A
   \   0000A9 89                    PUSHW     X
   \   0000AA C60000                LD        A, L:hours
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B06                  ADD       SP, #0x6
    482          
    483          
    484             Time_Display=FALSE;
   \   0000B8 725F0000              CLR       L:Time_Display
    485             sync_display=' ';
   \   0000BC 35200000              MOV       L:sync_display, #0x20
    486          
    487          
    488          }
   \   0000C0 87                    RETF
    489          

   \                                 In section .far_func.text, align 1
    490          void Power_On()
    491          {
    492            //status.auto=0;
    493            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine42
    494            status.manu=1; //Manu
    495            SaveStatus();
   \                     ??CrossCallReturnLabel_100:
   \   00000A AC000000              JPF       SaveStatus
    496            //hardware.lcdLed=1;
    497          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_201:
   \   000004 AA01                  OR        A, #0x1
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine73:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 87                    RETF
    498          

   \                                 In section .far_func.text, align 1, keep-with-next
    499          void Power_Off()
    500          {
    501            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine42
    502            status.manu=1; //Manu
    503            SaveStatus();
   \                     ??CrossCallReturnLabel_99:
   \   00000A AC000000              JPF       SaveStatus
    504             //hardware.lcdLed=0;
    505          
    506          }
    507          

   \                                 In section .far_func.text, align 1, keep-with-next
    508          void InitI2C(void)
    509          {
    510             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    511             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    512             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    513          }
    514          

   \                                 In section .far_func.text, align 1, keep-with-next
    515          bool I2C_Start(void)
    516          {
    517             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    518                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    519              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_131:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    520                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    521                  {
    522                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    523                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    524                  }
    525                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    526          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    527          

   \                                 In section .far_func.text, align 1, keep-with-next
    528          bool I2C_WA(u8 address)
    529          {
    530            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    531                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    532                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_130:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    533                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    534                   {
    535                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    536                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    537                   }
    538                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    539          }
    540          

   \                                 In section .far_func.text, align 1, keep-with-next
    541          bool I2C_RA(u8 address)
    542          {
    543            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    544                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    545                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_132:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    546                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    547                   {
    548                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    549                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    550                   }
    551                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    552          }
    553          
    554          

   \                                 In section .far_func.text, align 1, keep-with-next
    555          bool I2C_WD(u8 data)
    556          {
    557           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    558             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    559             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_129:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    560              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    561              {
    562                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    563                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    564              }
    565               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    566          }
    567          

   \                                 In section .far_func.text, align 1, keep-with-next
    568          u8 I2C_RD(void)
    569          {
    570           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    571            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    572           //while((!(I2C->SR1 & 0x40))&&timeout);
    573           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    574           {
    575             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    576             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    577           }
    578           u8 data=I2C_ReceiveData();
    579           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    580          }
    581          
    582            /*
    583          bool Init_DS1307(void)
    584          {
    585             // Test DS1307
    586              error=0;
    587              if (!I2C_Start()) return FALSE;
    588              if(!I2C_WA(0xD0)) return FALSE;
    589              if(!I2C_WD(0x00)) return FALSE;
    590              if(!I2C_WD(0x00)) return FALSE;
    591              I2C_GenerateSTOP(ENABLE);
    592          
    593              // timeout=100;  error=4;
    594              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    595              //    if (!timeout)return FALSE ;
    596               return TRUE;
    597          }
    598             */
    599          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine89_0
   \   000001                       ;               // Fall through to label ??Subroutine89_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    600          bool  ReadDS1307(void)
    601          {        TIM3_Cmd(DISABLE);
   \                     ReadDS1307:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     TIM3_Cmd
    602                 error=0;
   \   000005 8D000000              CALLF     ?Subroutine48
    603                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_134:
   \   000009 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   00000B 4F                    CLR       A
   \   00000C 87                    RETF
    604                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   00000D 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_144:
   \   000011 27F8                  JREQ      L:??ReadDS1307_1
    605                 if(!I2C_WD(0x00)) return FALSE;
   \   000013 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_279:
   \   000017 27F2                  JREQ      L:??ReadDS1307_1
    606                 I2C_GenerateSTOP(ENABLE);
   \   000019 8D000000              CALLF     ?Subroutine29
    607                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_60:
   \   00001D 27EC                  JREQ      L:??ReadDS1307_1
    608                 if(!I2C_RA(0xD0))return FALSE;
   \   00001F A6D0                  LD        A, #0xd0
   \   000021 8D000000              CALLF     I2C_RA
   \   000025 A100                  CP        A, #0x0
   \   000027 27E2                  JREQ      L:??ReadDS1307_1
    609                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000029 8D000000              CALLF     ?Subroutine23
    610                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_45:
   \   00002D C70000                LD        L:seconds, A
    611                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000030 8D000000              CALLF     ?Subroutine23
    612                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_44:
   \   000034 C70000                LD        L:minutes, A
    613                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000037 8D000000              CALLF     ?Subroutine23
    614                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_43:
   \   00003B C70000                LD        L:hours, A
    615                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00003E 8D000000              CALLF     ?Subroutine23
    616                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_42:
   \   000042 C70000                LD        L:days, A
    617                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000045 8D000000              CALLF     ?Subroutine23
    618                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_41:
   \   000049 C70000                LD        L:`date`, A
    619                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004C 8D000000              CALLF     ?Subroutine23
    620                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   000050 C70000                LD        L:month, A
    621                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000053 8D000000              CALLF     ?Subroutine33
    622                   I2C_GenerateSTOP(ENABLE);
    623                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_68:
   \   000057 8D000000              CALLF     I2C_RD
   \   00005B 8D000000              CALLF     bcd2hex
   \   00005F C70000                LD        L:year, A
    624          
    625               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    626               //   u8 data1 = I2C_RD();
    627                //Last read byte by I2C slave
    628               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    629               //  I2C_GenerateSTOP(ENABLE);
    630               //  temp2= I2C_RD();
    631                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   000062 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    632                    {
    633                      seconds &= 0x7f;
   \   000067 721F0000              BRES      L:seconds, #0x7
    634                      Set_DS1307();
   \   00006B 8D000000              CALLF     Set_DS1307
    635                    }
    636                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006F CE0000                LDW       X, L:hardware
   \   000072 01                    RRWA      X, A
   \   000073 AA01                  OR        A, #0x1
   \   000075 02                    RLWA      X, A
   \   000076 CF0000                LDW       L:hardware, X
    637                 TIM3_Cmd(ENABLE);
   \   000079 A601                  LD        A, #0x1
   \   00007B 8D000000              CALLF     TIM3_Cmd
    638                 return TRUE;
   \   00007F A601                  LD        A, #0x1
   \   000081 87                    RETF
    639          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_195:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    640          

   \                                 In section .far_func.text, align 1, keep-with-next
    641          bool Check_DS1307(void)
    642          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    643             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    644                 error=0;
   \   000003 725F0000              CLR       L:error
    645                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    646                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    647                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_143:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    648                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_282:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    649                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine29
    650                  //Last read byte by I2C slave
    651                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_59:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    652                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    653                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine71
    654                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_196:
   \   00003C B700                  LD        S:?b8, A
    655                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine33
    656                 I2C_GenerateSTOP(ENABLE);
    657                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_69:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    658                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    659          }
    660          

   \                                 In section .far_func.text, align 1, keep-with-next
    661          bool Set_DS1307()
    662          {
    663                 // convert hex or decimal to bcd format
    664          
    665          
    666                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine48
    667                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_133:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    668                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_142:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    669                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_278:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    670                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_135:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    671                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_136:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    672                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_137:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    673                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_138:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    674                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_139:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    675                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_140:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    676                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_141:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    677                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_280:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    678                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_281:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    679                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    680          
    681          
    682             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    683          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    684          
    685          

   \                                 In section .far_func.text, align 1, keep-with-next
    686          u8 convert_tobcd(u8 data)
    687          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    688             u8 data_second_decimal=data/10;
    689             u8 data_first_decimal=data - 10*data_second_decimal;
    690             data=16*data_second_decimal + data_first_decimal;
    691            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    692          }
    693          

   \                                 In section .far_func.text, align 1, keep-with-next
    694          u8 bcd2hex(u8 bcd)
    695          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    696            u8 hex=0;
    697            hex=(bcd>>4)*10 +(bcd&0x0f);
    698            bcd=0;
    699            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    700          }
    701          
    702          

   \                                 In section .far_func.text, align 1, keep-with-next
    703          bool Set_Clock()
    704          {
    705              //Clear Display
    706             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine15
    707             Delay1(1000);
    708             line_lcd=0;
    709              printf("\nYear>");
    710                do
    711              {
    712               line_lcd=1;
   \                     ??CrossCallReturnLabel_28:
   \   000004 8D000000              CALLF     ?Subroutine25
    713               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_46:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    714                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine81_0
    715              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_226:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_112:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_28
    716          
    717               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine44
    718              printf("\nMonth>");
    719                do
    720              {
    721               line_lcd=1;
   \                     ??CrossCallReturnLabel_106:
   \   000036 8D000000              CALLF     ?Subroutine25
    722               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_47:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    723                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    724              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_113:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_106
    725          
    726              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine16
    727               Delay1(1000);
    728                line_lcd=0;
    729              printf("\nDate>");
    730                do
    731              {
    732               line_lcd=1;
   \                     ??CrossCallReturnLabel_30:
   \   00006A 8D000000              CALLF     ?Subroutine25
    733               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_48:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    734                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    735              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_114:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_30
    736          
    737          
    738              //Clear Display
    739             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine17
    740             Delay1(1000);
    741             line_lcd=0;
    742              printf("\nDays>");
   \                     ??CrossCallReturnLabel_232:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    743                do
    744              {
    745                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    746               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    747                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    748              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_115:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    749          
    750          
    751          
    752             //Clear Display
    753             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine17
    754             Delay1(1000);
    755             line_lcd=0;
    756              printf("\nHour>");
   \                     ??CrossCallReturnLabel_233:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    757                do
    758              {
    759                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine85_0
    760               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_246:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    761                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine81_0
    762              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_225:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_116:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    763          
    764               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    765               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    766                do
    767              {
    768                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine85_0
    769               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_247:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    770                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine32
    771              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_231:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_117:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    772          
    773              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    774              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    775              do
    776              {
    777                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine85_0
    778               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_248:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    779                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine32
    780              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_230:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_118:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    781          
    782                // Set parameter to DS1307 + time byte
    783                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    784          
    785                //bool k=Check_DS1307();
    786          
    787            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    788          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_187:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_188:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_217:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine81_0
   \   000006                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_216:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine82_0
   \   000007                       ;               // Fall through to label ??Subroutine82_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    789          
    790          

   \                                 In section .far_func.text, align 1, keep-with-next
    791          u8 adj(u8 min,u8 max,u8 now)
    792          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    793             u8 adj=now;
    794             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    795             {
    796               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    797               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    798             }
    799             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    800             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    801             {
    802               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    803               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    804             }
    805             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    806             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    807          
    808             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    809          }
    810          
    811          

   \                                 In section .far_func.text, align 1, keep-with-next
    812          bool key_ok_on()
    813          {
    814            //Read Key OK
    815            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_63:
   \   000004 2635                  JRNE      L:??key_ok_on_0
    816             {
    817               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    818                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_64:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    819                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 251B                  JRC       L:??key_ok_on_0
    820                 {
    821                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    822                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000024 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_65:
   \   000028 2711                  JREQ      L:??key_ok_on_0
    823                    {
    824                       beep(2000);
   \   00002A 8D000000              CALLF     ?Subroutine37
    825                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_82:
   \   00002E 2606                  JRNE      L:??key_ok_on_3
    826                        {
    827                         hardware.lcdLed=1;
   \   000030 8D000000              CALLF     ?Subroutine36
    828                         lcdLedTimer=LCDLEDON;
    829                         return FALSE;
   \                     ??CrossCallReturnLabel_77:
   \   000034 2005                  JRA       ??key_ok_on_0
    830                        }
    831                       hardware.lcdLed=1;
   \                     ??key_ok_on_3:
   \   000036 8D000000              CALLF     ?Subroutine35
    832                       lcdLedTimer=LCDLEDON;
    833          
    834                      return TRUE;   //if realease retrun true
    835                    }
    836                 }
    837             }
   \                     ??CrossCallReturnLabel_74:
   \   00003A 87                    RETF
    838          
    839            return FALSE;
   \                     ??key_ok_on_0:
   \   00003B 4F                    CLR       A
   \   00003C 87                    RETF
    840          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_197:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    841          
    842          
    843          

   \                                 In section .far_func.text, align 1, keep-with-next
    844           bool key_plus_on()
    845          {
    846            //Read Key OK
    847              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_71:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
    848               {
    849               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    850                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_92:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_70:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    851                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
    852                  {
    853                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_67:
   \   000026 2711                  JREQ      L:??key_plus_on_0
    854                    {
    855                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine37
    856                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_84:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
    857                        {
    858                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine36
    859                         lcdLedTimer=LCDLEDON;
    860                         return FALSE;
   \                     ??CrossCallReturnLabel_79:
   \   000032 2005                  JRA       ??key_plus_on_0
    861                        }
    862                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine35
    863                        lcdLedTimer=LCDLEDON;
    864          
    865                      return TRUE;
    866                    }
    867                  }
    868               }
   \                     ??CrossCallReturnLabel_76:
   \   000038 87                    RETF
    869          
    870            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    871          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData
    872          
    873          

   \                                 In section .far_func.text, align 1, keep-with-next
    874            bool key_minus_on()
    875          {
    876            //Read Key OK
    877             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_73:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
    878               {
    879               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    880                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_91:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_72:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    881                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
    882                  {
    883                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_66:
   \   000026 2711                  JREQ      L:??key_minus_on_0
    884                   {
    885                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine37
    886                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_83:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
    887                       {
    888                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine36
    889                        lcdLedTimer=LCDLEDON;
    890                        return FALSE;
   \                     ??CrossCallReturnLabel_78:
   \   000032 2005                  JRA       ??key_minus_on_0
    891                       }
    892                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine35
    893                     lcdLedTimer=LCDLEDON;
    894                     return TRUE;
    895                   }
    896                  }
    897               }
   \                     ??CrossCallReturnLabel_75:
   \   000038 87                    RETF
    898          
    899            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    900          }
    901          
    902          

   \                                 In section .far_func.text, align 1, keep-with-next
    903          bool  key_ok_plus()
    904          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    905            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_24:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
    906            {
    907                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    908                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_93:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_25:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    909                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_94:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_219
    910                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine79
    911                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_219:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
    912                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
    913            }
    914          
    915           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
    916          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    917          
    918          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 905F                  CLRW      Y
   \   000002 9097                  LD        YL, A
   \   000004                       REQUIRE ??Subroutine83_0
   \   000004                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000 AE003C                LDW       X, #0x3c
   \   000003                       REQUIRE ??Subroutine84_0
   \   000003                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 BF00                  LDW       S:?w0, X
   \   000002 93                    LDW       X, Y
   \   000003 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
    919          bool Set_Timer_On()
    920          {
    921          
    922             //clr
    923             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine17
    924             Delay1(1000);
    925             line_lcd=0;
    926             printf("\nH On>");
   \                     ??CrossCallReturnLabel_236:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On>">`
   \   000007 8D000000              CALLF     ?Subroutine43
    927              timer3=0;
    928            do
    929              {
    930               line_lcd=1;
   \                     ??CrossCallReturnLabel_103:
   \   00000B 8D000000              CALLF     ?Subroutine28
    931               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_56:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    932                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine81_0
    933              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_223:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_127:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_121:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_103
    934          
    935             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine17
    936             Delay1(1000);
    937             line_lcd=0;
    938             printf("\nMin On>");
   \                     ??CrossCallReturnLabel_237:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On>">`
   \   000041 8D000000              CALLF     ?Subroutine43
    939              timer3=0;
    940            do
    941              {
    942               line_lcd=1;
   \                     ??CrossCallReturnLabel_104:
   \   000045 8D000000              CALLF     ?Subroutine28
    943               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_57:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    944                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine32
    945              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_228:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_128:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_122:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_104
    946          
    947             //Save data to eeprom
    948               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A410                  AND       A, #0x10
   \   000074 2608                  JRNE      L:??Set_Timer_On_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA08                  OR        A, #0x8
   \   00007C 2006                  JRA       ??Set_Timer_On_3
    949                 else status.daily=0;
   \                     ??Set_Timer_On_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4F7                  AND       A, #0xf7
   \                     ??Set_Timer_On_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    950               EEPROM_INIT();
    951              //u8 temp =*(u8*)(&status);
    952              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    953               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    954               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    955               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    956               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    957               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    958                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_1:
   \   000088 C60000                LD        A, L:daily_hour_on
   \   00008B 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_242:
   \   00008F C60000                LD        A, L:daily_minute_on
   \   000092 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_156:
   \   000096 CF0000                LDW       L:time_on, X
    959                 change=TRUE;
   \   000099 35010000              MOV       L:change, #0x1
    960          
    961             return TRUE;
   \   00009D A601                  LD        A, #0x1
   \   00009F 87                    RETF
    962          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 9097                  LD        YL, A
   \   000002 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_210:
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_202:
   \   000008 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_184:
   \   00000C CE0000                LDW       X, L:status
   \   00000F 9F                    LD        A, XL
   \   000010 AE4001                LDW       X, #0x4001
   \   000013 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_183:
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    963          

   \                                 In section .far_func.text, align 1, keep-with-next
    964          bool Set_Timer_Off()
    965          {
    966          
    967              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine17
    968              Delay1(1000);
    969              line_lcd=0;
    970              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_234:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine43
    971               timer3=0;
    972            do
    973              {
    974               line_lcd=1;
   \                     ??CrossCallReturnLabel_101:
   \   00000B 8D000000              CALLF     ?Subroutine27
    975               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_53:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    976                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine81_0
    977              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_224:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_125:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_119:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_101
    978          
    979            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine17
    980             Delay1(1000);
    981             line_lcd=0;
    982             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_235:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   000041 8D000000              CALLF     ?Subroutine43
    983             timer3=0;
    984            do
    985              {
    986               line_lcd=1;
   \                     ??CrossCallReturnLabel_102:
   \   000045 8D000000              CALLF     ?Subroutine27
    987               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_54:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    988                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine32
    989              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_229:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_126:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_120:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_102
    990          
    991            //Save data to eeprom
    992               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A410                  AND       A, #0x10
   \   000074 2608                  JRNE      L:??Set_Timer_Off_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA08                  OR        A, #0x8
   \   00007C 2006                  JRA       ??Set_Timer_Off_3
    993                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4F7                  AND       A, #0xf7
   \                     ??Set_Timer_Off_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    994               EEPROM_INIT();
    995              //u8 temp =*(u8*)(&status);
    996              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    997               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    998               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    999               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   1000               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   1001               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1002                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_2:
   \   000088 C60000                LD        A, L:daily_hour_off
   \   00008B 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_241:
   \   00008F C60000                LD        A, L:daily_minute_off
   \   000092 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_155:
   \   000096 CF0000                LDW       L:time_off, X
   1003                 change=TRUE;
   \   000099 35010000              MOV       L:change, #0x1
   1004               return TRUE;
   \   00009D A601                  LD        A, #0x1
   \   00009F 87                    RETF
   1005          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   1006          
   1007          /*
   1008               //Computing time_long_on
   1009          
   1010               u8 hour=daily_hour_on;
   1011               u8 minute=daily_minute_on;
   1012               daily_long_on=0;
   1013               do
   1014               {
   1015                    daily_long_on++;
   1016                    minute++;
   1017                    if (minute==60)
   1018                    {
   1019                      minute=0;
   1020                      hour++;
   1021                    }
   1022                    if(hour==24) hour=0;
   1023          
   1024               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   1025          
   1026                //Display daily_long_on
   1027              LCDInstr(0x01);
   1028              Delay1(1000);
   1029              line_lcd=0;
   1030              printf("\nLong :");
   1031          
   1032                do
   1033              {
   1034               line_lcd=1;
   1035               printf("\n%d",daily_long_on);
   1036                 //daily_long_on=adj(0,1440,daily_long_on);
   1037              } while (!key_ok_on());
   1038          
   1039              time_on=daily_hour_on*60+daily_minute_on;
   1040              time_off= daily_hour_off*60+daily_minute_off;
   1041              //Save data to eeprom
   1042                status.daily=1;
   1043               EEPROM_INIT();
   1044              //u8 temp =*(u8*)(&status);
   1045              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   1046               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1047               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1048               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   1049               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   1050               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   1051               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   1052               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1053          
   1054             return TRUE;
   1055          
   1056          }
   1057            */
   1058          

   \                                 In section .far_func.text, align 1, keep-with-next
   1059          void SaveStatus()
   1060          {
   1061            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     ?Subroutine74
   1062            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \                     ??CrossCallReturnLabel_203:
   \   000004 8D000000              CALLF     ?Subroutine52
   1063            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   \                     ??CrossCallReturnLabel_145:
   \   000008 CE0000                LDW       X, L:status
   \   00000B 9F                    LD        A, XL
   \   00000C AE4001                LDW       X, #0x4001
   \   00000F 8D000000              CALLF     ?Subroutine52
   1064            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_146:
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 AC000000              JPF       FLASH_Lock
   1065          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_182:
   \   000004 87                    RETF
   1066          
   1067          

   \                                 In section .far_func.text, align 1, keep-with-next
   1068          void SaveProgram ()
   1069          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
   1070               char *pp = (char*)&programpoint[0];
   1071              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1072             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1073             {
   1074              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 8D000000              CALLF     ?Subroutine56
   1075             }
   \                     ??CrossCallReturnLabel_159:
   \   000015 25F2                  JRC       L:??SaveProgram_0
   1076              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 8D000000              CALLF     FLASH_Lock
   1077          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 1C4002                ADDW      X, #0x4002
   \   000003 8D000000              CALLF     L:?sext32_l0_x
   \   000007 8D000000              CALLF     FLASH_ProgramByte
   \   00000B B600                  LD        A, S:?b8
   \   00000D 4C                    INC       A
   \   00000E B700                  LD        S:?b8, A
   \   000010 A128                  CP        A, #0x28
   \   000012 87                    RETF
   1078          
   1079          

   \                                 In section .far_func.text, align 1, keep-with-next
   1080          void ReadProgram()
   1081          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1082              char *pp = (char*)&programpoint[0];
   1083            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1084             {
   1085               *(pp+i)=FLASH_ReadByte( EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1086             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A128                  CP        A, #0x28
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1087          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1088          
   1089          

   \                                 In section .far_func.text, align 1, keep-with-next
   1090          void ResetProgram()
   1091          {
   \                     ResetProgram:
   \   000000 3B0000                PUSH      S:?b8
   1092          
   1093              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1094             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1095             {
   1096              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,0);
   \                     ??ResetProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A B600                  LD        A, S:?b8
   \   00000C 41                    EXG       A, XL
   \   00000D 8D000000              CALLF     ?Subroutine56
   1097             }
   \                     ??CrossCallReturnLabel_158:
   \   000011 25F6                  JRC       L:??ResetProgram_0
   1098              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 8D000000              CALLF     FLASH_Lock
   1099          
   1100               //Reload ProgrmaPoint
   1101             ReadProgram();
   \   000019 8D000000              CALLF     ReadProgram
   1102          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF
   1103          

   \                                 In section .far_func.text, align 1, keep-with-next
   1104          void CheckProgramPoint()
   1105          {
   \                     CheckProgramPoint:
   \   000000 8D000000              CALLF     L:?push_w4
   1106             if(status.manu) return;
   \   000004 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_204:
   \   000008 2703                  JREQ      ??lb_3
   \   00000A CC0000                JP        L:??CheckProgramPoint_0
   1107             u16 timenow=hours*60+minutes;
   \                     ??lb_3:
   \   00000D C60000                LD        A, L:hours
   \   000010 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_243:
   \   000014 C60000                LD        A, L:minutes
   \   000017 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_157:
   \   00001B BF00                  LDW       S:?w4, X
   1108             status.on=0;
   \   00001D CE0000                LDW       X, L:status
   \   000020 01                    RRWA      X, A
   \   000021 A4FD                  AND       A, #0xfd
   \   000023 02                    RLWA      X, A
   \   000024 CF0000                LDW       L:status, X
   1109              //u8 daytoday;
   1110               for( u8 i=0; i<8;i++)
   \   000027 3F00                  CLR       S:?b6
   1111               {
   1112                  //For Daily Allarm
   1113                 if(programpoint[i].day==8)
   \                     ??CheckProgramPoint_1:
   \   000029 5F                    CLRW      X
   \   00002A 41                    EXG       A, XL
   \   00002B B600                  LD        A, S:?b6
   \   00002D 41                    EXG       A, XL
   \   00002E 9093                  LDW       Y, X
   \   000030 AE0005                LDW       X, #0x5
   \   000033 8D000000              CALLF     ??Subroutine84_0
   \                     ??CrossCallReturnLabel_239:
   \   000037 1C0000                ADDW      X, #programpoint
   \   00003A BF00                  LDW       S:?w1, X
   \   00003C 92C600                LD        A, [S:?w1.w]
   \   00003F A108                  CP        A, #0x8
   \   000041 266D                  JRNE      L:??CheckProgramPoint_2
   1114                 {
   1115                  int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   000043 5C                    INCW      X
   \   000044 F6                    LD        A, (X)
   \   000045 5F                    CLRW      X
   \   000046 97                    LD        XL, A
   \   000047 9093                  LDW       Y, X
   \   000049 8D000000              CALLF     ??Subroutine83_0
   \                     ??CrossCallReturnLabel_240:
   \   00004D 9093                  LDW       Y, X
   \   00004F BE00                  LDW       X, S:?w1
   \   000051 1C0002                ADDW      X, #0x2
   \   000054 F6                    LD        A, (X)
   \   000055 5F                    CLRW      X
   \   000056 97                    LD        XL, A
   \   000057 BF00                  LDW       S:?w0, X
   \   000059 93                    LDW       X, Y
   \   00005A 72BB0000              ADDW      X, S:?w0
   \   00005E 9093                  LDW       Y, X
   1116                  int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   \   000060 BE00                  LDW       X, S:?w1
   \   000062 1C0003                ADDW      X, #0x3
   \   000065 F6                    LD        A, (X)
   \   000066 5F                    CLRW      X
   \   000067 97                    LD        XL, A
   \   000068 BF00                  LDW       S:?w2, X
   \   00006A AE003C                LDW       X, #0x3c
   \   00006D BF00                  LDW       S:?w0, X
   \   00006F BE00                  LDW       X, S:?w2
   \   000071 8D000000              CALLF     L:?mul16_x_x_w0
   \   000075 BF00                  LDW       S:?w0, X
   \   000077 BE00                  LDW       X, S:?w1
   \   000079 1C0004                ADDW      X, #0x4
   \   00007C F6                    LD        A, (X)
   \   00007D 5F                    CLRW      X
   \   00007E 97                    LD        XL, A
   \   00007F BF00                  LDW       S:?w1, X
   \   000081 BE00                  LDW       X, S:?w0
   \   000083 72BB0000              ADDW      X, S:?w1
   \   000087 BF00                  LDW       S:?w0, X
   1117                      do
   1118                        {
   1119                         if (timeon == timenow)
   \                     ??CheckProgramPoint_3:
   \   000089 90B300                CPW       Y, S:?w4
   \   00008C 2611                  JRNE      L:??CheckProgramPoint_4
   1120                          {
   1121                            power = i;
   \   00008E B600                  LD        A, S:?b6
   \   000090 C70000                LD        L:power, A
   1122                            status.on=1;
   \   000093 CE0000                LDW       X, L:status
   \   000096 01                    RRWA      X, A
   \   000097 AA02                  OR        A, #0x2
   \   000099 02                    RLWA      X, A
   \   00009A CF0000                LDW       L:status, X
   1123                           break;
   \   00009D 2011                  JRA       L:??CheckProgramPoint_2
   1124                          }
   1125                         timeon ++;
   \                     ??CheckProgramPoint_4:
   \   00009F 93                    LDW       X, Y
   \   0000A0 5C                    INCW      X
   \   0000A1 9093                  LDW       Y, X
   1126                        if (timeon == 1441) timeon = 0;
   \   0000A3 90A305A1              CPW       Y, #0x5a1
   \   0000A7 2602                  JRNE      L:??CheckProgramPoint_5
   \   0000A9 905F                  CLRW      Y
   1127                        } while (!(timeon==timeoff));
   \                     ??CheckProgramPoint_5:
   \   0000AB 90B300                CPW       Y, S:?w0
   \   0000AE 26D9                  JRNE      L:??CheckProgramPoint_3
   1128                  }
   1129          
   1130                     // for Day of the Week Allarm
   1131                  else if (programpoint[i].day== days) //Point is Weekly Mode
   1132                  {
   1133          
   1134                  }
   1135                 // for Monthly Allarm
   1136                  else if (programpoint[i].day == 9)//Point is Monthly Mode
   1137                   {
   1138                   }
   1139          
   1140          
   1141               }
   \                     ??CheckProgramPoint_2:
   \   0000B0 B600                  LD        A, S:?b6
   \   0000B2 4C                    INC       A
   \   0000B3 B700                  LD        S:?b6, A
   \   0000B5 A108                  CP        A, #0x8
   \   0000B7 2403                  JRNC      ??lb_4
   \   0000B9 CC0000                JP        L:??CheckProgramPoint_1
   \                     ??lb_4:
   \                     ??CheckProgramPoint_0:
   \   0000BC AC000000              JPF       L:?epilogue_w4
   1142          
   1143          
   1144          
   1145          
   1146          }
   1147          
   1148          

   \                                 In section .far_func.text, align 1, keep-with-next
   1149          bool Read_Allarm()
   1150          {
   1151             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1152              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1153             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1154              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1155             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1156              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1157             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1158              if(daily_hour_off > 59) return FALSE;
   1159             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1160              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1161             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1162              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1163             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1164              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1165            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1166          }
   1167          

   \                                 In section .far_func.text, align 1, keep-with-next
   1168          void EEPROM_INIT()
   1169          {
   1170            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1171            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1172            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1173          
   1174          
   1175          
   1176          }
   1177          
   1178          

   \                                 In section .far_func.text, align 1, keep-with-next
   1179          void GpioConfiguration()
   1180          {
   1181          
   1182            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1183          
   1184            // ADC PE6 NEW PB0
   1185            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1186          
   1187            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1188            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1189          
   1190            //PD0 Led
   1191            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine58
   1192            //I2C
   1193            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_168:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1194            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine62
   1195            // Remap Pins pb4,pb5  sda,scl ;
   1196          
   1197             //Init KEY OK,PLUS,MINUS
   1198            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_175:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine62
   1199            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_176:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine62
   1200            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_177:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1201          
   1202            //Init DS18b20 data pin
   1203            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine58
   1204          
   1205            // Power Pin
   1206             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_167:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine58
   1207          
   1208            // lcdLed Pin
   1209             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_LOW_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_166:
   \   00006B 35800000              MOV       S:?b0, #0x80
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1210          
   1211          
   1212          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1213          

   \                                 In section .far_func.text, align 1, keep-with-next
   1214          void InitClk()
   1215          {
   1216            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1217            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1218            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1219            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1220            CLK_SOURCE_HSI,       // Switch to internal timer.
   1221            DISABLE,              // Disable the clock switch interrupt.
   1222            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1223          
   1224            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine63
   1225            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_178:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine63
   1226            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_179:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine63
   1227            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_180:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine63
   1228            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_181:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1229          
   1230          
   1231          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1232          
   1233          
   1234          /*
   1235          void InitAdc()
   1236          {
   1237               ADC1_DeInit();
   1238               ADC1_StartConversion();
   1239          
   1240               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1241               //           ADC1_CHANNEL_0,
   1242               //           ADC1_PRESSEL_FCPU_D4,
   1243               //            ADC1_EXTTRIG_TIM,
   1244          
   1245          
   1246               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1247               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1248                                      ADC1_CHANNEL_0,
   1249                                      ADC1_ALIGN_RIGHT
   1250                                     );
   1251          
   1252          
   1253               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1254          
   1255          
   1256               //ADC1_Cmd (ENABLE);
   1257               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1258               ADC1_StartConversion();
   1259               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1260          
   1261          }
   1262          */
   1263          
   1264          
   1265          
   1266          /*
   1267          void InitUart()
   1268          {
   1269             UART2_DeInit();
   1270             UART2_Init((u32)9600,
   1271                        UART2_WORDLENGTH_8D,
   1272                        UART2_STOPBITS_1,
   1273                        UART2_PARITY_NO,
   1274                        UART2_SYNCMODE_CLOCK_DISABLE,
   1275                        UART2_MODE_TXRX_ENABLE
   1276                          );
   1277          
   1278             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1279             UART2_Cmd(ENABLE);
   1280          
   1281            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1282          }
   1283            */
   1284          
   1285          
   1286          /*
   1287          void SendChar( u8 Char)
   1288          {
   1289             UART2->DR = Char;
   1290            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1291          }
   1292          
   1293           */
   1294          
   1295           /*
   1296          void Send_Hello()
   1297          {
   1298            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1299             Delay1(10);
   1300             sprintf(data,"Hello");
   1301              u8 i=0;
   1302            do
   1303           {
   1304            SendChar(data[i++]);
   1305           } while (data[i]!=0);
   1306            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1307            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1308          
   1309          
   1310          
   1311          }
   1312          
   1313          
   1314          
   1315          
   1316          
   1317          void SendData()
   1318          {
   1319           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1320            Delay1(10);
   1321            u8 i=0;
   1322            sprintf(data,"%d %c",adcdata,0x0d);
   1323           do
   1324           {
   1325             SendChar(data[i++]);
   1326          
   1327           } while (data[i]!=0);
   1328             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1329            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1330            rx_data=0;
   1331          }
   1332          */
   1333          
   1334          
   1335           /*
   1336          u16 Average()
   1337          {
   1338           //Find average in measure
   1339            u8 i=0;
   1340            u16 Summa=0;
   1341            do
   1342            {
   1343             Summa+=measure[i++];
   1344            } while ( measure[i]!=0);
   1345             if(i!=0) Summa=Summa/i;
   1346             return Summa;
   1347          }
   1348             */
   1349          

   \                                 In section .far_func.text, align 1, keep-with-next
   1350          void LCDDataOut(u8 data)
   1351          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1352            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_16:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_268
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine88_0
   1353            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_268:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_15:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_269
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine88_0
   1354            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_269:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_14:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_270
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine88_0
   1355            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_270:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_13:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_271
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine88_0
   1356          }
   \                     ??CrossCallReturnLabel_271:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_277:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1357          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_215:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine88_0
   \   000002                       ;               // Fall through to label ??Subroutine88_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1358          void InitLcd()
   1359          {
   1360           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine9
   1361            LCD_RW(0);
   1362            LCD_RS(0);
   \                     ??CrossCallReturnLabel_18:
   \   000006 8D000000              CALLF     ?Subroutine10
   1363            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_266:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine14
   1364          
   1365            LCDInstrNibble(0x03);
   1366             Delay1(10);
   1367            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_27:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1368             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine14
   1369            LCDInstrNibble(0x03);
   1370             Delay1(10);
   1371          
   1372             //Line 4
   1373            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_26:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1374            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1375            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1376            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1377          
   1378            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1379            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1380          
   1381            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine19
   1382            Delay1(250);
   1383          
   1384            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_32:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1385            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1386          
   1387          
   1388          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_194:
   \   000004 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_275:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_274:
   \   00000A 87                    RETF
   1389          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_272:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_222:
   \   00000D                       REQUIRE ??Subroutine80_0
   \   00000D                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_221:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1390          void LCDInstr(u8 Instr)
   1391          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1392            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine10
   1393            LCD_RW(0);
   \                     ??CrossCallReturnLabel_264:
   \   000009 2000                  JRA       ?Subroutine0
   1394            LCDDataOut(Instr>>4);
   1395            PulseEnable();
   1396            LCDDataOut(Instr & 0x0F);
   1397            PulseEnable();
   1398          }
   1399          

   \                                 In section .far_func.text, align 1, keep-with-next
   1400          void LCDData(u8 Data)
   1401          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1402            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine8
   1403            LCD_RW(0);
   \                     ??CrossCallReturnLabel_12:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1404            LCDDataOut(Data>>4);
   1405            PulseEnable() ;
   1406            LCDDataOut(Data & 0x0F) ;
   1407            PulseEnable();
   1408          }
   1409          

   \                                 In section .far_func.text, align 1, keep-with-next
   1410          void LCDInstrNibble(u8 Instr)
   1411          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1412            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine9
   1413            LCD_RW(0);
   1414            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_17:
   \   00000B AC000000              JPF       ??Subroutine80_0
   1415            PulseEnable();
   1416          }
   1417          

   \                                 In section .far_func.text, align 1, keep-with-next
   1418          void PulseEnable(void)
   1419          {
   1420            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1421             Delay1(1);
   1422            LCD_EN(1);
   1423             Delay1(1);
   1424            LCD_EN(0);
   \                     ??CrossCallReturnLabel_5:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine88_0
   1425             Delay1(1);
   \                     ??CrossCallReturnLabel_267:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1426          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_276:
   \   000006 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_255:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_254:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1427          

   \                                 In section .far_func.text, align 1, keep-with-next
   1428          void LCD_Busy(void)
   1429          {
   1430             //set Port D7 as Input
   1431             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1432             //Set Read
   1433             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine8
   1434             LCD_RS(0);
   \                     ??CrossCallReturnLabel_11:
   \   000013 8D000000              CALLF     ?Subroutine10
   1435             // Read Busy Flag
   1436                timer2=0;
   \                     ??CrossCallReturnLabel_265:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1437             do
   1438             {
   1439             // Enable set
   1440               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1441                Delay1(1);
   1442               LCD_EN(1);
   1443                Delay1(1);
   1444             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_6:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1445                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1446                //Clear read
   1447              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine88_0
   1448             //set Port D7 as Output
   1449             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_273:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1450          
   1451          }
   1452          
   1453          

   \                                 In section .far_func.text, align 1, keep-with-next
   1454          void LCD(u8 data)
   1455           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1456             //  static u8 linet=0;
   1457          
   1458          
   1459               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2674                  JRNE      L:??CrossCallReturnLabel_252
   1460               {
   1461          
   1462                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 272C                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2735                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 273E                  JREQ      L:??LCD_3
   \   000018 2046                  JRA       L:??LCD_4
   1463                   {
   1464                   case 0:
   1465                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1466                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1467                      {
   1468                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1469                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     ?Subroutine7
   1470                         Delay1(1);
   1471                      }
   \                     ??CrossCallReturnLabel_249:
   \   000030 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_37:
   \   000034 25EC                  JRC       L:??LCD_5
   1472                     LCDInstr(0x80 | 0x00);
   \   000036 A680                  LD        A, #0x80
   \   000038 8D000000              CALLF     ?Subroutine69
   1473                     count=0;
   1474                     break;
   \                     ??CrossCallReturnLabel_189:
   \   00003C 2022                  JRA       L:??LCD_4
   1475                   case 1:
   1476                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00003E A6C0                  LD        A, #0xc0
   \   000040 8D000000              CALLF     LCDInstr
   1477                     count=20;
   \   000044 35140000              MOV       L:count, #0x14
   1478                     break;
   \   000048 2016                  JRA       L:??LCD_4
   1479                   case 2:
   1480                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004A A694                  LD        A, #0x94
   \   00004C 8D000000              CALLF     LCDInstr
   1481                     count=40;
   \   000050 35280000              MOV       L:count, #0x28
   1482                     break;
   \   000054 200A                  JRA       L:??LCD_4
   1483                   case 3:
   1484                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000056 A6D4                  LD        A, #0xd4
   \   000058 8D000000              CALLF     LCDInstr
   1485                     count=60;
   \   00005C 353C0000              MOV       L:count, #0x3c
   1486                     break;
   1487                   //default:
   1488                    //  LCDInstr(0x80 |0x40);    //Line 1
   1489                    }
   1490                   line_lcd++;
   \                     ??LCD_4:
   \   000060 C60000                LD        A, L:line_lcd
   \   000063 4C                    INC       A
   \   000064 C70000                LD        L:line_lcd, A
   1491                   if (line_lcd>=5)
   \   000067 A105                  CP        A, #0x5
   \   000069 250F                  JRC       L:??LCD_6
   1492                   {
   1493                    line_lcd=1;   //line >=5
   \   00006B 35010000              MOV       L:line_lcd, #0x1
   1494                    LCDInstr(0x01); //Clear LCD
   \   00006F 8D000000              CALLF     ?Subroutine78
   1495                    Delay1(2500);
   \                     ??CrossCallReturnLabel_218:
   \   000073 AE09C4                LDW       X, #0x9c4
   \   000076 8D000000              CALLF     Delay1
   1496                   }
   1497          
   1498                   Delay1(1);
   \                     ??LCD_6:
   \   00007A 8D000000              CALLF     ??Subroutine86_0
   1499          
   1500          
   1501               }
   1502          
   1503          
   1504               if (count==20)
   \                     ??CrossCallReturnLabel_252:
   \   00007E C60000                LD        A, L:count
   \   000081 A114                  CP        A, #0x14
   \   000083 260A                  JRNE      L:??LCD_7
   1505                {
   1506                  LCDInstr(0x80 | 0x40);
   \   000085 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   000087 8D000000              CALLF     LCDInstr
   1507                  Delay1(1);
   \                     ??LCD_9:
   \   00008B 5F                    CLRW      X
   \   00008C 5C                    INCW      X
   \   00008D 2020                  JRA       ??CrossCallReturnLabel_192
   1508                }
   1509                   else if(count==40)
   \                     ??LCD_7:
   \   00008F A128                  CP        A, #0x28
   \   000091 2604                  JRNE      L:??LCD_10
   1510                  {
   1511                    LCDInstr(0x80 | 0x14);
   \   000093 A694                  LD        A, #0x94
   \   000095 20F0                  JRA       ??LCD_8
   1512                    Delay1(1);
   1513                  }
   1514                    else if(count==60)
   \                     ??LCD_10:
   \   000097 A13C                  CP        A, #0x3c
   \   000099 2608                  JRNE      L:??LCD_11
   1515                    {
   1516                      LCDInstr(0x80 | 0x54);
   \   00009B A6D4                  LD        A, #0xd4
   \   00009D 8D000000              CALLF     ?Subroutine69
   1517                      count=0;
   1518                      Delay1(1);
   \                     ??CrossCallReturnLabel_190:
   \   0000A1 20E8                  JRA       ??LCD_9
   1519                    }
   1520                      else if(count >80)
   \                     ??LCD_11:
   \   0000A3 A151                  CP        A, #0x51
   \   0000A5 250C                  JRC       L:??LCD_12
   1521                        {
   1522                          count=0;
   \   0000A7 725F0000              CLR       L:count
   1523                          LCDInstr(0x01); //Clear LCD
   \   0000AB 8D000000              CALLF     ?Subroutine70
   1524                          Delay1(250);
   1525                        }
   \                     ??CrossCallReturnLabel_192:
   \   0000AF 8D000000              CALLF     Delay1
   1526          
   1527               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B3 B600                  LD        A, S:?b9
   \   0000B5 A11C                  CP        A, #0x1c
   \   0000B7 250B                  JRC       L:??LCD_13
   1528               {
   1529                 LCDData(data);
   \   0000B9 8D000000              CALLF     ?Subroutine7
   1530                  Delay1(1);
   1531                 count++;
   \                     ??CrossCallReturnLabel_250:
   \   0000BD C60000                LD        A, L:count
   \   0000C0 4C                    INC       A
   \   0000C1 C70000                LD        L:count, A
   1532               }
   1533           }
   \                     ??LCD_13:
   \   0000C4 AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine86_0
   \   000004                       ;               // Fall through to label ??Subroutine86_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_256:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1534          

   \                                 In section .far_func.text, align 1, keep-with-next
   1535          void InitDelayTimer2()
   1536          {
   1537             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1538             //Tclock 16/8=2Mhz  /20 10us
   1539                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1540                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1541                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1542                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1543                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1544          
   1545          }
   1546          

   \                                 In section .far_func.text, align 1, keep-with-next
   1547          void InitDelayTimer3()
   1548          {
   1549             //Timer 3 use for 1s Delay
   1550             //Tclock 16000000/1024=15626
   1551                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1552                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1553                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1554                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1555          
   1556               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1557          
   1558          }
   1559          
   1560          
   1561          
   1562          

   \                                 In section .far_func.text, align 1, keep-with-next
   1563          bool DS18_Write(u8 data)
   1564          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1565            disableInterrupts();
   \   000006 9B                    SIM
   1566            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1567            {
   1568             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine12
   1569             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1570             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_23:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_263
   \   00001A 8D000000              CALLF     ?Subroutine18
   1571               //else DS18(0);
   1572             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_263:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1573             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine18
   1574             //Delay1(0);
   1575            }
   \                     ??CrossCallReturnLabel_262:
   \   000029 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_38:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1576            enableInterrupts();
   \   00002F 9A                    RIM
   1577            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1578          
   1579          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine87_0
   \   000002                       ;               // Fall through to label ??Subroutine87_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_185:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1580          
   1581          

   \                                 In section .far_func.text, align 1, keep-with-next
   1582          u8  DS18_Read()
   1583          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1584              //Init DS18b20 data pin as Input
   1585          
   1586            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1587              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1588            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1589            {
   1590              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine12
   1591              Delay_us(1); //Start time slot 4,5 us
   1592              DS18(1);
   \                     ??CrossCallReturnLabel_22:
   \   00000D 8D000000              CALLF     ?Subroutine18
   1593              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_260:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1594              //Delay1(0);
   1595             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_36:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1596              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1597              //  DS18(1);  // Next bit
   1598             // Delay1(0);
   1599          
   1600            }
   \   00003D 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_39:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1601              enableInterrupts();
   \   000043 9A                    RIM
   1602              //Init DS18b20 data pin
   1603             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1604             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1605          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1606          

   \                                 In section .far_func.text, align 1, keep-with-next
   1607          bool DS18_Reset()
   1608          {
   1609             //Init Reset Pulse
   1610              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine67
   1611              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_186:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1612              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine18
   1613              //Delay1(1);
   1614              timer2=0;
   \                     ??CrossCallReturnLabel_261:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1615              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_85:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_34:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1616              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_86:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1617              {
   1618                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine40
   1619                return FALSE;
   \                     ??CrossCallReturnLabel_95:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1620              }
   1621          
   1622              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1623               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_87:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_35:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1624                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_88:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1625                 {
   1626                  hardware.ds18B20=0;
   1627                  return FALSE;
   1628                 }
   1629          
   1630              // Delay1(10);
   1631              //Delay1(20);    //25=524us
   1632               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine41
   1633              return TRUE;
   \                     ??CrossCallReturnLabel_97:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1634          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1635          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1636          u8 temperature ()
   1637          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1638          
   1639             //Init Reset Pulse
   1640               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_164:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1641             //Skip ROM Command 0xCC
   1642              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine60
   1643             //Function command  CONVERT T [44h]
   1644              DS18_Write(0x44);
   1645              //Wait util end convert
   1646              timer2=0;
   1647               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_172:
   \   000013 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_90:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_172
   1648                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1649               //u8 temp8=timer2;
   1650              //Init Reset Pulse
   1651              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_165:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1652              // Skip ROM Command 0xCC
   1653              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine59
   1654              //Function command READ SCRATCHPAD [BEh]
   1655              DS18_Write(0xBE);
   1656               u8 temp1=DS18_Read();
   1657               u8 temp2=DS18_Read();
   1658              DS18_Reset();
   \                     ??CrossCallReturnLabel_170:
   \   000033 8D000000              CALLF     DS18_Reset
   1659                u16 result = temp2*256+temp1;
   1660                temp1= (u8)(result>>3);
   1661               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1662          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_212:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_211:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_209:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1663          

   \                                 In section .far_func.text, align 1, keep-with-next
   1664          bool Read_DS18()
   1665          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1666          
   1667             //Init Reset Pulse
   1668               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_162:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1669             //Skip ROM Command 0xCC
   1670              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine60
   1671             //Function command  CONVERT T [44h]
   1672              DS18_Write(0x44);
   1673              //Wait util end convert
   1674              timer2=0;
   1675               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_171:
   \   000013 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_89:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_171
   1676                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1677               //u8 temp8=timer2;
   1678              //Init Reset Pulse
   1679              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_163:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1680              // Skip ROM Command 0xCC
   1681              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine59
   1682              //Function command READ SCRATCHPAD [BEh]
   1683              DS18_Write(0xBE);
   1684               u8 temp1=DS18_Read();
   1685               u8 temp2=DS18_Read();
   1686               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_169:
   \   000033 8D000000              CALLF     ?Subroutine61
   1687               u8 temp4=DS18_Read();
   1688               u8 temp5=DS18_Read();
   1689               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_174:
   \   000037 8D000000              CALLF     ?Subroutine61
   1690               u8 temp7=DS18_Read();
   1691               u8 temp8=DS18_Read();
   1692               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_173:
   \   00003B 8D000000              CALLF     DS18_Read
   1693          
   1694               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1695          
   1696                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1697                result2=0;
   \   000047 725F0000              CLR       L:result2
   1698                u16 result = temp2*256+temp1;
   1699                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_3:
   \   00004F C70000                LD        L:result1, A
   1700                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1701                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1702          
   1703          
   1704                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1705               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1706               //line_lcd=1;
   1707               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1708               // while (!key_ok_on());
   1709          
   1710               //u8 temp3=DS18_Read();
   1711          
   1712              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1713          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1714          

   \                                 In section .far_func.text, align 1, keep-with-next
   1715          bool DS18Set ()
   1716          {
   1717               //Init Reset Pulse
   1718              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_160:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1719             //Skip ROM Command 0xCC
   1720              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine77
   1721             //Function command  WRITE SCRATCHPAD 0x4E
   1722              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_214:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1723             //Write 3 bytes last is config reg
   1724              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1725              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1726              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1727          
   1728             //Init Reset Pulse
   1729              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_161:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1730              //Skip ROM Command 0xCC
   1731              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine77
   1732              //Function   Store in Conf Reg
   1733              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_213:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1734          
   1735          
   1736          
   1737          
   1738          
   1739          
   1740            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1741          }
   1742          
   1743          
   1744          
   1745          
   1746          
   1747          
   1748          
   1749          

   \                                 In section .far_func.text, align 1, keep-with-next
   1750          void Delay1(u16 Delay)
   1751          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1752              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1753            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1754            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1755          }
   \   00000D 87                    RETF
   1756          

   \                                 In section .far_func.text, align 1, keep-with-next
   1757           void Delay2(u16 Delay)
   1758          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1759            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1760            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1761          }
   \   00000D 87                    RETF
   1762          
   1763          

   \                                 In section .far_func.text, align 1, keep-with-next
   1764          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1765          {
   1766            //disableInterrupts();
   1767            do
   1768              {
   1769                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1770                nop();
   \   000001 9D                    NOP
   1771              }
   1772              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1773            //enableInterrupts();
   1774          }
   \   000005 87                    RETF
   1775          
   1776          

   \                                 In section .far_func.text, align 1, keep-with-next
   1777          void Display_Line(char* line)
   1778          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1779            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1780            u8 count;
   1781              //Set Cursor to First Line
   1782             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1783             count=0;
   \   000010 3F00                  CLR       S:?b10
   1784             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine86_0
   1785            do
   1786            {
   1787          
   1788              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_253:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1789               {
   1790                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine7
   1791                  Delay1(1);
   1792                 count++;
   \                     ??CrossCallReturnLabel_251:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1793               }
   1794               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1795            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_253
   1796          
   1797             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1798          
   1799          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1800          

   \                                 In section .far_func.text, align 1, keep-with-next
   1801          void Rotate_Line( char * line)
   1802          {
   1803          
   1804             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1805             char temp_next;
   1806          
   1807             do
   1808             {
   1809                temp_next=*(line+1);
   1810               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1811                //line++;
   1812                //temp_next=*line;
   1813               //*line=*line++;
   1814             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1815             line--;
   1816             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1817          
   1818          }
   \   000012 87                    RETF
   1819          

   \                                 In section .far_func.text, align 1, keep-with-next
   1820          void Clear_Line1 ()
   1821          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1822               //Set Cursor to First Line
   1823             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine6
   1824             count=0;
   1825             Delay1(1);
   1826              u8 count=0;
   1827             do
   1828             {
   1829               LCDData(' ');
   \                     ??CrossCallReturnLabel_10:
   \   000009 8D000000              CALLF     ?Subroutine5
   1830                  Delay1(1);
   1831                  count++;
   1832             }while (count<8);
   \                     ??CrossCallReturnLabel_8:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_10
   1833          
   1834          
   1835          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_191:
   \   000004 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_258:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_257:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1836          

   \                                 In section .far_func.text, align 1, keep-with-next
   1837          void Clear_Line2 ()
   1838          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1839               //Set Cursor to Second  Line
   1840             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine6
   1841             count=0;
   1842             Delay1(1);
   1843              u8 count=0;
   1844             do
   1845             {
   1846               LCDData(' ');
   \                     ??CrossCallReturnLabel_9:
   \   000009 8D000000              CALLF     ?Subroutine5
   1847                  Delay1(1);
   1848                  count++;
   1849             }while (count<8);
   \                     ??CrossCallReturnLabel_7:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_9
   1850          
   1851          
   1852          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1853          
   1854          
   1855          

   \                                 In section .far_func.text, align 1, keep-with-next
   1856          void FirstMenu()
   1857          {
   1858                // Clear Display
   1859              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_193:
   \   000004 8D000000              CALLF     ??Subroutine82_0
   1860              Delay1(250);
   1861          
   1862                line_lcd=0;
   1863                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_238:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1864                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine30
   1865                 if (!status.manu)
   \                     ??CrossCallReturnLabel_61:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1866                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1867                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1868          
   1869                 do
   1870                 {
   1871                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     pressKey
   1872          
   1873                  if(button==2)      // Plus Button
   \   000025 C60000                LD        A, L:button
   \   000028 A102                  CP        A, #0x2
   \   00002A 262C                  JRNE      L:??FirstMenu_3
   1874                  {
   1875                    if(status.manu) status.manu=0;
   \   00002C CE0000                LDW       X, L:status
   \   00002F 9F                    LD        A, XL
   \   000030 A401                  AND       A, #0x1
   \   000032 2708                  JREQ      L:??FirstMenu_4
   \   000034 CE0000                LDW       X, L:status
   \   000037 01                    RRWA      X, A
   \   000038 A4FE                  AND       A, #0xfe
   \   00003A 2006                  JRA       ??FirstMenu_5
   1876                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   00003C CE0000                LDW       X, L:status
   \   00003F 01                    RRWA      X, A
   \   000040 AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   000042 02                    RLWA      X, A
   \   000043 CF0000                LDW       L:status, X
   1877                    line_lcd=1;
   \   000046 8D000000              CALLF     ?Subroutine30
   1878                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_62:
   \   00004A 2705                  JREQ      L:??FirstMenu_6
   \   00004C AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004F 2003                  JRA       ??FirstMenu_7
   1879                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   000051 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   000054 8D000000              CALLF     printf
   1880                  }
   1881          
   1882                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000058 C60000                LD        A, L:button
   \   00005B A103                  CP        A, #0x3
   \   00005D 2705                  JREQ      L:??FirstMenu_8
   \   00005F C60000                LD        A, L:button
   \   000062 2604                  JRNE      L:??FirstMenu_9
   1883                  {
   1884                    SaveStatus();
   \                     ??FirstMenu_8:
   \   000064 AC000000              JPF       SaveStatus
   1885                    return;
   1886                  }
   1887          
   1888          
   1889                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000068 A101                  CP        A, #0x1
   \   00006A 26B5                  JRNE      L:??FirstMenu_2
   1890          
   1891                   SaveStatus();
   \   00006C 8D000000              CALLF     SaveStatus
   1892                   button=0;
   \   000070 725F0000              CLR       L:button
   1893                   ProgramMenu();
   1894          
   1895          
   1896          }
   \   000074 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_207:
   \   000008 87                    RETF
   1897          
   1898          
   1899          

   \                                 In section .far_func.text, align 1, keep-with-next
   1900          void ProgramMenu()
   1901          {
   1902            return;
   \                     ProgramMenu:
   \   000000 87                    RETF
   1903          }
   1904          
   1905          
   1906          

   \                                 In section .far_func.text, align 1, keep-with-next
   1907          void Menu (void)
   1908          {
   1909           // Clear Display
   1910              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine19
   1911              Delay1(250);
   1912              //u8 key;
   1913           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1914              Wait for Plus,Minius or OK
   1915              If plus next option from Menu on the end EXIT
   1916              If minus previous option from Menu  on the end EXIT
   1917              If OK enter to menu option
   1918              If time out about 10s exit from Menu
   1919           */
   1920          
   1921          
   1922          
   1923          
   1924          
   1925          
   1926              do {
   1927          
   1928          First_Menu:
   1929              line_lcd=0;
   \                     ??CrossCallReturnLabel_33:
   \   000004 725F0000              CLR       L:line_lcd
   1930              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1931              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine28
   1932              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_58:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1933               pressKey();
   \   000022 8D000000              CALLF     ?Subroutine54
   1934              switch (button)
   \                     ??CrossCallReturnLabel_149:
   \   000026 2713                  JREQ      L:??Menu_0
   \   000028 4A                    DEC       A
   \   000029 2709                  JREQ      L:??Menu_1
   \   00002B 4A                    DEC       A
   \   00002C 2603                  JRNE      ??lb_0
   \   00002E CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000031 CC0000                JP        L:??Menu_3
   1935                  {
   1936                  case 1: goto Second_Menu ;
   1937                   break;
   1938                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000034 8D000000              CALLF     Set_Timer_On
   1939                   break;
   \   000038 CC0000                JP        L:??Menu_3
   1940                  case 3: goto Exit_Menu;
   1941                   break;
   1942                  }
   1943                  break; //Exit Menu
   1944          
   1945          
   1946          Second_Menu:
   1947              line_lcd=0;
   \                     ??Menu_0:
   \   00003B 725F0000              CLR       L:line_lcd
   1948              printf("\nOFF     ");
   \   00003F AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000042 8D000000              CALLF     printf
   1949              line_lcd=1;
   \   000046 8D000000              CALLF     ?Subroutine27
   1950              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_55:
   \   00004A 89                    PUSHW     X
   \   00004B C60000                LD        A, L:daily_hour_off
   \   00004E 97                    LD        XL, A
   \   00004F 89                    PUSHW     X
   \   000050 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000053 8D000000              CALLF     printf
   \   000057 5B04                  ADD       SP, #0x4
   1951                pressKey();
   \   000059 8D000000              CALLF     ?Subroutine54
   1952                switch (button)
   \                     ??CrossCallReturnLabel_150:
   \   00005D 2710                  JREQ      L:??Menu_4
   \   00005F 4A                    DEC       A
   \   000060 2706                  JREQ      L:??Menu_5
   \   000062 4A                    DEC       A
   \   000063 279F                  JREQ      L:??CrossCallReturnLabel_33
   \   000065 CC0000                JP        L:??Menu_3
   1953                  {
   1954                  case 1: goto Third_Menu ;
   1955                   break;
   1956                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   000068 8D000000              CALLF     Set_Timer_Off
   1957                   break;
   \   00006C CC0000                JP        L:??Menu_3
   1958                  case 3: goto First_Menu;
   1959                   break;
   1960                  }
   1961               break; //Exit Menu
   1962          
   1963          Third_Menu:
   1964                line_lcd=0;
   \                     ??Menu_4:
   \   00006F 725F0000              CLR       L:line_lcd
   1965              printf("\nMonthly ");
   \   000073 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000076 8D000000              CALLF     printf
   1966              line_lcd=1;
   \   00007A 35010000              MOV       L:line_lcd, #0x1
   1967              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \   00007E C60000                LD        A, L:monthly_date
   \   000081 5F                    CLRW      X
   \   000082 97                    LD        XL, A
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:monthly_month
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:monthly_year
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
   1968                pressKey();
   \   000097 8D000000              CALLF     ?Subroutine54
   1969                switch (button)
   \                     ??CrossCallReturnLabel_151:
   \   00009B 2738                  JREQ      L:??Menu_6
   \   00009D 4A                    DEC       A
   \   00009E 2706                  JREQ      L:??Menu_7
   \   0000A0 4A                    DEC       A
   \   0000A1 2798                  JREQ      L:??Menu_0
   \   0000A3 CC0000                JP        L:??Menu_3
   1970                  {
   1971                  case 1: goto Fourth_Menu;
   1972                   break;
   1973                  case 2:
   1974                    {
   1975                     setData();
   \                     ??Menu_7:
   \   0000A6 8D000000              CALLF     setData
   1976                     monthly_year=y;
   \   0000AA C60000                LD        A, L:`y`
   \   0000AD C70000                LD        L:monthly_year, A
   1977                     monthly_month=m;
   \   0000B0 C60000                LD        A, L:m
   \   0000B3 C70000                LD        L:monthly_month, A
   1978                     monthly_date=d;
   \   0000B6 C60000                LD        A, L:d
   \   0000B9 C70000                LD        L:monthly_date, A
   1979                     status.monthly=1;
   \   0000BC CE0000                LDW       X, L:status
   \   0000BF 01                    RRWA      X, A
   \   0000C0 AA10                  OR        A, #0x10
   \   0000C2 8D000000              CALLF     ?Subroutine73
   1980                     status.daily=0;  // Disable Daily Alarm On date enable it
   \                     ??CrossCallReturnLabel_199:
   \   0000C6 A4F7                  AND       A, #0xf7
   \   0000C8 8D000000              CALLF     ?Subroutine73
   1981                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_200:
   \   0000CC A4FD                  AND       A, #0xfd
   \   0000CE 8D000000              CALLF     ?Subroutine1
   1982                     // Save Status and Date in EEPROM
   1983                     EEPROM_INIT();
   1984                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1985                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1986                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   1987                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   1988                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   1989                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1990                     break;
   \                     ??CrossCallReturnLabel_0:
   \   0000D2 CC0000                JP        L:??Menu_3
   1991                    }
   1992                  case 3: goto Second_Menu ;
   1993                   break;
   1994                  }
   1995               break; //Exit Menu
   1996          
   1997          
   1998          Fourth_Menu:
   1999              line_lcd=0;
   \                     ??Menu_6:
   \   0000D5 725F0000              CLR       L:line_lcd
   2000              printf("\nClock   ");
   \   0000D9 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000DC 8D000000              CALLF     ?Subroutine24
   2001              line_lcd=1;
   2002              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_244:
   \   0000E0 89                    PUSHW     X
   \   0000E1 C60000                LD        A, L:minutes
   \   0000E4 97                    LD        XL, A
   \   0000E5 89                    PUSHW     X
   \   0000E6 C60000                LD        A, L:hours
   \   0000E9 97                    LD        XL, A
   \   0000EA 89                    PUSHW     X
   \   0000EB AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EE 8D000000              CALLF     printf
   \   0000F2 5B06                  ADD       SP, #0x6
   2003                pressKey();
   \   0000F4 8D000000              CALLF     ?Subroutine54
   2004                switch (button)
   \                     ??CrossCallReturnLabel_152:
   \   0000F8 2711                  JREQ      L:??Menu_8
   \   0000FA 4A                    DEC       A
   \   0000FB 2708                  JREQ      L:??Menu_9
   \   0000FD 4A                    DEC       A
   \   0000FE 2603                  JRNE      ??lb_1
   \   000100 CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   000103 205A                  JRA       L:??Menu_3
   2005                  {
   2006                  case 1: goto Fifth_Menu ;
   2007                   break;
   2008                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000105 8D000000              CALLF     Set_Clock
   2009                   break;
   \   000109 2054                  JRA       L:??Menu_3
   2010                  case 3: goto Third_Menu;
   2011                   break;
   2012                  }
   2013               break; //Exit Menu
   2014          
   2015          
   2016          Fifth_Menu:
   2017              line_lcd=0;
   \                     ??Menu_8:
   \   00010B 725F0000              CLR       L:line_lcd
   2018              printf("\nDate    ");
   \   00010F AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   000112 8D000000              CALLF     printf
   2019              line_lcd=1;
   \   000116 8D000000              CALLF     ?Subroutine25
   2020              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_49:
   \   00011A 89                    PUSHW     X
   \   00011B C60000                LD        A, L:month
   \   00011E 97                    LD        XL, A
   \   00011F 89                    PUSHW     X
   \   000120 C60000                LD        A, L:year
   \   000123 97                    LD        XL, A
   \   000124 89                    PUSHW     X
   \   000125 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000128 8D000000              CALLF     printf
   \   00012C 5B06                  ADD       SP, #0x6
   2021                pressKey();
   \   00012E 8D000000              CALLF     ?Subroutine54
   2022                switch (button)
   \                     ??CrossCallReturnLabel_153:
   \   000132 2708                  JREQ      L:??Menu_2
   \   000134 4A                    DEC       A
   \   000135 27CE                  JREQ      L:??Menu_9
   \   000137 4A                    DEC       A
   \   000138 279B                  JREQ      L:??Menu_6
   \   00013A 2023                  JRA       L:??Menu_3
   2023                  {
   2024                  case 1: goto Exit_Menu ;
   2025                   break;
   2026                  case 2: Set_Clock();
   2027                   break;
   2028                  case 3: goto Fourth_Menu;
   2029                   break;
   2030                  }
   2031               break; //Exit Menu
   2032          
   2033          
   2034          Exit_Menu:
   2035              line_lcd=0;
   \                     ??Menu_2:
   \   00013C 725F0000              CLR       L:line_lcd
   2036              printf("\nExit OK ");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000143 8D000000              CALLF     printf
   2037              line_lcd=1;
   \   000147 35010000              MOV       L:line_lcd, #0x1
   2038              printf("\n+/-     ");
   \   00014B AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   00014E 8D000000              CALLF     printf
   2039                 pressKey();
   \   000152 8D000000              CALLF     ?Subroutine54
   2040                switch (button)
   2041                  {
   2042                  case 1: goto First_Menu;
   2043                   break;
   2044                  case 2:
   2045                   break;
   2046                  case 3: goto Fifth_Menu;
   2047                   break;
   2048                  }
   2049                 break; //Exit Menu
   2050              }    while (1);
   \                     ??CrossCallReturnLabel_154:
   \   000156 2603                  JRNE      ??lb_2
   \   000158 CC0000                JP        L:??CrossCallReturnLabel_33
   \                     ??lb_2:
   \   00015B A002                  SUB       A, #0x2
   \   00015D 27AC                  JREQ      L:??Menu_8
   2051              //exit:
   2052             Clear_Line1();
   \                     ??Menu_3:
   \   00015F 8D000000              CALLF     Clear_Line1
   2053             Clear_Line2();
   \   000163 AC000000              JPF       Clear_Line2
   2054          
   2055          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 4A                    DEC       A
   \   000008 87                    RETF
   2056          
   2057          

   \                                 In section .far_func.text, align 1, keep-with-next
   2058          void pressKey(void)
   2059          {
   2060             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2061             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2062             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine36
   2063             lcdLedTimer=LCDLEDON;
   2064             do
   2065             {
   2066                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_80:
   \   00000C 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_111:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2067                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2068                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2069             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_124:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_80
   2070          
   2071              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2072          
   2073             //return button;
   2074          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2075          
   2076          
   2077          
   2078          

   \                                 In section .far_func.text, align 1, keep-with-next
   2079          bool setData(void)
   2080          {
   \                     setData:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   2081             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000007 3F00                  CLR       S:?b8
   \   000009 35010000              MOV       S:?b10, #0x1
   \   00000D 35010000              MOV       S:?b9, #0x1
   2082             int yy;
   2083          
   2084                   //Clear Display
   2085             LCDInstr(0x01);
   \   000011 8D000000              CALLF     ?Subroutine15
   2086             Delay1(1000);
   2087             line_lcd=0;
   2088             printf("\nYear>");
   2089             y=year;
   \                     ??CrossCallReturnLabel_29:
   \   000015 C60000                LD        A, L:year
   \   000018 C70000                LD        L:`y`, A
   2090             m=month;
   \   00001B C60000                LD        A, L:month
   \   00001E C70000                LD        L:m, A
   2091             d=date;
   \   000021 C60000                LD        A, L:`date`
   \   000024 C70000                LD        L:d, A
   2092                do
   2093              {
   2094               line_lcd=1;
   \                     ??setData_0:
   \   000027 8D000000              CALLF     ?Subroutine26
   2095               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_50:
   \   00002B 89                    PUSHW     X
   \   00002C C60000                LD        A, L:m
   \   00002F 97                    LD        XL, A
   \   000030 89                    PUSHW     X
   \   000031 C60000                LD        A, L:`y`
   \   000034 97                    LD        XL, A
   \   000035 89                    PUSHW     X
   \   000036 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000039 8D000000              CALLF     printf
   \   00003D 5B06                  ADD       SP, #0x6
   2096                 y=adj(0,99,y);
   \   00003F C60000                LD        A, L:`y`
   \   000042 B700                  LD        S:?b1, A
   \   000044 35630000              MOV       S:?b0, #0x63
   \   000048 8D000000              CALLF     ??Subroutine81_0
   2097              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_227:
   \   00004C C70000                LD        L:`y`, A
   \   00004F 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_108:
   \   000053 27D2                  JREQ      L:??setData_0
   2098                  yy=y+2000;
   \   000055 C60000                LD        A, L:`y`
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A 1C07D0                ADDW      X, #0x7d0
   \   00005D BF00                  LDW       S:?w0, X
   2099              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00005F 90AE0190              LDW       Y, #0x190
   \   000063 8D000000              CALLF     L:?smod16_y_x_y
   \   000067 905D                  TNZW      Y
   \   000069 271C                  JREQ      L:??setData_1
   \   00006B 90AE0064              LDW       Y, #0x64
   \   00006F BE00                  LDW       X, S:?w0
   \   000071 8D000000              CALLF     L:?smod16_y_x_y
   \   000075 905D                  TNZW      Y
   \   000077 2712                  JREQ      L:??setData_2
   \   000079 90AE0004              LDW       Y, #0x4
   \   00007D BE00                  LDW       X, S:?w0
   \   00007F 8D000000              CALLF     L:?smod16_y_x_y
   \   000083 905D                  TNZW      Y
   \   000085 2604                  JRNE      L:??setData_2
   \                     ??setData_1:
   \   000087 35010000              MOV       S:?b8, #0x1
   2100                  y=yy-2000;
   \                     ??setData_2:
   \   00008B B600                  LD        A, S:?b1
   \   00008D AB30                  ADD       A, #0x30
   \   00008F C70000                LD        L:`y`, A
   2101                   if(y==year) month_start=month;
   \   000092 C60000                LD        A, L:year
   \   000095 C10000                CP        A, L:`y`
   \   000098 2605                  JRNE      L:??setData_3
   \   00009A C60000                LD        A, L:month
   \   00009D B700                  LD        S:?b10, A
   2102               line_lcd=0;
   \                     ??setData_3:
   \   00009F 8D000000              CALLF     ?Subroutine44
   2103              printf("\nMonth>");
   2104                do
   2105              {
   2106               line_lcd=1;
   \                     ??CrossCallReturnLabel_107:
   \   0000A3 8D000000              CALLF     ?Subroutine26
   2107               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_51:
   \   0000A7 89                    PUSHW     X
   \   0000A8 C60000                LD        A, L:m
   \   0000AB 97                    LD        XL, A
   \   0000AC 89                    PUSHW     X
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 97                    LD        XL, A
   \   0000B1 89                    PUSHW     X
   \   0000B2 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B5 8D000000              CALLF     printf
   \   0000B9 5B06                  ADD       SP, #0x6
   2108                m=adj(month_start,12,m);
   \   0000BB C60000                LD        A, L:m
   \   0000BE B700                  LD        S:?b1, A
   \   0000C0 350C0000              MOV       S:?b0, #0xc
   \   0000C4 B600                  LD        A, S:?b10
   \   0000C6 8D000000              CALLF     adj
   \   0000CA C70000                LD        L:m, A
   2109              } while (!key_ok_on());
   \   0000CD 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_109:
   \   0000D1 27D0                  JREQ      L:??CrossCallReturnLabel_107
   2110          
   2111              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000D3 C60000                LD        A, L:m
   \   0000D6 A101                  CP        A, #0x1
   \   0000D8 2718                  JREQ      L:??setData_4
   \   0000DA A103                  CP        A, #0x3
   \   0000DC 2714                  JREQ      L:??setData_4
   \   0000DE A105                  CP        A, #0x5
   \   0000E0 2710                  JREQ      L:??setData_4
   \   0000E2 A107                  CP        A, #0x7
   \   0000E4 270C                  JREQ      L:??setData_4
   \   0000E6 A108                  CP        A, #0x8
   \   0000E8 2708                  JREQ      L:??setData_4
   \   0000EA A10A                  CP        A, #0xa
   \   0000EC 2704                  JREQ      L:??setData_4
   \   0000EE A10C                  CP        A, #0xc
   \   0000F0 2606                  JRNE      L:??setData_5
   \                     ??setData_4:
   \   0000F2 351F0000              MOV       S:?b8, #0x1f
   \   0000F6 2024                  JRA       L:??setData_6
   2112               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??setData_5:
   \   0000F8 A104                  CP        A, #0x4
   \   0000FA 270C                  JREQ      L:??setData_7
   \   0000FC A106                  CP        A, #0x6
   \   0000FE 2708                  JREQ      L:??setData_7
   \   000100 A109                  CP        A, #0x9
   \   000102 2704                  JREQ      L:??setData_7
   \   000104 A10B                  CP        A, #0xb
   \   000106 2606                  JRNE      L:??setData_8
   \                     ??setData_7:
   \   000108 351E0000              MOV       S:?b8, #0x1e
   \   00010C 200E                  JRA       L:??setData_6
   2113                else
   2114                 {
   2115                   if(leap) date_end=29;
   \                     ??setData_8:
   \   00010E 3D00                  TNZ       S:?b8
   \   000110 2706                  JREQ      L:??setData_9
   \   000112 351D0000              MOV       S:?b8, #0x1d
   \   000116 2004                  JRA       L:??setData_6
   2116                    else date_end=28;
   \                     ??setData_9:
   \   000118 351C0000              MOV       S:?b8, #0x1c
   2117                 }
   2118               if( y==year && m==month) date_start=d;
   \                     ??setData_6:
   \   00011C C60000                LD        A, L:year
   \   00011F C10000                CP        A, L:`y`
   \   000122 260D                  JRNE      L:??setData_10
   \   000124 C60000                LD        A, L:month
   \   000127 C10000                CP        A, L:m
   \   00012A 2605                  JRNE      L:??setData_10
   \   00012C C60000                LD        A, L:d
   \   00012F B700                  LD        S:?b9, A
   2119              LCDInstr(0x01);
   \                     ??setData_10:
   \   000131 8D000000              CALLF     ?Subroutine16
   2120               Delay1(1000);
   2121                line_lcd=0;
   2122              printf("\nDate>");
   2123                do
   2124              {
   2125               line_lcd=1;
   \                     ??CrossCallReturnLabel_31:
   \   000135 8D000000              CALLF     ?Subroutine26
   2126               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_52:
   \   000139 89                    PUSHW     X
   \   00013A C60000                LD        A, L:m
   \   00013D 97                    LD        XL, A
   \   00013E 89                    PUSHW     X
   \   00013F C60000                LD        A, L:`y`
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B06                  ADD       SP, #0x6
   2127                 d=adj(date_start,date_end,d);
   \   00014D C60000                LD        A, L:d
   \   000150 B700                  LD        S:?b1, A
   \   000152 450000                MOV       S:?b0, S:?b8
   \   000155 B600                  LD        A, S:?b9
   \   000157 8D000000              CALLF     adj
   \   00015B C70000                LD        L:d, A
   2128              } while (!key_ok_on());
   \   00015E 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_110:
   \   000162 27D1                  JREQ      L:??CrossCallReturnLabel_31
   2129          
   2130                //Set clock keeper
   2131               //year=y;
   2132               //month=m;
   2133               //date=d;
   2134               //Set_DS1307();
   2135          
   2136            return TRUE;
   \   000164 A601                  LD        A, #0x1
   \   000166 320000                POP       S:?b10
   \   000169 AC000000              JPF       L:?epilogue_w4
   2137          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   2138          
   2139          

   \                                 In section .far_func.text, align 1, keep-with-next
   2140          void initBeep(void)
   2141          {
   2142            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2143            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2144             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2145               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2146             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2147          
   2148          }
   2149          

   \                                 In section .far_func.text, align 1, keep-with-next
   2150          void beep(u16 Interval)
   2151          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2152          
   2153           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2154               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2155            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2156          
   2157          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2158          

   \                                 In section .far_func.text, align 1, keep-with-next
   2159           PUTCHAR_PROTOTYPE
   2160          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2161            /* Place your implementation of fputc here */
   2162            /* e.g. write a character to the USART */
   2163                //USART_SendData(USART3, (u8) ch);
   2164               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2165             /* Loop until the end of transmission */
   2166              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2167            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2168          }
   2169          
   2170           #ifdef USE_FULL_ASSERT
   2171          
   2172          /**
   2173            * @brief  Reports the name of the source file and the source line number
   2174            *   where the assert_param error has occurred.
   2175            * @param file: pointer to the source file name
   2176            * @param line: assert_param error line source number
   2177            * @retval : None
   2178            */

   \                                 In section .far_func.text, align 1
   2179          void assert_failed(u8* file, u32 line)
   2180          {
   2181            /* User can add his own implementation to report the file name and line number,
   2182               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2183          
   2184            /* Infinite loop */
   2185            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2186            {
   2187          
   2188            }
   2189          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Off">`:
   \   000000 204F666600            DC8 " Off"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Sun">`:
   \   000000 2053756E00            DC8 " Sun"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Mon">`:
   \   000000 204D6F6E00            DC8 " Mon"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Tues">`:
   \   000000 205475657300          DC8 " Tues"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Wednes">`:
   \   000000 205765646E65          DC8 " Wednes"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Thurs">`:
   \   000000 205468757273          DC8 " Thurs"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Fri">`:
   \   000000 2046726900            DC8 " Fri"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Satur">`:
   \   000000 205361747572          DC8 " Satur"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Daily">`:
   \   000000 204461696C79          DC8 " Daily"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Month">`:
   \   000000 204D6F6E7468          DC8 " Month"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On>">`:
   \   000000 0A48204F6E3E          DC8 "\012H On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On>">`:
   \   000000 0A4D696E204F          DC8 "\012Min On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   2190          #endif
   2191          
   2192          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     program_number                    1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     power                             1
     line1                             8
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     Day_Week                         20
     status                            2
     hardware                          2
     programpoint                     40
     ?Subroutine36                     5
     ?Subroutine72                     9
     ?Subroutine45                     7
     ?Subroutine76                     8
     ?Subroutine43                     9
     ??Subroutine87_0                  7
     ?Subroutine79                    11
     main                            369
     ?Subroutine53                     9
     ?Subroutine41                    11
     ?Subroutine40                    11
     ?Subroutine11                     9
     ?Subroutine24                     4
     ??Subroutine85_0                 10
     ?Subroutine75                     7
     Display                         193
     Power_On                         14
     ?Subroutine42                    11
     ?Subroutine73                     9
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine47                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine51                     1
     ??Subroutine89_0                  7
     ?Subroutine50                     9
     ReadDS1307                      130
     ?Subroutine48                    11
     ?Subroutine33                    11
     ?Subroutine29                    13
     ?Subroutine23                     8
     ?Subroutine71                    10
     Check_DS1307                     78
     Set_DS1307                      108
     ?Subroutine49                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       374
     ?Subroutine44                    11
     ?Subroutine16                    11
     ?Subroutine15                    11
     ?Subroutine68                    16
     ?Subroutine32                     6
     ??Subroutine81_0                  5
     ?Subroutine17                     7
     ??Subroutine82_0                  9
     ?Subroutine78                     6
     ?Subroutine25                    10
     adj                              85
     key_ok_on                        61
     ?Subroutine37                    14
     ?Subroutine35                     7
     ?Subroutine31                    10
     key_plus_on                      59
     ?Subroutine39                     7
     ?Subroutine34                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine13                    29
     ?Subroutine46                     7
     ?Subroutine2                      4
     ??Subroutine83_0                  3
     ??Subroutine84_0                  7
     Set_Timer_On                    160
     ?Subroutine55                     7
     ?Subroutine1                     29
     ?Subroutine28                    10
     ?Subroutine74                    14
     ?Subroutine65                     9
     Set_Timer_Off                   160
     ?Subroutine27                    10
     SaveStatus                       25
     ?Subroutine52                     5
     SaveProgram                      33
     ?Subroutine56                    19
     ReadProgram                      48
     ResetProgram                     33
     CheckProgramPoint               192
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine62                     9
     ?Subroutine58                     7
     InitClk                          62
     ?Subroutine63                     9
     LCDDataOut                       87
     ?Subroutine8                      7
     ??Subroutine88_0                  5
     ?Subroutine66                     7
     ?Subroutine70                     8
     ?Subroutine10                     2
     InitLcd                          85
     ?Subroutine19                     8
     ?Subroutine14                    17
     ?Subroutine9                     11
     ?Subroutine0                     13
     ??Subroutine80_0                 10
     ?Subroutine21                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine4                     24
     ?Subroutine64                     6
     LCD_Busy                         69
     LCD                             200
     ?Subroutine69                     9
     ?Subroutine7                      4
     ??Subroutine86_0                  5
     ?Subroutine22                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine18                     2
     ?Subroutine12                    10
     ?Subroutine67                     9
     DS18_Read                        74
     ?Subroutine20                    12
     DS18_Reset                       72
     ?Subroutine38                     7
     ?Subroutine57                     7
     temperature                      63
     ?Subroutine60                    15
     ?Subroutine77                     6
     ?Subroutine59                    23
     ?Subroutine3                     21
     Read_DS18                       121
     ?Subroutine61                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine6                     13
     ?Subroutine5                     16
     Clear_Line2                      19
     FirstMenu                       117
     ?Subroutine30                     9
     ProgramMenu                       1
     Menu                            359
     ?Subroutine54                     9
     pressKey                         74
     setData                         365
     ?Subroutine26                    10
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant " Off">                5
     ?<Constant " Sun">                5
     ?<Constant " Mon">                5
     ?<Constant " Tues">               6
     ?<Constant " Wednes">             8
     ?<Constant " Thurs">              7
     ?<Constant " Fri">                5
     ?<Constant " Satur">              7
     ?<Constant " Daily">              7
     ?<Constant " Month">              7
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH On>">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On>">           9
     ?<Constant "\nH Off>">            8
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 5 768 bytes in section .far_func.text
   110 bytes in section .near.bss
    23 bytes in section .near.data
   350 bytes in section .near.rodata
 
 5 768 bytes of CODE  memory
   350 bytes of CONST memory
   133 bytes of DATA  memory

Errors: none
Warnings: none
