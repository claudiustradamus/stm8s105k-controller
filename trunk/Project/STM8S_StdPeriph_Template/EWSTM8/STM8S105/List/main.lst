###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             24/Nov/2013  21:10:19 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     72          #define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     73          #define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     74          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     75          #define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     76          #define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     77          #define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     78          
     79          #ifdef __GNUC__
     80            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     81               set to 'Yes') calls __io_putchar() */
     82            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     83          #else
     84            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     85          #endif /* __GNUC__ */
     86          
     87          
     88          
     89          
     90          #define SpecialSymbol 0x1b //Esc to start message
     91          //#define data_size 20
     92          #define key_time 8000
     93          #define key_time_ok 15000
     94          #define key_time_press 4000
     95          #define key_time_release 400
     96          #define DS_Control  0x10  // Out 1s
     97          #define time_menu 10  // 5s
     98          #define TIMEOUT_DS18B20 1000
     99          #define LCDLEDON 20
    100          //#define sync_time 30 // 30s
    101          #define power_jitter 3 //3s
    102          
    103          
    104          
    105          
    106          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    107          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    108          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    109          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    110          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    111          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    112          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    113          //char data[data_size];
    114          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    115          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    120          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    121          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    122          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    123          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    135          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    136          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    137          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    138          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    142          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    143          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    144          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          char  daily_dispaly,month_display,sync_display;
   \                     daily_dispaly:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     month_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1
    149          //bool  ds_temperature;
    150          
    151          
    152          

   \                                 In section .near.bss, align 1
    153          char line1[8];
   \                     line1:
   \   000000                       DS8 8
    154          //char string1[10];
    155          //char string2[10];

   \                                 In section .near.bss, align 1
    156          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    157          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    158          
    159          //u8 index=0;

   \                                 In section .near.bss, align 1
    160          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    161          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    162          
    163          
    164           struct   status_reg
    165           {
    166             unsigned on:1;
    167             unsigned timer_on:1;
    168             unsigned daily:1;
    169             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    170           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    171          
    172          
    173           struct
    174           {
    175             unsigned ds1307:1;
    176             unsigned ds18B20:1;
    177             unsigned buzzer:1;
    178             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    179           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    180          
    181          //time_t  ltime;
    182          //struct tm ptim;
    183          
    184          
    185          
    186          
    187          
    188          /* Private function prototypes -----------------------------------------------*/
    189          void InitHardware();
    190          void GpioConfiguration();
    191          void InitClk();
    192          void InitAdc();
    193          void InitI2C();
    194          void EEPROM_INIT();
    195          bool ReadDS1307();
    196          //void InitUart();
    197          void InitLcd();
    198          void InitDelayTimer2();
    199          void InitDelayTimer3();
    200          void Delay1( u16 Delay);
    201          void Delay2( u16 Delay);
    202          void Delay_us(u16 Delay);
    203          void LCDInstrNibble (u8 Instr);
    204          void LCDInstr(u8 Instr);
    205          void LCDDataOut(u8 data);
    206          void LCD_Busy();
    207          void PulseEnable();
    208          //void SendData();
    209          void SendChar(u8 Char);
    210          //void Send_Hello();
    211          bool Set_Clock();
    212          bool key_ok_on();
    213          bool key_plus_on();
    214          bool key_minus_on();
    215          bool key_ok_plus();
    216          bool Init_DS1307(void);
    217          bool Check_DS1307(void);
    218          bool I2C_Start(void);
    219          bool I2C_WA(u8 address);
    220          bool I2C_WD(u8 data);
    221          bool I2C_RA(u8 address);
    222          bool Set_DS1307();
    223          //bool Set_Delay_Allarm();
    224          bool Set_Timer_On();
    225          bool Set_Timer_Off();
    226          bool Read_Allarm();
    227          bool Read_DS18();
    228          bool DS18_Write( u8 data);
    229          bool DS18_Reset();
    230          bool DS18Set();
    231          u8 temperature();
    232          u8 DS18_Read();
    233          u8 convert_tobcd(u8 data);
    234          u8 I2C_RD(void);
    235          u8 adj(u8 min,u8 max,u8 now);
    236          u8 bcd2hex(u8 bcd);
    237          void Power_On(void);
    238          void Power_Off();
    239          void Save_Status();
    240          void Rotate_Line( char * line);
    241          void Display_Line(char * line);
    242          void Clear_Line1(void);
    243          void Clear_Line2(void);
    244          void Menu(void);
    245          u8 pressKey(void);
    246          void Display(void);
    247          bool setData(void);
    248          void initBeep(void);
    249          void beep(u16 Interval);
    250          
    251          
    252          
    253          u16  Average();
    254          
    255          
    256          /* Private functions ---------------------------------------------------------*/
    257          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1
    258          void main(void)
    259          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    260              /*High speed internal clock prescaler: 1*/
    261              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    262              InitClk();
   \   000003 8D000000              CALLF     InitClk
    263              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    264              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    265              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    266              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine15
    267              GPIO_WriteLow(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_38:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteLow
    268              hardware.lcdLed=0;
   \   000020 CE0000                LDW       X, L:hardware
   \   000023 01                    RRWA      X, A
   \   000024 A4F7                  AND       A, #0xf7
   \   000026 02                    RLWA      X, A
   \   000027 CF0000                LDW       L:hardware, X
    269              //InitUart();
    270               enableInterrupts();
   \   00002A 9A                    RIM
    271               initBeep();
   \   00002B 8D000000              CALLF     initBeep
    272              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    273               InitLcd();
   \   00002F 8D000000              CALLF     InitLcd
    274              //InitAdc();
    275               InitI2C();
   \   000033 8D000000              CALLF     InitI2C
    276          
    277          
    278              // Enable Timer3
    279              TIM3_Cmd(ENABLE);
   \   000037 A601                  LD        A, #0x1
   \   000039 8D000000              CALLF     TIM3_Cmd
    280          
    281              //year=bcd2hex(13);
    282              //Delay1(10000);
    283               if (!ReadDS1307())
   \   00003D 8D000000              CALLF     ReadDS1307
   \   000041 A100                  CP        A, #0x0
   \   000043 261D                  JRNE      L:??main_0
    284               {
    285                 printf("\n E2:%d",error);
   \   000045 C60000                LD        A, L:error
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004E 8D000000              CALLF     printf
   \   000052 5B02                  ADD       SP, #0x2
    286                 // Reset the CPU: Enable the watchdog and wait until it expires
    287                  hardware.ds1307=0;
   \   000054 CE0000                LDW       X, L:hardware
   \   000057 01                    RRWA      X, A
   \   000058 A4FE                  AND       A, #0xfe
   \   00005A 02                    RLWA      X, A
   \   00005B CF0000                LDW       L:hardware, X
    288                   pressKey();
   \   00005E 8D000000              CALLF     pressKey
    289                //IWDG->KR = IWDG_KEY_ENABLE;
    290                // while ( 1 );    // Wait until reset occurs from IWDG
    291               }
    292               //Send_Hello();
    293              //line_lcd=0;
    294              //printf("\nHello");
    295                hardware.lcdLed=1;
   \                     ??main_0:
   \   000062 8D000000              CALLF     ?Subroutine41
    296                 lcdLedTimer=LCDLEDON;
    297                  //GPIO_WriteLow(GPIOB,lcdLed);
    298          
    299              if (!Check_DS1307())
   \                     ??CrossCallReturnLabel_107:
   \   000066 8D000000              CALLF     Check_DS1307
   \   00006A A100                  CP        A, #0x0
   \   00006C 2624                  JRNE      L:??main_1
    300              {
    301                 if (error!=0)
   \   00006E C60000                LD        A, L:error
   \   000071 2710                  JREQ      L:??main_2
    302                 {
    303                  printf("\n E:%d",error);
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    304                   pressKey();
   \   00007F 8D000000              CALLF     pressKey
    305          
    306                 }
    307               line_lcd=0;
   \                     ??main_2:
   \   000083 725F0000              CLR       L:line_lcd
    308               printf("\nSetClock");
   \   000087 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008A 8D000000              CALLF     printf
    309                Set_Clock();
   \   00008E 8D000000              CALLF     Set_Clock
    310          
    311              }
    312          
    313          
    314                 //Read Status register from eepom and update it
    315                //size=sizeof(status);
    316               //u16 status
    317               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000092 AE4000                LDW       X, #0x4000
   \   000095 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   000099 B700                  LD        S:?b8, A
   \   00009B AE4001                LDW       X, #0x4001
   \   00009E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   0000A2 905F                  CLRW      Y
   \   0000A4 9097                  LD        YL, A
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b8
   \   0000AA 41                    EXG       A, XL
   \   0000AB 4F                    CLR       A
   \   0000AC 02                    RLWA      X, A
   \   0000AD 8D000000              CALLF     ??Subroutine83_0
   \                     ??CrossCallReturnLabel_266:
   \   0000B1 CF0000                LDW       L:status, X
    318                status_check = *(u16*)(&status);
   \   0000B4 CE0000                LDW       X, L:status
   \   0000B7 CF0000                LDW       L:status_check, X
    319              //When Start Check for Allarm and computing Daily_long_on
    320               if ( Read_Allarm() == TRUE)
   \   0000BA 8D000000              CALLF     Read_Allarm
   \   0000BE A101                  CP        A, #0x1
   \   0000C0 260B                  JRNE      L:??CrossCallReturnLabel_1
    321               {
    322                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000C2 8D000000              CALLF     ?Subroutine3
    323                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_3:
   \   0000C6 C60000                LD        A, L:daily_hour_off
   \   0000C9 8D000000              CALLF     ?Subroutine2
    324               }
    325          
    326                     //Init DS18B20
    327              DS18Set();
   \                     ??CrossCallReturnLabel_1:
   \   0000CD 8D000000              CALLF     DS18Set
    328              line_lcd=0;
   \   0000D1 725F0000              CLR       L:line_lcd
    329              if (!Read_DS18())
   \   0000D5 8D000000              CALLF     Read_DS18
   \   0000D9 A100                  CP        A, #0x0
   \   0000DB 2611                  JRNE      L:??main_3
    330              {
    331               printf("\nDS_Err_T");
   \   0000DD AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000E0 8D000000              CALLF     printf
    332                 hardware.ds18B20=0;
   \   0000E4 8D000000              CALLF     ?Subroutine43
    333                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_113:
   \   0000E8 8D000000              CALLF     pressKey
   \   0000EC 2004                  JRA       L:??CrossCallReturnLabel_115
    334              }
    335               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000EE 8D000000              CALLF     ?Subroutine44
    336          
    337              daily_dispaly=' ';
   \                     ??CrossCallReturnLabel_115:
   \   0000F2 35200000              MOV       L:daily_dispaly, #0x20
    338              month_display=' ';
   \   0000F6 35200000              MOV       L:month_display, #0x20
    339              sync_time_ds1307= TRUE;
   \   0000FA 35010000              MOV       L:sync_time_ds1307, #0x1
    340          
    341                    //Same delay if  power jitter
    342              if (status.on)
   \   0000FE CE0000                LDW       X, L:status
   \   000101 9F                    LD        A, XL
   \   000102 A501                  BCP       A, #0x1
   \   000104 2713                  JREQ      L:??main_4
    343              {
    344               line_lcd=0;
   \   000106 725F0000              CLR       L:line_lcd
    345               printf("\nWait 3s.");
   \   00010A AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   00010D 8D000000              CALLF     ?Subroutine45
    346               timer3=0;
    347               while (timer3<=power_jitter);
   \                     ??CrossCallReturnLabel_120:
   \   000111 CE0000                LDW       X, L:timer3
   \   000114 A30004                CPW       X, #0x4
   \   000117 25F8                  JRC       L:??CrossCallReturnLabel_120
    348              }
    349          
    350               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    351          
    352               // Working fuction
    353              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 month,u8 hours,u8 minutes,u8 seconds)
    354          
    355          
    356          
    357              // strcpy(line1,"Hello I am here! ");
    358              //  while(1)
    359              //  {
    360              //     Display_Line(line1);
    361              //     Delay2(20000);
    362              //  }
    363              //  while (!key_ok_on());
    364                 //sprintf(line1,"TIMER ON ");
    365          
    366               /* Main Loop*/
    367          
    368              while(1)
    369              {
    370          
    371          
    372                if(key_ok_on()) Menu();
   \                     ??main_4:
   \   000119 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_138:
   \   00011D 2704                  JREQ      L:??main_5
   \   00011F 8D000000              CALLF     Menu
    373                if(key_plus_on()) Power_On();
   \                     ??main_5:
   \   000123 8D000000              CALLF     key_plus_on
   \   000127 A100                  CP        A, #0x0
   \   000129 2704                  JREQ      L:??main_6
   \   00012B 8D000000              CALLF     Power_On
    374                if(key_minus_on())Power_Off();
   \                     ??main_6:
   \   00012F 8D000000              CALLF     key_minus_on
   \   000133 A100                  CP        A, #0x0
   \   000135 2704                  JREQ      L:??main_7
   \   000137 8D000000              CALLF     Power_Off
    375                if(Time_Display) Display();  //
   \                     ??main_7:
   \   00013B C60000                LD        A, L:Time_Display
   \   00013E 2704                  JREQ      L:??main_8
   \   000140 8D000000              CALLF     Display
    376          
    377                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_8:
   \   000144 C60000                LD        A, L:sync_time_ds1307
   \   000147 2729                  JREQ      L:??main_9
    378                   {
    379                    if (!ReadDS1307())
   \   000149 8D000000              CALLF     ReadDS1307
   \   00014D A100                  CP        A, #0x0
   \   00014F 2619                  JRNE      L:??main_10
    380                        {
    381                          GPIO_WriteLow(GPIOD, power_pin );
   \   000151 8D000000              CALLF     ?Subroutine15
    382                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_37:
   \   000155 C60000                LD        A, L:error
   \   000158 5F                    CLRW      X
   \   000159 97                    LD        XL, A
   \   00015A 89                    PUSHW     X
   \   00015B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00015E 8D000000              CALLF     printf
   \   000162 5B02                  ADD       SP, #0x2
    383                       //restart i2c
    384                       // Reset the CPU: Enable the watchdog and wait until it expires
    385                       IWDG->KR = IWDG_KEY_ENABLE;
   \   000164 35CC50E0              MOV       L:0x50e0, #0xcc
    386                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_11:
   \   000168 20FE                  JRA       L:??main_11
    387                        }
    388                   sync_time_ds1307=FALSE;
   \                     ??main_10:
   \   00016A 725F0000              CLR       L:sync_time_ds1307
    389                   sync_display='S';
   \   00016E 35530000              MOV       L:sync_display, #0x53
    390                   }
    391          
    392                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_9:
   \   000172 CE0000                LDW       X, L:status
   \   000175 9F                    LD        A, XL
   \   000176 A501                  BCP       A, #0x1
   \   000178 2708                  JREQ      L:??main_12
   \   00017A A608                  LD        A, #0x8
   \   00017C 8D000000              CALLF     ??Subroutine80_0
   \                     ??CrossCallReturnLabel_242:
   \   000180 2097                  JRA       L:??main_4
    393                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_12:
   \   000182 8D000000              CALLF     ?Subroutine15
    394          
    395          
    396          
    397              }
   \                     ??CrossCallReturnLabel_36:
   \   000186 2091                  JRA       L:??main_4
    398          
    399          
    400          
    401          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine44:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine43:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine41:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_193:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine68:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_207:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine74:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine15:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine5:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 905F                  CLRW      Y
   \   000005 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_201:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_269:
   \   000010 CF0000                LDW       L:time_on, X
   \   000013 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine83_0
   \   000002                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine83_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_200:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_268:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine72:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0
    402          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine78_0
   \   000004                       ;               // Fall through to label ??Subroutine78_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
    403          void Display(void)
    404          {
    405             //Clear_Line1 ();
    406              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    407               result2=0;
   \   000007 725F0000              CLR       L:result2
    408                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    409                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    410          
    411          
    412          
    413             if (status.monthly) month_display='M';
   \   000018 CE0000                LDW       X, L:status
   \   00001B 9F                    LD        A, XL
   \   00001C A508                  BCP       A, #0x8
   \   00001E 2706                  JREQ      L:??Display_1
   \   000020 354D0000              MOV       L:month_display, #0x4d
   \   000024 2004                  JRA       L:??Display_2
    414               else month_display=' ';
   \                     ??Display_1:
   \   000026 35200000              MOV       L:month_display, #0x20
    415               //Blink D
    416             if (status.on && status.daily)
   \                     ??Display_2:
   \   00002A CE0000                LDW       X, L:status
   \   00002D 9F                    LD        A, XL
   \   00002E A501                  BCP       A, #0x1
   \   000030 2750                  JREQ      L:??Display_3
   \   000032 CE0000                LDW       X, L:status
   \   000035 9F                    LD        A, XL
   \   000036 A504                  BCP       A, #0x4
   \   000038 2748                  JREQ      L:??Display_3
    417             {
    418               if (daily_dispaly=='D') daily_dispaly=' ';
   \   00003A C60000                LD        A, L:daily_dispaly
   \   00003D A144                  CP        A, #0x44
   \   00003F 2649                  JRNE      L:??Display_4
   \                     ??Display_5:
   \   000041 35200000              MOV       L:daily_dispaly, #0x20
    419                else daily_dispaly='D';
    420             }
    421              else if (status.daily) daily_dispaly='D';
    422               else daily_dispaly=' ';
    423               if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,sync_display,daily_dispaly,month_display);
   \                     ??Display_6:
   \   000045 C60000                LD        A, L:sync_display
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A BF00                  LDW       S:?w1, X
   \   00004C C60000                LD        A, L:daily_dispaly
   \   00004F 97                    LD        XL, A
   \   000050 BF00                  LDW       S:?w0, X
   \   000052 C60000                LD        A, L:month_display
   \   000055 97                    LD        XL, A
   \   000056 90CE0000              LDW       Y, L:hardware
   \   00005A 909F                  LD        A, YL
   \   00005C A502                  BCP       A, #0x2
   \   00005E 89                    PUSHW     X
   \   00005F 272F                  JREQ      L:??Display_7
   \   000061 8D000000              CALLF     L:?push_w0
   \   000065 8D000000              CALLF     L:?push_w1
   \   000069 C60000                LD        A, L:result2
   \   00006C 97                    LD        XL, A
   \   00006D 89                    PUSHW     X
   \   00006E C60000                LD        A, L:result1
   \   000071 97                    LD        XL, A
   \   000072 89                    PUSHW     X
   \   000073 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000077 AE0000                LDW       X, #line1
   \   00007A 8D000000              CALLF     sprintf
   \   00007E 5B0A                  ADD       SP, #0xa
   \   000080 2023                  JRA       L:??Display_8
   \                     ??Display_3:
   \   000082 CE0000                LDW       X, L:status
   \   000085 9F                    LD        A, XL
   \   000086 A504                  BCP       A, #0x4
   \   000088 27B7                  JREQ      L:??Display_5
   \                     ??Display_4:
   \   00008A 35440000              MOV       L:daily_dispaly, #0x44
   \   00008E 20B5                  JRA       L:??Display_6
    424                else sprintf(line1,"\n%c%c%c",sync_display,daily_dispaly,month_display);
   \                     ??Display_7:
   \   000090 8D000000              CALLF     L:?push_w0
   \   000094 8D000000              CALLF     L:?push_w1
   \   000098 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   00009C AE0000                LDW       X, #line1
   \   00009F 8D000000              CALLF     sprintf
   \   0000A3 5B06                  ADD       SP, #0x6
    425          
    426             line_lcd=0;
   \                     ??Display_8:
   \   0000A5 725F0000              CLR       L:line_lcd
    427             printf(line1);
   \   0000A9 AE0000                LDW       X, #line1
   \   0000AC 8D000000              CALLF     ?Subroutine27
    428          
    429             line_lcd=1;
    430             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_228:
   \   0000B0 89                    PUSHW     X
   \   0000B1 C60000                LD        A, L:minutes
   \   0000B4 97                    LD        XL, A
   \   0000B5 89                    PUSHW     X
   \   0000B6 C60000                LD        A, L:hours
   \   0000B9 97                    LD        XL, A
   \   0000BA 89                    PUSHW     X
   \   0000BB AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000BE 8D000000              CALLF     printf
   \   0000C2 5B06                  ADD       SP, #0x6
    431          
    432          
    433             Time_Display=FALSE;
   \   0000C4 725F0000              CLR       L:Time_Display
    434             sync_display=' ';
   \   0000C8 35200000              MOV       L:sync_display, #0x20
    435          }
   \   0000CC 87                    RETF
    436          

   \                                 In section .far_func.text, align 1
    437          void Power_On()
    438          {
    439            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine39
    440            status.daily=0; //Off Daily timer
    441            status.monthly=0; //Off Monthly alarm
    442            Save_Status();
   \                     ??CrossCallReturnLabel_99:
   \   00000A AC000000              JPF       Save_Status
    443            //hardware.lcdLed=1;
    444          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_195:
   \   000004 A4F7                  AND       A, #0xf7
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine69:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E CE0000                LDW       X, L:status
   \   000011 01                    RRWA      X, A
   \   000012 87                    RETF
    445          

   \                                 In section .far_func.text, align 1, keep-with-next
    446          void Power_Off()
    447          {
    448            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine39
    449            status.daily=0; //Off Daily alarm
    450            status.monthly=0; //Off Monthly alarm
    451            Save_Status();
   \                     ??CrossCallReturnLabel_98:
   \   00000A AC000000              JPF       Save_Status
    452             //hardware.lcdLed=0;
    453          
    454          }
    455          

   \                                 In section .far_func.text, align 1, keep-with-next
    456          void InitI2C(void)
    457          {
    458             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    459             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    460             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    461          }
    462          

   \                                 In section .far_func.text, align 1, keep-with-next
    463          bool I2C_Start(void)
    464          {
    465             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    466                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    467              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_149:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    468                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    469                  {
    470                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    471                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    472                  }
    473                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    474          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    475          

   \                                 In section .far_func.text, align 1, keep-with-next
    476          bool I2C_WA(u8 address)
    477          {
    478            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    479                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    480                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_148:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    481                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    482                   {
    483                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    484                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    485                   }
    486                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    487          }
    488          

   \                                 In section .far_func.text, align 1, keep-with-next
    489          bool I2C_RA(u8 address)
    490          {
    491            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    492                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    493                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_150:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    494                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    495                   {
    496                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    497                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    498                   }
    499                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    500          }
    501          
    502          

   \                                 In section .far_func.text, align 1, keep-with-next
    503          bool I2C_WD(u8 data)
    504          {
    505           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    506             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    507             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_147:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    508              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    509              {
    510                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    511                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    512              }
    513               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    514          }
    515          

   \                                 In section .far_func.text, align 1, keep-with-next
    516          u8 I2C_RD(void)
    517          {
    518           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    519            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    520           //while((!(I2C->SR1 & 0x40))&&timeout);
    521           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    522           {
    523             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    524             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    525           }
    526           u8 data=I2C_ReceiveData();
    527           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    528          }
    529          
    530            /*
    531          bool Init_DS1307(void)
    532          {
    533             // Test DS1307
    534              error=0;
    535              if (!I2C_Start()) return FALSE;
    536              if(!I2C_WA(0xD0)) return FALSE;
    537              if(!I2C_WD(0x00)) return FALSE;
    538              if(!I2C_WD(0x00)) return FALSE;
    539              I2C_GenerateSTOP(ENABLE);
    540          
    541              // timeout=100;  error=4;
    542              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    543              //    if (!timeout)return FALSE ;
    544               return TRUE;
    545          }
    546             */
    547          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine82_0
   \   000001                       ;               // Fall through to label ??Subroutine82_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    548          bool  ReadDS1307(void)
    549          {        TIM3_Cmd(DISABLE);
   \                     ReadDS1307:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     TIM3_Cmd
    550                 error=0;
   \   000005 8D000000              CALLF     ?Subroutine51
    551                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_152:
   \   000009 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   00000B 4F                    CLR       A
   \   00000C 87                    RETF
    552                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   00000D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_146:
   \   000011 27F8                  JREQ      L:??ReadDS1307_1
    553                 if(!I2C_WD(0x00)) return FALSE;
   \   000013 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_262:
   \   000017 27F2                  JREQ      L:??ReadDS1307_1
    554                 I2C_GenerateSTOP(ENABLE);
   \   000019 8D000000              CALLF     ?Subroutine33
    555                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_83:
   \   00001D 27EC                  JREQ      L:??ReadDS1307_1
    556                 if(!I2C_RA(0xD0))return FALSE;
   \   00001F A6D0                  LD        A, #0xd0
   \   000021 8D000000              CALLF     I2C_RA
   \   000025 A100                  CP        A, #0x0
   \   000027 27E2                  JREQ      L:??ReadDS1307_1
    557                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000029 8D000000              CALLF     ?Subroutine32
    558                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_81:
   \   00002D C70000                LD        L:seconds, A
    559                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000030 8D000000              CALLF     ?Subroutine32
    560                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_80:
   \   000034 C70000                LD        L:minutes, A
    561                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000037 8D000000              CALLF     ?Subroutine32
    562                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_79:
   \   00003B C70000                LD        L:hours, A
    563                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00003E 8D000000              CALLF     ?Subroutine32
    564                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_78:
   \   000042 C70000                LD        L:days, A
    565                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000045 8D000000              CALLF     ?Subroutine32
    566                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_77:
   \   000049 C70000                LD        L:`date`, A
    567                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004C 8D000000              CALLF     ?Subroutine32
    568                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_76:
   \   000050 C70000                LD        L:month, A
    569                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000053 8D000000              CALLF     ?Subroutine36
    570                   I2C_GenerateSTOP(ENABLE);
    571                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_89:
   \   000057 8D000000              CALLF     I2C_RD
   \   00005B 8D000000              CALLF     bcd2hex
   \   00005F C70000                LD        L:year, A
    572          
    573               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    574               //   u8 data1 = I2C_RD();
    575                //Last read byte by I2C slave
    576               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    577               //  I2C_GenerateSTOP(ENABLE);
    578               //  temp2= I2C_RD();
    579                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   000062 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    580                    {
    581                      seconds &= 0x7f;
   \   000067 721F0000              BRES      L:seconds, #0x7
    582                      Set_DS1307();
   \   00006B 8D000000              CALLF     Set_DS1307
    583                    }
    584                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006F CE0000                LDW       X, L:hardware
   \   000072 01                    RRWA      X, A
   \   000073 AA01                  OR        A, #0x1
   \   000075 02                    RLWA      X, A
   \   000076 CF0000                LDW       L:hardware, X
    585                 TIM3_Cmd(ENABLE);
   \   000079 A601                  LD        A, #0x1
   \   00007B 8D000000              CALLF     TIM3_Cmd
    586                 return TRUE;
   \   00007F A601                  LD        A, #0x1
   \   000081 87                    RETF
    587          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_190:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    588          

   \                                 In section .far_func.text, align 1, keep-with-next
    589          bool Check_DS1307(void)
    590          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    591             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    592                 error=0;
   \   000003 725F0000              CLR       L:error
    593                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    594                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    595                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_145:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    596                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_265:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    597                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine33
    598                  //Last read byte by I2C slave
    599                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_82:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    600                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    601                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine67
    602                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_191:
   \   00003C B700                  LD        S:?b8, A
    603                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine36
    604                 I2C_GenerateSTOP(ENABLE);
    605                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_90:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    606                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    607          }
    608          

   \                                 In section .far_func.text, align 1, keep-with-next
    609          bool Set_DS1307()
    610          {
    611                 // convert hex or decimal to bcd format
    612          
    613          
    614                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine51
    615                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_151:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    616                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_144:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    617                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_261:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    618                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_153:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    619                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_154:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    620                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_155:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    621                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_156:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    622                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_157:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    623                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_158:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    624                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_159:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    625                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_263:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    626                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_264:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    627                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    628          
    629          
    630             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    631          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    632          
    633          

   \                                 In section .far_func.text, align 1, keep-with-next
    634          u8 convert_tobcd(u8 data)
    635          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    636             u8 data_second_decimal=data/10;
    637             u8 data_first_decimal=data - 10*data_second_decimal;
    638             data=16*data_second_decimal + data_first_decimal;
    639            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    640          }
    641          

   \                                 In section .far_func.text, align 1, keep-with-next
    642          u8 bcd2hex(u8 bcd)
    643          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    644            u8 hex=0;
    645            hex=(bcd>>4)*10 +(bcd&0x0f);
    646            bcd=0;
    647            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    648          }
    649          
    650          

   \                                 In section .far_func.text, align 1, keep-with-next
    651          bool Set_Clock()
    652          {
    653              //Clear Display
    654             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine19
    655             Delay1(1000);
    656             line_lcd=0;
    657              printf("\nYear>");
    658                do
    659              {
    660               line_lcd=1;
   \                     ??CrossCallReturnLabel_45:
   \   000004 8D000000              CALLF     ?Subroutine28
    661               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_63:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    662                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine76_0
    663              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_213:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_127:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_45
    664          
    665               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine46
    666              printf("\nMonth>");
    667                do
    668              {
    669               line_lcd=1;
   \                     ??CrossCallReturnLabel_121:
   \   000036 8D000000              CALLF     ?Subroutine28
    670               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_64:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    671                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    672              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_128:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_121
    673          
    674              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine20
    675               Delay1(1000);
    676                line_lcd=0;
    677              printf("\nDate>");
    678                do
    679              {
    680               line_lcd=1;
   \                     ??CrossCallReturnLabel_47:
   \   00006A 8D000000              CALLF     ?Subroutine28
    681               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_65:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    682                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    683              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_129:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_47
    684          
    685          
    686              //Clear Display
    687             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine21
    688             Delay1(1000);
    689             line_lcd=0;
    690              printf("\nDays>");
   \                     ??CrossCallReturnLabel_49:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    691                do
    692              {
    693                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    694               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    695                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    696              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_130:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    697          
    698          
    699          
    700             //Clear Display
    701             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine21
    702             Delay1(1000);
    703             line_lcd=0;
    704              printf("\nHour>");
   \                     ??CrossCallReturnLabel_50:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    705                do
    706              {
    707                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine78_0
    708               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_229:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    709                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine76_0
    710              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_212:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_131:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    711          
    712               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    713               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    714                do
    715              {
    716                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine78_0
    717               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_230:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    718                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine35
    719              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_218:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_132:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    720          
    721              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    722              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    723              do
    724              {
    725                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine78_0
    726               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_231:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    727                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine35
    728              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_217:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_133:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    729          
    730                // Set parameter to DS1307 + time byte
    731                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    732          
    733                //bool k=Check_DS1307();
    734          
    735            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    736          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_184:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_185:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine76_0
   \   000006                       ;               // Fall through to label ??Subroutine76_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_186:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_203:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    737          
    738          

   \                                 In section .far_func.text, align 1, keep-with-next
    739          u8 adj(u8 min,u8 max,u8 now)
    740          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    741             u8 adj=now;
    742             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    743             {
    744               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    745               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    746             }
    747             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    748             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    749             {
    750               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    751               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    752             }
    753             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    754             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    755          
    756             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    757          }
    758          
    759          

   \                                 In section .far_func.text, align 1, keep-with-next
    760          bool key_ok_on()
    761          {
    762            //Read Key OK
    763            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_84:
   \   000004 2629                  JRNE      L:??key_ok_on_0
    764             {
    765               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    766                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_85:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    767                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 250F                  JRC       L:??key_ok_on_0
    768                 {
    769                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    770                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000024 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_86:
   \   000028 2705                  JREQ      L:??key_ok_on_0
    771                    {
    772                       beep(2000);
   \   00002A 8D000000              CALLF     ?Subroutine38
    773                      hardware.lcdLed=1;
    774                     lcdLedTimer=LCDLEDON;
    775                      return TRUE;   //if realease retrun true
    776                    }
    777                 }
    778             }
   \                     ??CrossCallReturnLabel_95:
   \   00002E 87                    RETF
    779          
    780            return FALSE;
   \                     ??key_ok_on_0:
   \   00002F 4F                    CLR       A
   \   000030 87                    RETF
    781          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_192:
   \   00000B A601                  LD        A, #0x1
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    782          
    783          
    784          

   \                                 In section .far_func.text, align 1, keep-with-next
    785           bool key_plus_on()
    786          {
    787            //Read Key OK
    788              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_92:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2625                  JRNE      L:??key_plus_on_0
    789               {
    790               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    791                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_109:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_91:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    792                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 250B                  JRC       L:??key_plus_on_0
    793                  {
    794                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_88:
   \   000026 2705                  JREQ      L:??key_plus_on_0
    795                    {
    796                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine38
    797                       hardware.lcdLed=1;
    798                        lcdLedTimer=LCDLEDON;
    799          
    800                      return TRUE;
    801                    }
    802                  }
    803               }
   \                     ??CrossCallReturnLabel_97:
   \   00002C 87                    RETF
    804          
    805            return FALSE;
   \                     ??key_plus_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    806          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData
    807          
    808          

   \                                 In section .far_func.text, align 1, keep-with-next
    809            bool key_minus_on()
    810          {
    811            //Read Key OK
    812             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_94:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2625                  JRNE      L:??key_minus_on_0
    813               {
    814               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    815                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_108:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_93:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    816                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 250B                  JRC       L:??key_minus_on_0
    817                  {
    818                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_87:
   \   000026 2705                  JREQ      L:??key_minus_on_0
    819                   {
    820                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine38
    821                     hardware.lcdLed=1;
    822                        lcdLedTimer=LCDLEDON;
    823                     return TRUE;
    824                   }
    825                  }
    826               }
   \                     ??CrossCallReturnLabel_96:
   \   00002C 87                    RETF
    827          
    828            return FALSE;
   \                     ??key_minus_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    829          }
    830          
    831          

   \                                 In section .far_func.text, align 1, keep-with-next
    832          bool  key_ok_plus()
    833          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    834            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_41:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
    835            {
    836                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    837                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_110:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_42:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    838                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_111:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_206
    839                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine74
    840                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_206:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
    841                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
    842            }
    843          
    844           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
    845          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    846          
    847          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    848          bool Set_Timer_On()
    849          {
    850          
    851             //clr
    852             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine21
    853             Delay1(1000);
    854             line_lcd=0;
    855             printf("\nH On>");
   \                     ??CrossCallReturnLabel_53:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On>">`
   \   000007 8D000000              CALLF     ?Subroutine45
    856              timer3=0;
    857            do
    858              {
    859               line_lcd=1;
   \                     ??CrossCallReturnLabel_118:
   \   00000B 8D000000              CALLF     ?Subroutine31
    860               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_73:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    861                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine76_0
    862              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_210:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_142:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_136:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_118
    863          
    864             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    865             Delay1(1000);
    866             line_lcd=0;
    867             printf("\nMin On>");
   \                     ??CrossCallReturnLabel_54:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On>">`
   \   000041 8D000000              CALLF     ?Subroutine45
    868              timer3=0;
    869            do
    870              {
    871               line_lcd=1;
   \                     ??CrossCallReturnLabel_119:
   \   000045 8D000000              CALLF     ?Subroutine31
    872               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_74:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    873                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine35
    874              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_215:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_143:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_137:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_119
    875          
    876             //Save data to eeprom
    877               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_On_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_On_3
    878                 else status.daily=0;
   \                     ??Set_Timer_On_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_On_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    879               EEPROM_INIT();
    880              //u8 temp =*(u8*)(&status);
    881              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    882               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    883               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    884               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_220:
   \   000088 C60000                LD        A, L:daily_hour_on
   \   00008B AE4002                LDW       X, #0x4002
   \   00008E 8D000000              CALLF     ?Subroutine6
    885               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_17:
   \   000092 C60000                LD        A, L:daily_minute_on
   \   000095 AE4003                LDW       X, #0x4003
   \   000098 8D000000              CALLF     ?Subroutine4
    886               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    887                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_5:
   \   00009C 8D000000              CALLF     ?Subroutine3
    888                 change=TRUE;
   \                     ??CrossCallReturnLabel_2:
   \   0000A0 35010000              MOV       L:change, #0x1
    889          
    890             return TRUE;
   \   0000A4 A601                  LD        A, #0x1
   \   0000A6 87                    RETF
    891          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_226:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_225:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004                       REQUIRE ??Subroutine77_0
   \   000004                       ;               // Fall through to label ??Subroutine77_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_224:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_223:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    892          

   \                                 In section .far_func.text, align 1, keep-with-next
    893          bool Set_Timer_Off()
    894          {
    895          
    896              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine21
    897              Delay1(1000);
    898              line_lcd=0;
    899              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_51:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine45
    900               timer3=0;
    901            do
    902              {
    903               line_lcd=1;
   \                     ??CrossCallReturnLabel_116:
   \   00000B 8D000000              CALLF     ?Subroutine30
    904               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_70:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    905                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine76_0
    906              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_211:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_140:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_134:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_116
    907          
    908            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    909             Delay1(1000);
    910             line_lcd=0;
    911             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_52:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   000041 8D000000              CALLF     ?Subroutine45
    912             timer3=0;
    913            do
    914              {
    915               line_lcd=1;
   \                     ??CrossCallReturnLabel_117:
   \   000045 8D000000              CALLF     ?Subroutine30
    916               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_71:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    917                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine35
    918              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_216:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_141:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_135:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_117
    919          
    920            //Save data to eeprom
    921               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_Off_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_Off_3
    922                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_Off_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    923               EEPROM_INIT();
    924              //u8 temp =*(u8*)(&status);
    925              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    926               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    927               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    928               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_219:
   \   000088 C60000                LD        A, L:daily_hour_off
   \   00008B AE4004                LDW       X, #0x4004
   \   00008E 8D000000              CALLF     ?Subroutine6
    929               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_16:
   \   000092 C60000                LD        A, L:daily_minute_off
   \   000095 AE4005                LDW       X, #0x4005
   \   000098 8D000000              CALLF     ?Subroutine4
    930               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    931                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_6:
   \   00009C C60000                LD        A, L:daily_hour_off
   \   00009F 905F                  CLRW      Y
   \   0000A1 8D000000              CALLF     ?Subroutine2
    932                 change=TRUE;
   \                     ??CrossCallReturnLabel_0:
   \   0000A5 35010000              MOV       L:change, #0x1
    933               return TRUE;
   \   0000A9 A601                  LD        A, #0x1
   \   0000AB 87                    RETF
    934          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    935          
    936          /*
    937               //Computing time_long_on
    938          
    939               u8 hour=daily_hour_on;
    940               u8 minute=daily_minute_on;
    941               daily_long_on=0;
    942               do
    943               {
    944                    daily_long_on++;
    945                    minute++;
    946                    if (minute==60)
    947                    {
    948                      minute=0;
    949                      hour++;
    950                    }
    951                    if(hour==24) hour=0;
    952          
    953               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
    954          
    955                //Display daily_long_on
    956              LCDInstr(0x01);
    957              Delay1(1000);
    958              line_lcd=0;
    959              printf("\nLong :");
    960          
    961                do
    962              {
    963               line_lcd=1;
    964               printf("\n%d",daily_long_on);
    965                 //daily_long_on=adj(0,1440,daily_long_on);
    966              } while (!key_ok_on());
    967          
    968              time_on=daily_hour_on*60+daily_minute_on;
    969              time_off= daily_hour_off*60+daily_minute_off;
    970              //Save data to eeprom
    971                status.daily=1;
    972               EEPROM_INIT();
    973              //u8 temp =*(u8*)(&status);
    974              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    975               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    976               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    977               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    978               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    979               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    980               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    981               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    982          
    983             return TRUE;
    984          
    985          }
    986            */
    987          

   \                                 In section .far_func.text, align 1, keep-with-next
    988          void Save_Status()
    989          {
    990            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ??Subroutine77_0
    991            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    992            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    993            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_222:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    994          }
    995          

   \                                 In section .far_func.text, align 1
    996          bool Read_Allarm()
    997          {
    998             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   000007 C70000                LD        L:daily_hour_on, A
    999              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
   1000             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000017 C70000                LD        L:daily_minute_on, A
   1001              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
   1002             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000025 C70000                LD        L:daily_hour_off, A
   1003              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
   1004             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000033 C70000                LD        L:daily_minute_off, A
   1005              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
   1006             monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   \   00003D AE4006                LDW       X, #0x4006
   \   000040 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   000044 C70000                LD        L:monthly_year, A
   1007              if(monthly_year >99) return FALSE;
   \   000047 A164                  CP        A, #0x64
   \   000049 24C3                  JRNC      L:??Read_Allarm_1
   1008             monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   \   00004B AE4007                LDW       X, #0x4007
   \   00004E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000052 C70000                LD        L:monthly_month, A
   1009              if(monthly_month>12) return FALSE;
   \   000055 A10D                  CP        A, #0xd
   \   000057 24B5                  JRNC      L:??Read_Allarm_1
   1010             monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   \   000059 AE4008                LDW       X, #0x4008
   \   00005C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   000060 C70000                LD        L:monthly_date, A
   1011              if(monthly_date >31) return FALSE;
   \   000063 A120                  CP        A, #0x20
   \   000065 24A7                  JRNC      L:??Read_Allarm_1
   1012            return TRUE;
   \   000067 A601                  LD        A, #0x1
   \   000069 87                    RETF
   1013          }
   1014          

   \                                 In section .far_func.text, align 1, keep-with-next
   1015          void EEPROM_INIT()
   1016          {
   1017            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1018            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1019            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1020          
   1021          
   1022          
   1023          }
   1024          
   1025          

   \                                 In section .far_func.text, align 1
   1026          void GpioConfiguration()
   1027          {
   1028          
   1029            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1030          
   1031            // ADC PE6 NEW PB0
   1032            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1033          
   1034            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1035            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1036          
   1037            //PD0 Led
   1038            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine55
   1039            //I2C
   1040            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_168:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1041            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine59
   1042            // Remap Pins pb4,pb5  sda,scl ;
   1043          
   1044             //Init KEY OK,PLUS,MINUS
   1045            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_175:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine59
   1046            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_176:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine59
   1047            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_177:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1048          
   1049            //Init DS18b20 data pin
   1050            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine55
   1051          
   1052            // Power Pin
   1053             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_167:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine55
   1054          
   1055            // lcdLed Pin
   1056             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_LOW_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_166:
   \   00006B 35800000              MOV       S:?b0, #0x80
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1057          
   1058          
   1059          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine55:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1060          

   \                                 In section .far_func.text, align 1
   1061          void InitClk()
   1062          {
   1063            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1064            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1065            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1066            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1067            CLK_SOURCE_HSI,       // Switch to internal timer.
   1068            DISABLE,              // Disable the clock switch interrupt.
   1069            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1070          
   1071            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine60
   1072            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_178:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine60
   1073            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_179:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine60
   1074            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_180:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine60
   1075            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_181:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1076          
   1077          
   1078          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1079          
   1080          
   1081          /*
   1082          void InitAdc()
   1083          {
   1084               ADC1_DeInit();
   1085               ADC1_StartConversion();
   1086          
   1087               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1088               //           ADC1_CHANNEL_0,
   1089               //           ADC1_PRESSEL_FCPU_D4,
   1090               //            ADC1_EXTTRIG_TIM,
   1091          
   1092          
   1093               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1094               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1095                                      ADC1_CHANNEL_0,
   1096                                      ADC1_ALIGN_RIGHT
   1097                                     );
   1098          
   1099          
   1100               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1101          
   1102          
   1103               //ADC1_Cmd (ENABLE);
   1104               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1105               ADC1_StartConversion();
   1106               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1107          
   1108          }
   1109          */
   1110          
   1111          
   1112          
   1113          /*
   1114          void InitUart()
   1115          {
   1116             UART2_DeInit();
   1117             UART2_Init((u32)9600,
   1118                        UART2_WORDLENGTH_8D,
   1119                        UART2_STOPBITS_1,
   1120                        UART2_PARITY_NO,
   1121                        UART2_SYNCMODE_CLOCK_DISABLE,
   1122                        UART2_MODE_TXRX_ENABLE
   1123                          );
   1124          
   1125             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1126             UART2_Cmd(ENABLE);
   1127          
   1128            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1129          }
   1130            */
   1131          
   1132          
   1133          /*
   1134          void SendChar( u8 Char)
   1135          {
   1136             UART2->DR = Char;
   1137            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1138          }
   1139          
   1140           */
   1141          
   1142           /*
   1143          void Send_Hello()
   1144          {
   1145            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1146             Delay1(10);
   1147             sprintf(data,"Hello");
   1148              u8 i=0;
   1149            do
   1150           {
   1151            SendChar(data[i++]);
   1152           } while (data[i]!=0);
   1153            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1154            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1155          
   1156          
   1157          
   1158          }
   1159          
   1160          
   1161          
   1162          
   1163          
   1164          void SendData()
   1165          {
   1166           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1167            Delay1(10);
   1168            u8 i=0;
   1169            sprintf(data,"%d %c",adcdata,0x0d);
   1170           do
   1171           {
   1172             SendChar(data[i++]);
   1173          
   1174           } while (data[i]!=0);
   1175             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1176            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1177            rx_data=0;
   1178          }
   1179          */
   1180          
   1181          
   1182           /*
   1183          u16 Average()
   1184          {
   1185           //Find average in measure
   1186            u8 i=0;
   1187            u16 Summa=0;
   1188            do
   1189            {
   1190             Summa+=measure[i++];
   1191            } while ( measure[i]!=0);
   1192             if(i!=0) Summa=Summa/i;
   1193             return Summa;
   1194          }
   1195             */
   1196          

   \                                 In section .far_func.text, align 1, keep-with-next
   1197          void LCDDataOut(u8 data)
   1198          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1199            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_251
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine81_0
   1200            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_251:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_32:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_252
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine81_0
   1201            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_252:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_31:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_253
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine81_0
   1202            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_253:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_30:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_254
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine81_0
   1203          }
   \                     ??CrossCallReturnLabel_254:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_260:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine63:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1204          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine81_0
   \   000002                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1205          void InitLcd()
   1206          {
   1207           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine13
   1208            LCD_RW(0);
   1209            LCD_RS(0);
   \                     ??CrossCallReturnLabel_35:
   \   000006 8D000000              CALLF     ?Subroutine14
   1210            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_249:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine18
   1211          
   1212            LCDInstrNibble(0x03);
   1213             Delay1(10);
   1214            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_44:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1215             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine18
   1216            LCDInstrNibble(0x03);
   1217             Delay1(10);
   1218          
   1219             //Line 4
   1220            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_43:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1221            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1222            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1223            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1224          
   1225            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1226            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1227          
   1228            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine24
   1229            Delay1(250);
   1230          
   1231            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_58:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1232            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1233          
   1234          
   1235          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_202:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_258:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_257:
   \   00000A 87                    RETF
   1236          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine81_0
   \                     ??CrossCallReturnLabel_255:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_209:
   \   00000D                       REQUIRE ??Subroutine75_0
   \   00000D                       ;               // Fall through to label ??Subroutine75_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_208:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1237          void LCDInstr(u8 Instr)
   1238          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1239            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine14
   1240            LCD_RW(0);
   \                     ??CrossCallReturnLabel_247:
   \   000009 2000                  JRA       ?Subroutine0
   1241            LCDDataOut(Instr>>4);
   1242            PulseEnable();
   1243            LCDDataOut(Instr & 0x0F);
   1244            PulseEnable();
   1245          }
   1246          

   \                                 In section .far_func.text, align 1, keep-with-next
   1247          void LCDData(u8 Data)
   1248          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1249            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1250            LCD_RW(0);
   \                     ??CrossCallReturnLabel_29:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1251            LCDDataOut(Data>>4);
   1252            PulseEnable() ;
   1253            LCDDataOut(Data & 0x0F) ;
   1254            PulseEnable();
   1255          }
   1256          

   \                                 In section .far_func.text, align 1, keep-with-next
   1257          void LCDInstrNibble(u8 Instr)
   1258          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1259            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine13
   1260            LCD_RW(0);
   1261            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_34:
   \   00000B AC000000              JPF       ??Subroutine75_0
   1262            PulseEnable();
   1263          }
   1264          

   \                                 In section .far_func.text, align 1, keep-with-next
   1265          void PulseEnable(void)
   1266          {
   1267            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine8
   1268             Delay1(1);
   1269            LCD_EN(1);
   1270             Delay1(1);
   1271            LCD_EN(0);
   \                     ??CrossCallReturnLabel_22:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine81_0
   1272             Delay1(1);
   \                     ??CrossCallReturnLabel_250:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1273          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_259:
   \   000006 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_238:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_237:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1274          

   \                                 In section .far_func.text, align 1, keep-with-next
   1275          void LCD_Busy(void)
   1276          {
   1277             //set Port D7 as Input
   1278             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1279             //Set Read
   1280             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1281             LCD_RS(0);
   \                     ??CrossCallReturnLabel_28:
   \   000013 8D000000              CALLF     ?Subroutine14
   1282             // Read Busy Flag
   1283                timer2=0;
   \                     ??CrossCallReturnLabel_248:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1284             do
   1285             {
   1286             // Enable set
   1287               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine8
   1288                Delay1(1);
   1289               LCD_EN(1);
   1290                Delay1(1);
   1291             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_23:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1292                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1293                //Clear read
   1294              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine81_0
   1295             //set Port D7 as Output
   1296             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_256:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1297          
   1298          }
   1299          
   1300          

   \                                 In section .far_func.text, align 1, keep-with-next
   1301          void LCD(u8 data)
   1302           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1303             //  static u8 linet=0;
   1304          
   1305          
   1306               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2674                  JRNE      L:??CrossCallReturnLabel_235
   1307               {
   1308          
   1309                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 272C                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2735                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 273E                  JREQ      L:??LCD_3
   \   000018 2046                  JRA       L:??LCD_4
   1310                   {
   1311                   case 0:
   1312                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1313                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1314                      {
   1315                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1316                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     ?Subroutine11
   1317                         Delay1(1);
   1318                      }
   \                     ??CrossCallReturnLabel_232:
   \   000030 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_55:
   \   000034 25EC                  JRC       L:??LCD_5
   1319                     LCDInstr(0x80 | 0x00);
   \   000036 A680                  LD        A, #0x80
   \   000038 8D000000              CALLF     ?Subroutine66
   1320                     count=0;
   1321                     break;
   \                     ??CrossCallReturnLabel_187:
   \   00003C 2022                  JRA       L:??LCD_4
   1322                   case 1:
   1323                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00003E A6C0                  LD        A, #0xc0
   \   000040 8D000000              CALLF     LCDInstr
   1324                     count=20;
   \   000044 35140000              MOV       L:count, #0x14
   1325                     break;
   \   000048 2016                  JRA       L:??LCD_4
   1326                   case 2:
   1327                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004A A694                  LD        A, #0x94
   \   00004C 8D000000              CALLF     LCDInstr
   1328                     count=40;
   \   000050 35280000              MOV       L:count, #0x28
   1329                     break;
   \   000054 200A                  JRA       L:??LCD_4
   1330                   case 3:
   1331                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000056 A6D4                  LD        A, #0xd4
   \   000058 8D000000              CALLF     LCDInstr
   1332                     count=60;
   \   00005C 353C0000              MOV       L:count, #0x3c
   1333                     break;
   1334                   //default:
   1335                    //  LCDInstr(0x80 |0x40);    //Line 1
   1336                    }
   1337                   line_lcd++;
   \                     ??LCD_4:
   \   000060 C60000                LD        A, L:line_lcd
   \   000063 4C                    INC       A
   \   000064 C70000                LD        L:line_lcd, A
   1338                   if (line_lcd>=5)
   \   000067 A105                  CP        A, #0x5
   \   000069 250F                  JRC       L:??LCD_6
   1339                   {
   1340                    line_lcd=1;   //line >=5
   \   00006B 35010000              MOV       L:line_lcd, #0x1
   1341                    LCDInstr(0x01); //Clear LCD
   \   00006F 8D000000              CALLF     ?Subroutine73
   1342                    Delay1(2500);
   \                     ??CrossCallReturnLabel_205:
   \   000073 AE09C4                LDW       X, #0x9c4
   \   000076 8D000000              CALLF     Delay1
   1343                   }
   1344          
   1345                   Delay1(1);
   \                     ??LCD_6:
   \   00007A 8D000000              CALLF     ??Subroutine79_0
   1346          
   1347          
   1348               }
   1349          
   1350          
   1351               if (count==20)
   \                     ??CrossCallReturnLabel_235:
   \   00007E C60000                LD        A, L:count
   \   000081 A114                  CP        A, #0x14
   \   000083 260A                  JRNE      L:??LCD_7
   1352                {
   1353                  LCDInstr(0x80 | 0x40);
   \   000085 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   000087 8D000000              CALLF     LCDInstr
   1354                  Delay1(1);
   \                     ??LCD_9:
   \   00008B 5F                    CLRW      X
   \   00008C 5C                    INCW      X
   \   00008D 2023                  JRA       ??LCD_10
   1355                }
   1356                   else if(count==40)
   \                     ??LCD_7:
   \   00008F A128                  CP        A, #0x28
   \   000091 2604                  JRNE      L:??LCD_11
   1357                  {
   1358                    LCDInstr(0x80 | 0x14);
   \   000093 A694                  LD        A, #0x94
   \   000095 20F0                  JRA       ??LCD_8
   1359                    Delay1(1);
   1360                  }
   1361                    else if(count==60)
   \                     ??LCD_11:
   \   000097 A13C                  CP        A, #0x3c
   \   000099 2608                  JRNE      L:??LCD_12
   1362                    {
   1363                      LCDInstr(0x80 | 0x54);
   \   00009B A6D4                  LD        A, #0xd4
   \   00009D 8D000000              CALLF     ?Subroutine66
   1364                      count=0;
   1365                      Delay1(1);
   \                     ??CrossCallReturnLabel_188:
   \   0000A1 20E8                  JRA       ??LCD_9
   1366                    }
   1367                      else if(count >80)
   \                     ??LCD_12:
   \   0000A3 A151                  CP        A, #0x51
   \   0000A5 250F                  JRC       L:??LCD_13
   1368                        {
   1369                          count=0;
   \   0000A7 725F0000              CLR       L:count
   1370                          LCDInstr(0x01); //Clear LCD
   \   0000AB 8D000000              CALLF     ?Subroutine73
   1371                          Delay1(250);
   \                     ??CrossCallReturnLabel_204:
   \   0000AF AE00FA                LDW       X, #0xfa
   \                     ??LCD_10:
   \   0000B2 8D000000              CALLF     Delay1
   1372                        }
   1373          
   1374               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_13:
   \   0000B6 B600                  LD        A, S:?b9
   \   0000B8 A11C                  CP        A, #0x1c
   \   0000BA 250B                  JRC       L:??LCD_14
   1375               {
   1376                 LCDData(data);
   \   0000BC 8D000000              CALLF     ?Subroutine11
   1377                  Delay1(1);
   1378                 count++;
   \                     ??CrossCallReturnLabel_233:
   \   0000C0 C60000                LD        A, L:count
   \   0000C3 4C                    INC       A
   \   0000C4 C70000                LD        L:count, A
   1379               }
   1380           }
   \                     ??LCD_14:
   \   0000C7 AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine79_0
   \   000004                       ;               // Fall through to label ??Subroutine79_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_239:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1381          

   \                                 In section .far_func.text, align 1, keep-with-next
   1382          void InitDelayTimer2()
   1383          {
   1384             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1385             //Tclock 16/8=2Mhz  /20 10us
   1386                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1387                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1388                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1389                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1390                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1391          
   1392          }
   1393          

   \                                 In section .far_func.text, align 1, keep-with-next
   1394          void InitDelayTimer3()
   1395          {
   1396             //Timer 3 use for 1s Delay
   1397             //Tclock 16000000/1024=15626
   1398                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1399                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1400                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1401                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1402          
   1403               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1404          
   1405          }
   1406          
   1407          
   1408          
   1409          

   \                                 In section .far_func.text, align 1, keep-with-next
   1410          bool DS18_Write(u8 data)
   1411          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1412            disableInterrupts();
   \   000006 9B                    SIM
   1413            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1414            {
   1415             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1416             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1417             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_40:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_246
   \   00001A 8D000000              CALLF     ?Subroutine23
   1418               //else DS18(0);
   1419             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_246:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1420             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine23
   1421             //Delay1(0);
   1422            }
   \                     ??CrossCallReturnLabel_245:
   \   000029 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_56:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1423            enableInterrupts();
   \   00002F 9A                    RIM
   1424            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1425          
   1426          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine80_0
   \   000002                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_182:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1427          
   1428          

   \                                 In section .far_func.text, align 1, keep-with-next
   1429          u8  DS18_Read()
   1430          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1431              //Init DS18b20 data pin as Input
   1432          
   1433            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1434              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1435            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1436            {
   1437              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1438              Delay_us(1); //Start time slot 4,5 us
   1439              DS18(1);
   \                     ??CrossCallReturnLabel_39:
   \   00000D 8D000000              CALLF     ?Subroutine23
   1440              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_243:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1441              //Delay1(0);
   1442             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_62:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1443              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1444              //  DS18(1);  // Next bit
   1445             // Delay1(0);
   1446          
   1447            }
   \   00003D 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_57:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1448              enableInterrupts();
   \   000043 9A                    RIM
   1449              //Init DS18b20 data pin
   1450             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1451             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1452          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1453          

   \                                 In section .far_func.text, align 1, keep-with-next
   1454          bool DS18_Reset()
   1455          {
   1456             //Init Reset Pulse
   1457              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine64
   1458              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_183:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1459              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine23
   1460              //Delay1(1);
   1461              timer2=0;
   \                     ??CrossCallReturnLabel_244:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1462              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_100:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_60:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1463              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_101:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1464              {
   1465                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine43
   1466                return FALSE;
   \                     ??CrossCallReturnLabel_112:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1467              }
   1468          
   1469              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1470               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_102:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_61:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1471                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_103:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1472                 {
   1473                  hardware.ds18B20=0;
   1474                  return FALSE;
   1475                 }
   1476          
   1477              // Delay1(10);
   1478              //Delay1(20);    //25=524us
   1479               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine44
   1480              return TRUE;
   \                     ??CrossCallReturnLabel_114:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1481          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1482          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1483          u8 temperature ()
   1484          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1485          
   1486             //Init Reset Pulse
   1487               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_164:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1488             //Skip ROM Command 0xCC
   1489              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine57
   1490             //Function command  CONVERT T [44h]
   1491              DS18_Write(0x44);
   1492              //Wait util end convert
   1493              timer2=0;
   1494               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_172:
   \   000013 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_105:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_172
   1495                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1496               //u8 temp8=timer2;
   1497              //Init Reset Pulse
   1498              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_165:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1499              // Skip ROM Command 0xCC
   1500              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine56
   1501              //Function command READ SCRATCHPAD [BEh]
   1502              DS18_Write(0xBE);
   1503               u8 temp1=DS18_Read();
   1504               u8 temp2=DS18_Read();
   1505              DS18_Reset();
   \                     ??CrossCallReturnLabel_170:
   \   000033 8D000000              CALLF     DS18_Reset
   1506                u16 result = temp2*256+temp1;
   1507                temp1= (u8)(result>>3);
   1508               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_21:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1509          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_197:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_196:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine83_0
   \                     ??CrossCallReturnLabel_267:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1510          

   \                                 In section .far_func.text, align 1, keep-with-next
   1511          bool Read_DS18()
   1512          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1513          
   1514             //Init Reset Pulse
   1515               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_162:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1516             //Skip ROM Command 0xCC
   1517              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine57
   1518             //Function command  CONVERT T [44h]
   1519              DS18_Write(0x44);
   1520              //Wait util end convert
   1521              timer2=0;
   1522               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_171:
   \   000013 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_104:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_171
   1523                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1524               //u8 temp8=timer2;
   1525              //Init Reset Pulse
   1526              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_163:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1527              // Skip ROM Command 0xCC
   1528              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine56
   1529              //Function command READ SCRATCHPAD [BEh]
   1530              DS18_Write(0xBE);
   1531               u8 temp1=DS18_Read();
   1532               u8 temp2=DS18_Read();
   1533               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_169:
   \   000033 8D000000              CALLF     ?Subroutine58
   1534               u8 temp4=DS18_Read();
   1535               u8 temp5=DS18_Read();
   1536               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_174:
   \   000037 8D000000              CALLF     ?Subroutine58
   1537               u8 temp7=DS18_Read();
   1538               u8 temp8=DS18_Read();
   1539               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_173:
   \   00003B 8D000000              CALLF     DS18_Read
   1540          
   1541               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1542          
   1543                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1544                result2=0;
   \   000047 725F0000              CLR       L:result2
   1545                u16 result = temp2*256+temp1;
   1546                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   00004F C70000                LD        L:result1, A
   1547                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1548                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1549          
   1550          
   1551                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1552               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1553               //line_lcd=1;
   1554               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1555               // while (!key_ok_on());
   1556          
   1557               //u8 temp3=DS18_Read();
   1558          
   1559              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1560          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1561          

   \                                 In section .far_func.text, align 1, keep-with-next
   1562          bool DS18Set ()
   1563          {
   1564               //Init Reset Pulse
   1565              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_160:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1566             //Skip ROM Command 0xCC
   1567              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine71
   1568             //Function command  WRITE SCRATCHPAD 0x4E
   1569              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_199:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1570             //Write 3 bytes last is config reg
   1571              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1572              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1573              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1574          
   1575             //Init Reset Pulse
   1576              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_161:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1577              //Skip ROM Command 0xCC
   1578              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine71
   1579              //Function   Store in Conf Reg
   1580              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_198:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1581          
   1582          
   1583          
   1584          
   1585          
   1586          
   1587            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1588          }
   1589          
   1590          
   1591          
   1592          
   1593          
   1594          
   1595          
   1596          

   \                                 In section .far_func.text, align 1, keep-with-next
   1597          void Delay1(u16 Delay)
   1598          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1599              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1600            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1601            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1602          }
   \   00000D 87                    RETF
   1603          

   \                                 In section .far_func.text, align 1, keep-with-next
   1604           void Delay2(u16 Delay)
   1605          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1606            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1607            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1608          }
   \   00000D 87                    RETF
   1609          
   1610          

   \                                 In section .far_func.text, align 1, keep-with-next
   1611          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1612          {
   1613            //disableInterrupts();
   1614            do
   1615              {
   1616                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1617                nop();
   \   000001 9D                    NOP
   1618              }
   1619              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1620            //enableInterrupts();
   1621          }
   \   000005 87                    RETF
   1622          
   1623          

   \                                 In section .far_func.text, align 1, keep-with-next
   1624          void Display_Line(char* line)
   1625          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1626            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1627            u8 count;
   1628              //Set Cursor to First Line
   1629             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1630             count=0;
   \   000010 3F00                  CLR       S:?b10
   1631             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine79_0
   1632            do
   1633            {
   1634          
   1635              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_236:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1636               {
   1637                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine11
   1638                  Delay1(1);
   1639                 count++;
   \                     ??CrossCallReturnLabel_234:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1640               }
   1641               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1642            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_236
   1643          
   1644             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1645          
   1646          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1647          

   \                                 In section .far_func.text, align 1, keep-with-next
   1648          void Rotate_Line( char * line)
   1649          {
   1650          
   1651             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1652             char temp_next;
   1653          
   1654             do
   1655             {
   1656                temp_next=*(line+1);
   1657               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1658                //line++;
   1659                //temp_next=*line;
   1660               //*line=*line++;
   1661             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1662             line--;
   1663             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1664          
   1665          }
   \   000012 87                    RETF
   1666          

   \                                 In section .far_func.text, align 1, keep-with-next
   1667          void Clear_Line1 ()
   1668          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1669               //Set Cursor to First Line
   1670             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine10
   1671             count=0;
   1672             Delay1(1);
   1673              u8 count=0;
   1674             do
   1675             {
   1676               LCDData(' ');
   \                     ??CrossCallReturnLabel_27:
   \   000009 8D000000              CALLF     ?Subroutine9
   1677                  Delay1(1);
   1678                  count++;
   1679             }while (count<8);
   \                     ??CrossCallReturnLabel_25:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_27
   1680          
   1681          
   1682          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_189:
   \   000004 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_241:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_240:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1683          

   \                                 In section .far_func.text, align 1, keep-with-next
   1684          void Clear_Line2 ()
   1685          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1686               //Set Cursor to Second  Line
   1687             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine10
   1688             count=0;
   1689             Delay1(1);
   1690              u8 count=0;
   1691             do
   1692             {
   1693               LCDData(' ');
   \                     ??CrossCallReturnLabel_26:
   \   000009 8D000000              CALLF     ?Subroutine9
   1694                  Delay1(1);
   1695                  count++;
   1696             }while (count<8);
   \                     ??CrossCallReturnLabel_24:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_26
   1697          
   1698          
   1699          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1700          
   1701          
   1702          
   1703          
   1704          

   \                                 In section .far_func.text, align 1, keep-with-next
   1705          void Menu (void)
   1706          {
   1707           // Clear Display
   1708              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine24
   1709              Delay1(250);
   1710              //u8 key;
   1711           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1712              Wait for Plus,Minius or OK
   1713              If plus next option from Menu on the end EXIT
   1714              If minus previous option from Menu  on the end EXIT
   1715              If OK enter to menu option
   1716              If time out about 10s exit from Menu
   1717           */
   1718              do {
   1719          First_Menu:
   1720              line_lcd=0;
   \                     ??CrossCallReturnLabel_59:
   \   000004 725F0000              CLR       L:line_lcd
   1721              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1722              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine31
   1723              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_75:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1724              switch (pressKey())
   \   000022 8D000000              CALLF     pressKey
   \   000026 4A                    DEC       A
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   1725                  {
   1726                  case 1: goto Second_Menu ;
   1727                   break;
   1728                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   1729                   break;
   \   000039 CC0000                JP        L:??Menu_3
   1730                  case 3: goto Exit_Menu;
   1731                   break;
   1732                  }
   1733                  break; //Exit Menu
   1734          
   1735          
   1736          Second_Menu:
   1737              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   1738              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     printf
   1739              line_lcd=1;
   \   000047 8D000000              CALLF     ?Subroutine30
   1740              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_72:
   \   00004B 89                    PUSHW     X
   \   00004C C60000                LD        A, L:daily_hour_off
   \   00004F 97                    LD        XL, A
   \   000050 89                    PUSHW     X
   \   000051 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000054 8D000000              CALLF     printf
   \   000058 5B04                  ADD       SP, #0x4
   1741                switch (pressKey())
   \   00005A 8D000000              CALLF     pressKey
   \   00005E 4A                    DEC       A
   \   00005F 2710                  JREQ      L:??Menu_4
   \   000061 4A                    DEC       A
   \   000062 2706                  JREQ      L:??Menu_5
   \   000064 4A                    DEC       A
   \   000065 279D                  JREQ      L:??CrossCallReturnLabel_59
   \   000067 CC0000                JP        L:??Menu_3
   1742                  {
   1743                  case 1: goto Third_Menu ;
   1744                   break;
   1745                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   00006A 8D000000              CALLF     Set_Timer_Off
   1746                   break;
   \   00006E CC0000                JP        L:??Menu_3
   1747                  case 3: goto First_Menu;
   1748                   break;
   1749                  }
   1750               break; //Exit Menu
   1751          
   1752          Third_Menu:
   1753                line_lcd=0;
   \                     ??Menu_4:
   \   000071 725F0000              CLR       L:line_lcd
   1754              printf("\nMonthly ");
   \   000075 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000078 8D000000              CALLF     printf
   1755              line_lcd=1;
   \   00007C 35010000              MOV       L:line_lcd, #0x1
   1756              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \   000080 C60000                LD        A, L:monthly_date
   \   000083 5F                    CLRW      X
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:monthly_month
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B C60000                LD        A, L:monthly_year
   \   00008E 97                    LD        XL, A
   \   00008F 89                    PUSHW     X
   \   000090 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000093 8D000000              CALLF     printf
   \   000097 5B06                  ADD       SP, #0x6
   1757                switch (pressKey())
   \   000099 8D000000              CALLF     pressKey
   \   00009D 4A                    DEC       A
   \   00009E 2750                  JREQ      L:??Menu_6
   \   0000A0 4A                    DEC       A
   \   0000A1 2706                  JREQ      L:??Menu_7
   \   0000A3 4A                    DEC       A
   \   0000A4 2796                  JREQ      L:??Menu_0
   \   0000A6 CC0000                JP        L:??Menu_3
   1758                  {
   1759                  case 1: goto Fourth_Menu;
   1760                   break;
   1761                  case 2:
   1762                    {
   1763                     setData();
   \                     ??Menu_7:
   \   0000A9 8D000000              CALLF     setData
   1764                     monthly_year=y;
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 C70000                LD        L:monthly_year, A
   1765                     monthly_month=m;
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 C70000                LD        L:monthly_month, A
   1766                     monthly_date=d;
   \   0000B9 C60000                LD        A, L:d
   \   0000BC C70000                LD        L:monthly_date, A
   1767                     status.monthly=1;
   \   0000BF CE0000                LDW       X, L:status
   \   0000C2 01                    RRWA      X, A
   \   0000C3 AA08                  OR        A, #0x8
   \   0000C5 8D000000              CALLF     ?Subroutine69
   1768                     status.daily=0;  // Disable Daily Alarm On date enable it
   1769                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_194:
   \   0000C9 A4FE                  AND       A, #0xfe
   \   0000CB 8D000000              CALLF     ?Subroutine1
   1770                     // Save Status and Date in EEPROM
   1771                     EEPROM_INIT();
   1772                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1773                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1774                     FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   \                     ??CrossCallReturnLabel_221:
   \   0000CF C60000                LD        A, L:`y`
   \   0000D2 AE4006                LDW       X, #0x4006
   \   0000D5 8D000000              CALLF     ?Subroutine6
   1775                     FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   \                     ??CrossCallReturnLabel_18:
   \   0000D9 C60000                LD        A, L:m
   \   0000DC AE4007                LDW       X, #0x4007
   \   0000DF 8D000000              CALLF     ?Subroutine6
   1776                     FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   \                     ??CrossCallReturnLabel_19:
   \   0000E3 C60000                LD        A, L:d
   \   0000E6 AE4008                LDW       X, #0x4008
   \   0000E9 8D000000              CALLF     ?Subroutine4
   1777                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1778                     break;
   \                     ??CrossCallReturnLabel_4:
   \   0000ED CC0000                JP        L:??Menu_3
   1779                    }
   1780                  case 3: goto Second_Menu ;
   1781                   break;
   1782                  }
   1783               break; //Exit Menu
   1784          
   1785          
   1786          Fourth_Menu:
   1787              line_lcd=0;
   \                     ??Menu_6:
   \   0000F0 725F0000              CLR       L:line_lcd
   1788              printf("\nClock   ");
   \   0000F4 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000F7 8D000000              CALLF     ?Subroutine27
   1789              line_lcd=1;
   1790              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_227:
   \   0000FB 89                    PUSHW     X
   \   0000FC C60000                LD        A, L:minutes
   \   0000FF 97                    LD        XL, A
   \   000100 89                    PUSHW     X
   \   000101 C60000                LD        A, L:hours
   \   000104 97                    LD        XL, A
   \   000105 89                    PUSHW     X
   \   000106 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000109 8D000000              CALLF     printf
   \   00010D 5B06                  ADD       SP, #0x6
   1791                switch (pressKey())
   \   00010F 8D000000              CALLF     pressKey
   \   000113 4A                    DEC       A
   \   000114 2711                  JREQ      L:??Menu_8
   \   000116 4A                    DEC       A
   \   000117 2708                  JREQ      L:??Menu_9
   \   000119 4A                    DEC       A
   \   00011A 2603                  JRNE      ??lb_1
   \   00011C CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   00011F 205C                  JRA       L:??Menu_3
   1792                  {
   1793                  case 1: goto Fifth_Menu ;
   1794                   break;
   1795                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000121 8D000000              CALLF     Set_Clock
   1796                   break;
   \   000125 2056                  JRA       L:??Menu_3
   1797                  case 3: goto Third_Menu;
   1798                   break;
   1799                  }
   1800               break; //Exit Menu
   1801          
   1802          
   1803          Fifth_Menu:
   1804              line_lcd=0;
   \                     ??Menu_8:
   \   000127 725F0000              CLR       L:line_lcd
   1805              printf("\nDate    ");
   \   00012B AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   00012E 8D000000              CALLF     printf
   1806              line_lcd=1;
   \   000132 8D000000              CALLF     ?Subroutine28
   1807              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_66:
   \   000136 89                    PUSHW     X
   \   000137 C60000                LD        A, L:month
   \   00013A 97                    LD        XL, A
   \   00013B 89                    PUSHW     X
   \   00013C C60000                LD        A, L:year
   \   00013F 97                    LD        XL, A
   \   000140 89                    PUSHW     X
   \   000141 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000144 8D000000              CALLF     printf
   \   000148 5B06                  ADD       SP, #0x6
   1808                switch (pressKey())
   \   00014A 8D000000              CALLF     pressKey
   \   00014E 4A                    DEC       A
   \   00014F 2708                  JREQ      L:??Menu_2
   \   000151 4A                    DEC       A
   \   000152 27CD                  JREQ      L:??Menu_9
   \   000154 4A                    DEC       A
   \   000155 2799                  JREQ      L:??Menu_6
   \   000157 2024                  JRA       L:??Menu_3
   1809                  {
   1810                  case 1: goto Exit_Menu ;
   1811                   break;
   1812                  case 2: Set_Clock();
   1813                   break;
   1814                  case 3: goto Fourth_Menu;
   1815                   break;
   1816                  }
   1817               break; //Exit Menu
   1818          
   1819          
   1820          Exit_Menu:
   1821              line_lcd=0;
   \                     ??Menu_2:
   \   000159 725F0000              CLR       L:line_lcd
   1822              printf("\nExit OK ");
   \   00015D AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000160 8D000000              CALLF     printf
   1823              line_lcd=1;
   \   000164 35010000              MOV       L:line_lcd, #0x1
   1824              printf("\n+/-     ");
   \   000168 AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   00016B 8D000000              CALLF     printf
   1825                 switch (pressKey())
   \   00016F 8D000000              CALLF     pressKey
   \   000173 4A                    DEC       A
   \   000174 2603                  JRNE      ??lb_2
   \   000176 CC0000                JP        L:??CrossCallReturnLabel_59
   \                     ??lb_2:
   \   000179 A002                  SUB       A, #0x2
   \   00017B 27AA                  JREQ      L:??Menu_8
   1826                  {
   1827                  case 1: goto First_Menu;
   1828                   break;
   1829                  case 2:
   1830                   break;
   1831                  case 3: goto Fifth_Menu;
   1832                   break;
   1833                  }
   1834                 break; //Exit Menu
   1835              }    while (1);
   1836              //exit:
   1837             Clear_Line1();
   \                     ??Menu_3:
   \   00017D 8D000000              CALLF     Clear_Line1
   1838             Clear_Line2();
   \   000181 AC000000              JPF       Clear_Line2
   1839          
   1840          }
   1841          
   1842          

   \                                 In section .far_func.text, align 1, keep-with-next
   1843          u8 pressKey(void)
   1844          {
   \                     pressKey:
   \   000000 3B0000                PUSH      S:?b8
   1845             u8 pressKey =0;
   \   000003 3F00                  CLR       S:?b8
   1846             timer3=0;
   \   000005 5F                    CLRW      X
   \   000006 CF0000                LDW       L:timer3, X
   1847             hardware.lcdLed=1;
   \   000009 8D000000              CALLF     ?Subroutine41
   1848             lcdLedTimer=LCDLEDON;
   1849          
   1850             do {
   1851                if (key_ok_on())
   \                     ??CrossCallReturnLabel_106:
   \   00000D 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_126:
   \   000011 2706                  JREQ      L:??pressKey_0
   1852                {
   1853                  pressKey=1;
   \   000013 35010000              MOV       S:?b8, #0x1
   \   000017 201A                  JRA       L:??pressKey_1
   1854                  //beep(5000);
   1855                }
   1856                   else if (key_plus_on())pressKey=2;
   \                     ??pressKey_0:
   \   000019 8D000000              CALLF     key_plus_on
   \   00001D A100                  CP        A, #0x0
   \   00001F 2706                  JREQ      L:??pressKey_2
   \   000021 35020000              MOV       S:?b8, #0x2
   \   000025 200C                  JRA       L:??pressKey_1
   1857                  else if (key_minus_on())pressKey=3;
   \                     ??pressKey_2:
   \   000027 8D000000              CALLF     key_minus_on
   \   00002B A100                  CP        A, #0x0
   \   00002D 2704                  JREQ      L:??pressKey_1
   \   00002F 35030000              MOV       S:?b8, #0x3
   1858             } while ( (timer3<=time_menu) && !pressKey);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000033 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_139:
   \   000037 2404                  JRNC      L:??pressKey_3
   \   000039 3D00                  TNZ       S:?b8
   \   00003B 27D0                  JREQ      L:??CrossCallReturnLabel_106
   1859          
   1860              if (pressKey==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D 3D00                  TNZ       S:?b8
   \   00003F 2607                  JRNE      L:??pressKey_4
   \   000041 AE2710                LDW       X, #0x2710
   \   000044 8D000000              CALLF     beep
   1861          
   1862             return pressKey;
   \                     ??pressKey_4:
   \   000048 B600                  LD        A, S:?b8
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
   1863          }
   1864          
   1865          
   1866          
   1867          

   \                                 In section .far_func.text, align 1, keep-with-next
   1868          bool setData(void)
   1869          {
   \                     setData:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1870             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000007 3F00                  CLR       S:?b8
   \   000009 35010000              MOV       S:?b10, #0x1
   \   00000D 35010000              MOV       S:?b9, #0x1
   1871             int yy;
   1872          
   1873                   //Clear Display
   1874             LCDInstr(0x01);
   \   000011 8D000000              CALLF     ?Subroutine19
   1875             Delay1(1000);
   1876             line_lcd=0;
   1877             printf("\nYear>");
   1878             y=year;
   \                     ??CrossCallReturnLabel_46:
   \   000015 C60000                LD        A, L:year
   \   000018 C70000                LD        L:`y`, A
   1879             m=month;
   \   00001B C60000                LD        A, L:month
   \   00001E C70000                LD        L:m, A
   1880             d=date;
   \   000021 C60000                LD        A, L:`date`
   \   000024 C70000                LD        L:d, A
   1881                do
   1882              {
   1883               line_lcd=1;
   \                     ??setData_0:
   \   000027 8D000000              CALLF     ?Subroutine29
   1884               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_67:
   \   00002B 89                    PUSHW     X
   \   00002C C60000                LD        A, L:m
   \   00002F 97                    LD        XL, A
   \   000030 89                    PUSHW     X
   \   000031 C60000                LD        A, L:`y`
   \   000034 97                    LD        XL, A
   \   000035 89                    PUSHW     X
   \   000036 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000039 8D000000              CALLF     printf
   \   00003D 5B06                  ADD       SP, #0x6
   1885                 y=adj(0,99,y);
   \   00003F C60000                LD        A, L:`y`
   \   000042 B700                  LD        S:?b1, A
   \   000044 35630000              MOV       S:?b0, #0x63
   \   000048 8D000000              CALLF     ??Subroutine76_0
   1886              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_214:
   \   00004C C70000                LD        L:`y`, A
   \   00004F 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_123:
   \   000053 27D2                  JREQ      L:??setData_0
   1887                  yy=y+2000;
   \   000055 C60000                LD        A, L:`y`
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A 1C07D0                ADDW      X, #0x7d0
   \   00005D BF00                  LDW       S:?w0, X
   1888              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00005F 90AE0190              LDW       Y, #0x190
   \   000063 8D000000              CALLF     L:?smod16_y_x_y
   \   000067 905D                  TNZW      Y
   \   000069 271C                  JREQ      L:??setData_1
   \   00006B 90AE0064              LDW       Y, #0x64
   \   00006F BE00                  LDW       X, S:?w0
   \   000071 8D000000              CALLF     L:?smod16_y_x_y
   \   000075 905D                  TNZW      Y
   \   000077 2712                  JREQ      L:??setData_2
   \   000079 90AE0004              LDW       Y, #0x4
   \   00007D BE00                  LDW       X, S:?w0
   \   00007F 8D000000              CALLF     L:?smod16_y_x_y
   \   000083 905D                  TNZW      Y
   \   000085 2604                  JRNE      L:??setData_2
   \                     ??setData_1:
   \   000087 35010000              MOV       S:?b8, #0x1
   1889                  y=yy-2000;
   \                     ??setData_2:
   \   00008B B600                  LD        A, S:?b1
   \   00008D AB30                  ADD       A, #0x30
   \   00008F C70000                LD        L:`y`, A
   1890                   if(y==year) month_start=month;
   \   000092 C60000                LD        A, L:year
   \   000095 C10000                CP        A, L:`y`
   \   000098 2605                  JRNE      L:??setData_3
   \   00009A C60000                LD        A, L:month
   \   00009D B700                  LD        S:?b10, A
   1891               line_lcd=0;
   \                     ??setData_3:
   \   00009F 8D000000              CALLF     ?Subroutine46
   1892              printf("\nMonth>");
   1893                do
   1894              {
   1895               line_lcd=1;
   \                     ??CrossCallReturnLabel_122:
   \   0000A3 8D000000              CALLF     ?Subroutine29
   1896               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_68:
   \   0000A7 89                    PUSHW     X
   \   0000A8 C60000                LD        A, L:m
   \   0000AB 97                    LD        XL, A
   \   0000AC 89                    PUSHW     X
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 97                    LD        XL, A
   \   0000B1 89                    PUSHW     X
   \   0000B2 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B5 8D000000              CALLF     printf
   \   0000B9 5B06                  ADD       SP, #0x6
   1897                m=adj(month_start,12,m);
   \   0000BB C60000                LD        A, L:m
   \   0000BE B700                  LD        S:?b1, A
   \   0000C0 350C0000              MOV       S:?b0, #0xc
   \   0000C4 B600                  LD        A, S:?b10
   \   0000C6 8D000000              CALLF     adj
   \   0000CA C70000                LD        L:m, A
   1898              } while (!key_ok_on());
   \   0000CD 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_124:
   \   0000D1 27D0                  JREQ      L:??CrossCallReturnLabel_122
   1899          
   1900              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000D3 C60000                LD        A, L:m
   \   0000D6 A101                  CP        A, #0x1
   \   0000D8 2718                  JREQ      L:??setData_4
   \   0000DA A103                  CP        A, #0x3
   \   0000DC 2714                  JREQ      L:??setData_4
   \   0000DE A105                  CP        A, #0x5
   \   0000E0 2710                  JREQ      L:??setData_4
   \   0000E2 A107                  CP        A, #0x7
   \   0000E4 270C                  JREQ      L:??setData_4
   \   0000E6 A108                  CP        A, #0x8
   \   0000E8 2708                  JREQ      L:??setData_4
   \   0000EA A10A                  CP        A, #0xa
   \   0000EC 2704                  JREQ      L:??setData_4
   \   0000EE A10C                  CP        A, #0xc
   \   0000F0 2606                  JRNE      L:??setData_5
   \                     ??setData_4:
   \   0000F2 351F0000              MOV       S:?b8, #0x1f
   \   0000F6 2024                  JRA       L:??setData_6
   1901               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??setData_5:
   \   0000F8 A104                  CP        A, #0x4
   \   0000FA 270C                  JREQ      L:??setData_7
   \   0000FC A106                  CP        A, #0x6
   \   0000FE 2708                  JREQ      L:??setData_7
   \   000100 A109                  CP        A, #0x9
   \   000102 2704                  JREQ      L:??setData_7
   \   000104 A10B                  CP        A, #0xb
   \   000106 2606                  JRNE      L:??setData_8
   \                     ??setData_7:
   \   000108 351E0000              MOV       S:?b8, #0x1e
   \   00010C 200E                  JRA       L:??setData_6
   1902                else
   1903                 {
   1904                   if(leap) date_end=29;
   \                     ??setData_8:
   \   00010E 3D00                  TNZ       S:?b8
   \   000110 2706                  JREQ      L:??setData_9
   \   000112 351D0000              MOV       S:?b8, #0x1d
   \   000116 2004                  JRA       L:??setData_6
   1905                    else date_end=28;
   \                     ??setData_9:
   \   000118 351C0000              MOV       S:?b8, #0x1c
   1906                 }
   1907               if( y==year && m==month) date_start=d;
   \                     ??setData_6:
   \   00011C C60000                LD        A, L:year
   \   00011F C10000                CP        A, L:`y`
   \   000122 260D                  JRNE      L:??setData_10
   \   000124 C60000                LD        A, L:month
   \   000127 C10000                CP        A, L:m
   \   00012A 2605                  JRNE      L:??setData_10
   \   00012C C60000                LD        A, L:d
   \   00012F B700                  LD        S:?b9, A
   1908              LCDInstr(0x01);
   \                     ??setData_10:
   \   000131 8D000000              CALLF     ?Subroutine20
   1909               Delay1(1000);
   1910                line_lcd=0;
   1911              printf("\nDate>");
   1912                do
   1913              {
   1914               line_lcd=1;
   \                     ??CrossCallReturnLabel_48:
   \   000135 8D000000              CALLF     ?Subroutine29
   1915               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_69:
   \   000139 89                    PUSHW     X
   \   00013A C60000                LD        A, L:m
   \   00013D 97                    LD        XL, A
   \   00013E 89                    PUSHW     X
   \   00013F C60000                LD        A, L:`y`
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B06                  ADD       SP, #0x6
   1916                 d=adj(date_start,date_end,d);
   \   00014D C60000                LD        A, L:d
   \   000150 B700                  LD        S:?b1, A
   \   000152 450000                MOV       S:?b0, S:?b8
   \   000155 B600                  LD        A, S:?b9
   \   000157 8D000000              CALLF     adj
   \   00015B C70000                LD        L:d, A
   1917              } while (!key_ok_on());
   \   00015E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_125:
   \   000162 27D1                  JREQ      L:??CrossCallReturnLabel_48
   1918          
   1919                //Set clock keeper
   1920               //year=y;
   1921               //month=m;
   1922               //date=d;
   1923               //Set_DS1307();
   1924          
   1925            return TRUE;
   \   000164 A601                  LD        A, #0x1
   \   000166 320000                POP       S:?b10
   \   000169 AC000000              JPF       L:?epilogue_w4
   1926          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   1927          
   1928          

   \                                 In section .far_func.text, align 1, keep-with-next
   1929          void initBeep(void)
   1930          {
   1931            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   1932            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   1933             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   1934               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   1935             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   1936          
   1937          }
   1938          

   \                                 In section .far_func.text, align 1, keep-with-next
   1939          void beep(u16 Interval)
   1940          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1941          
   1942           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   1943               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   1944            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   1945          
   1946          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   1947          

   \                                 In section .far_func.text, align 1, keep-with-next
   1948           PUTCHAR_PROTOTYPE
   1949          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1950            /* Place your implementation of fputc here */
   1951            /* e.g. write a character to the USART */
   1952                //USART_SendData(USART3, (u8) ch);
   1953               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1954             /* Loop until the end of transmission */
   1955              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1956            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1957          }
   1958          
   1959           #ifdef USE_FULL_ASSERT
   1960          
   1961          /**
   1962            * @brief  Reports the name of the source file and the source line number
   1963            *   where the assert_param error has occurred.
   1964            * @param file: pointer to the source file name
   1965            * @param line: assert_param error line source number
   1966            * @retval : None
   1967            */

   \                                 In section .far_func.text, align 1
   1968          void assert_failed(u8* file, u32 line)
   1969          {
   1970            /* User can add his own implementation to report the file name and line number,
   1971               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1972          
   1973            /* Infinite loop */
   1974            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1975            {
   1976          
   1977            }
   1978          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On>">`:
   \   000000 0A48204F6E3E          DC8 "\012H On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On>">`:
   \   000000 0A4D696E204F          DC8 "\012Min On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   1979          #endif
   1980          
   1981          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     daily_dispaly                     1
     month_display                     1
     sync_display                      1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     line1                             8
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     hardware                          2
     ?Subroutine47                     7
     ?Subroutine45                     9
     ??Subroutine80_0                  7
     main                            392
     ?Subroutine44                    11
     ?Subroutine43                    11
     ?Subroutine41                     5
     ?Subroutine68                     9
     ?Subroutine74                    11
     ?Subroutine15                     9
     ?Subroutine5                      9
     ?Subroutine3                     20
     ?Subroutine70                     2
     ??Subroutine83_0                  8
     ?Subroutine2                     15
     ?Subroutine72                    12
     ?Subroutine27                     4
     ??Subroutine78_0                 10
     Display                         205
     Power_On                         14
     ?Subroutine39                    11
     ?Subroutine69                    19
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine50                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine53                     1
     ??Subroutine82_0                  7
     ?Subroutine49                     9
     ReadDS1307                      130
     ?Subroutine51                    11
     ?Subroutine36                    11
     ?Subroutine33                    13
     ?Subroutine32                     8
     ?Subroutine67                    10
     Check_DS1307                     78
     Set_DS1307                      108
     ?Subroutine52                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       374
     ?Subroutine46                    11
     ?Subroutine20                    11
     ?Subroutine19                    11
     ?Subroutine35                     6
     ??Subroutine76_0                  5
     ?Subroutine21                     5
     ?Subroutine65                    16
     ?Subroutine73                     6
     ?Subroutine28                    10
     adj                              85
     key_ok_on                        49
     ?Subroutine38                    14
     ?Subroutine34                    10
     key_plus_on                      47
     ?Subroutine42                     7
     ?Subroutine37                     7
     key_minus_on                     47
     key_ok_plus                      48
     ?Subroutine17                    29
     ?Subroutine48                     7
     Set_Timer_On                    167
     ?Subroutine6                      5
     ?Subroutine4                     10
     ?Subroutine1                      4
     ??Subroutine77_0                 29
     ?Subroutine61                     9
     ?Subroutine31                    10
     Set_Timer_Off                   172
     ?Subroutine30                    10
     Save_Status                      10
     Read_Allarm                     106
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine59                     9
     ?Subroutine55                     7
     InitClk                          62
     ?Subroutine60                     9
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine81_0                  5
     ?Subroutine63                     7
     ?Subroutine14                     2
     InitLcd                          85
     ?Subroutine24                    11
     ?Subroutine18                    17
     ?Subroutine13                    11
     ?Subroutine0                     13
     ??Subroutine75_0                 10
     ?Subroutine26                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine8                     24
     ?Subroutine62                     6
     LCD_Busy                         69
     LCD                             203
     ?Subroutine66                     9
     ?Subroutine11                     4
     ??Subroutine79_0                  5
     ?Subroutine22                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine23                     2
     ?Subroutine16                    10
     ?Subroutine64                     9
     DS18_Read                        74
     ?Subroutine25                    12
     DS18_Reset                       72
     ?Subroutine40                     7
     ?Subroutine54                     7
     temperature                      63
     ?Subroutine57                    15
     ?Subroutine71                     6
     ?Subroutine56                    23
     ?Subroutine7                     21
     Read_DS18                       121
     ?Subroutine58                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine10                    13
     ?Subroutine9                     16
     Clear_Line2                      19
     Menu                            389
     pressKey                         78
     setData                         365
     ?Subroutine29                    10
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH On>">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On>">           9
     ?<Constant "\nH Off>">            8
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 5 414 bytes in section .far_func.text
    67 bytes in section .near.bss
     3 bytes in section .near.data
   266 bytes in section .near.rodata
 
 5 414 bytes of CODE  memory
   266 bytes of CONST memory
    70 bytes of DATA  memory

Errors: none
Warnings: none
