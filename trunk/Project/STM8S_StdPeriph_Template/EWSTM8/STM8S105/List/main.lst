###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             02/Aug/2013  17:46:24 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59          
     60          #ifdef __GNUC__
     61            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     62               set to 'Yes') calls __io_putchar() */
     63            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     64          #else
     65            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     66          #endif /* __GNUC__ */
     67          
     68          
     69          
     70          
     71          #define SpecialSymbol 0x1b //Esc to start message
     72          #define data_size 20
     73          #define key_time 8000
     74          #define key_time_ok 15000
     75          #define DS_Control  0x10  // Out 1s
     76          #define EEPROM_ADDR 0x4000
     77          
     78          
     79          
     80          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     81          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     82          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     83          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     84          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     85          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     86          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     87          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     88          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     89          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     90          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     91          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     92          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
     93          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     94          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     95          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
     96          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     97          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     98          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     99          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    100          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    101          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    102          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    103          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    104          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    105          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    106          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    107          u8 l=0;
   \                     l:
   \   000000                       DS8 1
    108          //u8 index=0;

   \                                 In section .near.bss, align 1
    109          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    110          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    111          
    112          
    113          
    114          
    115          
    116          
    117          
    118          
    119          /* Private function prototypes -----------------------------------------------*/
    120          void InitHardware();
    121          void GpioConfiguration();
    122          void InitClk();
    123          void InitAdc();
    124          void InitI2C();
    125          void EEPROM_INIT();
    126          bool ReadDS1307();
    127          //void InitUart();
    128          void InitLcd();
    129          void InitDelayTimer();
    130          void Delay1( u16 Delay);
    131          void Delay2( u16 Delay);
    132          void Delay_us(u16 Delay);
    133          void LCDInstrNibble (u8 Instr);
    134          void LCDInstr(u8 Instr);
    135          void LCDDataOut(u8 data);
    136          void LCD_Busy();
    137          void PulseEnable();
    138          //void SendData();
    139          void SendChar(u8 Char);
    140          //void Send_Hello();
    141          bool Set_Clock();
    142          bool key_ok_on();
    143          bool key_plus_on();
    144          bool key_minus_on();
    145          bool key_ok_plus();
    146          bool Init_DS1307(void);
    147          bool Check_DS1307(void);
    148          bool I2C_Start(void);
    149          bool I2C_WA(u8 address);
    150          bool I2C_WD(u8 data);
    151          bool I2C_RA(u8 address);
    152          bool Set_DS1307();
    153          bool Set_Delay_Allarm();
    154          bool Read_Allarm();
    155          bool Read_DS18();
    156          bool DS18_Write( u8 data);
    157          bool DS18_Reset();
    158          u8 DS18_Read();
    159          u8 convert_tobcd(u8 data);
    160          u8 I2C_RD(void);
    161          u8 adj(u8 min,u8 max,u8 now);
    162          u8 bcd2hex(u8 bcd);
    163          
    164          u16  Average();
    165          
    166          
    167          /* Private functions ---------------------------------------------------------*/
    168          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    169          void main(void)
    170          {
    171              /*High speed internal clock prescaler: 1*/
    172              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    173          
    174              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    175              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    176              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    177          
    178              /*
    179               for(;;)
    180              {
    181          
    182                DS18(1);
    183                Delay_us(1);
    184                DS18(0);
    185                Delay_us(160);
    186          
    187          
    188          
    189          
    190              }
    191          
    192                */
    193          
    194          
    195              //InitUart();
    196              enableInterrupts();
   \   00000C 9A                    RIM
    197              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   00000D A680                  LD        A, #0x80
   \   00000F AE500F                LDW       X, #0x500f
   \   000012 8D000000              CALLF     GPIO_WriteLow
    198              InitLcd();
   \   000016 8D000000              CALLF     InitLcd
    199              //InitAdc();
    200              InitI2C();
   \   00001A 8D000000              CALLF     InitI2C
    201              line_lcd=0;
   \   00001E 725F0000              CLR       L:line_lcd
    202              if (!Read_DS18())
   \   000022 8D000000              CALLF     Read_DS18
   \   000026 A100                  CP        A, #0x0
   \   000028 260D                  JRNE      L:??main_0
    203              {
    204               printf("\nDS_Err_I");
   \   00002A AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   00002D 8D000000              CALLF     printf
    205                while (!key_ok_on());
   \                     ??main_1:
   \   000031 8D000000              CALLF     ?Subroutine26
    206              }
   \                     ??CrossCallReturnLabel_88:
   \   000035 27FA                  JREQ      L:??main_1
    207          
    208          
    209          
    210          
    211          
    212              //years=bcd2hex(13);
    213              Delay1(1000);
   \                     ??main_0:
   \   000037 AE03E8                LDW       X, #0x3e8
   \   00003A 8D000000              CALLF     Delay1
    214               if (!ReadDS1307())
   \   00003E 8D000000              CALLF     ReadDS1307
   \   000042 A100                  CP        A, #0x0
   \   000044 2615                  JRNE      L:??main_2
    215               {
    216                 printf("\n E2:%d",error);
   \   000046 C60000                LD        A, L:error
   \   000049 5F                    CLRW      X
   \   00004A 97                    LD        XL, A
   \   00004B 89                    PUSHW     X
   \   00004C AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004F 8D000000              CALLF     printf
   \   000053 5B02                  ADD       SP, #0x2
    217                 // Reset the CPU: Enable the watchdog and wait until it expires
    218                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000055 35CC50E0              MOV       L:0x50e0, #0xcc
    219                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   000059 20FE                  JRA       L:??main_3
    220               }
    221               //Send_Hello();
    222              //line_lcd=0;
    223              //printf("\nHello");
    224          
    225          
    226              if (!Check_DS1307())
   \                     ??main_2:
   \   00005B 8D000000              CALLF     Check_DS1307
   \   00005F A100                  CP        A, #0x0
   \   000061 2626                  JRNE      L:??main_4
    227              {
    228                 if (error!=0)
   \   000063 C60000                LD        A, L:error
   \   000066 2712                  JREQ      L:??main_5
    229                 {
    230                  printf("\n E:%d",error);
   \   000068 5F                    CLRW      X
   \   000069 97                    LD        XL, A
   \   00006A 89                    PUSHW     X
   \   00006B AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00006E 8D000000              CALLF     printf
   \   000072 5B02                  ADD       SP, #0x2
    231                   while (!key_ok_on());
   \                     ??main_6:
   \   000074 8D000000              CALLF     ?Subroutine26
    232          
    233                 }
   \                     ??CrossCallReturnLabel_89:
   \   000078 27FA                  JREQ      L:??main_6
    234               line_lcd=0;
   \                     ??main_5:
   \   00007A 725F0000              CLR       L:line_lcd
    235               printf("\nSetClock");
   \   00007E AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000081 8D000000              CALLF     printf
    236                Set_Clock();
   \   000085 8D000000              CALLF     Set_Clock
    237          
    238              }
    239          
    240          
    241              //When Start Check for Allarm and computing Daily_long_on
    242                Read_Allarm();
   \                     ??main_4:
   \   000089 8D000000              CALLF     Read_Allarm
    243                 time_on=daily_hour_on*60+daily_minute_on;
   \   00008D 8D000000              CALLF     ?Subroutine1
    244                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_1:
   \   000091 200B                  JRA       L:??main_7
    245          
    246          
    247               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    248          
    249               // Working fuction
    250              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    251          
    252              while(1)
    253              {
    254                ADC1_Cmd (ENABLE);
    255          
    256                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    257                   Delay2(10000);
    258                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    259                   Delay2(10000);
    260          
    261                line_lcd=0;
    262               if (!ReadDS1307())
    263               {
    264                 printf("\n E2:%d",error);
    265                  //restart i2c
    266                // Reset the CPU: Enable the watchdog and wait until it expires
    267                 IWDG->KR = IWDG_KEY_ENABLE;
    268                 while ( 1 );    // Wait until reset occurs from IWDG
    269          
    270          
    271               }
    272                 else  printf("\n      ");
    273               line_lcd=1;
    274               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    275               //line_lcd=2;
    276               //printf("\n Just Test:%X", timer2);
    277                   //if (rx_data==SpecialSymbol) SendData();
    278                //SendData();
    279          
    280                if (key_ok_on())
    281                {
    282                  line_lcd=0;
    283                  printf("\n%02d:%02d:%02d",years,mounts,date);
    284                }
    285          
    286                if(key_ok_plus())
    287                {
    288                 //Set Daily Allarm
    289                  Set_Delay_Allarm();
    290                }
    291          
    292          
    293                //Check for Allarm
    294          
    295                u16 time_now=hours*60+minutes;
    296                bool allarm=FALSE;
    297          
    298          
    299                     u16 time=time_on;
    300                     do
    301                    {
    302                       if(time==time_now)
    303                       {
    304                         allarm=TRUE;
    305                          break ;
    306                       }
    307                        time++;
    308                         if( time==1441) time=0;
    309                    } while(!(time==time_off));
    310          
    311          
    312          
    313          
    314          
    315          
    316          
    317          
    318          
    319                      if(allarm)
    320                   {
    321                     // Allarm ON
    322                     line_lcd=0;
   \                     ??main_8:
   \   000093 725F0000              CLR       L:line_lcd
    323                     printf("\n ON");
   \   000097 AE0000                LDW       X, #`?<Constant "\\n ON">`
   \                     ??main_9:
   \   00009A 8D000000              CALLF     printf
    324                   }
   \                     ??main_7:
   \   00009E A601                  LD        A, #0x1
   \   0000A0 8D000000              CALLF     ADC1_Cmd
   \   0000A4 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_64:
   \   0000A8 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_63:
   \   0000AC 725F0000              CLR       L:line_lcd
   \   0000B0 8D000000              CALLF     ReadDS1307
   \   0000B4 A100                  CP        A, #0x0
   \   0000B6 2615                  JRNE      L:??main_10
   \   0000B8 C60000                LD        A, L:error
   \   0000BB 5F                    CLRW      X
   \   0000BC 97                    LD        XL, A
   \   0000BD 89                    PUSHW     X
   \   0000BE AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   0000C1 8D000000              CALLF     printf
   \   0000C5 5B02                  ADD       SP, #0x2
   \   0000C7 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_11:
   \   0000CB 20FE                  JRA       L:??main_11
   \                     ??main_10:
   \   0000CD AE0000                LDW       X, #`?<Constant "\\n      ">`
   \   0000D0 8D000000              CALLF     printf
   \   0000D4 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_52:
   \   0000D8 89                    PUSHW     X
   \   0000D9 C60000                LD        A, L:minutes
   \   0000DC 97                    LD        XL, A
   \   0000DD 89                    PUSHW     X
   \   0000DE C60000                LD        A, L:hours
   \   0000E1 97                    LD        XL, A
   \   0000E2 89                    PUSHW     X
   \   0000E3 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000E6 8D000000              CALLF     printf
   \   0000EA 5B06                  ADD       SP, #0x6
   \   0000EC 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_90:
   \   0000F0 271D                  JREQ      L:??main_12
   \   0000F2 725F0000              CLR       L:line_lcd
   \   0000F6 C60000                LD        A, L:`date`
   \   0000F9 5F                    CLRW      X
   \   0000FA 97                    LD        XL, A
   \   0000FB 89                    PUSHW     X
   \   0000FC C60000                LD        A, L:mounts
   \   0000FF 97                    LD        XL, A
   \   000100 89                    PUSHW     X
   \   000101 C60000                LD        A, L:years
   \   000104 97                    LD        XL, A
   \   000105 89                    PUSHW     X
   \   000106 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000109 8D000000              CALLF     printf
   \   00010D 5B06                  ADD       SP, #0x6
   \                     ??main_12:
   \   00010F 8D000000              CALLF     key_ok_plus
   \   000113 A100                  CP        A, #0x0
   \   000115 2704                  JREQ      L:??main_13
   \   000117 8D000000              CALLF     Set_Delay_Allarm
   \                     ??main_13:
   \   00011B C60000                LD        A, L:hours
   \   00011E 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_167:
   \   000122 C60000                LD        A, L:minutes
   \   000125 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_134:
   \   000129 90CE0000              LDW       Y, L:time_on
   \                     ??main_14:
   \   00012D BF00                  LDW       S:?w0, X
   \   00012F 90B300                CPW       Y, S:?w0
   \   000132 2603                  JRNE      ??lb_0
   \   000134 CC0000                JP        L:??main_8
   \                     ??lb_0:
   \   000137 905C                  INCW      Y
   \   000139 90A305A1              CPW       Y, #0x5a1
   \   00013D 2602                  JRNE      L:??main_15
   \   00013F 905F                  CLRW      Y
   \                     ??main_15:
   \   000141 90C30000              CPW       Y, L:time_off
   \   000145 26E6                  JRNE      L:??main_14
    325          
    326                    else
    327                    {
    328                      line_lcd=0;
   \   000147 725F0000              CLR       L:line_lcd
    329                      printf("\n OFF");
   \   00014B AE0000                LDW       X, #`?<Constant "\\n OFF">`
   \   00014E AC000000              JPF       ??main_9
    330                    }
    331          
    332          
    333              }
    334          
    335          
    336          
    337          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine48_0
   \   000002                       ;               // Fall through to label ??Subroutine48_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine20:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE2710                LDW       X, #0x2710
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine17:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_168:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_135:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 C60000                LD        A, L:daily_hour_off
   \   000014 8D000000              CALLF     ??Subroutine48_0
   \                     ??CrossCallReturnLabel_166:
   \   000018 C60000                LD        A, L:daily_minute_off
   \   00001B 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_136:
   \   00001F CF0000                LDW       L:time_off, X
   \   000022 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine43:
   \   000000 9097                  LD        YL, A
   \   000002 90BF00                LDW       S:?w0, Y
   \   000005 72BB0000              ADDW      X, S:?w0
   \   000009 87                    RETF
    338          

   \                                 In section .far_func.text, align 1, keep-with-next
    339          void InitI2C(void)
    340          {
    341             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    342             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    343             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    344          }
    345          

   \                                 In section .far_func.text, align 1, keep-with-next
    346          bool I2C_Start(void)
    347          {
    348             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    349                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    350              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_117:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    351                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    352                  {
    353                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    354                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    355                  }
    356                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    357          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    358          

   \                                 In section .far_func.text, align 1, keep-with-next
    359          bool I2C_WA(u8 address)
    360          {
    361            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    362                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    363                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_116:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    364                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    365                   {
    366                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    367                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    368                   }
    369                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    370          }
    371          

   \                                 In section .far_func.text, align 1, keep-with-next
    372          bool I2C_RA(u8 address)
    373          {
    374            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    375                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    376                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_118:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    377                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    378                   {
    379                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    380                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    381                   }
    382                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    383          }
    384          
    385          

   \                                 In section .far_func.text, align 1, keep-with-next
    386          bool I2C_WD(u8 data)
    387          {
    388           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    389             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    390             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_115:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    391              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    392              {
    393                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    394                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    395              }
    396               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    397          }
    398          

   \                                 In section .far_func.text, align 1, keep-with-next
    399          u8 I2C_RD(void)
    400          {
    401           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    402            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    403           //while((!(I2C->SR1 & 0x40))&&timeout);
    404           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    405           {
    406             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    407             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    408           }
    409           u8 data=I2C_ReceiveData();
    410           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    411          }
    412          
    413            /*
    414          bool Init_DS1307(void)
    415          {
    416             // Test DS1307
    417              error=0;
    418              if (!I2C_Start()) return FALSE;
    419              if(!I2C_WA(0xD0)) return FALSE;
    420              if(!I2C_WD(0x00)) return FALSE;
    421              if(!I2C_WD(0x00)) return FALSE;
    422              I2C_GenerateSTOP(ENABLE);
    423          
    424              // timeout=100;  error=4;
    425              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    426              //    if (!timeout)return FALSE ;
    427               return TRUE;
    428          }
    429             */
    430          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine47_0
   \   000001                       ;               // Fall through to label ??Subroutine47_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    431          bool  ReadDS1307(void)
    432          {
    433                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine32
    434                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_111:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    435                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_114:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    436                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_162:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    437                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine21
    438                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_66:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    439                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    440                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine19
    441                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_62:
   \   000028 C70000                LD        L:seconds, A
    442                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine19
    443                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_61:
   \   00002F C70000                LD        L:minutes, A
    444                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine19
    445                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_60:
   \   000036 C70000                LD        L:hours, A
    446                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine19
    447                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_59:
   \   00003D C70000                LD        L:days, A
    448                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine19
    449                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_58:
   \   000044 C70000                LD        L:`date`, A
    450                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine19
    451                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_57:
   \   00004B C70000                LD        L:mounts, A
    452                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004E 8D000000              CALLF     ?Subroutine19
    453                  years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_56:
   \   000052 C70000                LD        L:years, A
    454                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000055 8D000000              CALLF     ?Subroutine22
    455                  u8 data1 = I2C_RD();
    456                //Last read byte by I2C slave
    457                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \                     ??CrossCallReturnLabel_68:
   \   000059 8D000000              CALLF     ?Subroutine25
    458                 I2C_GenerateSTOP(ENABLE);
    459                 temp2= I2C_RD();
   \                     ??CrossCallReturnLabel_73:
   \   00005D 8D000000              CALLF     I2C_RD
   \   000061 C70000                LD        L:temp2, A
    460                 return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    461          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_130:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_129:
   \   000004 AC000000              JPF       bcd2hex
    462          

   \                                 In section .far_func.text, align 1, keep-with-next
    463          bool Check_DS1307(void)
    464          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    465             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    466                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine32
    467                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_110:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    468                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_113:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    469                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine47_0
   \                     ??CrossCallReturnLabel_165:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    470                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine21
    471                  //Last read byte by I2C slave
    472                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_65:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    473                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    474                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine22
    475                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_67:
   \   00002E B700                  LD        S:?b8, A
    476                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine25
    477                 I2C_GenerateSTOP(ENABLE);
    478                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_74:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    479                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    480          }
    481          

   \                                 In section .far_func.text, align 1, keep-with-next
    482          bool Set_DS1307()
    483          {
    484                 // convert hex or decimal to bcd format
    485          
    486          
    487                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine32
    488                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_109:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    489                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_112:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    490                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_161:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    491                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_102:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    492                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_103:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    493                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_104:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    494                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_105:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    495                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_106:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    496                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_107:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    497                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_108:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    498                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine47_0
   \                     ??CrossCallReturnLabel_163:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    499                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine47_0
   \                     ??CrossCallReturnLabel_164:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    500                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    501          
    502          
    503             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    504          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    505          
    506          

   \                                 In section .far_func.text, align 1, keep-with-next
    507          u8 convert_tobcd(u8 data)
    508          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    509             u8 data_second_decimal=data/10;
    510             u8 data_first_decimal=data - 10*data_second_decimal;
    511             data=16*data_second_decimal + data_first_decimal;
    512            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    513          }
    514          

   \                                 In section .far_func.text, align 1, keep-with-next
    515          u8 bcd2hex(u8 bcd)
    516          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    517            u8 hex=0;
    518            hex=(bcd>>4)*10 +(bcd&0x0f);
    519            bcd=0;
    520            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    521          }
    522          
    523          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    524          bool Set_Clock()
    525          {
    526              //Clear Display
    527             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine6
    528             Delay1(1000);
    529             line_lcd=0;
    530              printf("\nYears:");
   \                     ??CrossCallReturnLabel_23:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    531                do
    532              {
    533               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine18
    534               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_53:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    535                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine46_0
    536              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_154:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_81:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    537          
    538               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    539              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    540                do
    541              {
    542               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine18
    543               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_54:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    544                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    545              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_82:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    546          
    547              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine6
    548               Delay1(1000);
    549                line_lcd=0;
    550              printf("\nDate:");
   \                     ??CrossCallReturnLabel_24:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    551                do
    552              {
    553               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine18
    554               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_55:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    555                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    556              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_83:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    557          
    558          
    559              //Clear Display
    560             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine6
    561             Delay1(1000);
    562             line_lcd=0;
    563              printf("\nDays:");
   \                     ??CrossCallReturnLabel_25:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    564                do
    565              {
    566                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    567               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    568                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    569              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_84:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    570          
    571          
    572          
    573             //Clear Display
    574             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine6
    575             Delay1(1000);
    576             line_lcd=0;
    577              printf("\nHours:");
   \                     ??CrossCallReturnLabel_26:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    578                do
    579              {
    580                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine17
    581               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_49:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    582                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine46_0
    583              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_153:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_85:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    584          
    585               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    586               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    587                do
    588              {
    589                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine17
    590               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_50:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    591                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine24
    592              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_158:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_86:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    593          
    594              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    595              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    596              do
    597              {
    598                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine17
    599               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_51:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    600                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine24
    601              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_157:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_87:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    602          
    603                // Set parameter to DS1307 + time byte
    604                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    605          
    606                //bool k=Check_DS1307();
    607          
    608            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    609          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine46_0
   \   000006                       ;               // Fall through to label ??Subroutine46_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_125:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    610          
    611          

   \                                 In section .far_func.text, align 1, keep-with-next
    612          u8 adj(u8 min,u8 max,u8 now)
    613          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    614             u8 adj=now;
    615             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    616             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    617             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    618             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    619             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    620             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    621          }
    622          
    623          

   \                                 In section .far_func.text, align 1, keep-with-next
    624          bool key_ok_on()
    625          {
    626            //Read Key OK
    627            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_133:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    628             {
    629               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    630                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_132:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    631                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    632             }
    633          
    634            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    635          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    636          

   \                                 In section .far_func.text, align 1, keep-with-next
    637           bool key_plus_on()
    638          {
    639            //Read Key OK
    640              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_70:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    641               {
    642               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    643                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_69:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    644                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    645               }
    646          
    647            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    648          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    649          

   \                                 In section .far_func.text, align 1, keep-with-next
    650            bool key_minus_on()
    651          {
    652            //Read Key OK
    653             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_72:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    654               {
    655               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    656                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_71:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    657                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    658               }
    659          
    660            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    661          }
    662          
    663          

   \                                 In section .far_func.text, align 1, keep-with-next
    664          bool  key_ok_plus()
    665          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    666            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_41:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    667            {
    668                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    669                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_16:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_42:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    670                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_17:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    671            }
    672          
    673           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    674          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_131:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    675          
    676          

   \                                 In section .far_func.text, align 1, keep-with-next
    677          bool Set_Delay_Allarm()
    678          {
    679          
    680             //clr
    681             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine6
    682             Delay1(1000);
    683             line_lcd=0;
    684             printf("\nH On:");
   \                     ??CrossCallReturnLabel_18:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    685            do
    686              {
    687               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    688               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    689                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine46_0
    690              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_156:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_76:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    691          
    692             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine6
    693             Delay1(1000);
    694             line_lcd=0;
    695             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_19:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    696            do
    697              {
    698               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    699               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    700                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine24
    701              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_160:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_77:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    702          
    703              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine6
    704              Delay1(1000);
    705              line_lcd=0;
    706              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_20:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    707            do
    708              {
    709               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    710               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    711                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine46_0
    712              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_155:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_78:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    713          
    714            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine6
    715             Delay1(1000);
    716             line_lcd=0;
    717             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_21:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    718            do
    719              {
    720               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    721               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    722                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine24
    723              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_159:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_79:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    724          
    725               //Computing time_long_on
    726          
    727               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine29
    728               u8 minute=daily_minute_on;
    729               daily_long_on=0;
    730               do
    731               {
    732                    daily_long_on++;
   \                     ??CrossCallReturnLabel_98:
   \   0000DC 8D000000              CALLF     ?Subroutine12
    733                    minute++;
    734                    if (minute==60)
   \                     ??CrossCallReturnLabel_40:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    735                    {
    736                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    737                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    738                    }
    739                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    740          
    741               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_98
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_98
    742          
    743                //Display daily_long_on
    744              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine6
    745              Delay1(1000);
    746              line_lcd=0;
    747              printf("\nLong :");
   \                     ??CrossCallReturnLabel_22:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    748          
    749                do
    750              {
    751               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    752               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    753                 //daily_long_on=adj(0,1440,daily_long_on);
    754              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_80:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    755          
    756              time_on=daily_hour_on*60+daily_minute_on;
   \   000123 8D000000              CALLF     ?Subroutine1
    757              time_off= daily_hour_off*60+daily_minute_off;
    758              //Save data to eeprom
    759               EEPROM_INIT();
   \                     ??CrossCallReturnLabel_0:
   \   000127 8D000000              CALLF     EEPROM_INIT
    760               FLASH_ProgramByte(EEPROM_ADDR,daily_hour_on);
   \   00012B C60000                LD        A, L:daily_hour_on
   \   00012E AE4000                LDW       X, #0x4000
   \   000131 8D000000              CALLF     ?Subroutine4
    761               FLASH_ProgramByte(EEPROM_ADDR+1,daily_minute_on);
   \                     ??CrossCallReturnLabel_11:
   \   000135 C60000                LD        A, L:daily_minute_on
   \   000138 AE4001                LDW       X, #0x4001
   \   00013B 8D000000              CALLF     ?Subroutine4
    762               FLASH_ProgramByte(EEPROM_ADDR+2,daily_hour_off);
   \                     ??CrossCallReturnLabel_10:
   \   00013F C60000                LD        A, L:daily_hour_off
   \   000142 AE4002                LDW       X, #0x4002
   \   000145 8D000000              CALLF     ?Subroutine4
    763               FLASH_ProgramByte(EEPROM_ADDR+3,daily_minute_off);
   \                     ??CrossCallReturnLabel_9:
   \   000149 C60000                LD        A, L:daily_minute_off
   \   00014C AE4003                LDW       X, #0x4003
   \   00014F 8D000000              CALLF     ?Subroutine4
    764          
    765             return TRUE;
   \                     ??CrossCallReturnLabel_8:
   \   000153 A601                  LD        A, #0x1
   \   000155 87                    RETF
    766          
    767          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    768          

   \                                 In section .far_func.text, align 1, keep-with-next
    769          bool Read_Allarm()
    770          {
    771             daily_hour_on=FLASH_ReadByte(EEPROM_ADDR);
   \                     Read_Allarm:
   \   000000 AE4000                LDW       X, #0x4000
   \   000003 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000007 C70000                LD        L:daily_hour_on, A
    772             daily_minute_on=FLASH_ReadByte(EEPROM_ADDR+1);
   \   00000A AE4001                LDW       X, #0x4001
   \   00000D 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   000011 C70000                LD        L:daily_minute_on, A
    773             daily_hour_off=FLASH_ReadByte(EEPROM_ADDR+2);
   \   000014 AE4002                LDW       X, #0x4002
   \   000017 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   00001B C70000                LD        L:daily_hour_off, A
    774             daily_minute_off=FLASH_ReadByte(EEPROM_ADDR+3);
   \   00001E AE4003                LDW       X, #0x4003
   \   000021 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   000025 C70000                LD        L:daily_minute_off, A
    775               // Computting daily_long_on
    776               u8 hour=daily_hour_on;
   \   000028 8D000000              CALLF     ?Subroutine29
    777               u8 minute=daily_minute_on;
    778               daily_long_on=0;
    779               do
    780               {
    781                    daily_long_on++;
   \                     ??CrossCallReturnLabel_97:
   \   00002C 8D000000              CALLF     ?Subroutine12
    782                    minute++;
    783                    if (minute==60)
   \                     ??CrossCallReturnLabel_39:
   \   000030 2607                  JRNE      L:??Read_Allarm_0
    784                    {
    785                      minute=0;
   \   000032 3F00                  CLR       S:?b1
    786                      hour++;
   \   000034 B600                  LD        A, S:?b0
   \   000036 4C                    INC       A
   \   000037 B700                  LD        S:?b0, A
    787                    }
    788                    if(hour==24) hour=0;
   \                     ??Read_Allarm_0:
   \   000039 B600                  LD        A, S:?b0
   \   00003B A118                  CP        A, #0x18
   \   00003D 2602                  JRNE      L:??Read_Allarm_1
   \   00003F 3F00                  CLR       S:?b0
    789          
    790               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_1:
   \   000041 C60000                LD        A, L:daily_hour_off
   \   000044 B100                  CP        A, S:?b0
   \   000046 26E4                  JRNE      L:??CrossCallReturnLabel_97
   \   000048 C60000                LD        A, L:daily_minute_off
   \   00004B B100                  CP        A, S:?b1
   \   00004D 26DD                  JRNE      L:??CrossCallReturnLabel_97
    791          
    792            return TRUE;
   \   00004F A601                  LD        A, #0x1
   \   000051 87                    RETF
    793          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte
    794          

   \                                 In section .far_func.text, align 1, keep-with-next
    795          void EEPROM_INIT()
    796          {
    797            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    798            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    799            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    800          
    801          
    802          
    803          }
    804          
    805          

   \                                 In section .far_func.text, align 1, keep-with-next
    806          void GpioConfiguration()
    807          {
    808          
    809            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    810          
    811            // ADC PE6 NEW PB0
    812            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    813          
    814            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    815            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    816          
    817            //PD0 Led
    818            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     ?Subroutine27
    819            //I2C
    820            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_91:
   \   000032 A610                  LD        A, #0x10
   \   000034 AE5005                LDW       X, #0x5005
   \   000037 8D000000              CALLF     ?Subroutine27
    821            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_92:
   \   00003B A620                  LD        A, #0x20
   \   00003D AE5005                LDW       X, #0x5005
   \   000040 8D000000              CALLF     ?Subroutine28
    822            // Remap Pins pb4,pb5  sda,scl ;
    823          
    824             //Init KEY OK,PLUS,MINUS
    825            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_94:
   \   000044 A610                  LD        A, #0x10
   \   000046 AE5019                LDW       X, #0x5019
   \   000049 8D000000              CALLF     ?Subroutine28
    826            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_95:
   \   00004D A602                  LD        A, #0x2
   \   00004F AE5000                LDW       X, #0x5000
   \   000052 8D000000              CALLF     ?Subroutine28
    827            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_96:
   \   000056 A604                  LD        A, #0x4
   \   000058 AE5000                LDW       X, #0x5000
   \   00005B 8D000000              CALLF     ?Subroutine27
    828          
    829            //Init DS18b20 data pin
    830            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_93:
   \   00005F A604                  LD        A, #0x4
   \   000061 AE500F                LDW       X, #0x500f
   \   000064 AC000000              JPF       GPIO_Init
    831          
    832          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF
    833          

   \                                 In section .far_func.text, align 1, keep-with-next
    834          void InitClk()
    835          {
    836            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    837            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    838            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    839            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    840            CLK_SOURCE_HSI,       // Switch to internal timer.
    841            DISABLE,              // Disable the clock switch interrupt.
    842            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    843          
    844            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine30
    845            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_99:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine30
    846            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_100:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine30
    847            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_101:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    848          
    849          
    850          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    851          
    852          

   \                                 In section .far_func.text, align 1, keep-with-next
    853          void InitAdc()
    854          {
    855               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    856               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    857               /*
    858               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    859                          ADC1_CHANNEL_0,
    860                          ADC1_PRESSEL_FCPU_D4,
    861                           ADC1_EXTTRIG_TIM,
    862          
    863                 */
    864               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    865               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    866                                      ADC1_CHANNEL_0,
    867                                      ADC1_ALIGN_RIGHT
    868                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    869          
    870          
    871               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    872          
    873          
    874               //ADC1_Cmd (ENABLE);
    875               //ADC1->CR1 |= ADC1_CR1_ADON ;
    876               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    877               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    878          
    879          }
    880          
    881          /*
    882          void InitUart()
    883          {
    884             UART2_DeInit();
    885             UART2_Init((u32)9600,
    886                        UART2_WORDLENGTH_8D,
    887                        UART2_STOPBITS_1,
    888                        UART2_PARITY_NO,
    889                        UART2_SYNCMODE_CLOCK_DISABLE,
    890                        UART2_MODE_TXRX_ENABLE
    891                          );
    892          
    893             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    894             UART2_Cmd(ENABLE);
    895          
    896            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    897          }
    898            */
    899          

   \                                 In section .far_func.text, align 1, keep-with-next
    900          void SendChar( u8 Char)
    901          {
    902             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    903            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    904          }
   \   00000E 87                    RETF
    905            /*
    906          void Send_Hello()
    907          {
    908            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    909             Delay1(10);
    910             sprintf(data,"Hello");
    911              u8 i=0;
    912            do
    913           {
    914            SendChar(data[i++]);
    915           } while (data[i]!=0);
    916            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    917            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    918          
    919          
    920          
    921          }
    922              */
    923          
    924          
    925              /*
    926          
    927          void SendData()
    928          {
    929           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    930            Delay1(10);
    931            u8 i=0;
    932            sprintf(data,"%d %c",adcdata,0x0d);
    933           do
    934           {
    935             SendChar(data[i++]);
    936          
    937           } while (data[i]!=0);
    938             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    939            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    940            rx_data=0;
    941          }
    942          */
    943          

   \                                 In section .far_func.text, align 1, keep-with-next
    944          void LCDDataOut(u8 data)
    945          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    946            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_32:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_143
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine45_0
    947            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_143:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_31:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_144
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine45_0
    948            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_144:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_30:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_145
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine45_0
    949            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_145:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_29:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_146
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine45_0
    950          }
   \                     ??CrossCallReturnLabel_146:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_152:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    951          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine45_0
   \   000002                       ;               // Fall through to label ??Subroutine45_0

   \                                 In section .far_func.text, align 1, keep-with-next
    952          void InitLcd()
    953          {
    954           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine9
    955            LCD_RW(0);
    956            LCD_RS(0);
   \                     ??CrossCallReturnLabel_36:
   \   000006 8D000000              CALLF     ?Subroutine10
    957            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_141:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine8
    958          
    959            LCDInstrNibble(0x03);
    960             Delay1(10);
    961            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_34:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    962             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine8
    963            LCDInstrNibble(0x03);
    964             Delay1(10);
    965          
    966             //Line 4
    967            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_33:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    968            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    969            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    970            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    971          
    972            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    973            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
    974          
    975            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine40
    976            Delay1(250);
   \                     ??CrossCallReturnLabel_126:
   \   000048 AE00FA                LDW       X, #0xfa
   \   00004B 8D000000              CALLF     Delay1
    977          
    978            LCDInstr(0x06);
   \   00004F A606                  LD        A, #0x6
   \   000051 8D000000              CALLF     LCDInstr
    979            Delay1(10);
   \   000055 AE000A                LDW       X, #0xa
   \   000058 AC000000              JPF       Delay1
    980          
    981          
    982          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_150:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_149:
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1
    983          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine45_0
   \                     ??CrossCallReturnLabel_147:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_138:
   \   00000D                       REQUIRE ??Subroutine44_0
   \   00000D                       ;               // Fall through to label ??Subroutine44_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_137:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    984          void LCDInstr(u8 Instr)
    985          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    986            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine10
    987            LCD_RW(0);
   \                     ??CrossCallReturnLabel_139:
   \   000009 2000                  JRA       ?Subroutine0
    988            LCDDataOut(Instr>>4);
    989            PulseEnable();
    990            LCDDataOut(Instr & 0x0F);
    991            PulseEnable();
    992          }
    993          

   \                                 In section .far_func.text, align 1, keep-with-next
    994          void LCDData(u8 Data)
    995          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    996            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine7
    997            LCD_RW(0);
   \                     ??CrossCallReturnLabel_28:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    998            LCDDataOut(Data>>4);
    999            PulseEnable() ;
   1000            LCDDataOut(Data & 0x0F) ;
   1001            PulseEnable();
   1002          }
   1003          

   \                                 In section .far_func.text, align 1, keep-with-next
   1004          void LCDInstrNibble(u8 Instr)
   1005          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1006            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine9
   1007            LCD_RW(0);
   1008            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_35:
   \   00000B AC000000              JPF       ??Subroutine44_0
   1009            PulseEnable();
   1010          }
   1011          

   \                                 In section .far_func.text, align 1, keep-with-next
   1012          void PulseEnable(void)
   1013          {
   1014            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine2
   1015             Delay1(1);
   1016            LCD_EN(1);
   1017             Delay1(1);
   1018            LCD_EN(0);
   \                     ??CrossCallReturnLabel_2:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine45_0
   1019             Delay1(1);
   \                     ??CrossCallReturnLabel_142:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1020          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_151:
   \   000006 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_120:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_119:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1021          

   \                                 In section .far_func.text, align 1, keep-with-next
   1022          void LCD_Busy(void)
   1023          {
   1024             //set Port D7 as Input
   1025             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1026             //Set Read
   1027             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine7
   1028             LCD_RS(0);
   \                     ??CrossCallReturnLabel_27:
   \   000013 8D000000              CALLF     ?Subroutine10
   1029             // Read Busy Flag
   1030                timer2=0;
   \                     ??CrossCallReturnLabel_140:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1031             do
   1032             {
   1033             // Enable set
   1034               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine2
   1035                Delay1(1);
   1036               LCD_EN(1);
   1037                Delay1(1);
   1038             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_3:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1039                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1040                //Clear read
   1041              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine45_0
   1042             //set Port D7 as Output
   1043             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_148:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1044          
   1045          }
   1046          
   1047          

   \                                 In section .far_func.text, align 1, keep-with-next
   1048          void LCD(u8 data)
   1049           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1050             //  static u8 linet=0;
   1051          
   1052          
   1053               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_122
   1054               {
   1055          
   1056                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
   1057                   {
   1058                   case 0:
   1059                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
   1060                     count=0;
   \   00001F 725F0000              CLR       L:count
   1061                     break;
   \   000023 2022                  JRA       L:??LCD_4
   1062                   case 1:
   1063                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
   1064                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
   1065                     break;
   \   00002F 2016                  JRA       L:??LCD_4
   1066                   case 2:
   1067                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
   1068                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
   1069                     break;
   \   00003B 200A                  JRA       L:??LCD_4
   1070                   case 3:
   1071                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
   1072                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
   1073                     break;
   1074                   //default:
   1075                    //  LCDInstr(0x80 |0x40);    //Line 1
   1076                    }
   1077                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
   1078                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
   1079                   {
   1080                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
   1081                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine40
   1082                    Delay1(2500);
   \                     ??CrossCallReturnLabel_128:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
   1083                   }
   1084          
   1085                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ?Subroutine37
   1086          
   1087          
   1088               }
   1089          
   1090          
   1091               if (count==20)
   \                     ??CrossCallReturnLabel_122:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
   1092                {
   1093                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
   1094                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
   1095                }
   1096                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
   1097                  {
   1098                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
   1099                    Delay1(1);
   1100                  }
   1101                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
   1102                    {
   1103                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
   1104                      count=0;
   \   000088 725F0000              CLR       L:count
   1105                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
   1106                    }
   1107                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
   1108                        {
   1109                          count=0;
   \   000092 725F0000              CLR       L:count
   1110                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine40
   1111                          Delay1(250);
   \                     ??CrossCallReturnLabel_127:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
   1112                        }
   1113          
   1114          
   1115              /*
   1116                   line++;
   1117                   if (line>3)
   1118                   {
   1119                     line=1;  //Line 0 for Time
   1120                   }
   1121                 switch(line)
   1122                   {
   1123                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1124                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1125                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1126                   default : LCDInstr(0x80 | 0x40); // Line 1
   1127                   }
   1128                   Delay(1);
   1129                   count=0;
   1130                }
   1131          
   1132               */
   1133          
   1134               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
   1135               {
   1136                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
   1137                  Delay1(1);
   \   0000AB 8D000000              CALLF     ?Subroutine37
   1138                 count++;
   \                     ??CrossCallReturnLabel_121:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
   1139               }
   1140           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF
   1141          

   \                                 In section .far_func.text, align 1, keep-with-next
   1142          void InitDelayTimer()
   1143          {
   1144             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1145             //Tclock 16/8=2Mhz  /20 10us
   1146                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1147                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1148                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1149                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1150            //Enable TIM2
   1151                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1152          
   1153          }
   1154          

   \                                 In section .far_func.text, align 1, keep-with-next
   1155          bool DS18_Write(u8 data)
   1156          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1157            disableInterrupts();
   \   000006 9B                    SIM
   1158            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1159            {
   1160             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine11
   1161             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1162             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_37:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_45
   \   00001A 8D000000              CALLF     ?Subroutine14
   1163               //else DS18(0);
   1164             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_45:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1165             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine14
   1166             //Delay1(0);
   1167            }
   \                     ??CrossCallReturnLabel_44:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1168            enableInterrupts();
   \   000032 9A                    RIM
   1169            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1170          
   1171          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_124:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1172          
   1173          

   \                                 In section .far_func.text, align 1, keep-with-next
   1174          u8  DS18_Read()
   1175          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1176              //Init DS18b20 data pin as Input
   1177          
   1178            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1179              disableInterrupts();
   \   000006 9B                    SIM
   1180            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1181            {
   1182              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine11
   1183              Delay_us(1); //Start time slot 4,5 us
   1184              DS18(1);
   \                     ??CrossCallReturnLabel_38:
   \   00000D 8D000000              CALLF     ?Subroutine14
   1185              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_46:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1186              //Delay1(0);
   1187             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_47:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1188              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1189              //  DS18(1);  // Next bit
   1190             // Delay1(0);
   1191          
   1192            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1193              enableInterrupts();
   \   000046 9A                    RIM
   1194              //Init DS18b20 data pin
   1195             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1196             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1197          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1198          

   \                                 In section .far_func.text, align 1, keep-with-next
   1199          bool DS18_Reset()
   1200          {
   1201             //Init Reset Pulse
   1202              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine39
   1203              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_123:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1204              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine14
   1205              //Delay1(1);
   1206              timer2=0;
   \                     ??CrossCallReturnLabel_43:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1207              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 CE0000                LDW       X, L:timer2
   \   000016 A32710                CPW       X, #0x2710
   \   000019 2406                  JRNC      L:??DS18_Reset_1
   \   00001B 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_48:
   \   00001F 26F2                  JRNE      L:??DS18_Reset_0
   1208              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32710                CPW       X, #0x2710
   \   000027 2502                  JRC       L:??DS18_Reset_2
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1209              // Delay1(10);
   1210              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   00002B AE0014                LDW       X, #0x14
   \   00002E 8D000000              CALLF     Delay1
   1211          
   1212              return TRUE;
   \   000032 A601                  LD        A, #0x1
   \   000034 87                    RETF
   1213          }
   1214          

   \                                 In section .far_func.text, align 1, keep-with-next
   1215          bool Read_DS18()
   1216          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 8D000000              CALLF     L:?push_w6
   1217          
   1218             //Init Reset Pulse
   1219               if(!DS18_Reset()) return FALSE;
   \   000008 8D000000              CALLF     DS18_Reset
   \   00000C A100                  CP        A, #0x0
   \   00000E 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   000010 4F                    CLR       A
   \   000011 AC000000              JPF       L:?epilogue_l2_w6
   1220             //Skip ROM Command 0xCC
   1221              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   000015 A6CC                  LD        A, #0xcc
   \   000017 8D000000              CALLF     DS18_Write
   1222             //Function command  CONVERT T [44h]
   1223              DS18_Write(0x44);
   \   00001B A644                  LD        A, #0x44
   \   00001D 8D000000              CALLF     DS18_Write
   1224              //Wait util end convert
   1225              timer2=0;
   \   000021 5F                    CLRW      X
   \   000022 CF0000                LDW       L:timer2, X
   1226               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??Read_DS18_2:
   \   000025 CE0000                LDW       X, L:timer2
   \   000028 A32710                CPW       X, #0x2710
   \   00002B 2408                  JRNC      L:??Read_DS18_3
   \   00002D 8D000000              CALLF     DS18_Read
   \   000031 A100                  CP        A, #0x0
   \   000033 27F0                  JREQ      L:??Read_DS18_2
   1227                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_3:
   \   000035 CE0000                LDW       X, L:timer2
   \   000038 A32711                CPW       X, #0x2711
   \   00003B 24D3                  JRNC      L:??Read_DS18_1
   1228               //u8 temp8=timer2;
   1229              //Init Reset Pulse
   1230              if(!DS18_Reset()) return FALSE;
   \   00003D 8D000000              CALLF     DS18_Reset
   \   000041 A100                  CP        A, #0x0
   \   000043 27CB                  JREQ      L:??Read_DS18_1
   1231              // Skip ROM Command 0xCC
   1232              DS18_Write(0xCC);
   \   000045 A6CC                  LD        A, #0xcc
   \   000047 8D000000              CALLF     DS18_Write
   1233              //Function command READ SCRATCHPAD [BEh]
   1234              DS18_Write(0xBE);
   \   00004B A6BE                  LD        A, #0xbe
   \   00004D 8D000000              CALLF     DS18_Write
   1235               u8 temp1=DS18_Read();
   \   000051 8D000000              CALLF     DS18_Read
   \   000055 B700                  LD        S:?b8, A
   1236               u8 temp2=DS18_Read();
   \   000057 8D000000              CALLF     DS18_Read
   \   00005B B700                  LD        S:?b9, A
   1237               u8 temp3=DS18_Read();
   \   00005D 8D000000              CALLF     DS18_Read
   1238               u8 temp4=DS18_Read();
   \   000061 8D000000              CALLF     DS18_Read
   1239               u8 temp5=DS18_Read();
   \   000065 8D000000              CALLF     DS18_Read
   \   000069 B700                  LD        S:?b10, A
   1240               u8 temp6=DS18_Read();
   \   00006B 8D000000              CALLF     DS18_Read
   1241               u8 temp7=DS18_Read();
   \   00006F 8D000000              CALLF     DS18_Read
   \   000073 B700                  LD        S:?b11, A
   1242               u8 temp8=DS18_Read();
   \   000075 8D000000              CALLF     DS18_Read
   \   000079 B700                  LD        S:?b12, A
   1243               u8 temp9=DS18_Read();
   \   00007B 8D000000              CALLF     DS18_Read
   \   00007F B700                  LD        S:?b13, A
   1244               DS18_Reset();
   \   000081 8D000000              CALLF     DS18_Reset
   1245          
   1246          
   1247                line_lcd=0;
   \   000085 725F0000              CLR       L:line_lcd
   1248                printf("\n%02x%02x%02x",temp2,temp1,temp5);
   \   000089 5F                    CLRW      X
   \   00008A 41                    EXG       A, XL
   \   00008B B600                  LD        A, S:?b10
   \   00008D 41                    EXG       A, XL
   \   00008E 89                    PUSHW     X
   \   00008F 41                    EXG       A, XL
   \   000090 B600                  LD        A, S:?b8
   \   000092 41                    EXG       A, XL
   \   000093 89                    PUSHW     X
   \   000094 41                    EXG       A, XL
   \   000095 B600                  LD        A, S:?b9
   \   000097 41                    EXG       A, XL
   \   000098 89                    PUSHW     X
   \   000099 AE0000                LDW       X, #`?<Constant "\\n%02x%02x%02x">`
   \   00009C 8D000000              CALLF     printf
   \   0000A0 5B06                  ADD       SP, #0x6
   1249                line_lcd=1;
   \   0000A2 35010000              MOV       L:line_lcd, #0x1
   1250                printf("\n%02x%02x%02x",temp7,temp8,temp9);
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b13
   \   0000AA 41                    EXG       A, XL
   \   0000AB 89                    PUSHW     X
   \   0000AC 41                    EXG       A, XL
   \   0000AD B600                  LD        A, S:?b12
   \   0000AF 41                    EXG       A, XL
   \   0000B0 89                    PUSHW     X
   \   0000B1 41                    EXG       A, XL
   \   0000B2 B600                  LD        A, S:?b11
   \   0000B4 41                    EXG       A, XL
   \   0000B5 89                    PUSHW     X
   \   0000B6 AE0000                LDW       X, #`?<Constant "\\n%02x%02x%02x">`
   \   0000B9 8D000000              CALLF     printf
   \   0000BD 5B06                  ADD       SP, #0x6
   1251                  while (!key_ok_on());
   \                     ??Read_DS18_4:
   \   0000BF 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_75:
   \   0000C3 27FA                  JREQ      L:??Read_DS18_4
   1252          
   1253               //u8 temp3=DS18_Read();
   1254          
   1255          
   1256          
   1257          
   1258          
   1259          
   1260          
   1261          
   1262          
   1263              return TRUE;
   \   0000C5 A601                  LD        A, #0x1
   \   0000C7 AC000000              JPF       L:?epilogue_l2_w6
   1264          }
   1265          
   1266           /*
   1267          u16 Average()
   1268          {
   1269           //Find average in measure
   1270            u8 i=0;
   1271            u16 Summa=0;
   1272            do
   1273            {
   1274             Summa+=measure[i++];
   1275            } while ( measure[i]!=0);
   1276             if(i!=0) Summa=Summa/i;
   1277             return Summa;
   1278          }
   1279             */
   1280          

   \                                 In section .far_func.text, align 1, keep-with-next
   1281          PUTCHAR_PROTOTYPE
   1282          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1283            /* Place your implementation of fputc here */
   1284            /* e.g. write a character to the USART */
   1285                //USART_SendData(USART3, (u8) ch);
   1286               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1287             /* Loop until the end of transmission */
   1288              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1289            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1290          }
   1291          
   1292          

   \                                 In section .far_func.text, align 1, keep-with-next
   1293          void Delay1(u16 Delay)
   1294          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1295              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1296            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1297            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1298          }
   \   00000D 87                    RETF
   1299          

   \                                 In section .far_func.text, align 1, keep-with-next
   1300           void Delay2(u16 Delay)
   1301          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1302            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1303            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1304          }
   \   00000D 87                    RETF
   1305          
   1306          

   \                                 In section .far_func.text, align 1, keep-with-next
   1307          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1308          {
   1309            //disableInterrupts();
   1310            do
   1311              {
   1312                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1313                nop();
   \   000001 9D                    NOP
   1314              }
   1315              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1316            //enableInterrupts();
   1317          }
   \   000005 87                    RETF
   1318          
   1319          
   1320          
   1321          /*
   1322          void Delay12 (u16 Delay)
   1323          {
   1324            timer2=0;
   1325            while ( timer2 < Delay); ;
   1326          }
   1327          */
   1328          
   1329          
   1330          #ifdef USE_FULL_ASSERT
   1331          
   1332          /**
   1333            * @brief  Reports the name of the source file and the source line number
   1334            *   where the assert_param error has occurred.
   1335            * @param file: pointer to the source file name
   1336            * @param line: assert_param error line source number
   1337            * @retval : None
   1338            */

   \                                 In section .far_func.text, align 1
   1339          void assert_failed(u8* file, u32 line)
   1340          {
   1341            /* User can add his own implementation to report the file name and line number,
   1342               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1343          
   1344            /* Infinite loop */
   1345            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1346            {
   1347          
   1348            }
   1349          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n      ">`:
   \   000000 0A2020202020          DC8 "\012      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n ON">`:
   \   000000 0A204F4E00            DC8 "\012 ON"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n OFF">`:
   \   000000 0A204F464600          DC8 "\012 OFF"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02x%02x%02x">`:
   \   000000 0A2530327825          DC8 "\012%02x%02x%02x"
   1350          #endif
   1351          
   1352          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     l                                 1
     result                            4
     k                                 2
     ?Subroutine26                     7
     main                            338
     ?Subroutine36                     2
     ??Subroutine48_0                 12
     ?Subroutine20                    16
     ?Subroutine17                    10
     ?Subroutine1                     35
     ?Subroutine43                    10
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine35                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine34                     1
     ??Subroutine47_0                  7
     ?Subroutine33                     9
     ?Subroutine32                    11
     ReadDS1307                      103
     ?Subroutine25                    11
     ?Subroutine22                     5
     ?Subroutine41                    10
     ?Subroutine21                    13
     ?Subroutine19                     8
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine31                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine40                     6
     Set_Clock                       395
     ?Subroutine24                     6
     ??Subroutine46_0                  5
     ?Subroutine18                    10
     ?Subroutine6                     16
     adj                              77
     key_ok_on                        41
     ?Subroutine42                     7
     key_plus_on                      37
     ?Subroutine23                     7
     ?Subroutine5                      7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine13                    26
     Set_Delay_Allarm                342
     ?Subroutine29                    15
     ?Subroutine12                    15
     ?Subroutine4                      9
     Read_Allarm                      82
     ?Subroutine3                      9
     EEPROM_INIT                      15
     GpioConfiguration               104
     ?Subroutine28                     9
     ?Subroutine27                     9
     InitClk                          56
     ?Subroutine30                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine7                      7
     ??Subroutine45_0                  5
     ?Subroutine38                     7
     ?Subroutine10                     2
     InitLcd                          92
     ?Subroutine9                     11
     ?Subroutine8                     17
     ?Subroutine0                     13
     ??Subroutine44_0                 10
     ?Subroutine16                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine2                     24
     ?Subroutine37                     6
     LCD_Busy                         69
     LCD                             186
     InitDelayTimer                   29
     DS18_Write                       57
     ?Subroutine14                     9
     ?Subroutine11                    10
     ?Subroutine39                     9
     DS18_Read                        77
     ?Subroutine15                    12
     DS18_Reset                       53
     Read_DS18                       203
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n      ">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\n ON">               5
     ?<Constant "\n OFF">              6
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4
     ?<Constant "\n%02x%02x%02x">     14

 
 3 632 bytes in section .far_func.text
    94 bytes in section .near.bss
     3 bytes in section .near.data
   206 bytes in section .near.rodata
 
 3 632 bytes of CODE  memory
   206 bytes of CONST memory
    97 bytes of DATA  memory

Errors: none
Warnings: none
