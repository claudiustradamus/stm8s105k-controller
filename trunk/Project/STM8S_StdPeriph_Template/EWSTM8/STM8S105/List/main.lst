###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             21/Jul/2013  00:03:38 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          
     14          /* Includes ------------------------------------------------------------------*/
     15          #include "stm8s.h"
     16          #include "stdio.h"
     17          #include "string.h"
     18          /* Private defines -----------------------------------------------------------*/
     19          
     20          /* ================ LCD ======================= */
     21          
     22          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     23          #define LCD_PORT (GPIOC)
     24          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     25          #define DATA4 GPIO_PIN_4
     26          #define DATA5 GPIO_PIN_5
     27          #define DATA6 GPIO_PIN_6
     28          #define DATA7 GPIO_PIN_7
     29          #define EN  GPIO_PIN_3
     30          #define RW  GPIO_PIN_1
     31          #define RS  GPIO_PIN_2
     32          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     33          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     34          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     35          
     36          #define key_ok    GPIO_PIN_4
     37          #define key_plus  GPIO_PIN_1
     38          #define key_minus GPIO_PIN_2
     39          
     40          #ifdef __GNUC__
     41            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     42               set to 'Yes') calls __io_putchar() */
     43            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     44          #else
     45            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     46          #endif /* __GNUC__ */
     47          
     48          
     49          
     50          
     51          #define SpecialSymbol 0x1b //Esc to start message
     52          #define data_size 20
     53          #define key_time 8000
     54          #define key_time_ok 15000
     55          #define DS_Control  0x10  // Out 1s
     56          
     57          
     58          
     59          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     60          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     61          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     62          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     63          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     64          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     65          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     66          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     67          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     68          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     69          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     70          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     71          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
     72          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     73          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     74          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
     75          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     76          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     77          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1
     78          //u8 index=0;

   \                                 In section .near.bss, align 1
     79          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
     80          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
     81          
     82          
     83          
     84          
     85          
     86          
     87          
     88          
     89          /* Private function prototypes -----------------------------------------------*/
     90          void InitHardware();
     91          void GpioConfiguration();
     92          void InitClk();
     93          void InitAdc();
     94          void InitI2C();
     95          bool ReadDS1307();
     96          //void InitUart();
     97          void InitLcd();
     98          void InitDelayTimer();
     99          void Delay1( u16 Delay);
    100          void Delay2( u16 Delay);
    101          void LCDInstrNibble (u8 Instr);
    102          void LCDInstr(u8 Instr);
    103          void LCDDataOut(u8 data);
    104          void LCD_Busy();
    105          void PulseEnable();
    106          //void SendData();
    107          void SendChar(u8 Char);
    108          //void Send_Hello();
    109          bool Set_Clock();
    110          bool key_ok_on();
    111          bool key_plus_on();
    112          bool key_minus_on();
    113          bool Init_DS1307(void);
    114          bool Check_DS1307(void);
    115          bool I2C_Start(void);
    116          bool I2C_WA(u8 address);
    117          bool I2C_WD(u8 data);
    118          bool I2C_RA(u8 address);
    119          bool Set_DS1307();
    120          u8 convert_tobcd(u8 data);
    121          u8 I2C_RD(void);
    122          u8 adj(u8 min,u8 max,u8 now);
    123          u8 bcd2hex(u8 bcd);
    124          
    125          u16  Average();
    126          
    127          
    128          /* Private functions ---------------------------------------------------------*/
    129          

   \                                 In section .far_func.text, align 1, keep-with-next
    130          void main(void)
    131          {
    132              /*High speed internal clock prescaler: 1*/
    133              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    134          
    135              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    136              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    137              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    138              //InitUart();
    139              enableInterrupts();
   \   00000C 9A                    RIM
    140              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   00000D A680                  LD        A, #0x80
   \   00000F AE500F                LDW       X, #0x500f
   \   000012 8D000000              CALLF     GPIO_WriteLow
    141              InitLcd();
   \   000016 8D000000              CALLF     InitLcd
    142              InitAdc();
   \   00001A 8D000000              CALLF     InitAdc
    143              InitI2C();
   \   00001E 8D000000              CALLF     InitI2C
    144              //years=bcd2hex(13);
    145              Delay1(1000);
   \   000022 AE03E8                LDW       X, #0x3e8
   \   000025 8D000000              CALLF     Delay1
    146               if (!ReadDS1307())
   \   000029 8D000000              CALLF     ReadDS1307
   \   00002D A100                  CP        A, #0x0
   \   00002F 2615                  JRNE      L:??main_0
    147               {
    148                 printf("\n E2:%d",error);
   \   000031 C60000                LD        A, L:error
   \   000034 5F                    CLRW      X
   \   000035 97                    LD        XL, A
   \   000036 89                    PUSHW     X
   \   000037 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00003A 8D000000              CALLF     printf
   \   00003E 5B02                  ADD       SP, #0x2
    149                 // Reset the CPU: Enable the watchdog and wait until it expires
    150                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000040 35CC50E0              MOV       L:0x50e0, #0xcc
    151                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_1:
   \   000044 20FE                  JRA       L:??main_1
    152               }
    153               //Send_Hello();
    154              //line_lcd=0;
    155              //printf("\nHello");
    156          
    157              if (!Check_DS1307())
   \                     ??main_0:
   \   000046 8D000000              CALLF     Check_DS1307
   \   00004A A100                  CP        A, #0x0
   \   00004C 2653                  JRNE      L:??main_2
    158              {
    159               line_lcd=0;
   \   00004E 725F0000              CLR       L:line_lcd
    160               printf("\nSetClock");
   \   000052 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000055 8D000000              CALLF     printf
    161                Set_Clock();
   \   000059 8D000000              CALLF     Set_Clock
   \   00005D 2042                  JRA       L:??main_2
    162          
    163              }
    164          
    165          
    166               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    167          
    168               // Working fuction
    169              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    170          
    171              while(1)
    172              {
    173                ADC1_Cmd (ENABLE);
    174          
    175                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    176                   Delay2(10000);
    177                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    178                   Delay2(10000);
    179          
    180                line_lcd=0;
    181               if (!ReadDS1307())
    182               {
    183                 printf("\n E2:%d",error);
    184                  //restart i2c
    185                // Reset the CPU: Enable the watchdog and wait until it expires
    186                 IWDG->KR = IWDG_KEY_ENABLE;
    187                 while ( 1 );    // Wait until reset occurs from IWDG
    188          
    189          
    190               }
    191                 else  printf("\n      ");
   \                     ??main_3:
   \   00005F AE0000                LDW       X, #`?<Constant "\\n      ">`
   \   000062 8D000000              CALLF     printf
    192               line_lcd=1;
   \   000066 8D000000              CALLF     ?Subroutine8
    193               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_23:
   \   00006A 89                    PUSHW     X
   \   00006B C60000                LD        A, L:minutes
   \   00006E 97                    LD        XL, A
   \   00006F 89                    PUSHW     X
   \   000070 C60000                LD        A, L:hours
   \   000073 97                    LD        XL, A
   \   000074 89                    PUSHW     X
   \   000075 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000078 8D000000              CALLF     printf
   \   00007C 5B06                  ADD       SP, #0x6
    194               //line_lcd=2;
    195               //printf("\n Just Test:%X", timer2);
    196                   //if (rx_data==SpecialSymbol) SendData();
    197                //SendData();
    198          
    199                if (key_ok_on())
   \   00007E 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_75:
   \   000082 271D                  JREQ      L:??main_2
    200                {
    201                  line_lcd=0;
   \   000084 725F0000              CLR       L:line_lcd
    202                  printf("\n%02d:%02d:%02d",years,mounts,date);
   \   000088 C60000                LD        A, L:`date`
   \   00008B 5F                    CLRW      X
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E C60000                LD        A, L:mounts
   \   000091 97                    LD        XL, A
   \   000092 89                    PUSHW     X
   \   000093 C60000                LD        A, L:years
   \   000096 97                    LD        XL, A
   \   000097 89                    PUSHW     X
   \   000098 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00009B 8D000000              CALLF     printf
   \   00009F 5B06                  ADD       SP, #0x6
    203                }
   \                     ??main_2:
   \   0000A1 A601                  LD        A, #0x1
   \   0000A3 8D000000              CALLF     ADC1_Cmd
   \   0000A7 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_34:
   \   0000AB 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   0000AF 725F0000              CLR       L:line_lcd
   \   0000B3 8D000000              CALLF     ReadDS1307
   \   0000B7 A100                  CP        A, #0x0
   \   0000B9 26A4                  JRNE      L:??main_3
   \   0000BB C60000                LD        A, L:error
   \   0000BE 5F                    CLRW      X
   \   0000BF 97                    LD        XL, A
   \   0000C0 89                    PUSHW     X
   \   0000C1 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   0000C4 8D000000              CALLF     printf
   \   0000C8 5B02                  ADD       SP, #0x2
   \   0000CA 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_4:
   \   0000CE 20FE                  JRA       L:??main_4
    204          
    205          
    206              }
    207          
    208          
    209          
    210          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine12:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE2710                LDW       X, #0x2710
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine8:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    211          

   \                                 In section .far_func.text, align 1, keep-with-next
    212          void InitI2C(void)
    213          {
    214             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    215             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    216             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    217          }
    218          

   \                                 In section .far_func.text, align 1, keep-with-next
    219          bool I2C_Start(void)
    220          {
    221             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    222                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    223              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_66:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    224                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    225                  {
    226                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    227                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    228                  }
    229                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    230          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    231          

   \                                 In section .far_func.text, align 1, keep-with-next
    232          bool I2C_WA(u8 address)
    233          {
    234            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    235                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    236                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_65:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    237                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    238                   {
    239                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    240                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    241                   }
    242                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    243          }
    244          

   \                                 In section .far_func.text, align 1, keep-with-next
    245          bool I2C_RA(u8 address)
    246          {
    247            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    248                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    249                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_67:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    250                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    251                   {
    252                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    253                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    254                   }
    255                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    256          }
    257          
    258          

   \                                 In section .far_func.text, align 1, keep-with-next
    259          bool I2C_WD(u8 data)
    260          {
    261           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    262             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    263             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_64:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    264              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    265              {
    266                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    267                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    268              }
    269               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    270          }
    271          

   \                                 In section .far_func.text, align 1, keep-with-next
    272          u8 I2C_RD(void)
    273          {
    274           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    275            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    276           //while((!(I2C->SR1 & 0x40))&&timeout);
    277           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    278           {
    279             error=4;
   \   000019 35040000              MOV       L:error, #0x4
    280             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    281           }
    282           u8 data=I2C_ReceiveData();
    283           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    284          }
    285          
    286            /*
    287          bool Init_DS1307(void)
    288          {
    289             // Test DS1307
    290              error=0;
    291              if (!I2C_Start()) return FALSE;
    292              if(!I2C_WA(0xD0)) return FALSE;
    293              if(!I2C_WD(0x00)) return FALSE;
    294              if(!I2C_WD(0x00)) return FALSE;
    295              I2C_GenerateSTOP(ENABLE);
    296          
    297              // timeout=100;  error=4;
    298              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    299              //    if (!timeout)return FALSE ;
    300               return TRUE;
    301          }
    302             */
    303          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine30_0
   \   000001                       ;               // Fall through to label ??Subroutine30_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    304          bool  ReadDS1307(void)
    305          {
    306                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine20
    307                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_60:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    308                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_63:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    309                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_101:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    310                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine13
    311                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_36:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    312                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    313                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine11
    314                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_32:
   \   000028 C70000                LD        L:seconds, A
    315                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine11
    316                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_31:
   \   00002F C70000                LD        L:minutes, A
    317                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine11
    318                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_30:
   \   000036 C70000                LD        L:hours, A
    319                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine11
    320                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_29:
   \   00003D C70000                LD        L:days, A
    321                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine11
    322                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_28:
   \   000044 C70000                LD        L:`date`, A
    323                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine11
    324                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_27:
   \   00004B C70000                LD        L:mounts, A
    325                //Last read byte by I2C slave
    326                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine15
    327                 I2C_GenerateSTOP(ENABLE);
    328                 years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   000052 8D000000              CALLF     bcd2hex
   \   000056 C70000                LD        L:years, A
    329                 return TRUE;
   \   000059 A601                  LD        A, #0x1
   \   00005B 87                    RETF
    330          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 8D000000              CALLF     I2C_GenerateSTOP
   \   00000B AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 8D000000              CALLF     I2C_RD
   \   00000A AC000000              JPF       bcd2hex
    331          

   \                                 In section .far_func.text, align 1, keep-with-next
    332          bool Check_DS1307(void)
    333          {
    334             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    335                 error=0;
   \                     Check_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine20
    336                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_59:
   \   000004 2602                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    337                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_62:
   \   00000C 27F8                  JREQ      L:??Check_DS1307_1
    338                 if(!I2C_WD(0x08)) return FALSE;
   \   00000E A608                  LD        A, #0x8
   \   000010 8D000000              CALLF     ??Subroutine30_0
   \                     ??CrossCallReturnLabel_104:
   \   000014 27F0                  JREQ      L:??Check_DS1307_1
    339                 I2C_GenerateSTOP(ENABLE);
   \   000016 8D000000              CALLF     ?Subroutine13
    340                  //Last read byte by I2C slave
    341                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_35:
   \   00001A 27EA                  JREQ      L:??Check_DS1307_1
    342                 if(!I2C_RA(0xD0))return FALSE;
   \   00001C A6D0                  LD        A, #0xd0
   \   00001E 8D000000              CALLF     I2C_RA
   \   000022 A100                  CP        A, #0x0
   \   000024 27E0                  JREQ      L:??Check_DS1307_1
    343                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000026 8D000000              CALLF     ?Subroutine15
    344                 I2C_GenerateSTOP(ENABLE);
    345                 u8 data = I2C_RD();
    346                  Delay1(100);
   \                     ??CrossCallReturnLabel_41:
   \   00002A AE0064                LDW       X, #0x64
   \   00002D 8D000000              CALLF     Delay1
    347                 //temp_flag=data;
    348                 if (data != 0xAA) return FALSE;
   \   000031 A1AA                  CP        A, #0xaa
   \   000033 26D1                  JRNE      L:??Check_DS1307_1
    349                 else return TRUE;
   \   000035 A601                  LD        A, #0x1
   \   000037 87                    RETF
    350          }
    351          

   \                                 In section .far_func.text, align 1, keep-with-next
    352          bool Set_DS1307()
    353          {
    354                 // convert hex or decimal to bcd format
    355          
    356          
    357                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine20
    358                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_58:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    359                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_61:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    360                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_100:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    361                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_51:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    362                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_52:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    363                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_53:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    364                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_54:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    365                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_55:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    366                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_56:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    367                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_57:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    368                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine30_0
   \                     ??CrossCallReturnLabel_102:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    369                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine30_0
   \                     ??CrossCallReturnLabel_103:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    370                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    371          
    372          
    373             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    374          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    375          
    376          

   \                                 In section .far_func.text, align 1, keep-with-next
    377          u8 convert_tobcd(u8 data)
    378          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    379             u8 data_second_decimal=data/10;
    380             u8 data_first_decimal=data - 10*data_second_decimal;
    381             data=16*data_second_decimal + data_first_decimal;
    382            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    383          }
    384          

   \                                 In section .far_func.text, align 1, keep-with-next
    385          u8 bcd2hex(u8 bcd)
    386          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    387            u8 hex=0;
    388            hex=(bcd>>4)*10 +(bcd&0x0f);
    389            bcd=0;
    390            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    391          }
    392          
    393          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    394          bool Set_Clock()
    395          {
    396              //Clear Display
    397             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine7
    398             Delay1(1000);
    399             line_lcd=0;
    400              printf("\nYears:");
   \                     ??CrossCallReturnLabel_16:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    401                do
    402              {
    403               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine9
    404               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_24:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    405                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 4F                    CLR       A
   \   00002D 8D000000              CALLF     adj
   \   000031 C70000                LD        L:years, A
    406              } while (!key_ok_on());
   \   000034 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_68:
   \   000038 27D1                  JREQ      L:??Set_Clock_0
    407          
    408               line_lcd=0;
   \   00003A 725F0000              CLR       L:line_lcd
    409              printf("\nMounts:");
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000041 8D000000              CALLF     printf
    410                do
    411              {
    412               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000045 8D000000              CALLF     ?Subroutine9
    413               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_25:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:mounts
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F C60000                LD        A, L:years
   \   000052 97                    LD        XL, A
   \   000053 89                    PUSHW     X
   \   000054 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000057 8D000000              CALLF     printf
   \   00005B 5B06                  ADD       SP, #0x6
    414                 mounts=adj(1,12,mounts);
   \   00005D C60000                LD        A, L:mounts
   \   000060 B700                  LD        S:?b1, A
   \   000062 350C0000              MOV       S:?b0, #0xc
   \   000066 A601                  LD        A, #0x1
   \   000068 8D000000              CALLF     adj
   \   00006C C70000                LD        L:mounts, A
    415              } while (!key_ok_on());
   \   00006F 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_69:
   \   000073 27D0                  JREQ      L:??Set_Clock_1
    416          
    417              LCDInstr(0x01);
   \   000075 8D000000              CALLF     ?Subroutine7
    418               Delay1(1000);
    419                line_lcd=0;
    420              printf("\nDate:");
   \                     ??CrossCallReturnLabel_17:
   \   000079 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007C 8D000000              CALLF     printf
    421                do
    422              {
    423               line_lcd=1;
   \                     ??Set_Clock_2:
   \   000080 8D000000              CALLF     ?Subroutine9
    424               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_26:
   \   000084 89                    PUSHW     X
   \   000085 C60000                LD        A, L:mounts
   \   000088 97                    LD        XL, A
   \   000089 89                    PUSHW     X
   \   00008A C60000                LD        A, L:years
   \   00008D 97                    LD        XL, A
   \   00008E 89                    PUSHW     X
   \   00008F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000092 8D000000              CALLF     printf
   \   000096 5B06                  ADD       SP, #0x6
    425                 date=adj(1,31,date);
   \   000098 C60000                LD        A, L:`date`
   \   00009B B700                  LD        S:?b1, A
   \   00009D 351F0000              MOV       S:?b0, #0x1f
   \   0000A1 A601                  LD        A, #0x1
   \   0000A3 8D000000              CALLF     adj
   \   0000A7 C70000                LD        L:`date`, A
    426              } while (!key_ok_on());
   \   0000AA 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_70:
   \   0000AE 27D0                  JREQ      L:??Set_Clock_2
    427          
    428          
    429              //Clear Display
    430             LCDInstr(0x01);
   \   0000B0 8D000000              CALLF     ?Subroutine7
    431             Delay1(1000);
    432             line_lcd=0;
    433              printf("\nDays:");
   \                     ??CrossCallReturnLabel_18:
   \   0000B4 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B7 8D000000              CALLF     printf
    434                do
    435              {
    436                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BB 35010000              MOV       L:line_lcd, #0x1
    437               printf("\n%02d",days);
   \   0000BF C60000                LD        A, L:days
   \   0000C2 5F                    CLRW      X
   \   0000C3 97                    LD        XL, A
   \   0000C4 89                    PUSHW     X
   \   0000C5 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C8 8D000000              CALLF     printf
   \   0000CC 5B02                  ADD       SP, #0x2
    438                 days=adj(1,7,days);
   \   0000CE C60000                LD        A, L:days
   \   0000D1 B700                  LD        S:?b1, A
   \   0000D3 35070000              MOV       S:?b0, #0x7
   \   0000D7 A601                  LD        A, #0x1
   \   0000D9 8D000000              CALLF     adj
   \   0000DD C70000                LD        L:days, A
    439              } while (!key_ok_on());
   \   0000E0 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_71:
   \   0000E4 27D5                  JREQ      L:??Set_Clock_3
    440          
    441          
    442          
    443             //Clear Display
    444             LCDInstr(0x01);
   \   0000E6 8D000000              CALLF     ?Subroutine7
    445             Delay1(1000);
    446             line_lcd=0;
    447              printf("\nHours:");
   \                     ??CrossCallReturnLabel_19:
   \   0000EA AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000ED 8D000000              CALLF     printf
    448                do
    449              {
    450                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F1 8D000000              CALLF     ?Subroutine8
    451               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_20:
   \   0000F5 89                    PUSHW     X
   \   0000F6 C60000                LD        A, L:minutes
   \   0000F9 97                    LD        XL, A
   \   0000FA 89                    PUSHW     X
   \   0000FB C60000                LD        A, L:hours
   \   0000FE 97                    LD        XL, A
   \   0000FF 89                    PUSHW     X
   \   000100 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000103 8D000000              CALLF     printf
   \   000107 5B06                  ADD       SP, #0x6
    452                 hours=adj(0,24,hours);
   \   000109 C60000                LD        A, L:hours
   \   00010C B700                  LD        S:?b1, A
   \   00010E 35180000              MOV       S:?b0, #0x18
   \   000112 4F                    CLR       A
   \   000113 8D000000              CALLF     adj
   \   000117 C70000                LD        L:hours, A
    453              } while (!key_ok_on());
   \   00011A 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_72:
   \   00011E 27D1                  JREQ      L:??Set_Clock_4
    454          
    455               line_lcd=0;
   \   000120 725F0000              CLR       L:line_lcd
    456               printf("\nMinutes:");
   \   000124 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000127 8D000000              CALLF     printf
    457                do
    458              {
    459                line_lcd=1;
   \                     ??Set_Clock_5:
   \   00012B 8D000000              CALLF     ?Subroutine8
    460               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_21:
   \   00012F 89                    PUSHW     X
   \   000130 C60000                LD        A, L:minutes
   \   000133 97                    LD        XL, A
   \   000134 89                    PUSHW     X
   \   000135 C60000                LD        A, L:hours
   \   000138 97                    LD        XL, A
   \   000139 89                    PUSHW     X
   \   00013A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013D 8D000000              CALLF     printf
   \   000141 5B06                  ADD       SP, #0x6
    461                 minutes=adj(0,60,minutes);
   \   000143 C60000                LD        A, L:minutes
   \   000146 8D000000              CALLF     ?Subroutine18
    462              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_50:
   \   00014A C70000                LD        L:minutes, A
   \   00014D 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_73:
   \   000151 27D8                  JREQ      L:??Set_Clock_5
    463          
    464              line_lcd=0;
   \   000153 725F0000              CLR       L:line_lcd
    465              printf("\nSeconds:");
   \   000157 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   00015A 8D000000              CALLF     printf
    466              do
    467              {
    468                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015E 8D000000              CALLF     ?Subroutine8
    469               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_22:
   \   000162 89                    PUSHW     X
   \   000163 C60000                LD        A, L:minutes
   \   000166 97                    LD        XL, A
   \   000167 89                    PUSHW     X
   \   000168 C60000                LD        A, L:hours
   \   00016B 97                    LD        XL, A
   \   00016C 89                    PUSHW     X
   \   00016D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000170 8D000000              CALLF     printf
   \   000174 5B06                  ADD       SP, #0x6
    470                 seconds=adj(0,60,seconds);
   \   000176 C60000                LD        A, L:seconds
   \   000179 8D000000              CALLF     ?Subroutine18
    471              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_49:
   \   00017D C70000                LD        L:seconds, A
   \   000180 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_74:
   \   000184 27D8                  JREQ      L:??Set_Clock_6
    472          
    473                // Set parameter to DS1307 + time byte
    474              Set_DS1307();
   \   000186 8D000000              CALLF     Set_DS1307
    475          
    476          
    477          
    478            return TRUE;
   \   00018A A601                  LD        A, #0x1
   \   00018C 87                    RETF
    479          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353C0000              MOV       S:?b0, #0x3c
   \   000006 4F                    CLR       A
   \   000007 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_80:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    480          
    481          

   \                                 In section .far_func.text, align 1, keep-with-next
    482          u8 adj(u8 min,u8 max,u8 now)
    483          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    484             u8 adj=now;
    485             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    486             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    487             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    488             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    489             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    490             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    491          }
    492          
    493          

   \                                 In section .far_func.text, align 1, keep-with-next
    494          bool key_ok_on()
    495          {
    496            //Read Key OK
    497            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 2622                  JRNE      L:??key_ok_on_0
    498             {
    499               timer2=0;  // Key must be push for timer2 time
   \   00000B 5F                    CLRW      X
   \   00000C CF0000                LDW       L:timer2, X
    500                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000F CE0000                LDW       X, L:timer2
   \   000012 A33A98                CPW       X, #0x3a98
   \   000015 240B                  JRNC      L:??key_ok_on_2
   \   000017 AE5019                LDW       X, #0x5019
   \   00001A 8D000000              CALLF     GPIO_ReadInputData
   \   00001E A510                  BCP       A, #0x10
   \   000020 27ED                  JREQ      L:??key_ok_on_1
    501                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   000022 CE0000                LDW       X, L:timer2
   \   000025 A33A98                CPW       X, #0x3a98
   \   000028 2503                  JRC       L:??key_ok_on_0
   \   00002A A601                  LD        A, #0x1
   \   00002C 87                    RETF
    502             }
    503          
    504            return FALSE;
   \                     ??key_ok_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    505          }
    506          

   \                                 In section .far_func.text, align 1, keep-with-next
    507           bool key_plus_on()
    508          {
    509            //Read Key OK
    510              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_46:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    511               {
    512               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    513                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_45:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    514                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    515               }
    516          
    517            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    518          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    519          

   \                                 In section .far_func.text, align 1, keep-with-next
    520            bool key_minus_on()
    521          {
    522            //Read Key OK
    523             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_48:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    524               {
    525               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    526                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_47:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    527                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    528               }
    529          
    530            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    531          }
    532          
    533          
    534          
    535          

   \                                 In section .far_func.text, align 1, keep-with-next
    536          void GpioConfiguration()
    537          {
    538          
    539            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    540          
    541            // ADC PE6 NEW PB0
    542            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    543          
    544            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    545            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    546          
    547            //PD0 Led
    548            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     GPIO_Init
    549            //I2C
    550            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000032 35B00000              MOV       S:?b0, #0xb0
   \   000036 A610                  LD        A, #0x10
   \   000038 AE5005                LDW       X, #0x5005
   \   00003B 8D000000              CALLF     GPIO_Init
    551            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00003F 35B00000              MOV       S:?b0, #0xb0
   \   000043 A620                  LD        A, #0x20
   \   000045 AE5005                LDW       X, #0x5005
   \   000048 8D000000              CALLF     ?Subroutine14
    552            // Remap Pins pb4,pb5  sda,scl ;
    553          
    554             //Init KEY OK,PLUS,MINUS
    555            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_37:
   \   00004C A610                  LD        A, #0x10
   \   00004E AE5019                LDW       X, #0x5019
   \   000051 8D000000              CALLF     ?Subroutine14
    556            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_38:
   \   000055 A602                  LD        A, #0x2
   \   000057 AE5000                LDW       X, #0x5000
   \   00005A 8D000000              CALLF     ?Subroutine14
    557            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_39:
   \   00005E A604                  LD        A, #0x4
   \   000060 AE5000                LDW       X, #0x5000
   \   000063 AC000000              JPF       GPIO_Init
    558          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF
    559          

   \                                 In section .far_func.text, align 1, keep-with-next
    560          void InitClk()
    561          {
    562            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    563            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    564            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    565            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    566            CLK_SOURCE_HSI,       // Switch to internal timer.
    567            DISABLE,              // Disable the clock switch interrupt.
    568            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    569          
    570            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine16
    571            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_42:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine16
    572            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_43:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine16
    573            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_44:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    574          
    575          
    576          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    577          
    578          

   \                                 In section .far_func.text, align 1, keep-with-next
    579          void InitAdc()
    580          {
    581               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    582               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    583               /*
    584               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    585                          ADC1_CHANNEL_0,
    586                          ADC1_PRESSEL_FCPU_D4,
    587                           ADC1_EXTTRIG_TIM,
    588          
    589                 */
    590               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    591               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    592                                      ADC1_CHANNEL_0,
    593                                      ADC1_ALIGN_RIGHT
    594                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    595          
    596          
    597               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    598          
    599          
    600               //ADC1_Cmd (ENABLE);
    601               //ADC1->CR1 |= ADC1_CR1_ADON ;
    602               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    603               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    604          
    605          }
    606          
    607          /*
    608          void InitUart()
    609          {
    610             UART2_DeInit();
    611             UART2_Init((u32)9600,
    612                        UART2_WORDLENGTH_8D,
    613                        UART2_STOPBITS_1,
    614                        UART2_PARITY_NO,
    615                        UART2_SYNCMODE_CLOCK_DISABLE,
    616                        UART2_MODE_TXRX_ENABLE
    617                          );
    618          
    619             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    620             UART2_Cmd(ENABLE);
    621          
    622            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    623          }
    624            */
    625          

   \                                 In section .far_func.text, align 1, keep-with-next
    626          void SendChar( u8 Char)
    627          {
    628             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    629            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    630          }
   \   00000E 87                    RETF
    631            /*
    632          void Send_Hello()
    633          {
    634            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    635             Delay1(10);
    636             sprintf(data,"Hello");
    637              u8 i=0;
    638            do
    639           {
    640            SendChar(data[i++]);
    641           } while (data[i]!=0);
    642            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    643            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    644          
    645          
    646          
    647          }
    648              */
    649          
    650          
    651              /*
    652          
    653          void SendData()
    654          {
    655           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    656            Delay1(10);
    657            u8 i=0;
    658            sprintf(data,"%d %c",adcdata,0x0d);
    659           do
    660           {
    661             SendChar(data[i++]);
    662          
    663           } while (data[i]!=0);
    664             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    665            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    666            rx_data=0;
    667          }
    668          */
    669          

   \                                 In section .far_func.text, align 1, keep-with-next
    670          void LCDDataOut(u8 data)
    671          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    672            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_7:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_90
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine29_0
    673            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_90:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_91
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine29_0
    674            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_91:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_92
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine29_0
    675            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_92:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_93
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine29_0
    676          }
   \                     ??CrossCallReturnLabel_93:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_99:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    677          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine29_0
   \   000002                       ;               // Fall through to label ??Subroutine29_0

   \                                 In section .far_func.text, align 1, keep-with-next
    678          void InitLcd()
    679          {
    680           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine3
    681            LCD_RW(0);
    682            LCD_RS(0);
   \                     ??CrossCallReturnLabel_9:
   \   000006 8D000000              CALLF     ?Subroutine4
    683            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_88:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine6
    684          
    685            LCDInstrNibble(0x03);
    686             Delay1(10);
    687            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_15:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    688             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine6
    689            LCDInstrNibble(0x03);
    690             Delay1(10);
    691          
    692             //Line 4
    693            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_14:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    694            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    695            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    696            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    697          
    698            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    699            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
    700          
    701            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine27
    702            Delay1(250);
   \                     ??CrossCallReturnLabel_81:
   \   000048 AE00FA                LDW       X, #0xfa
   \   00004B 8D000000              CALLF     Delay1
    703          
    704            LCDInstr(0x06);
   \   00004F A606                  LD        A, #0x6
   \   000051 8D000000              CALLF     LCDInstr
    705            Delay1(10);
   \   000055 AE000A                LDW       X, #0xa
   \   000058 AC000000              JPF       Delay1
    706          
    707          
    708          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_97:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_96:
   \   00000A 87                    RETF
    709          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine29_0
   \                     ??CrossCallReturnLabel_94:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_85:
   \   00000D                       REQUIRE ??Subroutine28_0
   \   00000D                       ;               // Fall through to label ??Subroutine28_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_84:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    710          void LCDInstr(u8 Instr)
    711          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    712            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine4
    713            LCD_RW(0);
   \                     ??CrossCallReturnLabel_86:
   \   000009 2000                  JRA       ?Subroutine0
    714            LCDDataOut(Instr>>4);
    715            PulseEnable();
    716            LCDDataOut(Instr & 0x0F);
    717            PulseEnable();
    718          }
    719          

   \                                 In section .far_func.text, align 1, keep-with-next
    720          void LCDData(u8 Data)
    721          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    722            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine2
    723            LCD_RW(0);
   \                     ??CrossCallReturnLabel_3:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    724            LCDDataOut(Data>>4);
    725            PulseEnable() ;
    726            LCDDataOut(Data & 0x0F) ;
    727            PulseEnable();
    728          }
    729          

   \                                 In section .far_func.text, align 1, keep-with-next
    730          void LCDInstrNibble(u8 Instr)
    731          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    732            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine3
    733            LCD_RW(0);
    734            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_8:
   \   00000B AC000000              JPF       ??Subroutine28_0
    735            PulseEnable();
    736          }
    737          

   \                                 In section .far_func.text, align 1, keep-with-next
    738          void PulseEnable(void)
    739          {
    740            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine1
    741             Delay1(1);
    742            LCD_EN(1);
    743             Delay1(1);
    744            LCD_EN(0);
   \                     ??CrossCallReturnLabel_0:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine29_0
    745             Delay1(1);
   \                     ??CrossCallReturnLabel_89:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
    746          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_98:
   \   000006 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_77:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_76:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
    747          

   \                                 In section .far_func.text, align 1, keep-with-next
    748          void LCD_Busy(void)
    749          {
    750             //set Port D7 as Input
    751             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    752             //Set Read
    753             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine2
    754             LCD_RS(0);
   \                     ??CrossCallReturnLabel_2:
   \   000013 8D000000              CALLF     ?Subroutine4
    755             // Read Busy Flag
    756                timer2=0;
   \                     ??CrossCallReturnLabel_87:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
    757             do
    758             {
    759             // Enable set
    760               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine1
    761                Delay1(1);
    762               LCD_EN(1);
    763                Delay1(1);
    764             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_1:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
    765                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
    766                //Clear read
    767              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine29_0
    768             //set Port D7 as Output
    769             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_95:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
    770          
    771          }
    772          
    773          

   \                                 In section .far_func.text, align 1, keep-with-next
    774          void LCD(u8 data)
    775           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    776             //  static u8 linet=0;
    777          
    778          
    779               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_79
    780               {
    781          
    782                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
    783                   {
    784                   case 0:
    785                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
    786                     count=0;
   \   00001F 725F0000              CLR       L:count
    787                     break;
   \   000023 2022                  JRA       L:??LCD_4
    788                   case 1:
    789                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
    790                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
    791                     break;
   \   00002F 2016                  JRA       L:??LCD_4
    792                   case 2:
    793                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
    794                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
    795                     break;
   \   00003B 200A                  JRA       L:??LCD_4
    796                   case 3:
    797                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
    798                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
    799                     break;
    800                   //default:
    801                    //  LCDInstr(0x80 |0x40);    //Line 1
    802                    }
    803                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
    804                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
    805                   {
    806                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
    807                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine27
    808                    Delay1(2500);
   \                     ??CrossCallReturnLabel_83:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
    809                   }
    810          
    811                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ?Subroutine25
    812          
    813          
    814               }
    815          
    816          
    817               if (count==20)
   \                     ??CrossCallReturnLabel_79:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
    818                {
    819                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
    820                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
    821                }
    822                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
    823                  {
    824                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
    825                    Delay1(1);
    826                  }
    827                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
    828                    {
    829                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
    830                      count=0;
   \   000088 725F0000              CLR       L:count
    831                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
    832                    }
    833                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
    834                        {
    835                          count=0;
   \   000092 725F0000              CLR       L:count
    836                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine27
    837                          Delay1(250);
   \                     ??CrossCallReturnLabel_82:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
    838                        }
    839          
    840          
    841              /*
    842                   line++;
    843                   if (line>3)
    844                   {
    845                     line=1;  //Line 0 for Time
    846                   }
    847                 switch(line)
    848                   {
    849                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
    850                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
    851                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
    852                   default : LCDInstr(0x80 | 0x40); // Line 1
    853                   }
    854                   Delay(1);
    855                   count=0;
    856                }
    857          
    858               */
    859          
    860               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
    861               {
    862                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
    863                  Delay1(1);
   \   0000AB 8D000000              CALLF     ?Subroutine25
    864                 count++;
   \                     ??CrossCallReturnLabel_78:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
    865               }
    866           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF
    867          

   \                                 In section .far_func.text, align 1, keep-with-next
    868          void InitDelayTimer()
    869          {
    870             //Timer 2 use for Delay  long Delay is 40ms for lcd
    871             //Tclock 16/8=2Mhz  /20 10us
    872                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
    873                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
    874                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
    875                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
    876            //Enable TIM2
    877                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
    878          
    879          }
    880          
    881           /*
    882          u16 Average()
    883          {
    884           //Find average in measure
    885            u8 i=0;
    886            u16 Summa=0;
    887            do
    888            {
    889             Summa+=measure[i++];
    890            } while ( measure[i]!=0);
    891             if(i!=0) Summa=Summa/i;
    892             return Summa;
    893          }
    894             */
    895          

   \                                 In section .far_func.text, align 1, keep-with-next
    896          PUTCHAR_PROTOTYPE
    897          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
    898            /* Place your implementation of fputc here */
    899            /* e.g. write a character to the USART */
    900                //USART_SendData(USART3, (u8) ch);
    901               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
    902             /* Loop until the end of transmission */
    903              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
    904            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
    905          }
    906          
    907          

   \                                 In section .far_func.text, align 1, keep-with-next
    908          void Delay1(u16 Delay)
    909          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
    910            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
    911            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
    912          }
   \   00000D 87                    RETF
    913          

   \                                 In section .far_func.text, align 1, keep-with-next
    914           void Delay2(u16 Delay)
    915          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
    916            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
    917            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
    918          }
   \   00000D 87                    RETF
    919          
    920          
    921          
    922          /*
    923          void Delay12 (u16 Delay)
    924          {
    925            timer2=0;
    926            while ( timer2 < Delay); ;
    927          }
    928          */
    929          
    930          
    931          #ifdef USE_FULL_ASSERT
    932          
    933          /**
    934            * @brief  Reports the name of the source file and the source line number
    935            *   where the assert_param error has occurred.
    936            * @param file: pointer to the source file name
    937            * @param line: assert_param error line source number
    938            * @retval : None
    939            */

   \                                 In section .far_func.text, align 1
    940          void assert_failed(u8* file, u32 line)
    941          {
    942            /* User can add his own implementation to report the file name and line number,
    943               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    944          
    945            /* Infinite loop */
    946            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
    947            {
    948          
    949            }
    950          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n      ">`:
   \   000000 0A2020202020          DC8 "\012      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"
    951          #endif
    952          
    953          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     result                            4
     k                                 2
     main                            208
     ?Subroutine24                     7
     ?Subroutine12                    16
     ?Subroutine8                     10
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine23                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine22                     1
     ??Subroutine30_0                  7
     ?Subroutine21                     9
     ?Subroutine20                    11
     ReadDS1307                       92
     ?Subroutine15                    15
     ?Subroutine13                    13
     ?Subroutine11                    14
     Check_DS1307                     56
     Set_DS1307                      108
     ?Subroutine19                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine27                     6
     Set_Clock                       397
     ?Subroutine18                    11
     ?Subroutine9                     10
     ?Subroutine7                     16
     adj                              77
     key_ok_on                        47
     key_plus_on                      37
     ?Subroutine17                     7
     ?Subroutine5                      7
     key_minus_on                     37
     GpioConfiguration               103
     ?Subroutine14                     9
     InitClk                          56
     ?Subroutine16                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine2                      7
     ??Subroutine29_0                  5
     ?Subroutine26                     7
     ?Subroutine4                      2
     InitLcd                          92
     ?Subroutine6                     17
     ?Subroutine3                     11
     ?Subroutine0                     13
     ??Subroutine28_0                 10
     ?Subroutine10                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine1                     24
     ?Subroutine25                     6
     LCD_Busy                         69
     LCD                             186
     InitDelayTimer                   29
     fputc                            18
     Delay1                           14
     Delay2                           14
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\nSetClock">         10
     ?<Constant "\n      ">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10

 
 2 421 bytes in section .far_func.text
    82 bytes in section .near.bss
     3 bytes in section .near.data
   107 bytes in section .near.rodata
 
 2 421 bytes of CODE  memory
   107 bytes of CONST memory
    85 bytes of DATA  memory

Errors: none
Warnings: none
