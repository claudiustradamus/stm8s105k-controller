###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             17/Sep/2013  20:15:57 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59            //Power
     60          #define power_pin GPIO_PIN_3
     61          
     62          
     63          
     64          //EEPROM Address;
     65          #define EEPROM_ADDR 0x4000
     66          #define EEPROM_ADR_STATUSH EEPROM_ADDR + 0
     67          #define EEPROM_ADR_STATUSL EEPROM_ADDR + 1
     68          #define EEPROM_ADR_TIME_ON_HOURS EEPROM_ADDR +2
     69          #define EEPROM_ADR_TIME_ON_MINUTES EEPROM_ADDR +3
     70          #define EEPROM_ADR_TIME_OFF_HOURS EEPROM_ADDR +4
     71          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     72          
     73          
     74          
     75          #ifdef __GNUC__
     76            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     77               set to 'Yes') calls __io_putchar() */
     78            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     79          #else
     80            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     81          #endif /* __GNUC__ */
     82          
     83          
     84          
     85          
     86          #define SpecialSymbol 0x1b //Esc to start message
     87          //#define data_size 20
     88          #define key_time 8000
     89          #define key_time_ok 15000
     90          #define key_time_press 400
     91          #define key_time_release 400
     92          #define DS_Control  0x10  // Out 1s
     93          #define time_menu 10  // 5s
     94          
     95          
     96          
     97          
     98          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     99          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    100          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    101          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    102          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    103          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    104          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    105          //char data[data_size];
    106          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    107          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    108          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    109          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    110          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    111          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    112          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    113          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    114          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    115          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    124          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    125          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    126          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    132          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          char line1[40];
   \                     line1:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
    135          char string1[10];
   \                     string1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    136          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          bool Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    138          
    139          //u8 index=0;

   \                                 In section .near.bss, align 1
    140          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    141          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    142          
    143          
    144           struct   status_reg
    145           {
    146             unsigned on:1;
    147             unsigned timer_on:1;
    148             unsigned daily:1;

   \                                 In section .near.bss, align 1
    149           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    150          
    151          
    152          
    153          
    154          
    155          
    156          
    157          /* Private function prototypes -----------------------------------------------*/
    158          void InitHardware();
    159          void GpioConfiguration();
    160          void InitClk();
    161          void InitAdc();
    162          void InitI2C();
    163          void EEPROM_INIT();
    164          bool ReadDS1307();
    165          //void InitUart();
    166          void InitLcd();
    167          void InitDelayTimer2();
    168          void InitDelayTimer3();
    169          void Delay1( u16 Delay);
    170          void Delay2( u16 Delay);
    171          void Delay_us(u16 Delay);
    172          void LCDInstrNibble (u8 Instr);
    173          void LCDInstr(u8 Instr);
    174          void LCDDataOut(u8 data);
    175          void LCD_Busy();
    176          void PulseEnable();
    177          //void SendData();
    178          void SendChar(u8 Char);
    179          //void Send_Hello();
    180          bool Set_Clock();
    181          bool key_ok_on();
    182          bool key_plus_on();
    183          bool key_minus_on();
    184          bool key_ok_plus();
    185          bool Init_DS1307(void);
    186          bool Check_DS1307(void);
    187          bool I2C_Start(void);
    188          bool I2C_WA(u8 address);
    189          bool I2C_WD(u8 data);
    190          bool I2C_RA(u8 address);
    191          bool Set_DS1307();
    192          //bool Set_Delay_Allarm();
    193          bool Set_Timer_On();
    194          bool Set_Timer_Off();
    195          bool Read_Allarm();
    196          bool Read_DS18();
    197          bool DS18_Write( u8 data);
    198          bool DS18_Reset();
    199          bool DS18Set();
    200          u8 temperature();
    201          u8 DS18_Read();
    202          u8 convert_tobcd(u8 data);
    203          u8 I2C_RD(void);
    204          u8 adj(u8 min,u8 max,u8 now);
    205          u8 bcd2hex(u8 bcd);
    206          void Power_On(void);
    207          void Power_Off();
    208          void Save_Status();
    209          void Rotate_Line( char * line);
    210          void Display_Line(char * line);
    211          void Clear_Line1(void);
    212          void Clear_Line2(void);
    213          void Menu(void);
    214          u8 Key_Press(void);
    215          void Display(void);
    216          
    217          u16  Average();
    218          
    219          
    220          /* Private functions ---------------------------------------------------------*/
    221          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1
    222          void main(void)
    223          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    224              /*High speed internal clock prescaler: 1*/
    225              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    226          
    227              InitClk();
   \   000003 8D000000              CALLF     InitClk
    228              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    229              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    230              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    231              GPIO_WriteLow(GPIOD, power_pin );
   \   000013 8D000000              CALLF     ?Subroutine28
    232              //InitUart();
    233              enableInterrupts();
   \                     ??CrossCallReturnLabel_89:
   \   000017 9A                    RIM
    234              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000018 A680                  LD        A, #0x80
   \   00001A 8D000000              CALLF     ?Subroutine62
    235              InitLcd();
   \                     ??CrossCallReturnLabel_168:
   \   00001E 8D000000              CALLF     InitLcd
    236              //InitAdc();
    237              InitI2C();
   \   000022 8D000000              CALLF     InitI2C
    238              //Init DS18B20
    239              DS18Set();
   \   000026 8D000000              CALLF     DS18Set
    240              line_lcd=0;
   \   00002A 725F0000              CLR       L:line_lcd
    241              if (!Read_DS18())
   \   00002E 8D000000              CALLF     Read_DS18
   \   000032 A100                  CP        A, #0x0
   \   000034 260D                  JRNE      L:??main_0
    242              {
    243               printf("\nDS_Err_I");
   \   000036 AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   000039 8D000000              CALLF     printf
    244                while (!key_ok_on());
   \                     ??main_1:
   \   00003D 8D000000              CALLF     ?Subroutine18
    245              }
   \                     ??CrossCallReturnLabel_65:
   \   000041 27FA                  JREQ      L:??main_1
    246          
    247          
    248          
    249          
    250          
    251              //years=bcd2hex(13);
    252              Delay1(1000);
   \                     ??main_0:
   \   000043 AE03E8                LDW       X, #0x3e8
   \   000046 8D000000              CALLF     Delay1
    253               if (!ReadDS1307())
   \   00004A 8D000000              CALLF     ReadDS1307
   \   00004E A100                  CP        A, #0x0
   \   000050 2615                  JRNE      L:??main_2
    254               {
    255                 printf("\n E2:%d",error);
   \   000052 C60000                LD        A, L:error
   \   000055 5F                    CLRW      X
   \   000056 97                    LD        XL, A
   \   000057 89                    PUSHW     X
   \   000058 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00005B 8D000000              CALLF     printf
   \   00005F 5B02                  ADD       SP, #0x2
    256                 // Reset the CPU: Enable the watchdog and wait until it expires
    257                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000061 35CC50E0              MOV       L:0x50e0, #0xcc
    258                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   000065 20FE                  JRA       L:??main_3
    259               }
    260               //Send_Hello();
    261              //line_lcd=0;
    262              //printf("\nHello");
    263          
    264          
    265              if (!Check_DS1307())
   \                     ??main_2:
   \   000067 8D000000              CALLF     Check_DS1307
   \   00006B A100                  CP        A, #0x0
   \   00006D 2626                  JRNE      L:??main_4
    266              {
    267                 if (error!=0)
   \   00006F C60000                LD        A, L:error
   \   000072 2712                  JREQ      L:??main_5
    268                 {
    269                  printf("\n E:%d",error);
   \   000074 5F                    CLRW      X
   \   000075 97                    LD        XL, A
   \   000076 89                    PUSHW     X
   \   000077 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00007A 8D000000              CALLF     printf
   \   00007E 5B02                  ADD       SP, #0x2
    270                   while (!key_ok_on());
   \                     ??main_6:
   \   000080 8D000000              CALLF     ?Subroutine18
    271          
    272                 }
   \                     ??CrossCallReturnLabel_66:
   \   000084 27FA                  JREQ      L:??main_6
    273               line_lcd=0;
   \                     ??main_5:
   \   000086 725F0000              CLR       L:line_lcd
    274               printf("\nSetClock");
   \   00008A AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008D 8D000000              CALLF     printf
    275                Set_Clock();
   \   000091 8D000000              CALLF     Set_Clock
    276          
    277              }
    278          
    279          
    280                 //Read Status register from eepom and update it
    281                //size=sizeof(status);
    282               //u16 status
    283               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_4:
   \   000095 AE4000                LDW       X, #0x4000
   \   000098 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_16:
   \   00009C B700                  LD        S:?b8, A
   \   00009E AE4001                LDW       X, #0x4001
   \   0000A1 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_15:
   \   0000A5 905F                  CLRW      Y
   \   0000A7 9097                  LD        YL, A
   \   0000A9 5F                    CLRW      X
   \   0000AA 41                    EXG       A, XL
   \   0000AB B600                  LD        A, S:?b8
   \   0000AD 41                    EXG       A, XL
   \   0000AE 4F                    CLR       A
   \   0000AF 02                    RLWA      X, A
   \   0000B0 8D000000              CALLF     ??Subroutine71_0
   \                     ??CrossCallReturnLabel_223:
   \   0000B4 CF0000                LDW       L:status, X
    284                status_check = *(u16*)(&status);
   \   0000B7 CE0000                LDW       X, L:status
   \   0000BA CF0000                LDW       L:status_check, X
    285              //When Start Check for Allarm and computing Daily_long_on
    286               if ( Read_Allarm() == TRUE)
   \   0000BD 8D000000              CALLF     Read_Allarm
   \   0000C1 A101                  CP        A, #0x1
   \   0000C3 2613                  JRNE      L:??CrossCallReturnLabel_196
    287               {
    288                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000C5 8D000000              CALLF     ?Subroutine23
    289                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_78:
   \   0000C9 C60000                LD        A, L:daily_hour_off
   \   0000CC 8D000000              CALLF     ?Subroutine22
    290               }
   \                     ??CrossCallReturnLabel_76:
   \   0000D0 2006                  JRA       L:??CrossCallReturnLabel_196
    291          
    292               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    293          
    294               // Working fuction
    295              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    296          
    297          
    298          
    299              // strcpy(line1,"Hello I am here! ");
    300              //  while(1)
    301              //  {
    302              //     Display_Line(line1);
    303              //     Delay2(20000);
    304              //  }
    305              //  while (!key_ok_on());
    306                 //sprintf(line1,"TIMER ON ");
    307              while(1)
    308              {
    309                ADC1_Cmd (ENABLE);
    310          
    311                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    312                   Delay2(10000);
    313                   //ttimer++;
    314                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    315                //   Delay2(5000);
    316          
    317                     //status_check = *(u16*)(&status);
    318          
    319          
    320                /*
    321               if (!ReadDS1307())
    322               {
    323                 printf("\n E2:%d",error);
    324                  //restart i2c
    325                // Reset the CPU: Enable the watchdog and wait until it expires
    326                 IWDG->KR = IWDG_KEY_ENABLE;
    327                 while ( 1 );    // Wait until reset occurs from IWDG
    328          
    329               }
    330               */
    331          
    332          
    333                if (key_ok_on()) Menu();
    334                 //if(key_ok_plus()) Set_Delay_Allarm();  //Set Daily Allarm
    335                if(key_plus_on()) Power_On();
    336                if(key_minus_on())Power_Off();
    337          
    338          
    339                //Check for Allarm
    340                    if (status.daily==1)
    341                  {
    342                u16 time_now=hours*60+minutes;
    343                status.on=0;
    344                     u16 time=time_on;
    345                     do
    346                    {
    347                       if(time==time_now)
    348                       {
    349                         status.on=1;
    350                          break ;
    351                       }
    352                        time++;
    353                         if( time==1441) time=0;
    354                    } while(!(time==time_off));
    355                   };
    356          
    357          
    358                      //Read Temperature
    359                  // if( ttimer > 5 )
    360                   //{
    361          
    362          
    363                      result1=temperature();
    364                      if (result_old != result1) change=TRUE;
    365                       //else  change=FALSE;
    366                      result_old=result1;
    367                      result2=0;
    368                      if(result1%2!=0) result2=5;
    369                      result1/=2;
    370          
    371          
    372                     // char result3;
    373                     // ttimer=0;
    374                 //  }
    375          
    376                   //printf("\n%d.%d",result1,result2);
    377          
    378                     //Display
    379                     // line_lcd=0;
    380                     if (status.daily==1)  sprintf(string1,"TIMER ON");
    381                      else sprintf(string1,"TIMER OFF");
    382          
    383          
    384          
    385                       if (change)
    386                       {
    387                      sprintf(line1,"%d.%dC %s ",result1,result2,string1);
    388                         change=FALSE;
    389                       }
    390                     line_lcd=0;
    391                      Display_Line(line1);
    392                    line_lcd=1;
    393                    printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    394          
    395          
    396                     if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_7:
   \   0000D2 A608                  LD        A, #0x8
   \   0000D4 8D000000              CALLF     ??Subroutine67_0
   \                     ??CrossCallReturnLabel_196:
   \   0000D8 A601                  LD        A, #0x1
   \   0000DA 8D000000              CALLF     ADC1_Cmd
   \   0000DE AE2710                LDW       X, #0x2710
   \   0000E1 8D000000              CALLF     Delay2
   \   0000E5 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_67:
   \   0000E9 2704                  JREQ      L:??main_8
   \   0000EB 8D000000              CALLF     Menu
   \                     ??main_8:
   \   0000EF 8D000000              CALLF     key_plus_on
   \   0000F3 A100                  CP        A, #0x0
   \   0000F5 2704                  JREQ      L:??main_9
   \   0000F7 8D000000              CALLF     Power_On
   \                     ??main_9:
   \   0000FB 8D000000              CALLF     key_minus_on
   \   0000FF A100                  CP        A, #0x0
   \   000101 2704                  JREQ      L:??main_10
   \   000103 8D000000              CALLF     Power_Off
   \                     ??main_10:
   \   000107 CE0000                LDW       X, L:status
   \   00010A 9F                    LD        A, XL
   \   00010B A504                  BCP       A, #0x4
   \   00010D 2739                  JREQ      L:??main_11
   \   00010F C60000                LD        A, L:hours
   \   000112 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_221:
   \   000116 C60000                LD        A, L:minutes
   \   000119 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_225:
   \   00011D BF00                  LDW       S:?w0, X
   \   00011F CE0000                LDW       X, L:status
   \   000122 01                    RRWA      X, A
   \   000123 A4FE                  AND       A, #0xfe
   \   000125 02                    RLWA      X, A
   \   000126 CF0000                LDW       L:status, X
   \   000129 CE0000                LDW       X, L:time_on
   \                     ??main_12:
   \   00012C B300                  CPW       X, S:?w0
   \   00012E 260C                  JRNE      L:??main_13
   \   000130 CE0000                LDW       X, L:status
   \   000133 01                    RRWA      X, A
   \   000134 AA01                  OR        A, #0x1
   \   000136 02                    RLWA      X, A
   \   000137 CF0000                LDW       L:status, X
   \   00013A 200C                  JRA       L:??main_11
   \                     ??main_13:
   \   00013C 5C                    INCW      X
   \   00013D A305A1                CPW       X, #0x5a1
   \   000140 2601                  JRNE      L:??main_14
   \   000142 5F                    CLRW      X
   \                     ??main_14:
   \   000143 C30000                CPW       X, L:time_off
   \   000146 26E4                  JRNE      L:??main_12
   \                     ??main_11:
   \   000148 8D000000              CALLF     temperature
   \   00014C C70000                LD        L:result1, A
   \   00014F C10000                CP        A, L:result_old
   \   000152 2704                  JREQ      L:??main_15
   \   000154 35010000              MOV       L:change, #0x1
   \                     ??main_15:
   \   000158 C70000                LD        L:result_old, A
   \   00015B 725F0000              CLR       L:result2
   \   00015F 7201000004            BTJF      L:result1, #0x0, L:??main_16
   \   000164 35050000              MOV       L:result2, #0x5
   \                     ??main_16:
   \   000168 44                    SRL       A
   \   000169 C70000                LD        L:result1, A
   \   00016C CE0000                LDW       X, L:status
   \   00016F 9F                    LD        A, XL
   \   000170 A504                  BCP       A, #0x4
   \   000172 2706                  JREQ      L:??main_17
   \   000174 90AE0000              LDW       Y, #`?<Constant "TIMER ON">`
   \   000178 2004                  JRA       ??main_18
   \                     ??main_17:
   \   00017A 90AE0000              LDW       Y, #`?<Constant "TIMER OFF">`
   \                     ??main_18:
   \   00017E AE0000                LDW       X, #string1
   \   000181 8D000000              CALLF     sprintf
   \   000185 C60000                LD        A, L:change
   \   000188 2720                  JREQ      L:??main_19
   \   00018A 4B00                  PUSH      #BYTE1(string1)
   \   00018C 4B00                  PUSH      #BYTE2(string1)
   \   00018E C60000                LD        A, L:result2
   \   000191 5F                    CLRW      X
   \   000192 97                    LD        XL, A
   \   000193 89                    PUSHW     X
   \   000194 C60000                LD        A, L:result1
   \   000197 97                    LD        XL, A
   \   000198 89                    PUSHW     X
   \   000199 90AE0000              LDW       Y, #`?<Constant "%d.%dC %s ">`
   \   00019D AE0000                LDW       X, #line1
   \   0001A0 8D000000              CALLF     sprintf
   \   0001A4 5B06                  ADD       SP, #0x6
   \   0001A6 725F0000              CLR       L:change
   \                     ??main_19:
   \   0001AA 725F0000              CLR       L:line_lcd
   \   0001AE AE0000                LDW       X, #line1
   \   0001B1 8D000000              CALLF     Display_Line
   \   0001B5 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_118:
   \   0001B9 89                    PUSHW     X
   \   0001BA C60000                LD        A, L:minutes
   \   0001BD 97                    LD        XL, A
   \   0001BE 89                    PUSHW     X
   \   0001BF C60000                LD        A, L:hours
   \   0001C2 97                    LD        XL, A
   \   0001C3 89                    PUSHW     X
   \   0001C4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0001C7 8D000000              CALLF     printf
   \   0001CB 5B06                  ADD       SP, #0x6
   \   0001CD CE0000                LDW       X, L:status
   \   0001D0 9F                    LD        A, XL
   \   0001D1 A501                  BCP       A, #0x1
   \   0001D3 2703                  JREQ      ??lb_1
   \   0001D5 CC0000                JP        L:??main_7
    397                       else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??lb_1:
   \   0001D8 8D000000              CALLF     ?Subroutine28
    398          
    399          
    400          
    401              }
   \                     ??CrossCallReturnLabel_90:
   \   0001DC CC0000                JP        L:??CrossCallReturnLabel_196
    402          
    403          
    404          
    405          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine70_0
   \   000002                       ;               // Fall through to label ??Subroutine70_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine70_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine28:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_167:
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine62:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine23:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_222:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_227:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine71_0
   \   000002                       ;               // Fall through to label ??Subroutine71_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine71_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine22:
   \   000000 8D000000              CALLF     ??Subroutine70_0
   \                     ??CrossCallReturnLabel_220:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_226:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine7:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte
    406          

   \                                 In section .far_func.text, align 1
    407          void Display(void)
    408          {
    409            line_lcd=0;
   \                     Display:
   \   000000 725F0000              CLR       L:line_lcd
    410          
    411          
    412          
    413          
    414          
    415            Time_Display=FALSE;
   \   000004 725F0000              CLR       L:Time_Display
    416          }
   \   000008 87                    RETF
    417          

   \                                 In section .far_func.text, align 1
    418          void Power_On()
    419          {
    420            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine33
    421            status.daily=0; //Off Daily timer
    422            Save_Status();
    423            change=TRUE;
    424          }
   \                     ??CrossCallReturnLabel_96:
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine33:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 8D000000              CALLF     Save_Status
   \   000012 35010000              MOV       L:change, #0x1
   \   000016 87                    RETF
    425          

   \                                 In section .far_func.text, align 1
    426          void Power_Off()
    427          {
    428            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine33
    429            status.daily=0; //Off Daily timer
    430            Save_Status();
    431            change=TRUE;
    432          }
   \                     ??CrossCallReturnLabel_95:
   \   00000A 87                    RETF
    433          

   \                                 In section .far_func.text, align 1
    434          void InitI2C(void)
    435          {
    436             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    437             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    438             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    439          }
    440          

   \                                 In section .far_func.text, align 1, keep-with-next
    441          bool I2C_Start(void)
    442          {
    443             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    444                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    445              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_99:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    446                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    447                  {
    448                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    449                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    450                  }
    451                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    452          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    453          

   \                                 In section .far_func.text, align 1, keep-with-next
    454          bool I2C_WA(u8 address)
    455          {
    456            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    457                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    458                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_98:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    459                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    460                   {
    461                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    462                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    463                   }
    464                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    465          }
    466          

   \                                 In section .far_func.text, align 1, keep-with-next
    467          bool I2C_RA(u8 address)
    468          {
    469            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    470                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    471                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_100:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    472                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    473                   {
    474                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    475                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    476                   }
    477                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    478          }
    479          
    480          

   \                                 In section .far_func.text, align 1, keep-with-next
    481          bool I2C_WD(u8 data)
    482          {
    483           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    484             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    485             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_97:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    486              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    487              {
    488                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    489                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    490              }
    491               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    492          }
    493          

   \                                 In section .far_func.text, align 1, keep-with-next
    494          u8 I2C_RD(void)
    495          {
    496           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    497            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    498           //while((!(I2C->SR1 & 0x40))&&timeout);
    499           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    500           {
    501             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    502             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    503           }
    504           u8 data=I2C_ReceiveData();
    505           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    506          }
    507          
    508            /*
    509          bool Init_DS1307(void)
    510          {
    511             // Test DS1307
    512              error=0;
    513              if (!I2C_Start()) return FALSE;
    514              if(!I2C_WA(0xD0)) return FALSE;
    515              if(!I2C_WD(0x00)) return FALSE;
    516              if(!I2C_WD(0x00)) return FALSE;
    517              I2C_GenerateSTOP(ENABLE);
    518          
    519              // timeout=100;  error=4;
    520              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    521              //    if (!timeout)return FALSE ;
    522               return TRUE;
    523          }
    524             */
    525          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine69_0
   \   000001                       ;               // Fall through to label ??Subroutine69_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    526          bool  ReadDS1307(void)
    527          {
    528                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine36
    529                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_110:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    530                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_113:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    531                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_216:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    532                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine15
    533                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_44:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    534                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    535                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine13
    536                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   000028 C70000                LD        L:seconds, A
    537                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine13
    538                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_39:
   \   00002F C70000                LD        L:minutes, A
    539                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine13
    540                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_38:
   \   000036 C70000                LD        L:hours, A
    541                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine13
    542                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_37:
   \   00003D C70000                LD        L:days, A
    543                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine13
    544                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_36:
   \   000044 C70000                LD        L:`date`, A
    545                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine13
    546                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_35:
   \   00004B C70000                LD        L:mounts, A
    547                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine20
    548                   I2C_GenerateSTOP(ENABLE);
    549                    years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_68:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:years, A
    550          
    551               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    552               //   u8 data1 = I2C_RD();
    553                //Last read byte by I2C slave
    554               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    555               //  I2C_GenerateSTOP(ENABLE);
    556               //  temp2= I2C_RD();
    557                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    558                    {
    559                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    560                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    561                    }
    562          
    563                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    564          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_160:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine56:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    565          

   \                                 In section .far_func.text, align 1, keep-with-next
    566          bool Check_DS1307(void)
    567          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    568             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    569                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine36
    570                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_109:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    571                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_112:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    572                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine69_0
   \                     ??CrossCallReturnLabel_219:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    573                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine15
    574                  //Last read byte by I2C slave
    575                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_43:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    576                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    577                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine56
    578                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_161:
   \   00002E B700                  LD        S:?b8, A
    579                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine20
    580                 I2C_GenerateSTOP(ENABLE);
    581                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_69:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    582                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    583          }
    584          

   \                                 In section .far_func.text, align 1, keep-with-next
    585          bool Set_DS1307()
    586          {
    587                 // convert hex or decimal to bcd format
    588          
    589          
    590                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine36
    591                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_108:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    592                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_111:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    593                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_215:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    594                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_101:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    595                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_102:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    596                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_103:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    597                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_104:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    598                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_105:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    599                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_106:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    600                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_107:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    601                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine69_0
   \                     ??CrossCallReturnLabel_217:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    602                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine69_0
   \                     ??CrossCallReturnLabel_218:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    603                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    604          
    605          
    606             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    607          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    608          
    609          

   \                                 In section .far_func.text, align 1, keep-with-next
    610          u8 convert_tobcd(u8 data)
    611          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    612             u8 data_second_decimal=data/10;
    613             u8 data_first_decimal=data - 10*data_second_decimal;
    614             data=16*data_second_decimal + data_first_decimal;
    615            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    616          }
    617          

   \                                 In section .far_func.text, align 1, keep-with-next
    618          u8 bcd2hex(u8 bcd)
    619          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    620            u8 hex=0;
    621            hex=(bcd>>4)*10 +(bcd&0x0f);
    622            bcd=0;
    623            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    624          }
    625          
    626          

   \                                 In section .far_func.text, align 1, keep-with-next
    627          bool Set_Clock()
    628          {
    629              //Clear Display
    630             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine12
    631             Delay1(1000);
    632             line_lcd=0;
    633              printf("\nYears:");
   \                     ??CrossCallReturnLabel_27:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    634                do
    635              {
    636               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine41
    637               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_123:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    638                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine64_0
    639              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_175:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_54:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    640          
    641               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    642              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    643                do
    644              {
    645               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine41
    646               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_124:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    647                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    648              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_55:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    649          
    650              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine12
    651               Delay1(1000);
    652                line_lcd=0;
    653              printf("\nDate:");
   \                     ??CrossCallReturnLabel_28:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    654                do
    655              {
    656               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine41
    657               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_125:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    658                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    659              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_56:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    660          
    661          
    662              //Clear Display
    663             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine12
    664             Delay1(1000);
    665             line_lcd=0;
    666              printf("\nDays:");
   \                     ??CrossCallReturnLabel_29:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    667                do
    668              {
    669                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    670               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    671                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    672              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_57:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    673          
    674          
    675          
    676             //Clear Display
    677             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine12
    678             Delay1(1000);
    679             line_lcd=0;
    680              printf("\nHours:");
   \                     ??CrossCallReturnLabel_30:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    681                do
    682              {
    683                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine39
    684               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_114:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    685                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine64_0
    686              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_174:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_58:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    687          
    688               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    689               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    690                do
    691              {
    692                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine39
    693               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_115:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    694                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine19
    695              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_179:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_59:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    696          
    697              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    698              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    699              do
    700              {
    701                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine39
    702               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_116:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    703                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine19
    704              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_178:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_60:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    705          
    706                // Set parameter to DS1307 + time byte
    707                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    708          
    709                //bool k=Check_DS1307();
    710          
    711            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    712          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine64_0
   \   000006                       ;               // Fall through to label ??Subroutine64_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_159:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr
    713          
    714          

   \                                 In section .far_func.text, align 1, keep-with-next
    715          u8 adj(u8 min,u8 max,u8 now)
    716          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    717             u8 adj=now;
    718             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    719             {
    720               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    721               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    722             }
    723             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    724             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    725             {
    726               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    727               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    728             }
    729             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    730             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    731          
    732             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    733          }
    734          
    735          

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
    736          bool key_ok_on()
    737          {
    738            //Read Key OK
    739            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000004 2627                  JRNE      L:??key_ok_on_0
    740             {
    741               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    742                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    743                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30190                CPW       X, #0x190
   \   00001E 250D                  JRC       L:??key_ok_on_0
    744                 {
    745                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    746                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;   //if realease retrun true
   \   000024 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_10:
   \   000028 2703                  JREQ      L:??key_ok_on_0
   \   00002A A601                  LD        A, #0x1
   \   00002C 87                    RETF
    747                 }
    748             }
    749          
    750            return FALSE;
   \                     ??key_ok_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    751          }
    752          

   \                                 In section .far_func.text, align 1
    753           bool key_plus_on()
    754          {
    755            //Read Key OK
    756              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_3:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2623                  JRNE      L:??key_plus_on_0
    757               {
    758               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    759                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_46:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    760                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30190                CPW       X, #0x190
   \   000020 2509                  JRC       L:??key_plus_on_0
    761                  {
    762                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000026 2703                  JREQ      L:??key_plus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    763                  }
    764               }
    765          
    766            return FALSE;
   \                     ??key_plus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    767          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine16:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData
    768          

   \                                 In section .far_func.text, align 1
    769            bool key_minus_on()
    770          {
    771            //Read Key OK
    772             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2623                  JRNE      L:??key_minus_on_0
    773               {
    774               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    775                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_45:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    776                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30190                CPW       X, #0x190
   \   000020 2509                  JRC       L:??key_minus_on_0
    777                  {
    778                   if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   000026 2703                  JREQ      L:??key_minus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    779                  }
    780               }
    781          
    782            return FALSE;
   \                     ??key_minus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    783          }
    784          
    785          

   \                                 In section .far_func.text, align 1
    786          bool  key_ok_plus()
    787          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    788            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_0:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    789            {
    790                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    791                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_47:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_1:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    792                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_48:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    793            }
    794          
    795           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    796          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    797          
    798          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A                       REQUIRE ??Subroutine65_0
   \   00000A                       ;               // Fall through to label ??Subroutine65_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_186:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_185:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    799          bool Set_Timer_On()
    800          {
    801          
    802             //clr
    803             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine12
    804             Delay1(1000);
    805             line_lcd=0;
    806             printf("\nH On:");
   \                     ??CrossCallReturnLabel_33:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     ?Subroutine40
    807              timer3=0;
    808            do
    809              {
    810               line_lcd=1;
   \                     ??CrossCallReturnLabel_121:
   \   00000B 8D000000              CALLF     ?Subroutine43
    811               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_129:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    812                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine64_0
    813              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_172:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_73:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_63:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_121
    814          
    815             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine12
    816             Delay1(1000);
    817             line_lcd=0;
    818             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_34:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000041 8D000000              CALLF     ?Subroutine40
    819              timer3=0;
    820            do
    821              {
    822               line_lcd=1;
   \                     ??CrossCallReturnLabel_122:
   \   000045 8D000000              CALLF     ?Subroutine43
    823               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_130:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    824                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine19
    825              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_176:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_74:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_64:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_122
    826          
    827             //Save data to eeprom
    828               status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E 8D000000              CALLF     ?Subroutine4
    829               EEPROM_INIT();
    830              //u8 temp =*(u8*)(&status);
    831              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    832               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    833               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    834               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_181:
   \   000072 C60000                LD        A, L:daily_hour_on
   \   000075 AE4002                LDW       X, #0x4002
   \   000078 8D000000              CALLF     ?Subroutine44
    835               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_133:
   \   00007C C60000                LD        A, L:daily_minute_on
   \   00007F AE4003                LDW       X, #0x4003
   \   000082 8D000000              CALLF     ?Subroutine8
    836               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    837                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_21:
   \   000086 8D000000              CALLF     ?Subroutine23
    838                 change=TRUE;
   \                     ??CrossCallReturnLabel_77:
   \   00008A 35010000              MOV       L:change, #0x1
    839          
    840             return TRUE;
   \   00008E A601                  LD        A, #0x1
   \   000090 87                    RETF
    841          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_184:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_183:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    842          

   \                                 In section .far_func.text, align 1, keep-with-next
    843          bool Set_Timer_Off()
    844          {
    845          
    846              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine12
    847              Delay1(1000);
    848              line_lcd=0;
    849              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_31:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000007 8D000000              CALLF     ?Subroutine40
    850               timer3=0;
    851            do
    852              {
    853               line_lcd=1;
   \                     ??CrossCallReturnLabel_119:
   \   00000B 8D000000              CALLF     ?Subroutine42
    854               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_126:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    855                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine64_0
    856              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_173:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_71:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_61:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_119
    857          
    858            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine12
    859             Delay1(1000);
    860             line_lcd=0;
    861             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_32:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   000041 8D000000              CALLF     ?Subroutine40
    862             timer3=0;
    863            do
    864              {
    865               line_lcd=1;
   \                     ??CrossCallReturnLabel_120:
   \   000045 8D000000              CALLF     ?Subroutine42
    866               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_127:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    867                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine19
    868              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_177:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_72:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_62:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_120
    869          
    870            //Save data to eeprom
    871               status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E 8D000000              CALLF     ?Subroutine4
    872               EEPROM_INIT();
    873              //u8 temp =*(u8*)(&status);
    874              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    875               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    876               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    877               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_180:
   \   000072 C60000                LD        A, L:daily_hour_off
   \   000075 AE4004                LDW       X, #0x4004
   \   000078 8D000000              CALLF     ?Subroutine44
    878               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_132:
   \   00007C C60000                LD        A, L:daily_minute_off
   \   00007F AE4005                LDW       X, #0x4005
   \   000082 8D000000              CALLF     ?Subroutine8
    879               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    880                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_22:
   \   000086 C60000                LD        A, L:daily_hour_off
   \   000089 905F                  CLRW      Y
   \   00008B 8D000000              CALLF     ?Subroutine22
    881                 change=TRUE;
   \                     ??CrossCallReturnLabel_75:
   \   00008F 35010000              MOV       L:change, #0x1
    882               return TRUE;
   \   000093 A601                  LD        A, #0x1
   \   000095 87                    RETF
    883          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    884          
    885          /*
    886               //Computing time_long_on
    887          
    888               u8 hour=daily_hour_on;
    889               u8 minute=daily_minute_on;
    890               daily_long_on=0;
    891               do
    892               {
    893                    daily_long_on++;
    894                    minute++;
    895                    if (minute==60)
    896                    {
    897                      minute=0;
    898                      hour++;
    899                    }
    900                    if(hour==24) hour=0;
    901          
    902               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
    903          
    904                //Display daily_long_on
    905              LCDInstr(0x01);
    906              Delay1(1000);
    907              line_lcd=0;
    908              printf("\nLong :");
    909          
    910                do
    911              {
    912               line_lcd=1;
    913               printf("\n%d",daily_long_on);
    914                 //daily_long_on=adj(0,1440,daily_long_on);
    915              } while (!key_ok_on());
    916          
    917              time_on=daily_hour_on*60+daily_minute_on;
    918              time_off= daily_hour_off*60+daily_minute_off;
    919              //Save data to eeprom
    920                status.daily=1;
    921               EEPROM_INIT();
    922              //u8 temp =*(u8*)(&status);
    923              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    924               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    925               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    926               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    927               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    928               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    929               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    930               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    931          
    932             return TRUE;
    933          
    934          }
    935            */
    936          

   \                                 In section .far_func.text, align 1
    937          void Save_Status()
    938          {
    939            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ??Subroutine65_0
    940            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    941            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    942            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_182:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    943          }
    944          

   \                                 In section .far_func.text, align 1
    945          bool Read_Allarm()
    946          {
    947             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   000007 C70000                LD        L:daily_hour_on, A
    948              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    949             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_19:
   \   000017 C70000                LD        L:daily_minute_on, A
    950              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    951             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_18:
   \   000025 C70000                LD        L:daily_hour_off, A
    952              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    953             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_17:
   \   000033 C70000                LD        L:daily_minute_off, A
    954              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    955               // Computting daily_long_on
    956                u8 hour=daily_hour_on;
   \   00003D C60000                LD        A, L:daily_hour_on
   \   000040 B700                  LD        S:?b0, A
    957               u8 minute=daily_minute_on;
   \   000042 C60000                LD        A, L:daily_minute_on
   \   000045 B700                  LD        S:?b1, A
    958               daily_long_on=0;
   \   000047 5F                    CLRW      X
   \   000048 CF0000                LDW       L:daily_long_on, X
    959               do
    960               {
    961                    daily_long_on++;
   \                     ??Read_Allarm_2:
   \   00004B CE0000                LDW       X, L:daily_long_on
   \   00004E 5C                    INCW      X
   \   00004F CF0000                LDW       L:daily_long_on, X
    962                    minute++;
   \   000052 B600                  LD        A, S:?b1
   \   000054 4C                    INC       A
   \   000055 B700                  LD        S:?b1, A
    963                    if (minute==60)
   \   000057 A13C                  CP        A, #0x3c
   \   000059 2607                  JRNE      L:??Read_Allarm_3
    964                    {
    965                      minute=0;
   \   00005B 3F00                  CLR       S:?b1
    966                      hour++;
   \   00005D B600                  LD        A, S:?b0
   \   00005F 4C                    INC       A
   \   000060 B700                  LD        S:?b0, A
    967                    }
    968                    if(hour==24) hour=0;
   \                     ??Read_Allarm_3:
   \   000062 B600                  LD        A, S:?b0
   \   000064 A118                  CP        A, #0x18
   \   000066 2602                  JRNE      L:??Read_Allarm_4
   \   000068 3F00                  CLR       S:?b0
    969          
    970               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_4:
   \   00006A C60000                LD        A, L:daily_hour_off
   \   00006D B100                  CP        A, S:?b0
   \   00006F 26DA                  JRNE      L:??Read_Allarm_2
   \   000071 C60000                LD        A, L:daily_minute_off
   \   000074 B100                  CP        A, S:?b1
   \   000076 26D3                  JRNE      L:??Read_Allarm_2
    971          
    972            return TRUE;
   \   000078 A601                  LD        A, #0x1
   \   00007A 87                    RETF
    973          }
    974          

   \                                 In section .far_func.text, align 1, keep-with-next
    975          void EEPROM_INIT()
    976          {
    977            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    978            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    979            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    980          
    981          
    982          
    983          }
    984          
    985          

   \                                 In section .far_func.text, align 1
    986          void GpioConfiguration()
    987          {
    988          
    989            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    990          
    991            // ADC PE6 NEW PB0
    992            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    993          
    994            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    995            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine45
    996          
    997            //PD0 Led
    998            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_134:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine50
    999            //I2C
   1000            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_147:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine50
   1001            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_148:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine51
   1002            // Remap Pins pb4,pb5  sda,scl ;
   1003          
   1004             //Init KEY OK,PLUS,MINUS
   1005            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_150:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine51
   1006            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_151:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine51
   1007            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_152:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine50
   1008          
   1009            //Init DS18b20 data pin
   1010            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_149:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine45
   1011          
   1012            // Power Pin
   1013             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_135:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
   1014          
   1015          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine51:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine50:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine45:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
   1016          

   \                                 In section .far_func.text, align 1
   1017          void InitClk()
   1018          {
   1019            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1020            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1021            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1022            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1023            CLK_SOURCE_HSI,       // Switch to internal timer.
   1024            DISABLE,              // Disable the clock switch interrupt.
   1025            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1026          
   1027            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine52
   1028            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_153:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine52
   1029            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_154:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine52
   1030            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_155:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
   1031          
   1032          
   1033          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1034          
   1035          

   \                                 In section .far_func.text, align 1
   1036          void InitAdc()
   1037          {
   1038               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
   1039               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
   1040               /*
   1041               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1042                          ADC1_CHANNEL_0,
   1043                          ADC1_PRESSEL_FCPU_D4,
   1044                           ADC1_EXTTRIG_TIM,
   1045          
   1046                 */
   1047               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
   1048               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1049                                      ADC1_CHANNEL_0,
   1050                                      ADC1_ALIGN_RIGHT
   1051                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
   1052          
   1053          
   1054               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
   1055          
   1056          
   1057               //ADC1_Cmd (ENABLE);
   1058               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1059               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
   1060               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
   1061          
   1062          }
   1063          
   1064          /*
   1065          void InitUart()
   1066          {
   1067             UART2_DeInit();
   1068             UART2_Init((u32)9600,
   1069                        UART2_WORDLENGTH_8D,
   1070                        UART2_STOPBITS_1,
   1071                        UART2_PARITY_NO,
   1072                        UART2_SYNCMODE_CLOCK_DISABLE,
   1073                        UART2_MODE_TXRX_ENABLE
   1074                          );
   1075          
   1076             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1077             UART2_Cmd(ENABLE);
   1078          
   1079            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1080          }
   1081            */
   1082          

   \                                 In section .far_func.text, align 1
   1083          void SendChar( u8 Char)
   1084          {
   1085             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
   1086            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
   1087          }
   \   00000E 87                    RETF
   1088            /*
   1089          void Send_Hello()
   1090          {
   1091            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1092             Delay1(10);
   1093             sprintf(data,"Hello");
   1094              u8 i=0;
   1095            do
   1096           {
   1097            SendChar(data[i++]);
   1098           } while (data[i]!=0);
   1099            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1100            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1101          
   1102          
   1103          
   1104          }
   1105              */
   1106          
   1107          
   1108              /*
   1109          
   1110          void SendData()
   1111          {
   1112           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1113            Delay1(10);
   1114            u8 i=0;
   1115            sprintf(data,"%d %c",adcdata,0x0d);
   1116           do
   1117           {
   1118             SendChar(data[i++]);
   1119          
   1120           } while (data[i]!=0);
   1121             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1122            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1123            rx_data=0;
   1124          }
   1125          */
   1126          

   \                                 In section .far_func.text, align 1, keep-with-next
   1127          void LCDDataOut(u8 data)
   1128          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1129            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_84:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_205
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine68_0
   1130            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_205:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_83:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_206
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine68_0
   1131            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_206:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_82:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_207
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine68_0
   1132            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_207:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_81:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_208
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine68_0
   1133          }
   \                     ??CrossCallReturnLabel_208:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_214:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1134          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine68_0
   \   000002                       ;               // Fall through to label ??Subroutine68_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1135          void InitLcd()
   1136          {
   1137           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine25
   1138            LCD_RW(0);
   1139            LCD_RS(0);
   \                     ??CrossCallReturnLabel_86:
   \   000006 8D000000              CALLF     ?Subroutine26
   1140            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_203:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine29
   1141          
   1142            LCDInstrNibble(0x03);
   1143             Delay1(10);
   1144            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_92:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1145             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine29
   1146            LCDInstrNibble(0x03);
   1147             Delay1(10);
   1148          
   1149             //Line 4
   1150            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_91:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1151            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1152            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1153            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1154          
   1155            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1156            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1157          
   1158            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine14
   1159            Delay1(250);
   1160          
   1161            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_41:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1162            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1163          
   1164          
   1165          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_212:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_211:
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_156:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1
   1166          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine68_0
   \                     ??CrossCallReturnLabel_209:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_171:
   \   00000D                       REQUIRE ??Subroutine63_0
   \   00000D                       ;               // Fall through to label ??Subroutine63_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_170:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1167          void LCDInstr(u8 Instr)
   1168          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1169            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine26
   1170            LCD_RW(0);
   \                     ??CrossCallReturnLabel_201:
   \   000009 2000                  JRA       ?Subroutine0
   1171            LCDDataOut(Instr>>4);
   1172            PulseEnable();
   1173            LCDDataOut(Instr & 0x0F);
   1174            PulseEnable();
   1175          }
   1176          

   \                                 In section .far_func.text, align 1, keep-with-next
   1177          void LCDData(u8 Data)
   1178          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1179            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine24
   1180            LCD_RW(0);
   \                     ??CrossCallReturnLabel_80:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1181            LCDDataOut(Data>>4);
   1182            PulseEnable() ;
   1183            LCDDataOut(Data & 0x0F) ;
   1184            PulseEnable();
   1185          }
   1186          

   \                                 In section .far_func.text, align 1, keep-with-next
   1187          void LCDInstrNibble(u8 Instr)
   1188          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1189            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine25
   1190            LCD_RW(0);
   1191            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_85:
   \   00000B AC000000              JPF       ??Subroutine63_0
   1192            PulseEnable();
   1193          }
   1194          

   \                                 In section .far_func.text, align 1, keep-with-next
   1195          void PulseEnable(void)
   1196          {
   1197            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine6
   1198             Delay1(1);
   1199            LCD_EN(1);
   1200             Delay1(1);
   1201            LCD_EN(0);
   \                     ??CrossCallReturnLabel_13:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine68_0
   1202             Delay1(1);
   \                     ??CrossCallReturnLabel_204:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1203          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_213:
   \   000006 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_192:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_191:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1204          

   \                                 In section .far_func.text, align 1, keep-with-next
   1205          void LCD_Busy(void)
   1206          {
   1207             //set Port D7 as Input
   1208             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1209             //Set Read
   1210             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine24
   1211             LCD_RS(0);
   \                     ??CrossCallReturnLabel_79:
   \   000013 8D000000              CALLF     ?Subroutine26
   1212             // Read Busy Flag
   1213                timer2=0;
   \                     ??CrossCallReturnLabel_202:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1214             do
   1215             {
   1216             // Enable set
   1217               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine6
   1218                Delay1(1);
   1219               LCD_EN(1);
   1220                Delay1(1);
   1221             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_14:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1222                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1223                //Clear read
   1224              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine68_0
   1225             //set Port D7 as Output
   1226             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_210:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1227          
   1228          }
   1229          
   1230          

   \                                 In section .far_func.text, align 1, keep-with-next
   1231          void LCD(u8 data)
   1232           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1233             //  static u8 linet=0;
   1234          
   1235          
   1236               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 2658                  JRNE      L:??CrossCallReturnLabel_190
   1237               {
   1238          
   1239                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2710                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 2719                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2722                  JREQ      L:??LCD_3
   \   000017 202A                  JRA       L:??LCD_4
   1240                   {
   1241                   case 0:
   1242                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     ?Subroutine59
   1243                     count=0;
   1244                     break;
   \                     ??CrossCallReturnLabel_163:
   \   00001F 2022                  JRA       L:??LCD_4
   1245                   case 1:
   1246                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000021 A6C0                  LD        A, #0xc0
   \   000023 8D000000              CALLF     LCDInstr
   1247                     count=20;
   \   000027 35140000              MOV       L:count, #0x14
   1248                     break;
   \   00002B 2016                  JRA       L:??LCD_4
   1249                   case 2:
   1250                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00002D A694                  LD        A, #0x94
   \   00002F 8D000000              CALLF     LCDInstr
   1251                     count=40;
   \   000033 35280000              MOV       L:count, #0x28
   1252                     break;
   \   000037 200A                  JRA       L:??LCD_4
   1253                   case 3:
   1254                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000039 A6D4                  LD        A, #0xd4
   \   00003B 8D000000              CALLF     LCDInstr
   1255                     count=60;
   \   00003F 353C0000              MOV       L:count, #0x3c
   1256                     break;
   1257                   //default:
   1258                    //  LCDInstr(0x80 |0x40);    //Line 1
   1259                    }
   1260                   line_lcd++;
   \                     ??LCD_4:
   \   000043 C60000                LD        A, L:line_lcd
   \   000046 4C                    INC       A
   \   000047 C70000                LD        L:line_lcd, A
   1261                   if (line_lcd>=5)
   \   00004A A105                  CP        A, #0x5
   \   00004C 250F                  JRC       L:??LCD_5
   1262                   {
   1263                    line_lcd=1;   //line >=5
   \   00004E 35010000              MOV       L:line_lcd, #0x1
   1264                    LCDInstr(0x01); //Clear LCD
   \   000052 8D000000              CALLF     ?Subroutine55
   1265                    Delay1(2500);
   \                     ??CrossCallReturnLabel_158:
   \   000056 AE09C4                LDW       X, #0x9c4
   \   000059 8D000000              CALLF     Delay1
   1266                   }
   1267          
   1268                   Delay1(1);
   \                     ??LCD_5:
   \   00005D 8D000000              CALLF     ??Subroutine66_0
   1269          
   1270          
   1271               }
   1272          
   1273          
   1274               if (count==20)
   \                     ??CrossCallReturnLabel_190:
   \   000061 C60000                LD        A, L:count
   \   000064 A114                  CP        A, #0x14
   \   000066 260A                  JRNE      L:??LCD_6
   1275                {
   1276                  LCDInstr(0x80 | 0x40);
   \   000068 A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006A 8D000000              CALLF     LCDInstr
   1277                  Delay1(1);
   \                     ??LCD_8:
   \   00006E 5F                    CLRW      X
   \   00006F 5C                    INCW      X
   \   000070 2023                  JRA       ??LCD_9
   1278                }
   1279                   else if(count==40)
   \                     ??LCD_6:
   \   000072 A128                  CP        A, #0x28
   \   000074 2604                  JRNE      L:??LCD_10
   1280                  {
   1281                    LCDInstr(0x80 | 0x14);
   \   000076 A694                  LD        A, #0x94
   \   000078 20F0                  JRA       ??LCD_7
   1282                    Delay1(1);
   1283                  }
   1284                    else if(count==60)
   \                     ??LCD_10:
   \   00007A A13C                  CP        A, #0x3c
   \   00007C 2608                  JRNE      L:??LCD_11
   1285                    {
   1286                      LCDInstr(0x80 | 0x54);
   \   00007E A6D4                  LD        A, #0xd4
   \   000080 8D000000              CALLF     ?Subroutine59
   1287                      count=0;
   1288                      Delay1(1);
   \                     ??CrossCallReturnLabel_164:
   \   000084 20E8                  JRA       ??LCD_8
   1289                    }
   1290                      else if(count >80)
   \                     ??LCD_11:
   \   000086 A151                  CP        A, #0x51
   \   000088 250F                  JRC       L:??LCD_12
   1291                        {
   1292                          count=0;
   \   00008A 725F0000              CLR       L:count
   1293                          LCDInstr(0x01); //Clear LCD
   \   00008E 8D000000              CALLF     ?Subroutine55
   1294                          Delay1(250);
   \                     ??CrossCallReturnLabel_157:
   \   000092 AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   000095 8D000000              CALLF     Delay1
   1295                        }
   1296          
   1297          
   1298              /*
   1299                   line++;
   1300                   if (line>3)
   1301                   {
   1302                     line=1;  //Line 0 for Time
   1303                   }
   1304                 switch(line)
   1305                   {
   1306                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1307                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1308                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1309                   default : LCDInstr(0x80 | 0x40); // Line 1
   1310                   }
   1311                   Delay(1);
   1312                   count=0;
   1313                }
   1314          
   1315               */
   1316          
   1317               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   000099 B600                  LD        A, S:?b8
   \   00009B A11C                  CP        A, #0x1c
   \   00009D 250B                  JRC       L:??LCD_13
   1318               {
   1319                 LCDData(data);
   \   00009F 8D000000              CALLF     ?Subroutine11
   1320                  Delay1(1);
   1321                 count++;
   \                     ??CrossCallReturnLabel_188:
   \   0000A3 C60000                LD        A, L:count
   \   0000A6 4C                    INC       A
   \   0000A7 C70000                LD        L:count, A
   1322               }
   1323           }
   \                     ??LCD_13:
   \   0000AA 320000                POP       S:?b8
   \   0000AD 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine66_0
   \   000004                       ;               // Fall through to label ??Subroutine66_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_193:
   \   000004 87                    RETF
   1324          

   \                                 In section .far_func.text, align 1, keep-with-next
   1325          void InitDelayTimer2()
   1326          {
   1327             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1328             //Tclock 16/8=2Mhz  /20 10us
   1329                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1330                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1331                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1332                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1333            //Enable TIM2
   1334                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1335          
   1336          }
   1337          

   \                                 In section .far_func.text, align 1, keep-with-next
   1338          void InitDelayTimer3()
   1339          {
   1340             //Timer 3 use for 1s Delay
   1341             //Tclock 16000000/1024=15626
   1342                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1343                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1344                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1345                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM3_ITConfig
   1346            //Enable TIM2
   1347                 TIM3_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM3_Cmd
   1348          
   1349          }
   1350          
   1351          
   1352          
   1353          

   \                                 In section .far_func.text, align 1, keep-with-next
   1354          bool DS18_Write(u8 data)
   1355          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1356            disableInterrupts();
   \   000006 9B                    SIM
   1357            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1358            {
   1359             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine27
   1360             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1361             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_88:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_200
   \   00001A 8D000000              CALLF     ?Subroutine30
   1362               //else DS18(0);
   1363             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_200:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1364             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine30
   1365             //Delay1(0);
   1366            }
   \                     ??CrossCallReturnLabel_199:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1367            enableInterrupts();
   \   000032 9A                    RIM
   1368            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1369          
   1370          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine67_0
   \   000002                       ;               // Fall through to label ??Subroutine67_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_166:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 A604                  LD        A, #0x4
   \   000002 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_169:
   \   000006 87                    RETF
   1371          
   1372          

   \                                 In section .far_func.text, align 1, keep-with-next
   1373          u8  DS18_Read()
   1374          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1375              //Init DS18b20 data pin as Input
   1376          
   1377            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1378              disableInterrupts();
   \   000006 9B                    SIM
   1379            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1380            {
   1381              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine27
   1382              Delay_us(1); //Start time slot 4,5 us
   1383              DS18(1);
   \                     ??CrossCallReturnLabel_87:
   \   00000D 8D000000              CALLF     ?Subroutine30
   1384              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_197:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1385              //Delay1(0);
   1386             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_94:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1387              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1388              //  DS18(1);  // Next bit
   1389             // Delay1(0);
   1390          
   1391            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1392              enableInterrupts();
   \   000046 9A                    RIM
   1393              //Init DS18b20 data pin
   1394             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1395             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1396          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1397          

   \                                 In section .far_func.text, align 1, keep-with-next
   1398          bool DS18_Reset()
   1399          {
   1400             //Init Reset Pulse
   1401              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine60
   1402              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_165:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1403              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine30
   1404              //Delay1(1);
   1405              timer2=0;
   \                     ??CrossCallReturnLabel_198:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1406              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_49:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_93:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1407              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_50:
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1408              // Delay1(10);
   1409              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000027 AE0014                LDW       X, #0x14
   \   00002A 8D000000              CALLF     Delay1
   1410          
   1411              return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 87                    RETF
   1412          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1413          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1414          u8 temperature ()
   1415          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1416          
   1417             //Init Reset Pulse
   1418               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_145:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1419             //Skip ROM Command 0xCC
   1420              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine47
   1421             //Function command  CONVERT T [44h]
   1422              DS18_Write(0x44);
   1423              //Wait util end convert
   1424              timer2=0;
   1425               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_139:
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_52:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_139
   1426                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1427               //u8 temp8=timer2;
   1428              //Init Reset Pulse
   1429              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_146:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1430              // Skip ROM Command 0xCC
   1431              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine46
   1432              //Function command READ SCRATCHPAD [BEh]
   1433              DS18_Write(0xBE);
   1434               u8 temp1=DS18_Read();
   1435               u8 temp2=DS18_Read();
   1436              DS18_Reset();
   \                     ??CrossCallReturnLabel_137:
   \   000033 8D000000              CALLF     DS18_Reset
   1437                u16 result = temp2*256+temp1;
   1438                temp1= (u8)(result>>3);
   1439               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1440          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine71_0
   \                     ??CrossCallReturnLabel_224:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1441          

   \                                 In section .far_func.text, align 1, keep-with-next
   1442          bool Read_DS18()
   1443          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1444          
   1445             //Init Reset Pulse
   1446               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_143:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1447             //Skip ROM Command 0xCC
   1448              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine47
   1449             //Function command  CONVERT T [44h]
   1450              DS18_Write(0x44);
   1451              //Wait util end convert
   1452              timer2=0;
   1453               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_138:
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_51:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_138
   1454                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1455               //u8 temp8=timer2;
   1456              //Init Reset Pulse
   1457              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_144:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1458              // Skip ROM Command 0xCC
   1459              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine46
   1460              //Function command READ SCRATCHPAD [BEh]
   1461              DS18_Write(0xBE);
   1462               u8 temp1=DS18_Read();
   1463               u8 temp2=DS18_Read();
   1464               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_136:
   \   000033 8D000000              CALLF     ?Subroutine48
   1465               u8 temp4=DS18_Read();
   1466               u8 temp5=DS18_Read();
   1467               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_141:
   \   000037 8D000000              CALLF     ?Subroutine48
   1468               u8 temp7=DS18_Read();
   1469               u8 temp8=DS18_Read();
   1470               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_140:
   \   00003B 8D000000              CALLF     DS18_Read
   1471          
   1472               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1473          
   1474                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1475                result2=0;
   \   000047 725F0000              CLR       L:result2
   1476                u16 result = temp2*256+temp1;
   1477                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   00004F C70000                LD        L:result1, A
   1478                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1479                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1480          
   1481          
   1482                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1483               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1484               //line_lcd=1;
   1485               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1486               // while (!key_ok_on());
   1487          
   1488               //u8 temp3=DS18_Read();
   1489          
   1490              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1491          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1492          

   \                                 In section .far_func.text, align 1, keep-with-next
   1493          bool DS18Set ()
   1494          {
   1495               //Init Reset Pulse
   1496              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_142:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1497             //Skip ROM Command 0xCC
   1498              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1499             //Function command  WRITE SCRATCHPAD 0x4E
   1500              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1501             //Write 3 bytes last is config reg
   1502              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1503              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1504              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1505          
   1506          
   1507          
   1508          
   1509            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1510          }
   1511          
   1512          
   1513          
   1514          
   1515           /*
   1516          u16 Average()
   1517          {
   1518           //Find average in measure
   1519            u8 i=0;
   1520            u16 Summa=0;
   1521            do
   1522            {
   1523             Summa+=measure[i++];
   1524            } while ( measure[i]!=0);
   1525             if(i!=0) Summa=Summa/i;
   1526             return Summa;
   1527          }
   1528             */
   1529          

   \                                 In section .far_func.text, align 1, keep-with-next
   1530          PUTCHAR_PROTOTYPE
   1531          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1532            /* Place your implementation of fputc here */
   1533            /* e.g. write a character to the USART */
   1534                //USART_SendData(USART3, (u8) ch);
   1535               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1536             /* Loop until the end of transmission */
   1537              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1538            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1539          }
   1540          
   1541          

   \                                 In section .far_func.text, align 1, keep-with-next
   1542          void Delay1(u16 Delay)
   1543          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1544              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1545            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1546            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1547          }
   \   00000D 87                    RETF
   1548          

   \                                 In section .far_func.text, align 1, keep-with-next
   1549           void Delay2(u16 Delay)
   1550          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1551            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1552            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1553          }
   \   00000D 87                    RETF
   1554          
   1555          

   \                                 In section .far_func.text, align 1, keep-with-next
   1556          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1557          {
   1558            //disableInterrupts();
   1559            do
   1560              {
   1561                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1562                nop();
   \   000001 9D                    NOP
   1563              }
   1564              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1565            //enableInterrupts();
   1566          }
   \   000005 87                    RETF
   1567          
   1568          
   1569          
   1570          /*
   1571          void Delay12 (u16 Delay)
   1572          {
   1573            timer2=0;
   1574            while ( timer2 < Delay); ;
   1575          }
   1576          */
   1577          
   1578          
   1579          #ifdef USE_FULL_ASSERT
   1580          
   1581          /**
   1582            * @brief  Reports the name of the source file and the source line number
   1583            *   where the assert_param error has occurred.
   1584            * @param file: pointer to the source file name
   1585            * @param line: assert_param error line source number
   1586            * @retval : None
   1587            */

   \                                 In section .far_func.text, align 1, keep-with-next
   1588          void assert_failed(u8* file, u32 line)
   1589          {
   1590            /* User can add his own implementation to report the file name and line number,
   1591               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1592          
   1593            /* Infinite loop */
   1594            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1595            {
   1596          
   1597            }
   1598          }
   1599          #endif
   1600          
   1601          

   \                                 In section .far_func.text, align 1, keep-with-next
   1602          void Display_Line(char* line)
   1603          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1604            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1605            u8 count;
   1606              //Set Cursor to First Line
   1607             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1608             count=0;
   \   000010 3F00                  CLR       S:?b10
   1609             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine66_0
   1610            do
   1611            {
   1612          
   1613              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_189:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1614               {
   1615                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine11
   1616                  Delay1(1);
   1617                 count++;
   \                     ??CrossCallReturnLabel_187:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1618               }
   1619               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1620            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_189
   1621          
   1622             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1623          
   1624          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1625          

   \                                 In section .far_func.text, align 1, keep-with-next
   1626          void Rotate_Line( char * line)
   1627          {
   1628          
   1629             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1630             char temp_next;
   1631          
   1632             do
   1633             {
   1634                temp_next=*(line+1);
   1635               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1636                //line++;
   1637                //temp_next=*line;
   1638               //*line=*line++;
   1639             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1640             line--;
   1641             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1642          
   1643          }
   \   000012 87                    RETF
   1644          

   \                                 In section .far_func.text, align 1, keep-with-next
   1645          void Clear_Line1 ()
   1646          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1647               //Set Cursor to First Line
   1648             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine10
   1649             count=0;
   1650             Delay1(1);
   1651              u8 count=0;
   1652             do
   1653             {
   1654               LCDData(' ');
   \                     ??CrossCallReturnLabel_26:
   \   000009 8D000000              CALLF     ?Subroutine9
   1655                  Delay1(1);
   1656                  count++;
   1657             }while (count<8);
   \                     ??CrossCallReturnLabel_24:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_26
   1658          
   1659          
   1660          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_162:
   \   000004 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_195:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_194:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1661          

   \                                 In section .far_func.text, align 1, keep-with-next
   1662          void Clear_Line2 ()
   1663          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1664               //Set Cursor to Second  Line
   1665             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine10
   1666             count=0;
   1667             Delay1(1);
   1668              u8 count=0;
   1669             do
   1670             {
   1671               LCDData(' ');
   \                     ??CrossCallReturnLabel_25:
   \   000009 8D000000              CALLF     ?Subroutine9
   1672                  Delay1(1);
   1673                  count++;
   1674             }while (count<8);
   \                     ??CrossCallReturnLabel_23:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_25
   1675          
   1676          
   1677          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1678          
   1679          
   1680          
   1681          
   1682          

   \                                 In section .far_func.text, align 1, keep-with-next
   1683          void Menu (void)
   1684          {
   1685           // Clear Display
   1686              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine14
   1687              Delay1(250);
   1688              //u8 key;
   1689           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1690              Wait for Plus,Minius or OK
   1691              If plus next option from Menu on the end EXIT
   1692              If minus previous option from Menu  on the end EXIT
   1693              If OK enter to menu option
   1694              If time out about 10s exit from Menu
   1695           */
   1696          
   1697          
   1698             /*
   1699                First_Menu();
   1700          
   1701          
   1702          
   1703              */
   1704          
   1705          
   1706          
   1707          
   1708          
   1709              do {
   1710          
   1711          
   1712          First_Menu:
   1713              line_lcd=0;
   \                     ??CrossCallReturnLabel_42:
   \   000004 725F0000              CLR       L:line_lcd
   1714              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1715              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine43
   1716              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_131:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1717              switch (Key_Press())
   \   000022 8D000000              CALLF     Key_Press
   \   000026 4A                    DEC       A
   \   000027 2709                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 270D                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2775                  JREQ      L:??Menu_2
   \   00002F CC0000                JP        L:??Menu_3
   1718                  {
   1719                  case 1: Set_Timer_On();
   \                     ??Menu_0:
   \   000032 8D000000              CALLF     Set_Timer_On
   1720                   break;
   \   000036 CC0000                JP        L:??Menu_3
   1721                  case 2: goto Second_Menu ;
   1722                   break;
   1723                  case 3: goto Exit_Menu;
   1724                   break;
   1725                  }
   1726                  break; //Exit Menu
   1727          
   1728          
   1729          Second_Menu:
   1730              line_lcd=0;
   \                     ??Menu_1:
   \   000039 725F0000              CLR       L:line_lcd
   1731              printf("\nOFF     ");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000040 8D000000              CALLF     printf
   1732              line_lcd=1;
   \   000044 8D000000              CALLF     ?Subroutine42
   1733              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_128:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:daily_hour_off
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000051 8D000000              CALLF     printf
   \   000055 5B04                  ADD       SP, #0x4
   1734                switch (Key_Press())
   \   000057 8D000000              CALLF     Key_Press
   \   00005B 4A                    DEC       A
   \   00005C 2708                  JREQ      L:??Menu_4
   \   00005E 4A                    DEC       A
   \   00005F 270B                  JREQ      L:??Menu_5
   \   000061 4A                    DEC       A
   \   000062 27A0                  JREQ      L:??CrossCallReturnLabel_42
   \   000064 2062                  JRA       L:??Menu_3
   1735                  {
   1736                  case 1: Set_Timer_Off();
   \                     ??Menu_4:
   \   000066 8D000000              CALLF     Set_Timer_Off
   1737                   break;
   \   00006A 205C                  JRA       L:??Menu_3
   1738                  case 2: goto Third_Menu ;
   1739                   break;
   1740                  case 3: goto First_Menu;
   1741                   break;
   1742                  }
   1743               break; //Exit Menu
   1744          
   1745          Third_Menu:
   1746              line_lcd=0;
   \                     ??Menu_5:
   \   00006C 725F0000              CLR       L:line_lcd
   1747              printf("\nClock");
   \   000070 AE0000                LDW       X, #`?<Constant "\\nClock">`
   \   000073 8D000000              CALLF     printf
   1748              line_lcd=1;
   \   000077 8D000000              CALLF     ?Subroutine39
   1749              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_117:
   \   00007B 89                    PUSHW     X
   \   00007C C60000                LD        A, L:minutes
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:hours
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B06                  ADD       SP, #0x6
   1750                switch (Key_Press())
   \   00008F 8D000000              CALLF     Key_Press
   \   000093 4A                    DEC       A
   \   000094 2708                  JREQ      L:??Menu_6
   \   000096 4A                    DEC       A
   \   000097 270B                  JREQ      L:??Menu_2
   \   000099 4A                    DEC       A
   \   00009A 279D                  JREQ      L:??Menu_1
   \   00009C 202A                  JRA       L:??Menu_3
   1751                  {
   1752                  case 1:  Set_Clock();
   \                     ??Menu_6:
   \   00009E 8D000000              CALLF     Set_Clock
   1753                   break;
   \   0000A2 2024                  JRA       L:??Menu_3
   1754                  case 2: goto Exit_Menu ;
   1755                   break;
   1756                  case 3: goto Second_Menu;
   1757                   break;
   1758                  }
   1759               break; //Exit Menu
   1760          
   1761          
   1762          
   1763          
   1764          
   1765          
   1766          Exit_Menu:
   1767              line_lcd=0;
   \                     ??Menu_2:
   \   0000A4 725F0000              CLR       L:line_lcd
   1768              printf("\nExit OK ");
   \   0000A8 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   0000AB 8D000000              CALLF     printf
   1769              line_lcd=1;
   \   0000AF 35010000              MOV       L:line_lcd, #0x1
   1770              printf("\n+/-     ");
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   0000B6 8D000000              CALLF     printf
   1771                 switch (Key_Press())
   \   0000BA 8D000000              CALLF     Key_Press
   \   0000BE A002                  SUB       A, #0x2
   \   0000C0 2603                  JRNE      ??lb_0
   \   0000C2 CC0000                JP        L:??CrossCallReturnLabel_42
   \                     ??lb_0:
   \   0000C5 4A                    DEC       A
   \   0000C6 27A4                  JREQ      L:??Menu_5
   1772                  {
   1773                  case 1:
   1774                   break;
   1775                  case 2: goto First_Menu ;
   1776                   break;
   1777                  case 3: goto Third_Menu;
   1778                   break;
   1779                  }
   1780                 break; //Exit Menu
   1781              }    while (1);
   1782              //exit:
   1783             Clear_Line1();
   \                     ??Menu_3:
   \   0000C8 8D000000              CALLF     Clear_Line1
   1784             Clear_Line2();
   \   0000CC AC000000              JPF       Clear_Line2
   1785          
   1786          }
   1787          
   1788          

   \                                 In section .far_func.text, align 1
   1789          u8 Key_Press(void)
   1790          {
   \                     Key_Press:
   \   000000 3B0000                PUSH      S:?b8
   1791             u8 key_press =0;
   \   000003 3F00                  CLR       S:?b8
   1792             timer3=0;
   \   000005 5F                    CLRW      X
   \   000006 CF0000                LDW       L:timer3, X
   1793             do {
   1794                if (key_ok_on()) key_press=1;
   \                     ??Key_Press_0:
   \   000009 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_53:
   \   00000D 2706                  JREQ      L:??Key_Press_1
   \   00000F 35010000              MOV       S:?b8, #0x1
   \   000013 201A                  JRA       L:??Key_Press_2
   1795                 else if (key_plus_on())key_press=2;
   \                     ??Key_Press_1:
   \   000015 8D000000              CALLF     key_plus_on
   \   000019 A100                  CP        A, #0x0
   \   00001B 2706                  JREQ      L:??Key_Press_3
   \   00001D 35020000              MOV       S:?b8, #0x2
   \   000021 200C                  JRA       L:??Key_Press_2
   1796                  else if (key_minus_on())key_press=3;
   \                     ??Key_Press_3:
   \   000023 8D000000              CALLF     key_minus_on
   \   000027 A100                  CP        A, #0x0
   \   000029 2704                  JREQ      L:??Key_Press_2
   \   00002B 35030000              MOV       S:?b8, #0x3
   1797             } while ( (timer3<=time_menu) && !key_press);    //(timer3<=time_menu) &&
   \                     ??Key_Press_2:
   \   00002F 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_70:
   \   000033 2404                  JRNC      L:??Key_Press_4
   \   000035 3D00                  TNZ       S:?b8
   \   000037 27D0                  JREQ      L:??Key_Press_0
   1798          
   1799             return key_press;
   \                     ??Key_Press_4:
   \   000039 B600                  LD        A, S:?b8
   \   00003B 320000                POP       S:?b8
   \   00003E 87                    RETF
   1800          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "TIMER ON">`:
   \   000000 54494D455220          DC8 "TIMER ON"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "TIMER OFF">`:
   \   000000 54494D455220          DC8 "TIMER OFF"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d.%dC %s ">`:
   \   000000 25642E256443          DC8 "%d.%dC %s "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock">`:
   \   000000 0A436C6F636B          DC8 "\012Clock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   1801          
   1802          
   1803          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     line1                            40
     string1                          10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     ?Subroutine18                     7
     ?Subroutine39                    10
     ??Subroutine67_0                  7
     main                            479
     ?Subroutine57                     2
     ??Subroutine70_0                 12
     ?Subroutine28                     7
     ?Subroutine62                     7
     ?Subroutine23                    18
     ?Subroutine61                     2
     ??Subroutine71_0                  8
     ?Subroutine22                    15
     ?Subroutine7                      9
     Display                           9
     Power_On                         11
     ?Subroutine33                    23
     Power_Off                        11
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine34                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine38                     1
     ??Subroutine69_0                  7
     ?Subroutine37                     9
     ?Subroutine36                    11
     ReadDS1307                      109
     ?Subroutine20                    11
     ?Subroutine15                    13
     ?Subroutine13                     8
     ?Subroutine56                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine35                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       395
     ?Subroutine41                    10
     ?Subroutine19                     6
     ??Subroutine64_0                  5
     ?Subroutine12                    16
     ?Subroutine55                     6
     adj                              85
     ?Subroutine3                     10
     key_ok_on                        47
     key_plus_on                      45
     ?Subroutine16                     7
     ?Subroutine2                      7
     key_minus_on                     45
     key_ok_plus                      40
     ?Subroutine1                     29
     ?Subroutine21                     7
     ?Subroutine4                     10
     ??Subroutine65_0                 29
     Set_Timer_On                    145
     ?Subroutine44                     5
     ?Subroutine53                     9
     ?Subroutine40                     9
     ?Subroutine8                     10
     ?Subroutine43                    10
     Set_Timer_Off                   150
     ?Subroutine42                    10
     Save_Status                      10
     Read_Allarm                     123
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine51                     9
     ?Subroutine50                     9
     ?Subroutine45                    12
     InitClk                          56
     ?Subroutine52                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine24                     7
     ??Subroutine68_0                  5
     ?Subroutine58                     7
     ?Subroutine26                     2
     InitLcd                          85
     ?Subroutine29                    17
     ?Subroutine25                    11
     ?Subroutine14                    11
     ?Subroutine0                     13
     ??Subroutine63_0                 10
     ?Subroutine32                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine6                     24
     ?Subroutine54                     6
     LCD_Busy                         69
     LCD                             174
     ?Subroutine59                     9
     ?Subroutine11                     4
     ??Subroutine66_0                  5
     InitDelayTimer2                  29
     InitDelayTimer3                  29
     DS18_Write                       57
     ?Subroutine30                     2
     ?Subroutine27                    10
     ?Subroutine60                     7
     DS18_Read                        77
     ?Subroutine31                    12
     DS18_Reset                       49
     ?Subroutine17                     7
     ?Subroutine49                     7
     temperature                      63
     ?Subroutine47                    17
     ?Subroutine46                    25
     ?Subroutine5                     21
     Read_DS18                       121
     ?Subroutine48                    12
     DS18Set                          41
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine10                    13
     ?Subroutine9                     16
     Clear_Line2                      19
     Menu                            208
     Key_Press                        63
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "TIMER ON">            9
     ?<Constant "TIMER OFF">          10
     ?<Constant "%d.%dC %s ">         11
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nClock">             7
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 4 504 bytes in section .far_func.text
    98 bytes in section .near.bss
     3 bytes in section .near.data
   245 bytes in section .near.rodata
 
 4 504 bytes of CODE  memory
   245 bytes of CONST memory
   101 bytes of DATA  memory

Errors: none
Warnings: none
