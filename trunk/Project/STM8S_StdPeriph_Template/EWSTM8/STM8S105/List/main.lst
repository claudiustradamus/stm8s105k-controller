###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             27/Dec/2013  09:13:08 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include  "time.h"
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          
     81          
     82          
     83          
     84          #ifdef __GNUC__
     85            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     86               set to 'Yes') calls __io_putchar() */
     87            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     88          #else
     89            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     90          #endif /* __GNUC__ */
     91          
     92          
     93          
     94          
     95          #define SpecialSymbol 0x1b //Esc to start message
     96          //#define data_size 20
     97          #define key_time 8000
     98          #define KEY_TIME_ON 8000
     99          #define KEY_TIME_HOLD 65000
    100          #define key_time_press 4000
    101          #define key_time_release 400
    102          #define DS_Control  0x10  // Out 1s
    103          #define time_menu 10  // 5s
    104          #define TIMEOUT_DS18B20 8000
    105          #define LCDLEDON 20
    106          //#define sync_time 30 // 30s
    107          #define power_jitter 3 //3s
    108          
    109          
    110          
    111          
    112          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    113          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    114          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    115          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    116          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    118          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    119          //char data[data_size];
    120          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    121          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    126          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    127          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    128          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    129          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    141          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    142          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    143          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    144          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    150          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    152          char  manu_display,sync_display,program_display,program_number;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_number:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    153          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    154          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    155          u8 button;
   \                     button:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    156          u8 power;
   \                     power:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    157          bool blink_flag;
   \                     blink_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    158          u16 blink_time;
   \                     blink_time:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    159          bool key_ok_hold;
   \                     key_ok_hold:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    160          bool rotate_line2=FALSE;
   \                     rotate_line2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    161          u8 size_status;
   \                     size_status:
   \   000000                       DS8 1
    162          //bool Daily;
    163          

   \                                 In section .near.bss, align 1
    164          struct tm ptim;
   \                     ptim:
   \   000000                       DS8 22
    165          //bool  ds_temperature;
    166          
    167          
    168          

   \                                 In section .near.bss, align 1
    169          char line1[10];
   \                     line1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    170          char line2[10];
   \                     line2:
   \   000000                       DS8 10
    171          //char string1[10];
    172          //char string2[10];

   \                                 In section .near.bss, align 1
    173          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    174          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    175          
    176          //u8 index=0;

   \                                 In section .near.bss, align 1
    177          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    178          int volatile k=0;
   \                     k:
   \   000000                       DS8 2

   \                                 In section .near.data, align 1
    179          char *day_week[11] = {" Off"," Sun"," Mon"," Tues"," Wednes"," Thurs"," Fri"," Satur"," Daily"," Month"};
   \                     day_week:
   \   000000 000000000000          DC16 `?<Constant " Off">`, `?<Constant " Sun">`, `?<Constant " Mon">`
   \   000006 00000000              DC16 `?<Constant " Tues">`, `?<Constant " Wednes">`
   \   00000A 00000000              DC16 `?<Constant " Thurs">`, `?<Constant " Fri">`
   \   00000E 00000000              DC16 `?<Constant " Satur">`, `?<Constant " Daily">`
   \   000012 0000                  DC16 `?<Constant " Month">`
   \   000014 0000                  DC8 0, 0

   \                                 In section .near.data, align 1
    180          char *setup_menu[5] ={"\nPrgClear","\nSetClock","\nSetDate","\nSh Date","\nExit"};
   \                     setup_menu:
   \   000000 00000000              DC16 `?<Constant "\\nPrgClear">`, `?<Constant "\\nSetClock">`
   \   000004 00000000              DC16 `?<Constant "\\nSetDate">`, `?<Constant "\\nSh Date">`
   \   000008 0000                  DC16 `?<Constant "\\nExit">`
    181          //char *test[3] ={"18777","2","3"};
    182          
    183           struct   status_reg
    184           {
    185             unsigned manu:1;
    186             unsigned on:1;
    187             unsigned timer_on:1;
    188             unsigned daily:4;
    189             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    190           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    191          
    192          
    193           struct
    194           {
    195             unsigned ds1307:1;
    196             unsigned ds18B20:1;
    197             unsigned buzzer:1;
    198             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    199           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    200          
    201          
    202          
    203           typedef  struct
    204            {
    205              u8 day;
    206              u8 onhour ;
    207              u8 onminute ;
    208              u8 offhour;
    209              u8 offminute;
    210          
    211            }  program ;
    212          
    213                   // = new proram[8];

   \                                 In section .near.bss, align 1
    214             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 40
    215            /*
    216             =
    217           {
    218             {0x00,0x00,0x00,0x00,0x00},
    219             {0x00,0x00,0x00,0x00,0x00},
    220             {0x00,0x00,0x00,0x00,0x00},
    221             {0x00,0x00,0x00,0x00,0x00},
    222             {0x00,0x00,0x00,0x00,0x00},
    223             {0x00,0x00,0x00,0x00,0x00},
    224             {0x00,0x00,0x00,0x00,0x00},
    225             {0x00,0x00,0x00,0x00,0x00},
    226           };
    227              */
    228          
    229          //time_t  ltime;
    230          //struct tm ptim;
    231          
    232          
    233          
    234          
    235          
    236          /* Private function prototypes -----------------------------------------------*/
    237          void InitHardware();
    238          void GpioConfiguration();
    239          void InitClk();
    240          void InitAdc();
    241          void InitI2C();
    242          void EEPROM_INIT();
    243          bool ReadDS1307();
    244          //void InitUart();
    245          void InitLcd();
    246          void InitDelayTimer2();
    247          void InitDelayTimer3();
    248          void Delay1( u16 Delay);
    249          void Delay2( u16 Delay);
    250          void Delay_us(u16 Delay);
    251          void LCDInstrNibble (u8 Instr);
    252          void LCDInstr(u8 Instr);
    253          void LCDDataOut(u8 data);
    254          void LCD_Busy();
    255          void PulseEnable();
    256          //void SendData();
    257          void SendChar(u8 Char);
    258          //void Send_Hello();
    259          bool SetClock();
    260          bool SetData();
    261          bool InputDataProgram(bool smart);
    262          //bool key_ok_hold();
    263          bool key_ok_on();
    264          bool key_plus_on();
    265          bool key_minus_on();
    266          bool key_ok_plus();
    267          bool Init_DS1307(void);
    268          bool Check_DS1307(void);
    269          bool I2C_Start(void);
    270          bool I2C_WA(u8 address);
    271          bool I2C_WD(u8 data);
    272          bool I2C_RA(u8 address);
    273          bool Set_DS1307();
    274          //bool Set_Delay_Allarm();
    275          //bool Set_Timer_On();
    276          //bool Set_Timer_Off();
    277          //bool Read_Allarm();
    278          bool Read_DS18();
    279          bool DS18_Write( u8 data);
    280          bool DS18_Reset();
    281          bool DS18Set();
    282          u8 temperature();
    283          u8 DS18_Read();
    284          u8 convert_tobcd(u8 data);
    285          u8 I2C_RD(void);
    286          u8 adj(u8 min,u8 max,u8 now);
    287          u8 bcd2hex(u8 bcd);
    288          void Power_On(void);
    289          void Power_Off();
    290          void SaveStatus();
    291          void ReadStatus();
    292          void Rotate_Line( char * line);
    293          void Display_Line(char * line);
    294          void DisplayLine2(void);
    295          void ClearLine1(void);
    296          void ClearLine2(void);
    297          void Menu(void);
    298          void pressKey(void);
    299          void Display(void);
    300          void initBeep(void);
    301          void beep(u16 Interval);
    302          void FirstMenu();
    303          void ProgramMenu();
    304          void SaveProgram();
    305          void ReadProgram();
    306          void ResetProgram();
    307          void CheckProgramPoint();
    308          void SetupMenu();
    309          void SelectMenu(u8 si);
    310          
    311          
    312          
    313          
    314          u16  Average();
    315          
    316          
    317          /* Private functions ---------------------------------------------------------*/
    318          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_192:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_213:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine50:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A502                  BCP       A, #0x2
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    319          void main(void)
    320          {
    321              /*High speed internal clock prescaler: 1*/
    322              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    323              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    324              InitDelayTimer2();
   \   000004 8D000000              CALLF     InitDelayTimer2
    325              InitDelayTimer3();
   \   000008 8D000000              CALLF     InitDelayTimer3
    326              GpioConfiguration();
   \   00000C 8D000000              CALLF     GpioConfiguration
    327              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000010 8D000000              CALLF     ?Subroutine13
    328              GPIO_WriteHigh(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_22:
   \   000014 A601                  LD        A, #0x1
   \   000016 AE5005                LDW       X, #0x5005
   \   000019 8D000000              CALLF     GPIO_WriteHigh
    329              hardware.lcdLed=1;
   \   00001D 8D000000              CALLF     ?Subroutine33
    330              lcdLedTimer=LCDLEDON;
    331              //Daily=FALSE;
    332              //InitUart();
    333               enableInterrupts();
   \                     ??CrossCallReturnLabel_78:
   \   000021 9A                    RIM
    334               initBeep();
   \   000022 8D000000              CALLF     initBeep
    335              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    336               InitLcd();
   \   000026 8D000000              CALLF     InitLcd
    337              //InitAdc();
    338               InitI2C();
   \   00002A 8D000000              CALLF     InitI2C
    339              // Enable Timer3
    340              TIM3_Cmd(ENABLE);
   \   00002E A601                  LD        A, #0x1
   \   000030 8D000000              CALLF     TIM3_Cmd
    341              //year=bcd2hex(13);
    342              //Delay1(10000);
    343               if (!ReadDS1307())
   \   000034 8D000000              CALLF     ReadDS1307
   \   000038 A100                  CP        A, #0x0
   \   00003A 261D                  JRNE      L:??main_0
    344               {
    345                 printf("\n E2:%d",error);
   \   00003C C60000                LD        A, L:error
   \   00003F 5F                    CLRW      X
   \   000040 97                    LD        XL, A
   \   000041 89                    PUSHW     X
   \   000042 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000045 8D000000              CALLF     printf
   \   000049 5B02                  ADD       SP, #0x2
    346                 // Reset the CPU: Enable the watchdog and wait until it expires
    347                  hardware.ds1307=0;
   \   00004B CE0000                LDW       X, L:hardware
   \   00004E 01                    RRWA      X, A
   \   00004F A4FE                  AND       A, #0xfe
   \   000051 02                    RLWA      X, A
   \   000052 CF0000                LDW       L:hardware, X
    348                   pressKey();
   \   000055 8D000000              CALLF     pressKey
    349                //IWDG->KR = IWDG_KEY_ENABLE;
    350                // while ( 1 );    // Wait until reset occurs from IWDG
    351               }
    352          
    353          
    354                  // lcdLedTimer=LCDLEDON;
    355                  //GPIO_WriteHigh(GPIOB,lcdLed);
    356          
    357              if (!Check_DS1307())
   \                     ??main_0:
   \   000059 8D000000              CALLF     Check_DS1307
   \   00005D A100                  CP        A, #0x0
   \   00005F 2624                  JRNE      L:??main_1
    358              {
    359                 if (error!=0)
   \   000061 C60000                LD        A, L:error
   \   000064 2710                  JREQ      L:??main_2
    360                 {
    361                  printf("\n E:%d",error);
   \   000066 5F                    CLRW      X
   \   000067 97                    LD        XL, A
   \   000068 89                    PUSHW     X
   \   000069 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00006C 8D000000              CALLF     printf
   \   000070 5B02                  ADD       SP, #0x2
    362                   pressKey();
   \   000072 8D000000              CALLF     pressKey
    363          
    364                 }
    365               line_lcd=0;
   \                     ??main_2:
   \   000076 725F0000              CLR       L:line_lcd
    366               printf("\nSetClock");
   \   00007A AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00007D 8D000000              CALLF     printf
    367                SetClock();
   \   000081 8D000000              CALLF     SetClock
    368                 // reset program point
    369          
    370              }
    371          
    372          
    373                 //Read Status register from eepom and update it
    374                //size=sizeof(status);
    375               //u16 status
    376              ReadStatus();
   \                     ??main_1:
   \   000085 8D000000              CALLF     ReadStatus
    377              ReadProgram ();
   \   000089 8D000000              CALLF     ReadProgram
    378          
    379              DS18Set();
   \   00008D 8D000000              CALLF     DS18Set
    380              line_lcd=0;
   \   000091 725F0000              CLR       L:line_lcd
    381              if (!Read_DS18())
   \   000095 8D000000              CALLF     Read_DS18
   \   000099 A100                  CP        A, #0x0
   \   00009B 2611                  JRNE      L:??main_3
    382              {
    383               printf("\nDS_Err_T");
   \   00009D AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000A0 8D000000              CALLF     printf
    384                 hardware.ds18B20=0;
   \   0000A4 8D000000              CALLF     ?Subroutine34
    385                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_80:
   \   0000A8 8D000000              CALLF     pressKey
   \   0000AC 2004                  JRA       L:??CrossCallReturnLabel_82
    386              }
    387               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000AE 8D000000              CALLF     ?Subroutine35
    388          
    389              //daily_dispaly=' ';
    390              //month_display=' ';
    391              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_82:
   \   0000B2 35010000              MOV       L:sync_time_ds1307, #0x1
    392          
    393                    //Same delay if  power jitter
    394              if (status.on)
   \   0000B6 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_135:
   \   0000BA 2717                  JREQ      L:??main_4
    395              {
    396               line_lcd=0;
   \   0000BC 725F0000              CLR       L:line_lcd
    397               printf("\nWait 3s.");
   \   0000C0 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   0000C3 8D000000              CALLF     printf
    398               timer3=0;
   \   0000C7 5F                    CLRW      X
   \   0000C8 CF0000                LDW       L:timer3, X
    399               while (timer3<=power_jitter);
   \                     ??main_5:
   \   0000CB CE0000                LDW       X, L:timer3
   \   0000CE A30004                CPW       X, #0x4
   \   0000D1 25F8                  JRC       L:??main_5
    400              }
    401          
    402          
    403               /* Main Loop*/
    404          
    405              while(1)
    406              {
    407          
    408          
    409                if(key_ok_on())
   \                     ??main_4:
   \   0000D3 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_107:
   \   0000D7 270F                  JREQ      L:??main_6
    410                {
    411                   if( key_ok_hold) SetupMenu();
   \   0000D9 C60000                LD        A, L:key_ok_hold
   \   0000DC 2706                  JREQ      L:??main_7
   \   0000DE 8D000000              CALLF     SetupMenu
   \   0000E2 2004                  JRA       L:??main_6
    412                    else FirstMenu();
   \                     ??main_7:
   \   0000E4 8D000000              CALLF     FirstMenu
    413                }
    414                if(key_plus_on()) Power_On();
   \                     ??main_6:
   \   0000E8 8D000000              CALLF     key_plus_on
   \   0000EC A100                  CP        A, #0x0
   \   0000EE 2704                  JREQ      L:??main_8
   \   0000F0 8D000000              CALLF     Power_On
    415                if(key_minus_on())Power_Off();
   \                     ??main_8:
   \   0000F4 8D000000              CALLF     key_minus_on
   \   0000F8 A100                  CP        A, #0x0
   \   0000FA 2704                  JREQ      L:??main_9
   \   0000FC 8D000000              CALLF     Power_Off
    416                if(Time_Display) Display();  //
   \                     ??main_9:
   \   000100 C60000                LD        A, L:Time_Display
   \   000103 2704                  JREQ      L:??main_10
   \   000105 8D000000              CALLF     Display
    417          
    418                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_10:
   \   000109 C60000                LD        A, L:sync_time_ds1307
   \   00010C 2725                  JREQ      L:??main_11
    419                   {
    420                    if (!ReadDS1307())
   \   00010E 8D000000              CALLF     ReadDS1307
   \   000112 A100                  CP        A, #0x0
   \   000114 2619                  JRNE      L:??main_12
    421                        {
    422                          GPIO_WriteLow(GPIOD, power_pin );
   \   000116 8D000000              CALLF     ?Subroutine13
    423                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_21:
   \   00011A C60000                LD        A, L:error
   \   00011D 5F                    CLRW      X
   \   00011E 97                    LD        XL, A
   \   00011F 89                    PUSHW     X
   \   000120 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000123 8D000000              CALLF     printf
   \   000127 5B02                  ADD       SP, #0x2
    424                       //restart i2c
    425                       // Reset the CPU: Enable the watchdog and wait until it expires
    426                       IWDG->KR = IWDG_KEY_ENABLE;
   \   000129 35CC50E0              MOV       L:0x50e0, #0xcc
    427                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_13:
   \   00012D 20FE                  JRA       L:??main_13
    428                        }
    429                   sync_time_ds1307=FALSE;
   \                     ??main_12:
   \   00012F 725F0000              CLR       L:sync_time_ds1307
    430                   //sync_display='S';
    431                   }
    432          
    433                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_11:
   \   000133 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_136:
   \   000137 2708                  JREQ      L:??main_14
   \   000139 A608                  LD        A, #0x8
   \   00013B 8D000000              CALLF     ??Subroutine84_0
   \                     ??CrossCallReturnLabel_232:
   \   00013F 2092                  JRA       L:??main_4
    434                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_14:
   \   000141 8D000000              CALLF     ?Subroutine13
    435          
    436          
    437          
    438              }
   \                     ??CrossCallReturnLabel_20:
   \   000145 208C                  JRA       L:??main_4
    439          
    440          
    441          
    442          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine35:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine34:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
    443          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A501                  BCP       A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    444          void Display(void)
    445          {
    446             //ClearLine1 ();
    447              char power_display;
    448              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    449               result2=0;
   \   000007 725F0000              CLR       L:result2
    450                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    451                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    452          
    453          
    454          
    455             if (status.manu)
   \   000018 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_202:
   \   00001C 271D                  JREQ      L:??Display_1
    456             {
    457               program_display=' ';
   \   00001E 35200000              MOV       L:program_display, #0x20
    458               power_display=' ';
    459               if(status.on)
   \   000022 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_133:
   \   000026 270D                  JREQ      L:??Display_2
    460               {
    461                if(manu_display=='M') manu_display=' ';
   \   000028 C60000                LD        A, L:manu_display
   \   00002B A14D                  CP        A, #0x4d
   \   00002D 2606                  JRNE      L:??Display_2
   \   00002F 35200000              MOV       L:manu_display, #0x20
   \   000033 200A                  JRA       L:??Display_3
    462                 else manu_display='M';
   \                     ??Display_2:
   \   000035 354D0000              MOV       L:manu_display, #0x4d
   \   000039 2004                  JRA       L:??Display_3
    463               }
    464                else manu_display='M';
    465             }
    466               else manu_display='A';
   \                     ??Display_1:
   \   00003B 35410000              MOV       L:manu_display, #0x41
    467          
    468          
    469          
    470          
    471               //Blink D
    472          
    473             if (status.on && !status.manu)
   \                     ??Display_3:
   \   00003F 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_134:
   \   000043 271A                  JREQ      L:??Display_4
   \   000045 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_203:
   \   000049 2614                  JRNE      L:??Display_4
    474             {
    475               if (program_display==' ')
   \   00004B C60000                LD        A, L:program_display
   \   00004E A120                  CP        A, #0x20
   \   000050 260D                  JRNE      L:??Display_4
    476                 {
    477                   program_display='P';
   \   000052 35500000              MOV       L:program_display, #0x50
    478                   power_display=0x30 +power;
   \   000056 C60000                LD        A, L:power
   \   000059 AB30                  ADD       A, #0x30
   \   00005B B700                  LD        S:?b4, A
   \   00005D 2008                  JRA       L:??Display_5
    479                 }
    480               else
    481                 {
    482                   program_display=' ';
   \                     ??Display_4:
   \   00005F 35200000              MOV       L:program_display, #0x20
    483                   power_display=' ';
   \   000063 35200000              MOV       S:?b4, #0x20
    484                 }
    485             }
    486               else
    487                 {
    488                   program_display=' ';
    489                   power_display=' ';
    490                 }
    491          
    492          
    493             // else if (status.on) program_display='P';
    494             //  else program_display=' ';
    495          
    496              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,manu_display,program_display,power_display);
   \                     ??Display_5:
   \   000067 C60000                LD        A, L:manu_display
   \   00006A 5F                    CLRW      X
   \   00006B 97                    LD        XL, A
   \   00006C BF00                  LDW       S:?w1, X
   \   00006E C60000                LD        A, L:program_display
   \   000071 97                    LD        XL, A
   \   000072 BF00                  LDW       S:?w0, X
   \   000074 B600                  LD        A, S:?b4
   \   000076 41                    EXG       A, XL
   \   000077 90CE0000              LDW       Y, L:hardware
   \   00007B 909F                  LD        A, YL
   \   00007D A502                  BCP       A, #0x2
   \   00007F 89                    PUSHW     X
   \   000080 2721                  JREQ      L:??Display_6
   \   000082 8D000000              CALLF     L:?push_w0
   \   000086 8D000000              CALLF     L:?push_w1
   \   00008A C60000                LD        A, L:result2
   \   00008D 97                    LD        XL, A
   \   00008E 89                    PUSHW     X
   \   00008F C60000                LD        A, L:result1
   \   000092 97                    LD        XL, A
   \   000093 89                    PUSHW     X
   \   000094 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000098 AE0000                LDW       X, #line1
   \   00009B 8D000000              CALLF     sprintf
   \   00009F 5B0A                  ADD       SP, #0xa
   \   0000A1 2015                  JRA       L:??Display_7
    497                else sprintf(line1,"\n%c%c%c",manu_display,program_display,power_display);
   \                     ??Display_6:
   \   0000A3 8D000000              CALLF     L:?push_w0
   \   0000A7 8D000000              CALLF     L:?push_w1
   \   0000AB 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   0000AF AE0000                LDW       X, #line1
   \   0000B2 8D000000              CALLF     sprintf
   \   0000B6 5B06                  ADD       SP, #0x6
    498          
    499             line_lcd=0;
   \                     ??Display_7:
   \   0000B8 8D000000              CALLF     ?Subroutine39
    500             printf(line1);
    501          
    502             line_lcd=1;
    503             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_93:
   \   0000BC C60000                LD        A, L:seconds
   \   0000BF 5F                    CLRW      X
   \   0000C0 97                    LD        XL, A
   \   0000C1 89                    PUSHW     X
   \   0000C2 C60000                LD        A, L:minutes
   \   0000C5 97                    LD        XL, A
   \   0000C6 89                    PUSHW     X
   \   0000C7 C60000                LD        A, L:hours
   \   0000CA 97                    LD        XL, A
   \   0000CB 89                    PUSHW     X
   \   0000CC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CF 8D000000              CALLF     printf
   \   0000D3 5B06                  ADD       SP, #0x6
    504          
    505          
    506             Time_Display=FALSE;
   \   0000D5 725F0000              CLR       L:Time_Display
    507             //sync_display=' ';
    508          
    509          
    510          }
   \   0000D9 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine39:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #line1
   \   000007 8D000000              CALLF     printf
   \   00000B 35010000              MOV       L:line_lcd, #0x1
   \   00000F 87                    RETF
    511          

   \                                 In section .far_func.text, align 1
    512          void Power_On()
    513          {
    514            //status.auto=0;
    515            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine37
    516            status.manu=1; //Manu
    517            SaveStatus();
   \                     ??CrossCallReturnLabel_88:
   \   00000A AC000000              JPF       SaveStatus
    518            //hardware.lcdLed=1;
    519          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine37:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 AA01                  OR        A, #0x1
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    520          

   \                                 In section .far_func.text, align 1, keep-with-next
    521          void Power_Off()
    522          {
    523            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine37
    524            status.manu=1; //Manu
    525            SaveStatus();
   \                     ??CrossCallReturnLabel_87:
   \   00000A AC000000              JPF       SaveStatus
    526             //hardware.lcdLed=0;
    527          
    528          }
    529          

   \                                 In section .far_func.text, align 1, keep-with-next
    530          void InitI2C(void)
    531          {
    532             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    533             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    534             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    535          }
    536          

   \                                 In section .far_func.text, align 1, keep-with-next
    537          bool I2C_Start(void)
    538          {
    539             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    540                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    541              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_172:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    542                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    543                  {
    544                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    545                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    546                  }
    547                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    548          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    549          

   \                                 In section .far_func.text, align 1, keep-with-next
    550          bool I2C_WA(u8 address)
    551          {
    552            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    553                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    554                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_171:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    555                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    556                   {
    557                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    558                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    559                   }
    560                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    561          }
    562          

   \                                 In section .far_func.text, align 1, keep-with-next
    563          bool I2C_RA(u8 address)
    564          {
    565            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    566                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    567                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_173:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    568                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    569                   {
    570                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    571                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    572                   }
    573                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    574          }
    575          
    576          

   \                                 In section .far_func.text, align 1, keep-with-next
    577          bool I2C_WD(u8 data)
    578          {
    579           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    580             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    581             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_170:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    582              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    583              {
    584                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    585                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    586              }
    587               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    588          }
    589          

   \                                 In section .far_func.text, align 1, keep-with-next
    590          u8 I2C_RD(void)
    591          {
    592           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    593            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    594           //while((!(I2C->SR1 & 0x40))&&timeout);
    595           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    596           {
    597             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    598             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    599           }
    600           u8 data=I2C_ReceiveData();
    601           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    602          }
    603          
    604          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine91_0
   \   000001                       ;               // Fall through to label ??Subroutine91_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    605          bool  ReadDS1307(void)
    606          {        //TIM3_Cmd(DISABLE);
    607                   disableInterrupts();
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine54
    608                 error=0;
    609                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_144:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    610                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_169:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    611                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_270:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    612                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine24
    613                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_46:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    614                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    615                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine23
    616                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_44:
   \   000028 C70000                LD        L:seconds, A
    617                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine23
    618                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_43:
   \   00002F C70000                LD        L:minutes, A
    619                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine23
    620                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_42:
   \   000036 C70000                LD        L:hours, A
    621                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine23
    622                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_41:
   \   00003D C70000                LD        L:days, A
    623                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine23
    624                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   000044 C70000                LD        L:`date`, A
    625                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine23
    626                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_39:
   \   00004B C70000                LD        L:month, A
    627                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine28
    628                   I2C_GenerateSTOP(ENABLE);
    629                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_56:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    630          
    631               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    632               //   u8 data1 = I2C_RD();
    633                //Last read byte by I2C slave
    634               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    635               //  I2C_GenerateSTOP(ENABLE);
    636               //  temp2= I2C_RD();
    637                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    638                    {
    639                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    640                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    641                    }
    642                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006A CE0000                LDW       X, L:hardware
   \   00006D 01                    RRWA      X, A
   \   00006E AA01                  OR        A, #0x1
   \   000070 02                    RLWA      X, A
   \   000071 CF0000                LDW       L:hardware, X
    643                 //TIM3_Cmd(ENABLE);
    644                  enableInterrupts();
   \   000074 9A                    RIM
    645                 return TRUE;
   \   000075 A601                  LD        A, #0x1
   \   000077 87                    RETF
    646          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 9B                    SIM
   \   000001 725F0000              CLR       L:error
   \   000005 8D000000              CALLF     I2C_Start
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_190:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    647          

   \                                 In section .far_func.text, align 1, keep-with-next
    648          bool Check_DS1307(void)
    649          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    650             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    651                 error=0;
   \   000003 725F0000              CLR       L:error
    652                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    653                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    654                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_168:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    655                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine91_0
   \                     ??CrossCallReturnLabel_273:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    656                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine24
    657                  //Last read byte by I2C slave
    658                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_45:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    659                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    660                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine72
    661                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_191:
   \   00003C B700                  LD        S:?b8, A
    662                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine28
    663                 I2C_GenerateSTOP(ENABLE);
    664                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_57:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    665                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    666          }
    667          

   \                                 In section .far_func.text, align 1, keep-with-next
    668          bool Set_DS1307()
    669          {
    670                 // convert hex or decimal to bcd format
    671          
    672                 disableInterrupts();
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine54
    673                 error=0;
    674                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_143:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    675                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_167:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    676                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_269:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    677                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_174:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    678                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_175:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    679                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_176:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    680                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_177:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    681                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_178:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    682                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_179:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    683                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_180:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    684                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine91_0
   \                     ??CrossCallReturnLabel_271:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    685                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine91_0
   \                     ??CrossCallReturnLabel_272:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    686                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    687                 enableInterrupts();
   \   000069 9A                    RIM
    688          
    689             return TRUE;
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    690          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    691          
    692          

   \                                 In section .far_func.text, align 1, keep-with-next
    693          u8 convert_tobcd(u8 data)
    694          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    695             u8 data_second_decimal=data/10;
    696             u8 data_first_decimal=data - 10*data_second_decimal;
    697             data=16*data_second_decimal + data_first_decimal;
    698            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    699          }
    700          

   \                                 In section .far_func.text, align 1, keep-with-next
    701          u8 bcd2hex(u8 bcd)
    702          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    703            u8 hex=0;
    704            hex=(bcd>>4)*10 +(bcd&0x0f);
    705            bcd=0;
    706            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    707          }
    708          
    709          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 A102                  CP        A, #0x2
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_187:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    710          void  SetupMenu()
    711          {
   \                     SetupMenu:
   \   000000 8D000000              CALLF     L:?push_w4
    712               // Clear Display
    713              LCDInstr(0x01); //Clear LCD
   \   000004 8D000000              CALLF     ?Subroutine22
    714              Delay1(250);
   \                     ??CrossCallReturnLabel_38:
   \   000008 8D000000              CALLF     ??Subroutine81_0
    715          
    716              line_lcd=0;
    717              printf("\nMenu +/-");
   \                     ??CrossCallReturnLabel_220:
   \   00000C AE0000                LDW       X, #`?<Constant "\\nMenu +/-">`
   \   00000F 8D000000              CALLF     printf
    718              u8 mi=0;
   \   000013 3F00                  CLR       S:?b8
    719              u8 size_setup_menu = (sizeof(setup_menu)/2) -1;
    720              line_lcd=1;
   \   000015 35010000              MOV       L:line_lcd, #0x1
    721              printf(setup_menu[mi]);
   \   000019 CE0000                LDW       X, L:setup_menu
   \   00001C 8D000000              CALLF     printf
    722              bool key_menu=TRUE;
   \   000020 35010000              MOV       S:?b9, #0x1
   \   000024 2019                  JRA       L:??SetupMenu_0
    723          
    724              do
    725              {
    726                pressKey();
    727                 if(button==2)    // Plus Key  Enter Menu
    728                  {
    729                    mi++;
    730                    if(mi > size_setup_menu) mi=0;
    731                    ClearLine2();
    732                    line_lcd=1;
    733                    printf(setup_menu[mi]);
    734                  }
    735          
    736                 if (button==3)  // Minus Key  down Menu
    737                    {
    738                      mi--;
    739                      if(mi==255) mi=size_setup_menu;
    740                      ClearLine2();
    741                      line_lcd=1;
    742                      printf(setup_menu[mi]);
    743                    }
    744          
    745                  if(button==1 && key_menu)
    746                  {
    747                    key_menu=FALSE;
   \                     ??SetupMenu_1:
   \   000026 3F00                  CLR       S:?b9
    748                    button=4;
   \   000028 35040000              MOV       L:button, #0x4
    749                  }
    750          
    751                  if(button==1) SelectMenu(mi);
    752          
    753                  if(button==4)
    754                  {
    755                    ClearLine1();
   \                     ??SetupMenu_2:
   \   00002C 8D000000              CALLF     ?Subroutine45
    756                    ClearLine2();
    757                    line_lcd=0;
    758                    printf("\nMenu +/-");
   \                     ??CrossCallReturnLabel_119:
   \   000030 AE0000                LDW       X, #`?<Constant "\\nMenu +/-">`
   \   000033 8D000000              CALLF     printf
    759                    line_lcd=1;
   \   000037 8D000000              CALLF     ??Subroutine89_0
    760                    printf(setup_menu[mi]);
    761                    button=5;
   \                     ??CrossCallReturnLabel_266:
   \   00003B 35050000              MOV       L:button, #0x5
    762                  }
   \                     ??SetupMenu_0:
   \   00003F 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_122:
   \   000043 260F                  JRNE      L:??CrossCallReturnLabel_268
   \   000045 B600                  LD        A, S:?b8
   \   000047 4C                    INC       A
   \   000048 B700                  LD        S:?b8, A
   \   00004A A105                  CP        A, #0x5
   \   00004C 2502                  JRC       L:??SetupMenu_3
   \   00004E 3F00                  CLR       S:?b8
   \                     ??SetupMenu_3:
   \   000050 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_268:
   \   000054 C60000                LD        A, L:button
   \   000057 A103                  CP        A, #0x3
   \   000059 2611                  JRNE      L:??CrossCallReturnLabel_267
   \   00005B B600                  LD        A, S:?b8
   \   00005D 4A                    DEC       A
   \   00005E B700                  LD        S:?b8, A
   \   000060 A1FF                  CP        A, #0xff
   \   000062 2604                  JRNE      L:??SetupMenu_4
   \   000064 35040000              MOV       S:?b8, #0x4
   \                     ??SetupMenu_4:
   \   000068 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_267:
   \   00006C C60000                LD        A, L:button
   \   00006F A101                  CP        A, #0x1
   \   000071 260A                  JRNE      L:??SetupMenu_5
   \   000073 3D00                  TNZ       S:?b9
   \   000075 26AF                  JRNE      L:??SetupMenu_1
   \   000077 B600                  LD        A, S:?b8
   \   000079 8D000000              CALLF     SelectMenu
   \                     ??SetupMenu_5:
   \   00007D C60000                LD        A, L:button
   \   000080 A104                  CP        A, #0x4
   \   000082 27A8                  JREQ      L:??SetupMenu_2
    763          
    764              } while ( button != 0 );   //Ok Next Menu   button != 1 &&
   \   000084 C60000                LD        A, L:button
   \   000087 26B6                  JRNE      L:??SetupMenu_0
   \   000089 AC000000              JPF       L:?epilogue_w4
    765          
    766                   if(button==0) return;  // No key press
    767          
    768          
    769          
    770          
    771          
    772          
    773          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_198:
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 8D000000              CALLF     ClearLine1
   \   000004 AC000000              JPF       ClearLine2

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ClearLine2
   \   000004                       REQUIRE ??Subroutine89_0
   \   000004                       ;               // Fall through to label ??Subroutine89_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004                       REQUIRE ??Subroutine90_0
   \   000004                       ;               // Fall through to label ??Subroutine90_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 58                    SLLW      X
   \   000006 DE0000                LDW       X, (L:setup_menu,X)
   \   000009 AC000000              JPF       printf
    774          
    775          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 8D000000              CALLF     ClearLine2
   \   000004 35010000              MOV       L:line_lcd, #0x1
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     ClearLine1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    776          void SelectMenu(u8 si)
    777          {
   \                     SelectMenu:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    778              if(si==4)
   \   000005 A104                  CP        A, #0x4
   \   000007 2607                  JRNE      L:??SelectMenu_0
    779              {
    780                button=0;
   \                     ??SelectMenu_1:
   \   000009 725F0000              CLR       L:button
    781                 return;
   \   00000D CC0000                JP        L:??SelectMenu_2
    782              }
    783          
    784              if(si==3)
   \                     ??SelectMenu_0:
   \   000010 A103                  CP        A, #0x3
   \   000012 2646                  JRNE      L:??SelectMenu_3
    785              {
    786                 ClearLine1();
   \   000014 8D000000              CALLF     ?Subroutine45
    787                 ClearLine2();
    788                 line_lcd=0;
    789                 printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_117:
   \   000018 C60000                LD        A, L:`date`
   \   00001B 5F                    CLRW      X
   \   00001C 97                    LD        XL, A
   \   00001D 89                    PUSHW     X
   \   00001E C60000                LD        A, L:month
   \   000021 97                    LD        XL, A
   \   000022 89                    PUSHW     X
   \   000023 C60000                LD        A, L:year
   \   000026 97                    LD        XL, A
   \   000027 89                    PUSHW     X
   \   000028 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00002B 8D000000              CALLF     printf
   \   00002F 5B06                  ADD       SP, #0x6
    790                 line_lcd=1;
   \   000031 35010000              MOV       L:line_lcd, #0x1
    791                 printf("\n%s",day_week[days]);
   \   000035 C60000                LD        A, L:days
   \   000038 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_261:
   \   00003C 89                    PUSHW     X
   \   00003D AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000040 8D000000              CALLF     printf
   \   000044 5B02                  ADD       SP, #0x2
    792                 pressKey();
   \   000046 8D000000              CALLF     ?Subroutine47
    793                 while(button !=0 && button !=1 && button !=2 && button !=3);;
    794                  button=0;
    795                 return;
    796              }
   \                     ??CrossCallReturnLabel_124:
   \   00004A 27BD                  JREQ      L:??SelectMenu_1
   \   00004C A101                  CP        A, #0x1
   \   00004E 27B9                  JREQ      L:??SelectMenu_1
   \   000050 A102                  CP        A, #0x2
   \   000052 27B5                  JREQ      L:??SelectMenu_1
   \                     ??SelectMenu_4:
   \   000054 A103                  CP        A, #0x3
   \   000056 26FC                  JRNE      L:??SelectMenu_4
   \   000058 20AF                  JRA       L:??SelectMenu_1
    797          
    798             ClearLine1();
   \                     ??SelectMenu_3:
   \   00005A 8D000000              CALLF     ?Subroutine44
    799              line_lcd=0;
    800             printf(setup_menu[si]);
   \                     ??CrossCallReturnLabel_116:
   \   00005E 8D000000              CALLF     ??Subroutine90_0
    801             ClearLine2();
   \                     ??CrossCallReturnLabel_265:
   \   000062 8D000000              CALLF     ?Subroutine49
    802              line_lcd=1;
    803             printf("\n+/-");
   \                     ??CrossCallReturnLabel_131:
   \   000066 AE0000                LDW       X, #`?<Constant "\\n+/-">`
   \   000069 8D000000              CALLF     printf
    804              do
    805              {
    806                pressKey();
   \                     ??SelectMenu_5:
   \   00006D 8D000000              CALLF     ?Subroutine47
    807          
    808                if(button==3) //Minus
   \                     ??CrossCallReturnLabel_125:
   \   000071 A103                  CP        A, #0x3
   \   000073 2606                  JRNE      L:??SelectMenu_6
    809                {
    810                   button=4;
   \   000075 35040000              MOV       L:button, #0x4
    811                   return;
   \   000079 2063                  JRA       L:??SelectMenu_2
    812                }
    813          
    814                if(button==1 || button==3)
   \                     ??SelectMenu_6:
   \   00007B A101                  CP        A, #0x1
   \   00007D 265A                  JRNE      L:??SelectMenu_7
    815                {
    816                   switch (si)
   \   00007F B600                  LD        A, S:?b8
   \   000081 2708                  JREQ      L:??SelectMenu_8
   \   000083 4A                    DEC       A
   \   000084 273D                  JREQ      L:??SelectMenu_9
   \   000086 4A                    DEC       A
   \   000087 2745                  JREQ      L:??SelectMenu_10
   \   000089 204E                  JRA       L:??SelectMenu_7
    817                   {
    818                   case 0:
    819                      ClearLine1();
   \                     ??SelectMenu_8:
   \   00008B 8D000000              CALLF     ?Subroutine45
    820                      ClearLine2();
    821                      line_lcd=0;
    822                      printf("\nClear");
   \                     ??CrossCallReturnLabel_118:
   \   00008F AE0000                LDW       X, #`?<Constant "\\nClear">`
   \   000092 8D000000              CALLF     printf
    823                      line_lcd=1;
   \   000096 35010000              MOV       L:line_lcd, #0x1
    824                      printf("\nall prog");
   \   00009A AE0000                LDW       X, #`?<Constant "\\nall prog">`
   \   00009D 8D000000              CALLF     printf
    825                      ResetProgram();
   \   0000A1 8D000000              CALLF     ResetProgram
    826                      pressKey();
   \   0000A5 8D000000              CALLF     ?Subroutine47
    827                       while(button !=0 && button !=1 && button !=2 && button !=3);;
   \                     ??CrossCallReturnLabel_126:
   \   0000A9 2603                  JRNE      ??lb_4
   \   0000AB CC0000                JP        L:??SelectMenu_1
   \                     ??lb_4:
   \   0000AE A101                  CP        A, #0x1
   \   0000B0 2603                  JRNE      ??lb_5
   \   0000B2 CC0000                JP        L:??SelectMenu_1
   \                     ??lb_5:
   \   0000B5 A102                  CP        A, #0x2
   \   0000B7 2603                  JRNE      ??lb_6
   \   0000B9 CC0000                JP        L:??SelectMenu_1
   \                     ??lb_6:
   \                     ??SelectMenu_11:
   \   0000BC A103                  CP        A, #0x3
   \   0000BE 26FC                  JRNE      L:??SelectMenu_11
   \   0000C0 CC0000                JP        L:??SelectMenu_1
    828                        button=0;
    829                      return;
    830                    break;
    831                   case 1:
    832                      ClearLine1();
   \                     ??SelectMenu_9:
   \   0000C3 8D000000              CALLF     ?Subroutine75
    833                      ClearLine2();
    834                      SetClock();
   \                     ??CrossCallReturnLabel_200:
   \   0000C7 8D000000              CALLF     SetClock
   \   0000CB CC0000                JP        L:??SelectMenu_1
    835                      button=0;
    836                      return;
    837                    break;
    838                   case 2:
    839                      ClearLine1();
   \                     ??SelectMenu_10:
   \   0000CE 8D000000              CALLF     ?Subroutine75
    840                      ClearLine2();
    841                      SetData();
   \                     ??CrossCallReturnLabel_199:
   \   0000D2 8D000000              CALLF     SetData
   \   0000D6 CC0000                JP        L:??SelectMenu_1
    842                      button=0;
    843                      return;
    844                    break;
    845                  }
    846                }
    847              } while (button !=0);
   \                     ??SelectMenu_7:
   \   0000D9 C60000                LD        A, L:button
   \   0000DC 268F                  JRNE      L:??SelectMenu_5
   \                     ??SelectMenu_2:
   \   0000DE 320000                POP       S:?b8
   \   0000E1 87                    RETF
    848          
    849          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000 5F                    CLRW      X
   \   000001 97                    LD        XL, A
   \   000002 58                    SLLW      X
   \   000003 DE0000                LDW       X, (L:day_week,X)
   \   000006 87                    RETF
    850          
    851          

   \                                 In section .far_func.text, align 1, keep-with-next
    852          bool SetData()
    853          {
    854              //Clear Display
    855             LCDInstr(0x01);
   \                     SetData:
   \   000000 8D000000              CALLF     ?Subroutine71
    856             Delay1(1000);
   \                     ??CrossCallReturnLabel_186:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
    857             if(InputDataProgram(FALSE))
   \   00000B 4F                    CLR       A
   \   00000C 8D000000              CALLF     InputDataProgram
   \   000010 A100                  CP        A, #0x0
   \   000012 276A                  JREQ      L:??SetData_0
    858              {
    859                year=y;
   \   000014 C60000                LD        A, L:`y`
   \   000017 C70000                LD        L:year, A
    860                month=m;
   \   00001A C60000                LD        A, L:m
   \   00001D C70000                LD        L:month, A
    861                date=d;
   \   000020 C60000                LD        A, L:d
   \   000023 C70000                LD        L:`date`, A
    862              }
    863              else return FALSE;
    864          
    865              //Find day of week
    866              ptim.tm_year=year+100;
   \   000026 C60000                LD        A, L:year
   \   000029 5F                    CLRW      X
   \   00002A 97                    LD        XL, A
   \   00002B 1C0064                ADDW      X, #0x64
   \   00002E CF0000                LDW       L:ptim + 10, X
    867              ptim.tm_mon=month-1;
   \   000031 C60000                LD        A, L:month
   \   000034 5F                    CLRW      X
   \   000035 97                    LD        XL, A
   \   000036 5A                    DECW      X
   \   000037 CF0000                LDW       L:ptim + 8, X
    868              ptim.tm_mday=date;
   \   00003A C60000                LD        A, L:`date`
   \   00003D 5F                    CLRW      X
   \   00003E 97                    LD        XL, A
   \   00003F CF0000                LDW       L:ptim + 6, X
    869              ptim.tm_sec=seconds;
   \   000042 C60000                LD        A, L:seconds
   \   000045 97                    LD        XL, A
   \   000046 CF0000                LDW       L:ptim, X
    870              ptim.tm_min=minutes;
   \   000049 C60000                LD        A, L:minutes
   \   00004C 97                    LD        XL, A
   \   00004D CF0000                LDW       L:ptim + 2, X
    871              ptim.tm_hour=hours;
   \   000050 C60000                LD        A, L:hours
   \   000053 97                    LD        XL, A
   \   000054 CF0000                LDW       L:ptim + 4, X
    872              ptim.tm_isdst=-1;
   \   000057 5F                    CLRW      X
   \   000058 5A                    DECW      X
   \   000059 CF0000                LDW       L:ptim + 16, X
    873               if(mktime(&ptim)==-1)
   \   00005C AE0000                LDW       X, #ptim
   \   00005F 8D000000              CALLF     __mktime32
   \   000063 BE00                  LDW       X, S:?w0
   \   000065 A3FFFF                CPW       X, #0xffffffffffffffff
   \   000068 2605                  JRNE      L:??SetData_1
   \   00006A BE00                  LDW       X, S:?w1
   \   00006C A3FFFF                CPW       X, #0xffff
   \                     ??SetData_1:
   \   00006F 260F                  JRNE      L:??SetData_2
    874               {
    875                 ClearLine1();
   \   000071 8D000000              CALLF     ?Subroutine44
    876                  line_lcd=0;
    877                 printf("\nError");
   \                     ??CrossCallReturnLabel_114:
   \   000075 AE0000                LDW       X, #`?<Constant "\\nError">`
   \   000078 8D000000              CALLF     printf
   \   00007C 2027                  JRA       L:??SetData_3
    878              }
   \                     ??SetData_0:
   \   00007E 4F                    CLR       A
   \   00007F 87                    RETF
    879                else
    880                {
    881                   ClearLine1();
   \                     ??SetData_2:
   \   000080 8D000000              CALLF     ?Subroutine44
    882                   line_lcd=0;
    883                   printf("\nDay is");
   \                     ??CrossCallReturnLabel_115:
   \   000084 AE0000                LDW       X, #`?<Constant "\\nDay is">`
   \   000087 8D000000              CALLF     printf
    884                   ClearLine2();
   \   00008B 8D000000              CALLF     ?Subroutine49
    885                   line_lcd=1;
    886                   days= ptim.tm_wday+1;   //int    tm_wday  day of week [0,6] (Sunday = 0)
   \                     ??CrossCallReturnLabel_130:
   \   00008F CE0000                LDW       X, L:ptim + 12
   \   000092 9F                    LD        A, XL
   \   000093 4C                    INC       A
   \   000094 C70000                LD        L:days, A
    887                   printf("\n%s",day_week[days]);
   \   000097 8D000000              CALLF     ??Subroutine88_0
    888          
    889                }
   \                     ??CrossCallReturnLabel_260:
   \   00009B 89                    PUSHW     X
   \   00009C AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   00009F 8D000000              CALLF     printf
   \   0000A3 5B02                  ADD       SP, #0x2
    890          
    891               // Wait for key or time out
    892                do
    893              {
    894                pressKey();
   \                     ??SetData_3:
   \   0000A5 8D000000              CALLF     ?Subroutine47
    895              } while ( button !=0 && button !=1 && button !=2 && button !=3);
   \                     ??CrossCallReturnLabel_123:
   \   0000A9 270C                  JREQ      L:??SetData_4
   \   0000AB A101                  CP        A, #0x1
   \   0000AD 2708                  JREQ      L:??SetData_4
   \   0000AF A102                  CP        A, #0x2
   \   0000B1 2704                  JREQ      L:??SetData_4
   \   0000B3 A103                  CP        A, #0x3
   \   0000B5 26EE                  JRNE      L:??SetData_3
    896          
    897          
    898              // Set parameter to DS1307 + time byte
    899                if(!Set_DS1307())
   \                     ??SetData_4:
   \   0000B7 8D000000              CALLF     Set_DS1307
   \   0000BB A100                  CP        A, #0x0
   \   0000BD 2603                  JRNE      L:??SetData_5
    900                {
    901                  enableInterrupts();
   \   0000BF 9A                    RIM
    902                  return FALSE;
   \   0000C0 20BC                  JRA       ??SetData_0
    903                }
    904          
    905            return TRUE;
   \                     ??SetData_5:
   \   0000C2 A601                  LD        A, #0x1
   \   0000C4 87                    RETF
    906          }
    907          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_188:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine81_0
   \   000007                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine82_0
   \   000006                       ;               // Fall through to label ??Subroutine82_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
    908          bool SetClock()
    909           {
    910             //Clear Display
    911             LCDInstr(0x01);
   \                     SetClock:
   \   000000 8D000000              CALLF     ?Subroutine16
    912             Delay1(1000);
    913             line_lcd=0;
    914              printf("\nHour>");
   \                     ??CrossCallReturnLabel_218:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   000007 8D000000              CALLF     printf
    915                do
    916              {
    917                line_lcd=1;
   \                     ??SetClock_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    918                 if(blink_flag)printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   00000F C60000                LD        A, L:minutes
   \   000012 905F                  CLRW      Y
   \   000014 9097                  LD        YL, A
   \   000016 C60000                LD        A, L:seconds
   \   000019 5F                    CLRW      X
   \   00001A 97                    LD        XL, A
   \   00001B C60000                LD        A, L:blink_flag
   \   00001E 89                    PUSHW     X
   \   00001F 9089                  PUSHW     Y
   \   000021 2710                  JREQ      L:??SetClock_1
   \   000023 C60000                LD        A, L:hours
   \   000026 97                    LD        XL, A
   \   000027 89                    PUSHW     X
   \   000028 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00002B 8D000000              CALLF     printf
   \   00002F 5B06                  ADD       SP, #0x6
   \   000031 2009                  JRA       L:??SetClock_2
    919                  else printf("\n  :%02d:%02d",minutes,seconds);
   \                     ??SetClock_1:
   \   000033 AE0000                LDW       X, #`?<Constant "\\n  :%02d:%02d">`
   \   000036 8D000000              CALLF     printf
   \   00003A 5B04                  ADD       SP, #0x4
    920                 hours=adj(0,23,hours);
   \                     ??SetClock_2:
   \   00003C C60000                LD        A, L:hours
   \   00003F B700                  LD        S:?b1, A
   \   000041 35170000              MOV       S:?b0, #0x17
   \   000045 8D000000              CALLF     ??Subroutine82_0
    921              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_221:
   \   000049 C70000                LD        L:hours, A
   \   00004C 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_104:
   \   000050 27B9                  JREQ      L:??SetClock_0
    922          
    923               line_lcd=0;
   \   000052 725F0000              CLR       L:line_lcd
    924               printf("\nMinute>");
   \   000056 AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000059 8D000000              CALLF     printf
    925                do
    926              {
    927                line_lcd=1;
   \                     ??SetClock_3:
   \   00005D 35010000              MOV       L:line_lcd, #0x1
    928                if(blink_flag) printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   000061 C60000                LD        A, L:hours
   \   000064 5F                    CLRW      X
   \   000065 97                    LD        XL, A
   \   000066 C60000                LD        A, L:seconds
   \   000069 905F                  CLRW      Y
   \   00006B 9097                  LD        YL, A
   \   00006D C60000                LD        A, L:blink_flag
   \   000070 9089                  PUSHW     Y
   \   000072 2713                  JREQ      L:??SetClock_4
   \   000074 C60000                LD        A, L:minutes
   \   000077 9097                  LD        YL, A
   \   000079 9089                  PUSHW     Y
   \   00007B 89                    PUSHW     X
   \   00007C AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007F 8D000000              CALLF     printf
   \   000083 5B06                  ADD       SP, #0x6
   \   000085 200A                  JRA       L:??SetClock_5
    929                 else printf("\n%02d:  :%02d",hours,seconds);
   \                     ??SetClock_4:
   \   000087 89                    PUSHW     X
   \   000088 AE0000                LDW       X, #`?<Constant "\\n%02d:  :%02d">`
   \   00008B 8D000000              CALLF     printf
   \   00008F 5B04                  ADD       SP, #0x4
    930                 minutes=adj(0,59,minutes);
   \                     ??SetClock_5:
   \   000091 C60000                LD        A, L:minutes
   \   000094 8D000000              CALLF     ?Subroutine29
    931              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_225:
   \   000098 C70000                LD        L:minutes, A
   \   00009B 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_105:
   \   00009F 27BC                  JREQ      L:??SetClock_3
    932          
    933              line_lcd=0;
   \   0000A1 725F0000              CLR       L:line_lcd
    934              printf("\nSeconds>");
   \   0000A5 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   0000A8 8D000000              CALLF     printf
    935              do
    936              {
    937                line_lcd=1;
   \                     ??SetClock_6:
   \   0000AC 35010000              MOV       L:line_lcd, #0x1
    938               if(blink_flag)printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   0000B0 C60000                LD        A, L:hours
   \   0000B3 5F                    CLRW      X
   \   0000B4 97                    LD        XL, A
   \   0000B5 C60000                LD        A, L:minutes
   \   0000B8 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_95:
   \   0000BC 2717                  JREQ      L:??SetClock_7
   \   0000BE C60000                LD        A, L:seconds
   \   0000C1 9097                  LD        YL, A
   \   0000C3 9089                  PUSHW     Y
   \   0000C5 8D000000              CALLF     L:?push_w0
   \   0000C9 89                    PUSHW     X
   \   0000CA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CD 8D000000              CALLF     printf
   \   0000D1 5B06                  ADD       SP, #0x6
   \   0000D3 200E                  JRA       L:??SetClock_8
    939                else printf("\n%02d:%02d:  ",hours,minutes);
   \                     ??SetClock_7:
   \   0000D5 8D000000              CALLF     L:?push_w0
   \   0000D9 89                    PUSHW     X
   \   0000DA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:  ">`
   \   0000DD 8D000000              CALLF     printf
   \   0000E1 5B04                  ADD       SP, #0x4
    940                 seconds=adj(0,59,seconds);
   \                     ??SetClock_8:
   \   0000E3 C60000                LD        A, L:seconds
   \   0000E6 8D000000              CALLF     ?Subroutine29
    941              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_224:
   \   0000EA C70000                LD        L:seconds, A
   \   0000ED 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_106:
   \   0000F1 27B9                  JREQ      L:??SetClock_6
    942          
    943                // Set parameter to DS1307 + time byte
    944                if(!Set_DS1307()) enableInterrupts();
   \   0000F3 8D000000              CALLF     Set_DS1307
   \   0000F7 A100                  CP        A, #0x0
   \   0000F9 2601                  JRNE      L:??SetClock_9
   \   0000FB 9A                    RIM
    945          
    946            return TRUE;
   \                     ??SetClock_9:
   \   0000FC A601                  LD        A, #0x1
   \   0000FE 87                    RETF
    947          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 905F                  CLRW      Y
   \   000002 9097                  LD        YL, A
   \   000004 90BF00                LDW       S:?w0, Y
   \   000007 C60000                LD        A, L:blink_flag
   \   00000A 87                    RETF
    948          
    949          

   \                                 In section .far_func.text, align 1, keep-with-next
    950          u8 adj(u8 min,u8 max,u8 now)
    951          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    952             u8 adj=now;
    953             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    954             {
    955               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    956               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    957             }
    958             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    959             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    960             {
    961               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    962               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    963             }
    964             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    965             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    966          
    967             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    968          }
    969          
    970          

   \                                 In section .far_func.text, align 1, keep-with-next
    971          bool key_ok_on()
    972          {
    973            //Read Key OK
    974            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_49:
   \   000004 2649                  JRNE      L:??key_ok_on_0
    975             {
    976               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    977                key_ok_hold=FALSE;
   \   00000A 725F0000              CLR       L:key_ok_hold
    978                while((timer2 < KEY_TIME_HOLD) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000E CE0000                LDW       X, L:timer2
   \   000011 A3FDE8                CPW       X, #0xfde8
   \   000014 2406                  JRNC      L:??key_ok_on_2
   \   000016 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_50:
   \   00001A 27F2                  JREQ      L:??key_ok_on_1
    979                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A30FA0                CPW       X, #0xfa0
   \   000022 252B                  JRC       L:??key_ok_on_0
    980                 {
    981                      if(timer2>=KEY_TIME_HOLD)
   \   000024 CE0000                LDW       X, L:timer2
   \   000027 A3FDE8                CPW       X, #0xfde8
   \   00002A 2507                  JRC       L:??key_ok_on_3
    982                      {
    983                        key_ok_hold=TRUE;
   \   00002C 35010000              MOV       L:key_ok_hold, #0x1
    984                         return TRUE;
   \                     ??key_ok_on_4:
   \   000030 A601                  LD        A, #0x1
   \   000032 87                    RETF
    985                      }
    986                   timer2=0; // and next must be release
   \                     ??key_ok_on_3:
   \   000033 5F                    CLRW      X
   \   000034 CF0000                LDW       L:timer2, X
    987                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000037 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_51:
   \   00003B 2712                  JREQ      L:??key_ok_on_0
    988                    {
    989                       beep(2000);
   \   00003D 8D000000              CALLF     ?Subroutine31
    990                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_68:
   \   000041 2606                  JRNE      L:??key_ok_on_5
    991                        {
    992                         hardware.lcdLed=1;
   \   000043 8D000000              CALLF     ?Subroutine33
    993                         lcdLedTimer=LCDLEDON;
    994                         return FALSE;
   \                     ??CrossCallReturnLabel_73:
   \   000047 2006                  JRA       ??key_ok_on_0
    995                        }
    996                       hardware.lcdLed=1;
   \                     ??key_ok_on_5:
   \   000049 8D000000              CALLF     ?Subroutine33
    997                       lcdLedTimer=LCDLEDON;
    998          
    999                      return TRUE;   //if realease retrun true
   \                     ??CrossCallReturnLabel_74:
   \   00004D 20E1                  JRA       ??key_ok_on_4
   1000                    }
   1001                 }
   1002             }
   1003          
   1004            return FALSE;
   \                     ??key_ok_on_0:
   \   00004F 4F                    CLR       A
   \   000050 87                    RETF
   1005          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
   1006          
   1007          
   1008          

   \                                 In section .far_func.text, align 1, keep-with-next
   1009           bool key_plus_on()
   1010          {
   1011            //Read Key OK
   1012              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_84:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
   1013               {
   1014               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
   1015                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_59:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_83:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
   1016                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
   1017                  {
   1018                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_53:
   \   000026 2711                  JREQ      L:??key_plus_on_0
   1019                    {
   1020                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine31
   1021                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_70:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
   1022                        {
   1023                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine33
   1024                         lcdLedTimer=LCDLEDON;
   1025                         return FALSE;
   \                     ??CrossCallReturnLabel_76:
   \   000032 2005                  JRA       ??key_plus_on_0
   1026                        }
   1027                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine32
   1028                        lcdLedTimer=LCDLEDON;
   1029          
   1030                      return TRUE;
   1031                    }
   1032                  }
   1033               }
   \                     ??CrossCallReturnLabel_72:
   \   000038 87                    RETF
   1034          
   1035            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
   1036          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_193:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
   1037          
   1038          

   \                                 In section .far_func.text, align 1, keep-with-next
   1039            bool key_minus_on()
   1040          {
   1041            //Read Key OK
   1042             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_86:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
   1043               {
   1044               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
   1045                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_58:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_85:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
   1046                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
   1047                  {
   1048                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_52:
   \   000026 2711                  JREQ      L:??key_minus_on_0
   1049                   {
   1050                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine31
   1051                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_69:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
   1052                       {
   1053                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine33
   1054                        lcdLedTimer=LCDLEDON;
   1055                        return FALSE;
   \                     ??CrossCallReturnLabel_75:
   \   000032 2005                  JRA       ??key_minus_on_0
   1056                       }
   1057                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine32
   1058                     lcdLedTimer=LCDLEDON;
   1059                     return TRUE;
   1060                   }
   1061                  }
   1062               }
   \                     ??CrossCallReturnLabel_71:
   \   000038 87                    RETF
   1063          
   1064            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
   1065          }
   1066          
   1067          

   \                                 In section .far_func.text, align 1, keep-with-next
   1068          bool  key_ok_plus()
   1069          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
   1070            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_25:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
   1071            {
   1072                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
   1073                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_66:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_26:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
   1074                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_67:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_212
   1075                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine79
   1076                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_212:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
   1077                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
   1078            }
   1079          
   1080           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
   1081          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
   1082          
   1083          

   \                                 In section .far_func.text, align 1, keep-with-next
   1084          void SaveStatus()
   1085          {
   1086            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     EEPROM_INIT
   1087            size_status=sizeof(status);
   \   000004 35020000              MOV       L:size_status, #0x2
   1088            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \   000008 CE0000                LDW       X, L:status
   \   00000B 4F                    CLR       A
   \   00000C 01                    RRWA      X, A
   \   00000D 9F                    LD        A, XL
   \   00000E AE4000                LDW       X, #0x4000
   \   000011 8D000000              CALLF     ?Subroutine43
   1089            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   \                     ??CrossCallReturnLabel_111:
   \   000015 CE0000                LDW       X, L:status
   \   000018 9F                    LD        A, XL
   \   000019 AE4001                LDW       X, #0x4001
   \   00001C 8D000000              CALLF     ?Subroutine43
   1090            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_110:
   \   000020 A6F7                  LD        A, #0xf7
   \   000022 AC000000              JPF       FLASH_Lock
   1091          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
   1092          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1093          void ReadStatus()
   1094          {
   \                     ReadStatus:
   \   000000 3B0000                PUSH      S:?b8
   1095             *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \   000003 AE4000                LDW       X, #0x4000
   \   000006 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_142:
   \   00000A B700                  LD        S:?b8, A
   \   00000C AE4001                LDW       X, #0x4001
   \   00000F 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_141:
   \   000013 905F                  CLRW      Y
   \   000015 9097                  LD        YL, A
   \   000017 5F                    CLRW      X
   \   000018 41                    EXG       A, XL
   \   000019 B600                  LD        A, S:?b8
   \   00001B 41                    EXG       A, XL
   \   00001C 4F                    CLR       A
   \   00001D 02                    RLWA      X, A
   \   00001E 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_210:
   \   000022 CF0000                LDW       L:status, X
   1096              status_check = *(u16*)(&status);
   \   000025 CE0000                LDW       X, L:status
   \   000028 CF0000                LDW       L:status_check, X
   1097          }
   \   00002B 320000                POP       S:?b8
   \   00002E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte
   1098          
   1099          

   \                                 In section .far_func.text, align 1, keep-with-next
   1100          void SaveProgram ()
   1101          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
   1102               char *pp = (char*)&programpoint[0];
   1103              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1104             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1105             {
   1106              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 8D000000              CALLF     ?Subroutine42
   1107             }
   \                     ??CrossCallReturnLabel_108:
   \   000015 25F2                  JRC       L:??SaveProgram_0
   1108              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 8D000000              CALLF     FLASH_Lock
   1109          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 1C4002                ADDW      X, #0x4002
   \   000003 8D000000              CALLF     L:?sext32_l0_x
   \   000007 8D000000              CALLF     FLASH_ProgramByte
   \   00000B B600                  LD        A, S:?b8
   \   00000D 4C                    INC       A
   \   00000E B700                  LD        S:?b8, A
   \   000010 A128                  CP        A, #0x28
   \   000012 87                    RETF
   1110          
   1111          

   \                                 In section .far_func.text, align 1, keep-with-next
   1112          void ReadProgram()
   1113          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1114              char *pp = (char*)&programpoint[0];
   1115            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1116             {
   1117               *(pp+i)=FLASH_ReadByte(EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1118             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A128                  CP        A, #0x28
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1119          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1120          
   1121          

   \                                 In section .far_func.text, align 1, keep-with-next
   1122          void ResetProgram()
   1123          {
   \                     ResetProgram:
   \   000000 3B0000                PUSH      S:?b8
   1124          
   1125              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1126             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1127             {
   1128              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,0);
   \                     ??ResetProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A B600                  LD        A, S:?b8
   \   00000C 41                    EXG       A, XL
   \   00000D 8D000000              CALLF     ?Subroutine42
   1129             }
   \                     ??CrossCallReturnLabel_109:
   \   000011 25F6                  JRC       L:??ResetProgram_0
   1130              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 8D000000              CALLF     FLASH_Lock
   1131          
   1132               //Reload ProgrmaPoint
   1133              status.daily=0;
   \   000019 CE0000                LDW       X, L:status
   \   00001C 01                    RRWA      X, A
   \   00001D A487                  AND       A, #0x87
   \   00001F 8D000000              CALLF     ?Subroutine38
   1134              SaveStatus();
   1135              ReadStatus();
   \                     ??CrossCallReturnLabel_89:
   \   000023 8D000000              CALLF     ReadStatus
   1136             ReadProgram();
   \   000027 8D000000              CALLF     ReadProgram
   1137          }
   \   00002B 320000                POP       S:?b8
   \   00002E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 AC000000              JPF       SaveStatus
   1138          

   \                                 In section .far_func.text, align 1, keep-with-next
   1139          void CheckProgramPoint()
   1140          {
   \                     CheckProgramPoint:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 8D000000              CALLF     L:?push_w7
   \   000008 3B0000                PUSH      S:?b12
   \   00000B 5202                  SUB       SP, #0x2
   1141             if(status.manu) return;
   \   00000D 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_201:
   \   000011 2703                  JREQ      ??lb_2
   \   000013 CC0000                JP        L:??CheckProgramPoint_0
   1142             u16 timenow=hours*60+minutes;
   \                     ??lb_2:
   \   000016 C60000                LD        A, L:hours
   \   000019 905F                  CLRW      Y
   \   00001B 9097                  LD        YL, A
   \   00001D 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_258:
   \   000021 C60000                LD        A, L:minutes
   \   000024 9097                  LD        YL, A
   \   000026 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_209:
   \   00002A 1F01                  LDW       (0x1,SP), X
   1143             status.on=0;
   \   00002C CE0000                LDW       X, L:status
   \   00002F 01                    RRWA      X, A
   \   000030 A4FD                  AND       A, #0xfd
   \   000032 02                    RLWA      X, A
   \   000033 CF0000                LDW       L:status, X
   1144              //u8 daytoday;
   1145               for( u8 i=0; i<8;i++)
   \   000036 3F00                  CLR       S:?b12
   1146               {
   1147                  //For Daily Allarm
   1148                 if(programpoint[i].day==8)
   \                     ??CheckProgramPoint_1:
   \   000038 905F                  CLRW      Y
   \   00003A 61                    EXG       A, YL
   \   00003B B600                  LD        A, S:?b12
   \   00003D 61                    EXG       A, YL
   \   00003E AE0005                LDW       X, #0x5
   \   000041 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_257:
   \   000045 1C0000                ADDW      X, #programpoint
   \   000048 BF00                  LDW       S:?w4, X
   \   00004A 1C0002                ADDW      X, #0x2
   \   00004D BF00                  LDW       S:?w7, X
   \   00004F BE00                  LDW       X, S:?w4
   \   000051 5C                    INCW      X
   \   000052 BF00                  LDW       S:?w5, X
   \   000054 92C600                LD        A, [S:?w4.w]
   \   000057 B700                  LD        S:?b0, A
   \   000059 A108                  CP        A, #0x8
   \   00005B 2624                  JRNE      L:??CheckProgramPoint_2
   1149                 {
   1150                  int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   00005D 8D000000              CALLF     ?Subroutine1
   1151                  int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   1152                      do
   1153                        {
   1154                         if (timeon == timenow)
   \                     ??CrossCallReturnLabel_0:
   \   000061 51                    EXGW      X, Y
   \   000062 1301                  CPW       X, (0x1,SP)
   \   000064 51                    EXGW      X, Y
   \   000065 2607                  JRNE      L:??CheckProgramPoint_3
   1155                          {
   1156                            power = i;
   \   000067 8D000000              CALLF     ?Subroutine52
   1157                             status.on=1;
   1158                           break;
   \                     ??CrossCallReturnLabel_139:
   \   00006B CC0000                JP        L:??CrossCallReturnLabel_90
   1159                           }
   1160                         timeon ++;
   \                     ??CheckProgramPoint_3:
   \   00006E 905C                  INCW      Y
   1161                        if (timeon == 1441) timeon = 0;
   \   000070 90A305A1              CPW       Y, #0x5a1
   \   000074 2602                  JRNE      L:??CheckProgramPoint_4
   \   000076 905F                  CLRW      Y
   1162                        } while (!(timeon==timeoff));
   \                     ??CheckProgramPoint_4:
   \   000078 BF00                  LDW       S:?w0, X
   \   00007A 90B300                CPW       Y, S:?w0
   \   00007D 26E2                  JRNE      L:??CrossCallReturnLabel_0
   \   00007F 2071                  JRA       L:??CrossCallReturnLabel_90
   1163                     continue;
   1164                  }
   1165          
   1166                     // for Day of the Week Allarm or Next Day
   1167                 if ((programpoint[i].day== days) || (status.daily==i))
   \                     ??CheckProgramPoint_2:
   \   000081 C60000                LD        A, L:days
   \   000084 B100                  CP        A, S:?b0
   \   000086 2706                  JREQ      L:??CheckProgramPoint_5
   \   000088 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_137:
   \   00008C 2664                  JRNE      L:??CrossCallReturnLabel_90
   1168                  {
   1169                       //ReadStatus();
   1170                       if(status.daily!=i)
   \                     ??CheckProgramPoint_5:
   \   00008E 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_138:
   \   000092 271C                  JREQ      L:??CrossCallReturnLabel_91
   1171                       {
   1172                        status.daily=i; //Point is Weekly Mode
   \   000094 5F                    CLRW      X
   \   000095 41                    EXG       A, XL
   \   000096 B600                  LD        A, S:?b12
   \   000098 41                    EXG       A, XL
   \   000099 58                    SLLW      X
   \   00009A 58                    SLLW      X
   \   00009B 58                    SLLW      X
   \   00009C 02                    RLWA      X, A
   \   00009D 4F                    CLR       A
   \   00009E 02                    RLWA      X, A
   \   00009F A478                  AND       A, #0x78
   \   0000A1 02                    RLWA      X, A
   \   0000A2 BF00                  LDW       S:?w0, X
   \   0000A4 CE0000                LDW       X, L:status
   \   0000A7 01                    RRWA      X, A
   \   0000A8 A487                  AND       A, #0x87
   \   0000AA BA00                  OR        A, S:?b1
   \   0000AC 8D000000              CALLF     ?Subroutine38
   1173                        SaveStatus();
   1174                       }
   1175          
   1176                    int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \                     ??CrossCallReturnLabel_91:
   \   0000B0 8D000000              CALLF     ?Subroutine1
   1177                    int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   \                     ??CrossCallReturnLabel_1:
   \   0000B4 BF00                  LDW       S:?w0, X
   1178                      do
   1179                        {
   1180                         if (timeon == timenow)
   \                     ??CheckProgramPoint_6:
   \   0000B6 51                    EXGW      X, Y
   \   0000B7 1301                  CPW       X, (0x1,SP)
   \   0000B9 51                    EXGW      X, Y
   \   0000BA 2606                  JRNE      L:??CheckProgramPoint_7
   1181                          {
   1182                            power = i;
   \   0000BC 8D000000              CALLF     ?Subroutine52
   1183                            status.on=1;
   1184                           break;
   \                     ??CrossCallReturnLabel_140:
   \   0000C0 2011                  JRA       L:??CheckProgramPoint_8
   1185                          }
   1186                         timeon ++;
   \                     ??CheckProgramPoint_7:
   \   0000C2 93                    LDW       X, Y
   \   0000C3 5C                    INCW      X
   \   0000C4 9093                  LDW       Y, X
   1187                        if (timeon == 1441) timeon = 0;
   \   0000C6 90A305A1              CPW       Y, #0x5a1
   \   0000CA 2602                  JRNE      L:??CheckProgramPoint_9
   \   0000CC 905F                  CLRW      Y
   1188                        } while (!(timeon==timeoff));
   \                     ??CheckProgramPoint_9:
   \   0000CE 90B300                CPW       Y, S:?w0
   \   0000D1 26E3                  JRNE      L:??CheckProgramPoint_6
   1189                      if(!status.on)
   \                     ??CheckProgramPoint_8:
   \   0000D3 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_132:
   \   0000D7 2619                  JRNE      L:??CrossCallReturnLabel_90
   1190                      {
   1191                        if(status.daily!=9)
   \   0000D9 CE0000                LDW       X, L:status
   \   0000DC 9F                    LD        A, XL
   \   0000DD 44                    SRL       A
   \   0000DE 44                    SRL       A
   \   0000DF 44                    SRL       A
   \   0000E0 A40F                  AND       A, #0xf
   \   0000E2 A109                  CP        A, #0x9
   \   0000E4 270C                  JREQ      L:??CrossCallReturnLabel_90
   1192                        {
   1193                         status.daily=9;
   \   0000E6 CE0000                LDW       X, L:status
   \   0000E9 01                    RRWA      X, A
   \   0000EA A487                  AND       A, #0x87
   \   0000EC AA48                  OR        A, #0x48
   \   0000EE 8D000000              CALLF     ?Subroutine38
   1194                         SaveStatus();
   1195                        }
   1196                      }
   1197                      continue;
   1198                     // SaveStatus();
   1199                  }
   1200                 // for Monthly Allarm
   1201                  else if (programpoint[i].day == 10)//Point is Monthly Mode
   1202                   {
   1203          
   1204          
   1205          
   1206          
   1207          
   1208                   }
   1209          
   1210          
   1211               }
   \                     ??CrossCallReturnLabel_90:
   \   0000F2 B600                  LD        A, S:?b12
   \   0000F4 4C                    INC       A
   \   0000F5 B700                  LD        S:?b12, A
   \   0000F7 A108                  CP        A, #0x8
   \   0000F9 2403                  JRNC      ??lb_3
   \   0000FB CC0000                JP        L:??CheckProgramPoint_1
   \                     ??lb_3:
   \                     ??CheckProgramPoint_0:
   \   0000FE 5B02                  ADD       SP, #0x2
   \   000100 320000                POP       S:?b12
   \   000103 8D000000              CALLF     L:?pop_w7
   \   000107 AC000000              JPF       L:?epilogue_l2
   1212          
   1213          
   1214          
   1215          
   1216          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 B600                  LD        A, S:?b12
   \   000002 C70000                LD        L:power, A
   \   000005 CE0000                LDW       X, L:status
   \   000008 01                    RRWA      X, A
   \   000009 AA02                  OR        A, #0x2
   \   00000B 02                    RLWA      X, A
   \   00000C CF0000                LDW       L:status, X
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 44                    SRL       A
   \   000005 44                    SRL       A
   \   000006 44                    SRL       A
   \   000007 A40F                  AND       A, #0xf
   \   000009 B100                  CP        A, S:?b12
   \   00000B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 92C600                LD        A, [S:?w5.w]
   \   000003 5F                    CLRW      X
   \   000004 97                    LD        XL, A
   \   000005 9093                  LDW       Y, X
   \   000007 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_259:
   \   00000B 9093                  LDW       Y, X
   \   00000D 92C600                LD        A, [S:?w7.w]
   \   000010 5F                    CLRW      X
   \   000011 97                    LD        XL, A
   \   000012 BF00                  LDW       S:?w0, X
   \   000014 93                    LDW       X, Y
   \   000015 72BB0000              ADDW      X, S:?w0
   \   000019 9093                  LDW       Y, X
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D 1C0004                ADDW      X, #0x4
   \   000020 F6                    LD        A, (X)
   \   000021 5F                    CLRW      X
   \   000022 97                    LD        XL, A
   \   000023 BF00                  LDW       S:?w2, X
   \   000025 BE00                  LDW       X, S:?w4
   \   000027 1C0003                ADDW      X, #0x3
   \   00002A F6                    LD        A, (X)
   \   00002B 5F                    CLRW      X
   \   00002C 97                    LD        XL, A
   \   00002D BF00                  LDW       S:?w1, X
   \   00002F AE003C                LDW       X, #0x3c
   \   000032 BF00                  LDW       S:?w0, X
   \   000034 BE00                  LDW       X, S:?w1
   \   000036 8D000000              CALLF     L:?mul16_x_x_w0
   \   00003A 72BB0000              ADDW      X, S:?w2
   \   00003E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 AE003C                LDW       X, #0x3c
   \   000003                       REQUIRE ??Subroutine87_0
   \   000003                       ;               // Fall through to label ??Subroutine87_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000 BF00                  LDW       S:?w0, X
   \   000002 93                    LDW       X, Y
   \   000003 AC000000              JPF       L:?mul16_x_x_w0
   1217          
   1218          

   \                                 In section .far_func.text, align 1, keep-with-next
   1219          bool Read_Allarm()
   1220          {
   1221             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1222              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1223             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1224              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1225             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1226              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1227             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1228              if(daily_hour_off > 59) return FALSE;
   1229             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1230              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1231             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1232              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1233             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1234              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1235            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1236          }
   1237          

   \                                 In section .far_func.text, align 1, keep-with-next
   1238          void EEPROM_INIT()
   1239          {
   1240            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1241            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1242            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1243          
   1244          }
   1245          
   1246          

   \                                 In section .far_func.text, align 1, keep-with-next
   1247          void GpioConfiguration()
   1248          {
   1249          
   1250            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1251          
   1252            // ADC PE6 NEW PB0
   1253            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1254          
   1255            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1256            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1257          
   1258            //PD0 Led
   1259            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine55
   1260            //I2C
   1261            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_147:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1262            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine61
   1263            // Remap Pins pb4,pb5  sda,scl ;
   1264          
   1265             //Init KEY OK,PLUS,MINUS
   1266            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_164:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine61
   1267            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_165:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine61
   1268            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_166:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1269          
   1270            //Init DS18b20 data pin
   1271            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine55
   1272          
   1273            // Power Pin
   1274             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_146:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine55
   1275          
   1276            // lcdLed Pin
   1277             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_HIZ_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_145:
   \   00006B 35900000              MOV       S:?b0, #0x90
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1278          
   1279          
   1280          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1281          

   \                                 In section .far_func.text, align 1, keep-with-next
   1282          void InitClk()
   1283          {
   1284            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1285            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1286            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1287            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1288            CLK_SOURCE_HSI,       // Switch to internal timer.
   1289            DISABLE,              // Disable the clock switch interrupt.
   1290            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1291          
   1292            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine60
   1293            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_160:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine60
   1294            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_161:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine60
   1295            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_162:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine60
   1296            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_163:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1297          
   1298          
   1299          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1300          
   1301          
   1302          

   \                                 In section .far_func.text, align 1, keep-with-next
   1303          void LCDDataOut(u8 data)
   1304          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1305            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_17:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_241
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine85_0
   1306            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_241:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_16:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_242
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine85_0
   1307            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_242:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_15:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_243
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine85_0
   1308            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_243:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_14:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_244
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine85_0
   1309          }
   \                     ??CrossCallReturnLabel_244:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_250:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1310          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine85_0
   \   000002                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1311          void InitLcd()
   1312          {
   1313           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine11
   1314            LCD_RW(0);
   1315            LCD_RS(0);
   \                     ??CrossCallReturnLabel_19:
   \   000006 8D000000              CALLF     ?Subroutine12
   1316            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_239:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine17
   1317          
   1318            LCDInstrNibble(0x03);
   1319             Delay1(10);
   1320            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_28:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1321             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine17
   1322            LCDInstrNibble(0x03);
   1323             Delay1(10);
   1324          
   1325             //Line 4
   1326            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_27:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1327            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1328            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1329            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1330          
   1331            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1332            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1333          
   1334            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_37:
   \   000048 8D000000              CALLF     Delay1
   1335            Delay1(250);
   1336          
   1337            LCDInstr(0x06);
   \   00004C A606                  LD        A, #0x6
   \   00004E 8D000000              CALLF     LCDInstr
   1338            Delay1(10);
   \   000052 AE000A                LDW       X, #0xa
   \   000055 AC000000              JPF       Delay1
   1339          
   1340          
   1341          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_248:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_247:
   \   00000A 87                    RETF
   1342          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine85_0
   \                     ??CrossCallReturnLabel_245:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_215:
   \   00000D                       REQUIRE ??Subroutine80_0
   \   00000D                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_214:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1343          void LCDInstr(u8 Instr)
   1344          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1345            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine12
   1346            LCD_RW(0);
   \                     ??CrossCallReturnLabel_237:
   \   000009 2000                  JRA       ?Subroutine0
   1347            LCDDataOut(Instr>>4);
   1348            PulseEnable();
   1349            LCDDataOut(Instr & 0x0F);
   1350            PulseEnable();
   1351          }
   1352          

   \                                 In section .far_func.text, align 1, keep-with-next
   1353          void LCDData(u8 Data)
   1354          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1355            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine10
   1356            LCD_RW(0);
   \                     ??CrossCallReturnLabel_13:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1357            LCDDataOut(Data>>4);
   1358            PulseEnable() ;
   1359            LCDDataOut(Data & 0x0F) ;
   1360            PulseEnable();
   1361          }
   1362          

   \                                 In section .far_func.text, align 1, keep-with-next
   1363          void LCDInstrNibble(u8 Instr)
   1364          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1365            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine11
   1366            LCD_RW(0);
   1367            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_18:
   \   00000B AC000000              JPF       ??Subroutine80_0
   1368            PulseEnable();
   1369          }
   1370          

   \                                 In section .far_func.text, align 1, keep-with-next
   1371          void PulseEnable(void)
   1372          {
   1373            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1374             Delay1(1);
   1375            LCD_EN(1);
   1376             Delay1(1);
   1377            LCD_EN(0);
   \                     ??CrossCallReturnLabel_4:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine85_0
   1378             Delay1(1);
   \                     ??CrossCallReturnLabel_240:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1379          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_249:
   \   000006 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_252:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_251:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1380          

   \                                 In section .far_func.text, align 1, keep-with-next
   1381          void LCD_Busy(void)
   1382          {
   1383             //set Port D7 as Input
   1384             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1385             //Set Read
   1386             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine10
   1387             LCD_RS(0);
   \                     ??CrossCallReturnLabel_12:
   \   000013 8D000000              CALLF     ?Subroutine12
   1388             // Read Busy Flag
   1389                timer2=0;
   \                     ??CrossCallReturnLabel_238:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1390             do
   1391             {
   1392             // Enable set
   1393               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1394                Delay1(1);
   1395               LCD_EN(1);
   1396                Delay1(1);
   1397             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_5:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1398                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1399                //Clear read
   1400              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine85_0
   1401             //set Port D7 as Output
   1402             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_246:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1403          
   1404          }
   1405          
   1406          

   \                                 In section .far_func.text, align 1, keep-with-next
   1407          void LCD(u8 data)
   1408           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1409             //  static u8 linet=0;
   1410          
   1411          
   1412               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2678                  JRNE      L:??CrossCallReturnLabel_230
   1413               {
   1414          
   1415                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 2730                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2739                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 2742                  JREQ      L:??LCD_3
   \   000018 204A                  JRA       L:??LCD_4
   1416                   {
   1417                   case 0:
   1418                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1419                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1420                      {
   1421                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1422                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     LCDData
   1423                         Delay1(1);
   \   000030 8D000000              CALLF     ??Subroutine83_0
   1424                      }
   \                     ??CrossCallReturnLabel_229:
   \   000034 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_32:
   \   000038 25E8                  JRC       L:??LCD_5
   1425                     LCDInstr(0x80 | 0x00);
   \   00003A A680                  LD        A, #0x80
   \   00003C 8D000000              CALLF     ?Subroutine69
   1426                     count=0;
   1427                     break;
   \                     ??CrossCallReturnLabel_181:
   \   000040 2022                  JRA       L:??LCD_4
   1428                   case 1:
   1429                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000042 A6C0                  LD        A, #0xc0
   \   000044 8D000000              CALLF     LCDInstr
   1430                     count=20;
   \   000048 35140000              MOV       L:count, #0x14
   1431                     break;
   \   00004C 2016                  JRA       L:??LCD_4
   1432                   case 2:
   1433                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004E A694                  LD        A, #0x94
   \   000050 8D000000              CALLF     LCDInstr
   1434                     count=40;
   \   000054 35280000              MOV       L:count, #0x28
   1435                     break;
   \   000058 200A                  JRA       L:??LCD_4
   1436                   case 3:
   1437                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00005A A6D4                  LD        A, #0xd4
   \   00005C 8D000000              CALLF     LCDInstr
   1438                     count=60;
   \   000060 353C0000              MOV       L:count, #0x3c
   1439                     break;
   1440                   //default:
   1441                    //  LCDInstr(0x80 |0x40);    //Line 1
   1442                    }
   1443                   line_lcd++;
   \                     ??LCD_4:
   \   000064 C60000                LD        A, L:line_lcd
   \   000067 4C                    INC       A
   \   000068 C70000                LD        L:line_lcd, A
   1444                   if (line_lcd>=5)
   \   00006B A105                  CP        A, #0x5
   \   00006D 250F                  JRC       L:??LCD_6
   1445                   {
   1446                    line_lcd=1;   //line >=5
   \   00006F 35010000              MOV       L:line_lcd, #0x1
   1447                    LCDInstr(0x01); //Clear LCD
   \   000073 8D000000              CALLF     ?Subroutine71
   1448                    Delay1(2500);
   \                     ??CrossCallReturnLabel_189:
   \   000077 AE09C4                LDW       X, #0x9c4
   \   00007A 8D000000              CALLF     Delay1
   1449                   }
   1450          
   1451                   Delay1(1);
   \                     ??LCD_6:
   \   00007E 8D000000              CALLF     ??Subroutine83_0
   1452          
   1453          
   1454               }
   1455          
   1456          
   1457               if (count==20)
   \                     ??CrossCallReturnLabel_230:
   \   000082 C60000                LD        A, L:count
   \   000085 A114                  CP        A, #0x14
   \   000087 260A                  JRNE      L:??LCD_7
   1458                {
   1459                  LCDInstr(0x80 | 0x40);
   \   000089 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   00008B 8D000000              CALLF     LCDInstr
   1460                  Delay1(1);
   \                     ??LCD_9:
   \   00008F 5F                    CLRW      X
   \   000090 5C                    INCW      X
   \   000091 2020                  JRA       ??CrossCallReturnLabel_35
   1461                }
   1462                   else if(count==40)
   \                     ??LCD_7:
   \   000093 A128                  CP        A, #0x28
   \   000095 2604                  JRNE      L:??LCD_10
   1463                  {
   1464                    LCDInstr(0x80 | 0x14);
   \   000097 A694                  LD        A, #0x94
   \   000099 20F0                  JRA       ??LCD_8
   1465                    Delay1(1);
   1466                  }
   1467                    else if(count==60)
   \                     ??LCD_10:
   \   00009B A13C                  CP        A, #0x3c
   \   00009D 2608                  JRNE      L:??LCD_11
   1468                    {
   1469                      LCDInstr(0x80 | 0x54);
   \   00009F A6D4                  LD        A, #0xd4
   \   0000A1 8D000000              CALLF     ?Subroutine69
   1470                      count=0;
   1471                      Delay1(1);
   \                     ??CrossCallReturnLabel_182:
   \   0000A5 20E8                  JRA       ??LCD_9
   1472                    }
   1473                      else if(count >80)
   \                     ??LCD_11:
   \   0000A7 A151                  CP        A, #0x51
   \   0000A9 250C                  JRC       L:??LCD_12
   1474                        {
   1475                          count=0;
   \   0000AB 725F0000              CLR       L:count
   1476                          LCDInstr(0x01); //Clear LCD
   \   0000AF 8D000000              CALLF     ?Subroutine22
   1477                          Delay1(250);
   1478                        }
   \                     ??CrossCallReturnLabel_35:
   \   0000B3 8D000000              CALLF     Delay1
   1479          
   1480               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B7 B600                  LD        A, S:?b9
   \   0000B9 A11C                  CP        A, #0x1c
   \   0000BB 250F                  JRC       L:??LCD_13
   1481               {
   1482                 LCDData(data);
   \   0000BD 8D000000              CALLF     LCDData
   1483                  Delay1(1);
   \   0000C1 8D000000              CALLF     ??Subroutine83_0
   1484                 count++;
   \                     ??CrossCallReturnLabel_231:
   \   0000C5 C60000                LD        A, L:count
   \   0000C8 4C                    INC       A
   \   0000C9 C70000                LD        L:count, A
   1485               }
   1486           }
   \                     ??LCD_13:
   \   0000CC AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_253:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1487          

   \                                 In section .far_func.text, align 1, keep-with-next
   1488          void InitDelayTimer2()
   1489          {
   1490             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1491             //Tclock 16/8=2Mhz  /20 10us
   1492                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1493                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1494                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1495                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1496                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1497          
   1498          }
   1499          

   \                                 In section .far_func.text, align 1, keep-with-next
   1500          void InitDelayTimer3()
   1501          {
   1502             //Timer 3 use for 1s Delay
   1503             //Tclock 16000000/1024=15626
   1504                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1505                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1506                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1507                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1508          
   1509               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1510          
   1511          }
   1512          
   1513          
   1514          
   1515          

   \                                 In section .far_func.text, align 1, keep-with-next
   1516          bool DS18_Write(u8 data)
   1517          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1518            disableInterrupts();
   \   000006 9B                    SIM
   1519            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1520            {
   1521             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine14
   1522             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1523             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_24:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_236
   \   00001A 8D000000              CALLF     ?Subroutine18
   1524               //else DS18(0);
   1525             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_236:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1526             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine18
   1527             //Delay1(0);
   1528            }
   \                     ??CrossCallReturnLabel_235:
   \   000029 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_33:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1529            enableInterrupts();
   \   00002F 9A                    RIM
   1530            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1531          
   1532          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine84_0
   \   000002                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_184:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1533          
   1534          

   \                                 In section .far_func.text, align 1, keep-with-next
   1535          u8  DS18_Read()
   1536          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1537              //Init DS18b20 data pin as Input
   1538          
   1539            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1540              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1541            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1542            {
   1543              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine14
   1544              Delay_us(1); //Start time slot 4,5 us
   1545              DS18(1);
   \                     ??CrossCallReturnLabel_23:
   \   00000D 8D000000              CALLF     ?Subroutine18
   1546              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_233:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1547              //Delay1(0);
   1548             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_31:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1549              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1550              //  DS18(1);  // Next bit
   1551             // Delay1(0);
   1552          
   1553            }
   \   00003D 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_34:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1554              enableInterrupts();
   \   000043 9A                    RIM
   1555              //Init DS18b20 data pin
   1556             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1557             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1558          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1559          

   \                                 In section .far_func.text, align 1, keep-with-next
   1560          bool DS18_Reset()
   1561          {
   1562             //Init Reset Pulse
   1563          
   1564              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine70
   1565              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_185:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1566              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine18
   1567              //Delay1(1);
   1568              timer2=0;
   \                     ??CrossCallReturnLabel_234:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1569              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_60:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_29:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1570              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_61:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1571              {
   1572                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine34
   1573                return FALSE;
   \                     ??CrossCallReturnLabel_79:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1574              }
   1575          
   1576              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1577               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_62:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_30:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1578                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_63:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1579                 {
   1580                  hardware.ds18B20=0;
   1581                  return FALSE;
   1582                 }
   1583          
   1584              // Delay1(10);
   1585              //Delay1(20);    //25=524us
   1586               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine35
   1587              return TRUE;
   \                     ??CrossCallReturnLabel_81:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1588          }
   1589          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1590          u8 temperature ()
   1591          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1592          
   1593             //Init Reset Pulse
   1594              if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_156:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1595             //Skip ROM Command 0xCC
   1596              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine57
   1597             //Function command  CONVERT T [44h]
   1598              DS18_Write(0x44);
   1599              //Wait util end convert
   1600              timer2=0;
   1601               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_151:
   \   000013 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_65:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_151
   1602                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A31F41                CPW       X, #0x1f41
   \   000027 24E1                  JRNC      L:??temperature_1
   1603               //u8 temp8=timer2;
   1604              //Init Reset Pulse
   1605              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_157:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1606              // Skip ROM Command 0xCC
   1607              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine56
   1608              //Function command READ SCRATCHPAD [BEh]
   1609              DS18_Write(0xBE);
   1610               u8 temp1=DS18_Read();
   1611               u8 temp2=DS18_Read();
   1612              DS18_Reset();
   \                     ??CrossCallReturnLabel_149:
   \   000033 8D000000              CALLF     DS18_Reset
   1613                u16 result = temp2*256+temp1;
   1614                temp1= (u8)(result>>3);
   1615               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_3:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1616          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_206:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_205:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_211:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1617          

   \                                 In section .far_func.text, align 1, keep-with-next
   1618          bool Read_DS18()
   1619          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1620          
   1621             //Init Reset Pulse
   1622               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_154:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1623             //Skip ROM Command 0xCC
   1624              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine57
   1625             //Function command  CONVERT T [44h]
   1626              DS18_Write(0x44);
   1627              //Wait util end convert
   1628              timer2=0;
   1629               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_150:
   \   000013 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_64:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_150
   1630                           if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A31F41                CPW       X, #0x1f41
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1631               //u8 temp8=timer2;
   1632              //Init Reset Pulse
   1633              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_155:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1634              // Skip ROM Command 0xCC
   1635              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine56
   1636              //Function command READ SCRATCHPAD [BEh]
   1637              DS18_Write(0xBE);
   1638               u8 temp1=DS18_Read();
   1639               u8 temp2=DS18_Read();
   1640               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_148:
   \   000033 8D000000              CALLF     ?Subroutine59
   1641               u8 temp4=DS18_Read();
   1642               u8 temp5=DS18_Read();
   1643               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_159:
   \   000037 8D000000              CALLF     ?Subroutine59
   1644               u8 temp7=DS18_Read();
   1645               u8 temp8=DS18_Read();
   1646               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_158:
   \   00003B 8D000000              CALLF     DS18_Read
   1647          
   1648               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1649          
   1650                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1651                result2=0;
   \   000047 725F0000              CLR       L:result2
   1652                u16 result = temp2*256+temp1;
   1653                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_2:
   \   00004F C70000                LD        L:result1, A
   1654                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1655                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1656          
   1657          
   1658                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1659               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1660               //line_lcd=1;
   1661               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1662               // while (!key_ok_on());
   1663          
   1664               //u8 temp3=DS18_Read();
   1665          
   1666              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1667          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1668          

   \                                 In section .far_func.text, align 1, keep-with-next
   1669          bool DS18Set ()
   1670          {
   1671               //Init Reset Pulse
   1672              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_152:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1673             //Skip ROM Command 0xCC
   1674              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine77
   1675             //Function command  WRITE SCRATCHPAD 0x4E
   1676              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_208:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1677             //Write 3 bytes last is config reg
   1678              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1679              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1680              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1681          
   1682             //Init Reset Pulse
   1683              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_153:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1684              //Skip ROM Command 0xCC
   1685              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine77
   1686              //Function   Store in Conf Reg
   1687              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_207:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1688            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1689          }
   1690          
   1691          
   1692          
   1693          
   1694          
   1695          
   1696          
   1697          

   \                                 In section .far_func.text, align 1, keep-with-next
   1698          void Delay1(u16 Delay)
   1699          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1700              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1701            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1702            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1703          }
   \   00000D 87                    RETF
   1704          

   \                                 In section .far_func.text, align 1, keep-with-next
   1705           void Delay2(u16 Delay)
   1706          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1707            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1708            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1709          }
   \   00000D 87                    RETF
   1710          
   1711          

   \                                 In section .far_func.text, align 1, keep-with-next
   1712          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1713          {
   1714            //disableInterrupts();
   1715            do
   1716              {
   1717                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1718                nop();
   \   000001 9D                    NOP
   1719              }
   1720              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1721            //enableInterrupts();
   1722          }
   \   000005 87                    RETF
   1723          
   1724          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 3F00                  CLR       S:?b10
   \   000006                       REQUIRE ??Subroutine83_0
   \   000006                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1725          void Display_Line(char* line)
   1726          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1727            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1728            u8 count;
   1729              //Set Cursor to First Line
   1730             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     ?Subroutine9
   1731             count=0;
   1732             Delay1(1);
   1733            do
   1734            {
   1735          
   1736              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_228:
   \   000010 B600                  LD        A, S:?b11
   \   000012 A11C                  CP        A, #0x1c
   \   000014 2504                  JRC       L:??CrossCallReturnLabel_9
   1737               {
   1738                 LCDData(current_char);
   \   000016 8D000000              CALLF     ?Subroutine7
   1739                  Delay1(1);
   1740                 count++;
   1741               }
   1742               current_char=*line++;
   \                     ??CrossCallReturnLabel_9:
   \   00001A 8D000000              CALLF     ?Subroutine48
   1743            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_128:
   \   00001E 2706                  JREQ      L:??Display_Line_0
   \   000020 B600                  LD        A, S:?b10
   \   000022 A107                  CP        A, #0x7
   \   000024 25EA                  JRC       L:??CrossCallReturnLabel_228
   1744          
   1745             Rotate_Line(line1);
   \                     ??Display_Line_0:
   \   000026 AE0000                LDW       X, #line1
   \   000029 8D000000              CALLF     Rotate_Line
   1746          
   1747          }
   \   00002D AC000000              JPF       L:?epilogue_l2

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 B700                  LD        S:?b11, A
   \   000005 BE00                  LDW       X, S:?w4
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   \   00000A 3D00                  TNZ       S:?b11
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_255:
   \   000004 B600                  LD        A, S:?b10
   \   000006 4C                    INC       A
   \   000007 B700                  LD        S:?b10, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine86_0
   \   000004                       ;               // Fall through to label ??Subroutine86_0
   1748          
   1749          

   \                                 In section .far_func.text, align 1, keep-with-next
   1750          void DisplayLine2(void)
   1751          {
   \                     DisplayLine2:
   \   000000 8D000000              CALLF     L:?push_l2
   1752            char * line=line2;
   1753            char current_char=  *line++;
   \   000004 C60000                LD        A, L:line2
   \   000007 B700                  LD        S:?b11, A
   \   000009 AE0000                LDW       X, #line2 + 1
   \   00000C BF00                  LDW       S:?w4, X
   1754            u8 count;
   1755              //Set Cursor to Second  Line
   1756             LCDInstr(0x80 | 0x40);
   \   00000E A6C0                  LD        A, #0xc0
   \   000010 8D000000              CALLF     ?Subroutine9
   1757             count=0;
   1758             Delay1(1);
   1759            do
   1760            {
   1761          
   1762              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_227:
   \   000014 B600                  LD        A, S:?b11
   \   000016 A11C                  CP        A, #0x1c
   \   000018 2504                  JRC       L:??CrossCallReturnLabel_8
   1763               {
   1764                 LCDData(current_char);
   \   00001A 8D000000              CALLF     ?Subroutine7
   1765                  Delay1(1);
   1766                 count++;
   1767               }
   1768               current_char=*line++;
   \                     ??CrossCallReturnLabel_8:
   \   00001E 8D000000              CALLF     ?Subroutine48
   1769            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_127:
   \   000022 2706                  JREQ      L:??DisplayLine2_0
   \   000024 B600                  LD        A, S:?b10
   \   000026 A107                  CP        A, #0x7
   \   000028 25EA                  JRC       L:??CrossCallReturnLabel_227
   1770          
   1771             Rotate_Line(line2);
   \                     ??DisplayLine2_0:
   \   00002A AE0000                LDW       X, #line2
   \   00002D 8D000000              CALLF     Rotate_Line
   1772          
   1773          }
   \   000031 AC000000              JPF       L:?epilogue_l2
   1774          
   1775          
   1776          
   1777          

   \                                 In section .far_func.text, align 1, keep-with-next
   1778          void Rotate_Line( char * line)
   1779          {
   1780          
   1781             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1782             char temp_next;
   1783          
   1784             do
   1785             {
   1786                temp_next=*(line+1);
   1787               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1788                //line++;
   1789                //temp_next=*line;
   1790               //*line=*line++;
   1791             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1792             line--;
   1793             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1794          
   1795          }
   \   000012 87                    RETF
   1796          

   \                                 In section .far_func.text, align 1, keep-with-next
   1797          void ClearLine1 ()
   1798          {
   \                     ClearLine1:
   \   000000 3B0000                PUSH      S:?b8
   1799               //Set Cursor to First Line
   1800             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine8
   1801             count=0;
   1802             Delay1(1);
   1803              u8 count=0;
   1804             do
   1805             {
   1806               LCDData(' ');
   \                     ??CrossCallReturnLabel_10:
   \   000009 8D000000              CALLF     ?Subroutine6
   1807                  Delay1(1);
   1808                  count++;
   1809             }while (count<8);
   \                     ??CrossCallReturnLabel_6:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_10
   1810          
   1811          
   1812          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_183:
   \   000004 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_254:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_256:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4A                    DEC       A
   \   000009 B700                  LD        S:?b8, A
   \   00000B 87                    RETF
   1813          

   \                                 In section .far_func.text, align 1, keep-with-next
   1814          void ClearLine2 ()
   1815          {
   \                     ClearLine2:
   \   000000 3B0000                PUSH      S:?b8
   1816               //Set Cursor to Second  Line
   1817             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine8
   1818             count=0;
   1819             Delay1(1);
   1820              u8 count=0;
   1821             do
   1822             {
   1823               LCDData(' ');
   \                     ??CrossCallReturnLabel_11:
   \   000009 8D000000              CALLF     ?Subroutine6
   1824                  Delay1(1);
   1825                  count++;
   1826             }while (count<8);
   \                     ??CrossCallReturnLabel_7:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_11
   1827          
   1828          
   1829          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1830          
   1831          
   1832          

   \                                 In section .far_func.text, align 1, keep-with-next
   1833          void FirstMenu()
   1834          {
   1835                // Clear Display
   1836              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_36:
   \   000004 8D000000              CALLF     ??Subroutine81_0
   1837              Delay1(250);
   1838          
   1839                line_lcd=0;
   1840                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_219:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1841                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine25
   1842                 if (!status.manu)
   \                     ??CrossCallReturnLabel_47:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1843                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1844                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1845          
   1846                 do
   1847                 {
   1848                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     ?Subroutine46
   1849          
   1850                  if(button==2)      // Plus Button
   \                     ??CrossCallReturnLabel_121:
   \   000025 262C                  JRNE      L:??FirstMenu_3
   1851                  {
   1852                    if(status.manu) status.manu=0;
   \   000027 CE0000                LDW       X, L:status
   \   00002A 9F                    LD        A, XL
   \   00002B A401                  AND       A, #0x1
   \   00002D 2708                  JREQ      L:??FirstMenu_4
   \   00002F CE0000                LDW       X, L:status
   \   000032 01                    RRWA      X, A
   \   000033 A4FE                  AND       A, #0xfe
   \   000035 2006                  JRA       ??FirstMenu_5
   1853                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   000037 CE0000                LDW       X, L:status
   \   00003A 01                    RRWA      X, A
   \   00003B AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   00003D 02                    RLWA      X, A
   \   00003E CF0000                LDW       L:status, X
   1854                    line_lcd=1;
   \   000041 8D000000              CALLF     ?Subroutine25
   1855                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_48:
   \   000045 2705                  JREQ      L:??FirstMenu_6
   \   000047 AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004A 2003                  JRA       ??FirstMenu_7
   1856                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   00004C AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   00004F 8D000000              CALLF     printf
   1857                  }
   1858          
   1859                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000053 C60000                LD        A, L:button
   \   000056 A103                  CP        A, #0x3
   \   000058 2705                  JREQ      L:??FirstMenu_8
   \   00005A C60000                LD        A, L:button
   \   00005D 2604                  JRNE      L:??FirstMenu_9
   1860                  {
   1861                    SaveStatus();
   \                     ??FirstMenu_8:
   \   00005F AC000000              JPF       SaveStatus
   1862                    return;
   1863                  }
   1864          
   1865          
   1866                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000063 A101                  CP        A, #0x1
   \   000065 26BA                  JRNE      L:??FirstMenu_2
   1867          
   1868                   SaveStatus();
   \   000067 8D000000              CALLF     SaveStatus
   1869                   button=0;
   \   00006B 725F0000              CLR       L:button
   1870                   ProgramMenu();
   \   00006F AC000000              JPF       ProgramMenu
   1871          
   1872          
   1873          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_204:
   \   000008 87                    RETF
   1874          
   1875          
   1876          

   \                                 In section .far_func.text, align 1, keep-with-next
   1877          void ProgramMenu()
   1878          {
   \                     ProgramMenu:
   \   000000 8D000000              CALLF     L:?push_l3
   \   000004 8D000000              CALLF     L:?push_w4
   \   000008 3B0000                PUSH      S:?b10
   1879              u8 program_number=0;
   \   00000B 3F00                  CLR       S:?b10
   1880             do
   1881             {
   1882               sprintf(line1,"\nP%d%s",program_number,day_week[programpoint[program_number].day]);
   \                     ??ProgramMenu_0:
   \   00000D 5F                    CLRW      X
   \   00000E 41                    EXG       A, XL
   \   00000F B600                  LD        A, S:?b10
   \   000011 41                    EXG       A, XL
   \   000012 BF00                  LDW       S:?w7, X
   \   000014 AE0005                LDW       X, #0x5
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 BE00                  LDW       X, S:?w7
   \   00001B 8D000000              CALLF     L:?mul16_x_x_w0
   \   00001F 1C0000                ADDW      X, #programpoint
   \   000022 BF00                  LDW       S:?w4, X
   \   000024 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_262:
   \   000028 89                    PUSHW     X
   \   000029 8D000000              CALLF     L:?push_w7
   \   00002D 90AE0000              LDW       Y, #`?<Constant "\\nP%d%s">`
   \   000031 AE0000                LDW       X, #line1
   \   000034 8D000000              CALLF     sprintf
   \   000038 5B04                  ADD       SP, #0x4
   1883               sprintf(line2,"\n%s",day_week[programpoint[program_number].day]);
   \   00003A 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_263:
   \   00003E 89                    PUSHW     X
   \   00003F 90AE0000              LDW       Y, #`?<Constant "\\n%s">`
   \   000043 AE0000                LDW       X, #line2
   \   000046 8D000000              CALLF     sprintf
   \   00004A 5B02                  ADD       SP, #0x2
   1884               ClearLine2();
   \   00004C 8D000000              CALLF     ClearLine2
   1885               ClearLine1();
   \   000050 8D000000              CALLF     ClearLine1
   1886               line_lcd=0;
   \   000054 8D000000              CALLF     ?Subroutine39
   1887               printf(line1);
   1888               line_lcd=1;
   1889               printf(line2);
   \                     ??CrossCallReturnLabel_92:
   \   000058 AE0000                LDW       X, #line2
   \   00005B 8D000000              CALLF     printf
   1890                 do
   1891                 {
   1892                   pressKey();
   \                     ??ProgramMenu_1:
   \   00005F 8D000000              CALLF     ?Subroutine46
   1893          
   1894                    if(button==2)   //Plus
   \                     ??CrossCallReturnLabel_120:
   \   000063 2621                  JRNE      L:??ProgramMenu_2
   1895                    {
   1896                       programpoint[program_number].day++;
   \   000065 92C600                LD        A, [S:?w4.w]
   \   000068 4C                    INC       A
   \   000069 92C700                LD        [S:?w4.w], A
   1897                        if( programpoint[program_number].day >=9) programpoint[program_number].day=0;
   \   00006C A109                  CP        A, #0x9
   \   00006E 2504                  JRC       L:??ProgramMenu_3
   \   000070 4F                    CLR       A
   \   000071 92C700                LD        [S:?w4.w], A
   1898                          ClearLine2();
   \                     ??ProgramMenu_3:
   \   000074 8D000000              CALLF     ?Subroutine49
   1899                           line_lcd=1;
   1900                           printf("\n%s",day_week[programpoint[program_number].day]);
   \                     ??CrossCallReturnLabel_129:
   \   000078 8D000000              CALLF     ?Subroutine5
   1901                    }
   \                     ??CrossCallReturnLabel_264:
   \   00007C 89                    PUSHW     X
   \   00007D AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000080 8D000000              CALLF     printf
   \   000084 5B02                  ADD       SP, #0x2
   1902          
   1903                    if(button==3 || button==0 ) // Minus
   \                     ??ProgramMenu_2:
   \   000086 C60000                LD        A, L:button
   \   000089 A103                  CP        A, #0x3
   \   00008B 2705                  JREQ      L:??ProgramMenu_4
   \   00008D C60000                LD        A, L:button
   \   000090 260B                  JRNE      L:??ProgramMenu_5
   1904                    {
   1905                       SaveProgram();
   \                     ??ProgramMenu_4:
   \   000092 8D000000              CALLF     SaveProgram
   1906                        button=0;
   \   000096 725F0000              CLR       L:button
   1907                       return;
   \   00009A CC0000                JP        L:??ProgramMenu_6
   1908                    }
   1909          
   1910          
   1911                 } while (button != 1 && button != 0);
   \                     ??ProgramMenu_5:
   \   00009D A101                  CP        A, #0x1
   \   00009F 26BE                  JRNE      L:??ProgramMenu_1
   1912          
   1913                     // Test programm is Active ?
   1914                  if( programpoint[program_number].day !=0)
   \   0000A1 923D00                TNZ       [S:?w4.w]
   \   0000A4 2603                  JRNE      ??lb_0
   \   0000A6 CC0000                JP        L:??ProgramMenu_7
   1915                  {
   1916                        //Set On Hour
   1917                     ClearLine1();
   \                     ??lb_0:
   \   0000A9 8D000000              CALLF     ?Subroutine44
   1918                     line_lcd=0;
   1919                     printf("\nP%d%s",program_number," On");
   \                     ??CrossCallReturnLabel_112:
   \   0000AD 4B00                  PUSH      #BYTE1(`?<Constant " On">`)
   \   0000AF 4B00                  PUSH      #BYTE2(`?<Constant " On">`)
   \   0000B1 8D000000              CALLF     L:?push_w7
   \   0000B5 AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   0000B8 8D000000              CALLF     printf
   \   0000BC 5B04                  ADD       SP, #0x4
   1920                     timer3=0;
   \   0000BE 5F                    CLRW      X
   \   0000BF CF0000                LDW       L:timer3, X
   1921                     ClearLine2();
   \   0000C2 8D000000              CALLF     ClearLine2
   \   0000C6 BE00                  LDW       X, S:?w4
   \   0000C8 1C0002                ADDW      X, #0x2
   \   0000CB BF00                  LDW       S:?w6, X
   1922                     do
   1923                      {
   1924                       line_lcd=1;
   \                     ??ProgramMenu_8:
   \   0000CD 35010000              MOV       L:line_lcd, #0x1
   1925                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   0000D1 C60000                LD        A, L:blink_flag
   \   0000D4 2718                  JREQ      L:??ProgramMenu_9
   \   0000D6 92C600                LD        A, [S:?w6.w]
   \   0000D9 5F                    CLRW      X
   \   0000DA 97                    LD        XL, A
   \   0000DB 89                    PUSHW     X
   \   0000DC BE00                  LDW       X, S:?w4
   \   0000DE 5C                    INCW      X
   \   0000DF F6                    LD        A, (X)
   \   0000E0 5F                    CLRW      X
   \   0000E1 97                    LD        XL, A
   \   0000E2 89                    PUSHW     X
   \   0000E3 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000E6 8D000000              CALLF     printf
   \   0000EA 5B04                  ADD       SP, #0x4
   \   0000EC 200F                  JRA       L:??ProgramMenu_10
   1926                         else printf("\n  :%02d",programpoint[program_number].onminute);
   \                     ??ProgramMenu_9:
   \   0000EE 92C600                LD        A, [S:?w6.w]
   \   0000F1 5F                    CLRW      X
   \   0000F2 97                    LD        XL, A
   \   0000F3 89                    PUSHW     X
   \   0000F4 AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0000F7 8D000000              CALLF     printf
   \   0000FB 5B02                  ADD       SP, #0x2
   1927                       programpoint[program_number].onhour =adj(0,23,programpoint[program_number].onhour);
   \                     ??ProgramMenu_10:
   \   0000FD BE00                  LDW       X, S:?w4
   \   0000FF 5C                    INCW      X
   \   000100 F6                    LD        A, (X)
   \   000101 B700                  LD        S:?b1, A
   \   000103 35170000              MOV       S:?b0, #0x17
   \   000107 8D000000              CALLF     ??Subroutine82_0
   1928                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_222:
   \   00010B BE00                  LDW       X, S:?w4
   \   00010D 5C                    INCW      X
   \   00010E F7                    LD        (X), A
   \   00010F 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_195:
   \   000113 2406                  JRNC      L:??ProgramMenu_11
   \   000115 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_100:
   \   000119 27B2                  JREQ      L:??ProgramMenu_8
   1929          
   1930                        //Set On Minute
   1931                      //ClearLine1();
   1932                      //line_lcd=0;
   1933                      //printf("\nMin On>");
   1934                     // printf("\nP%d%s",program_number," On");
   1935                      timer3=0;
   \                     ??ProgramMenu_11:
   \   00011B 5F                    CLRW      X
   \   00011C CF0000                LDW       L:timer3, X
   1936                    do
   1937                      {
   1938                       line_lcd=1;
   \                     ??ProgramMenu_12:
   \   00011F 35010000              MOV       L:line_lcd, #0x1
   \   000123 BE00                  LDW       X, S:?w4
   \   000125 5C                    INCW      X
   \   000126 F6                    LD        A, (X)
   \   000127 5F                    CLRW      X
   \   000128 97                    LD        XL, A
   \   000129 9093                  LDW       Y, X
   \   00012B C60000                LD        A, L:blink_flag
   \   00012E 2712                  JREQ      L:??ProgramMenu_13
   1939                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   000130 92C600                LD        A, [S:?w6.w]
   \   000133 97                    LD        XL, A
   \   000134 89                    PUSHW     X
   \   000135 9089                  PUSHW     Y
   \   000137 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00013A 8D000000              CALLF     printf
   \   00013E 5B04                  ADD       SP, #0x4
   \   000140 200B                  JRA       L:??ProgramMenu_14
   1940                         else  printf("\n%02d:  ",programpoint[program_number].onhour);
   \                     ??ProgramMenu_13:
   \   000142 9089                  PUSHW     Y
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B02                  ADD       SP, #0x2
   1941                           programpoint[program_number].onminute=adj(0,59,programpoint[program_number].onminute);
   \                     ??ProgramMenu_14:
   \   00014D 92C600                LD        A, [S:?w6.w]
   \   000150 B700                  LD        S:?b1, A
   \   000152 353B0000              MOV       S:?b0, #0x3b
   \   000156 8D000000              CALLF     ?Subroutine27
   1942                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_54:
   \   00015A 2406                  JRNC      L:??ProgramMenu_15
   \   00015C 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_101:
   \   000160 27BD                  JREQ      L:??ProgramMenu_12
   1943          
   1944          
   1945                     // Set Off Hour
   1946                       u8 time_off_min_hour=0;
   1947                       u8 time_off_min_min=0;
   1948          
   1949                       /*
   1950                           if( programpoint[program_number].day !=8)    //If not Daily.You can't set toff to next day
   1951                           {
   1952                               time_off_min_hour = programpoint[program_number].onhour;
   1953          
   1954                           }
   1955                       */
   1956                     ClearLine1();
   \                     ??ProgramMenu_15:
   \   000162 8D000000              CALLF     ?Subroutine44
   1957                     line_lcd=0;
   1958                     printf("\nP%d%s",program_number," Off");
   \                     ??CrossCallReturnLabel_113:
   \   000166 4B00                  PUSH      #BYTE1(`?<Constant " Off">`)
   \   000168 4B00                  PUSH      #BYTE2(`?<Constant " Off">`)
   \   00016A 8D000000              CALLF     L:?push_w7
   \   00016E AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   000171 8D000000              CALLF     printf
   \   000175 5B04                  ADD       SP, #0x4
   1959                     timer3=0;
   \   000177 5F                    CLRW      X
   \   000178 CF0000                LDW       L:timer3, X
   \   00017B BE00                  LDW       X, S:?w4
   \   00017D 1C0003                ADDW      X, #0x3
   \   000180 BF00                  LDW       S:?w6, X
   \   000182 BE00                  LDW       X, S:?w4
   \   000184 1C0004                ADDW      X, #0x4
   \   000187 BF00                  LDW       S:?w4, X
   1960                     do
   1961                      {
   1962                       line_lcd=1;
   \                     ??ProgramMenu_16:
   \   000189 35010000              MOV       L:line_lcd, #0x1
   1963                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   00018D C60000                LD        A, L:blink_flag
   \   000190 2716                  JREQ      L:??ProgramMenu_17
   \   000192 92C600                LD        A, [S:?w4.w]
   \   000195 5F                    CLRW      X
   \   000196 97                    LD        XL, A
   \   000197 89                    PUSHW     X
   \   000198 92C600                LD        A, [S:?w6.w]
   \   00019B 97                    LD        XL, A
   \   00019C 89                    PUSHW     X
   \   00019D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001A0 8D000000              CALLF     printf
   \   0001A4 5B04                  ADD       SP, #0x4
   \   0001A6 200F                  JRA       L:??ProgramMenu_18
   1964                         else printf("\n  :%02d",programpoint[program_number].offminute);
   \                     ??ProgramMenu_17:
   \   0001A8 92C600                LD        A, [S:?w4.w]
   \   0001AB 5F                    CLRW      X
   \   0001AC 97                    LD        XL, A
   \   0001AD 89                    PUSHW     X
   \   0001AE AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0001B1 8D000000              CALLF     printf
   \   0001B5 5B02                  ADD       SP, #0x2
   1965                       programpoint[program_number].offhour =adj(time_off_min_hour,23,programpoint[program_number].offhour);
   \                     ??ProgramMenu_18:
   \   0001B7 92C600                LD        A, [S:?w6.w]
   \   0001BA B700                  LD        S:?b1, A
   \   0001BC 35170000              MOV       S:?b0, #0x17
   \   0001C0 8D000000              CALLF     ?Subroutine27
   1966                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_55:
   \   0001C4 2406                  JRNC      L:??ProgramMenu_19
   \   0001C6 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_102:
   \   0001CA 27BD                  JREQ      L:??ProgramMenu_16
   1967          
   1968                    //Set Off Minute
   1969                      /*
   1970                       if( programpoint[program_number].day !=8)    //If not Daily.You can't set toff to next day
   1971                       {
   1972                           if(programpoint[program_number].offhour=programpoint[program_number].onhour)
   1973                           {
   1974                             time_off_min_min  = programpoint[program_number].onminute;
   1975                           }
   1976                       }
   1977                     */
   1978                    timer3=0;
   \                     ??ProgramMenu_19:
   \   0001CC 5F                    CLRW      X
   \   0001CD CF0000                LDW       L:timer3, X
   1979                    do
   1980                      {
   1981                       line_lcd=1;
   \                     ??ProgramMenu_20:
   \   0001D0 35010000              MOV       L:line_lcd, #0x1
   \   0001D4 92C600                LD        A, [S:?w6.w]
   \   0001D7 5F                    CLRW      X
   \   0001D8 97                    LD        XL, A
   \   0001D9 9093                  LDW       Y, X
   \   0001DB C60000                LD        A, L:blink_flag
   \   0001DE 2712                  JREQ      L:??ProgramMenu_21
   1982                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   0001E0 92C600                LD        A, [S:?w4.w]
   \   0001E3 97                    LD        XL, A
   \   0001E4 89                    PUSHW     X
   \   0001E5 9089                  PUSHW     Y
   \   0001E7 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001EA 8D000000              CALLF     printf
   \   0001EE 5B04                  ADD       SP, #0x4
   \   0001F0 200B                  JRA       L:??ProgramMenu_22
   1983                         else  printf("\n%02d:  ",programpoint[program_number].offhour);
   \                     ??ProgramMenu_21:
   \   0001F2 9089                  PUSHW     Y
   \   0001F4 AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   0001F7 8D000000              CALLF     printf
   \   0001FB 5B02                  ADD       SP, #0x2
   1984                           programpoint[program_number].offminute=adj(time_off_min_min,59,programpoint[program_number].offminute);
   \                     ??ProgramMenu_22:
   \   0001FD 92C600                LD        A, [S:?w4.w]
   \   000200 8D000000              CALLF     ?Subroutine29
   1985                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_226:
   \   000204 92C700                LD        [S:?w4.w], A
   \   000207 8D000000              CALLF     ?Subroutine74
   1986          
   1987                  }
   \                     ??CrossCallReturnLabel_196:
   \   00020B 2406                  JRNC      L:??ProgramMenu_7
   \   00020D 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_103:
   \   000211 27BD                  JREQ      L:??ProgramMenu_20
   1988          
   1989          
   1990                   program_number++;
   \                     ??ProgramMenu_7:
   \   000213 B600                  LD        A, S:?b10
   \   000215 4C                    INC       A
   \   000216 B700                  LD        S:?b10, A
   1991          
   1992          
   1993          
   1994          
   1995          
   1996          
   1997          
   1998          
   1999                 } while ( (program_number < 8) && (button!=0));
   \   000218 A108                  CP        A, #0x8
   \   00021A 2408                  JRNC      L:??ProgramMenu_23
   \   00021C C60000                LD        A, L:button
   \   00021F 2703                  JREQ      ??lb_1
   \   000221 CC0000                JP        L:??ProgramMenu_0
   2000          
   2001                   SaveProgram();
   \                     ??lb_1:
   \                     ??ProgramMenu_23:
   \   000224 8D000000              CALLF     SaveProgram
   2002          
   2003          
   2004          }
   \                     ??ProgramMenu_6:
   \   000228 320000                POP       S:?b10
   \   00022B 8D000000              CALLF     L:?pop_w4
   \   00022F 8D000000              CALLF     L:?pop_l3
   \   000233 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     adj
   \   000005 92C700                LD        [S:?w6.w], A
   \   000008 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_197:
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003                       REQUIRE ??Subroutine88_0
   \   000003                       ;               // Fall through to label ??Subroutine88_0
   2005          
   2006          
   2007          

   \                                 In section .far_func.text, align 1, keep-with-next
   2008          void pressKey(void)
   2009          {
   2010             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2011             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2012             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine33
   2013             lcdLedTimer=LCDLEDON;
   2014             do
   2015             {
   2016                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_77:
   \   00000C 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_99:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2017                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2018                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2019             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_194:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_77
   2020          
   2021              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2022          
   2023             //return button;
   2024          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2025          
   2026          
   2027          
   2028          

   \                                 In section .far_func.text, align 1, keep-with-next
   2029          bool InputDataProgram(bool smart )
   2030          {
   \                     InputDataProgram:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 B700                  LD        S:?b11, A
   2031             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000006 3F00                  CLR       S:?b8
   \   000008 35010000              MOV       S:?b10, #0x1
   \   00000C 35010000              MOV       S:?b9, #0x1
   2032             int yy;
   2033          
   2034                   //Clear Display
   2035             LCDInstr(0x01);
   \   000010 8D000000              CALLF     ?Subroutine16
   2036             Delay1(1000);
   2037             line_lcd=0;
   2038             printf("\nYear>");
   \                     ??CrossCallReturnLabel_216:
   \   000014 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000017 8D000000              CALLF     printf
   2039             y=year;
   \   00001B C60000                LD        A, L:year
   \   00001E C70000                LD        L:`y`, A
   2040             m=month;
   \   000021 C60000                LD        A, L:month
   \   000024 C70000                LD        L:m, A
   2041             d=date;
   \   000027 C60000                LD        A, L:`date`
   \   00002A C70000                LD        L:d, A
   2042                do
   2043              {
   2044               line_lcd=1;
   \                     ??InputDataProgram_0:
   \   00002D 35010000              MOV       L:line_lcd, #0x1
   2045               if(blink_flag)printf("\n%02d:%02d:%02d",y,m,d);
   \   000031 C60000                LD        A, L:m
   \   000034 905F                  CLRW      Y
   \   000036 9097                  LD        YL, A
   \   000038 C60000                LD        A, L:d
   \   00003B 5F                    CLRW      X
   \   00003C 97                    LD        XL, A
   \   00003D C60000                LD        A, L:blink_flag
   \   000040 89                    PUSHW     X
   \   000041 9089                  PUSHW     Y
   \   000043 2710                  JREQ      L:??InputDataProgram_1
   \   000045 C60000                LD        A, L:`y`
   \   000048 97                    LD        XL, A
   \   000049 89                    PUSHW     X
   \   00004A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00004D 8D000000              CALLF     printf
   \   000051 5B06                  ADD       SP, #0x6
   \   000053 2009                  JRA       L:??InputDataProgram_2
   2046                else printf("\n  :%02d:%02d",m,d);
   \                     ??InputDataProgram_1:
   \   000055 AE0000                LDW       X, #`?<Constant "\\n  :%02d:%02d">`
   \   000058 8D000000              CALLF     printf
   \   00005C 5B04                  ADD       SP, #0x4
   2047                 y=adj(0,99,y);
   \                     ??InputDataProgram_2:
   \   00005E C60000                LD        A, L:`y`
   \   000061 B700                  LD        S:?b1, A
   \   000063 35630000              MOV       S:?b0, #0x63
   \   000067 8D000000              CALLF     ??Subroutine82_0
   2048              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_223:
   \   00006B C70000                LD        L:`y`, A
   \   00006E 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_96:
   \   000072 27B9                  JREQ      L:??InputDataProgram_0
   2049                  yy=y+2000;
   \   000074 C60000                LD        A, L:`y`
   \   000077 5F                    CLRW      X
   \   000078 97                    LD        XL, A
   \   000079 1C07D0                ADDW      X, #0x7d0
   \   00007C BF00                  LDW       S:?w0, X
   2050              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00007E 90AE0190              LDW       Y, #0x190
   \   000082 8D000000              CALLF     L:?smod16_y_x_y
   \   000086 905D                  TNZW      Y
   \   000088 271C                  JREQ      L:??InputDataProgram_3
   \   00008A 90AE0064              LDW       Y, #0x64
   \   00008E BE00                  LDW       X, S:?w0
   \   000090 8D000000              CALLF     L:?smod16_y_x_y
   \   000094 905D                  TNZW      Y
   \   000096 2712                  JREQ      L:??InputDataProgram_4
   \   000098 90AE0004              LDW       Y, #0x4
   \   00009C BE00                  LDW       X, S:?w0
   \   00009E 8D000000              CALLF     L:?smod16_y_x_y
   \   0000A2 905D                  TNZW      Y
   \   0000A4 2604                  JRNE      L:??InputDataProgram_4
   \                     ??InputDataProgram_3:
   \   0000A6 35010000              MOV       S:?b8, #0x1
   2051                  y=yy-2000;
   \                     ??InputDataProgram_4:
   \   0000AA B600                  LD        A, S:?b1
   \   0000AC AB30                  ADD       A, #0x30
   \   0000AE C70000                LD        L:`y`, A
   2052                  if(smart)if(y==year) month_start=month;
   \   0000B1 3D00                  TNZ       S:?b11
   \   0000B3 270D                  JREQ      L:??InputDataProgram_5
   \   0000B5 C60000                LD        A, L:year
   \   0000B8 C10000                CP        A, L:`y`
   \   0000BB 2605                  JRNE      L:??InputDataProgram_5
   \   0000BD C60000                LD        A, L:month
   \   0000C0 B700                  LD        S:?b10, A
   2053               line_lcd=0;
   \                     ??InputDataProgram_5:
   \   0000C2 725F0000              CLR       L:line_lcd
   2054              printf("\nMonth>");
   \   0000C6 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   0000C9 8D000000              CALLF     printf
   2055                do
   2056              {
   2057               line_lcd=1;
   \                     ??InputDataProgram_6:
   \   0000CD 35010000              MOV       L:line_lcd, #0x1
   2058               if(blink_flag) printf("\n%02d:%02d:%02d",y,m,d);
   \   0000D1 C60000                LD        A, L:`y`
   \   0000D4 5F                    CLRW      X
   \   0000D5 97                    LD        XL, A
   \   0000D6 C60000                LD        A, L:d
   \   0000D9 905F                  CLRW      Y
   \   0000DB 9097                  LD        YL, A
   \   0000DD C60000                LD        A, L:blink_flag
   \   0000E0 9089                  PUSHW     Y
   \   0000E2 2713                  JREQ      L:??InputDataProgram_7
   \   0000E4 C60000                LD        A, L:m
   \   0000E7 9097                  LD        YL, A
   \   0000E9 9089                  PUSHW     Y
   \   0000EB 89                    PUSHW     X
   \   0000EC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EF 8D000000              CALLF     printf
   \   0000F3 5B06                  ADD       SP, #0x6
   \   0000F5 200A                  JRA       L:??InputDataProgram_8
   2059                else printf("\n%02d:  :%02d",y,d);
   \                     ??InputDataProgram_7:
   \   0000F7 89                    PUSHW     X
   \   0000F8 AE0000                LDW       X, #`?<Constant "\\n%02d:  :%02d">`
   \   0000FB 8D000000              CALLF     printf
   \   0000FF 5B04                  ADD       SP, #0x4
   2060                m=adj(month_start,12,m);
   \                     ??InputDataProgram_8:
   \   000101 C60000                LD        A, L:m
   \   000104 B700                  LD        S:?b1, A
   \   000106 350C0000              MOV       S:?b0, #0xc
   \   00010A B600                  LD        A, S:?b10
   \   00010C 8D000000              CALLF     adj
   \   000110 C70000                LD        L:m, A
   2061              } while (!key_ok_on());
   \   000113 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_97:
   \   000117 27B4                  JREQ      L:??InputDataProgram_6
   2062          
   2063              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   000119 C60000                LD        A, L:m
   \   00011C A101                  CP        A, #0x1
   \   00011E 2718                  JREQ      L:??InputDataProgram_9
   \   000120 A103                  CP        A, #0x3
   \   000122 2714                  JREQ      L:??InputDataProgram_9
   \   000124 A105                  CP        A, #0x5
   \   000126 2710                  JREQ      L:??InputDataProgram_9
   \   000128 A107                  CP        A, #0x7
   \   00012A 270C                  JREQ      L:??InputDataProgram_9
   \   00012C A108                  CP        A, #0x8
   \   00012E 2708                  JREQ      L:??InputDataProgram_9
   \   000130 A10A                  CP        A, #0xa
   \   000132 2704                  JREQ      L:??InputDataProgram_9
   \   000134 A10C                  CP        A, #0xc
   \   000136 2606                  JRNE      L:??InputDataProgram_10
   \                     ??InputDataProgram_9:
   \   000138 351F0000              MOV       S:?b8, #0x1f
   \   00013C 2024                  JRA       L:??InputDataProgram_11
   2064               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??InputDataProgram_10:
   \   00013E A104                  CP        A, #0x4
   \   000140 270C                  JREQ      L:??InputDataProgram_12
   \   000142 A106                  CP        A, #0x6
   \   000144 2708                  JREQ      L:??InputDataProgram_12
   \   000146 A109                  CP        A, #0x9
   \   000148 2704                  JREQ      L:??InputDataProgram_12
   \   00014A A10B                  CP        A, #0xb
   \   00014C 2606                  JRNE      L:??InputDataProgram_13
   \                     ??InputDataProgram_12:
   \   00014E 351E0000              MOV       S:?b8, #0x1e
   \   000152 200E                  JRA       L:??InputDataProgram_11
   2065                else
   2066                 {
   2067                   if(leap) date_end=29;
   \                     ??InputDataProgram_13:
   \   000154 3D00                  TNZ       S:?b8
   \   000156 2706                  JREQ      L:??InputDataProgram_14
   \   000158 351D0000              MOV       S:?b8, #0x1d
   \   00015C 2004                  JRA       L:??InputDataProgram_11
   2068                    else date_end=28;
   \                     ??InputDataProgram_14:
   \   00015E 351C0000              MOV       S:?b8, #0x1c
   2069                 }
   2070                if(smart)if( y==year && m==month) date_start=d;
   \                     ??InputDataProgram_11:
   \   000162 3D00                  TNZ       S:?b11
   \   000164 2715                  JREQ      L:??InputDataProgram_15
   \   000166 C60000                LD        A, L:year
   \   000169 C10000                CP        A, L:`y`
   \   00016C 260D                  JRNE      L:??InputDataProgram_15
   \   00016E C60000                LD        A, L:month
   \   000171 C10000                CP        A, L:m
   \   000174 2605                  JRNE      L:??InputDataProgram_15
   \   000176 C60000                LD        A, L:d
   \   000179 B700                  LD        S:?b9, A
   2071              LCDInstr(0x01);
   \                     ??InputDataProgram_15:
   \   00017B 8D000000              CALLF     ?Subroutine16
   2072               Delay1(1000);
   2073                line_lcd=0;
   2074              printf("\nDate>");
   \                     ??CrossCallReturnLabel_217:
   \   00017F AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000182 8D000000              CALLF     printf
   2075                do
   2076              {
   2077               line_lcd=1;
   \                     ??InputDataProgram_16:
   \   000186 35010000              MOV       L:line_lcd, #0x1
   2078               if(blink_flag) printf("\n%02d:%02d:%02d",y,m,d);
   \   00018A C60000                LD        A, L:`y`
   \   00018D 5F                    CLRW      X
   \   00018E 97                    LD        XL, A
   \   00018F C60000                LD        A, L:m
   \   000192 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_94:
   \   000196 2717                  JREQ      L:??InputDataProgram_17
   \   000198 C60000                LD        A, L:d
   \   00019B 9097                  LD        YL, A
   \   00019D 9089                  PUSHW     Y
   \   00019F 8D000000              CALLF     L:?push_w0
   \   0001A3 89                    PUSHW     X
   \   0001A4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0001A7 8D000000              CALLF     printf
   \   0001AB 5B06                  ADD       SP, #0x6
   \   0001AD 200E                  JRA       L:??InputDataProgram_18
   2079                else printf("\n%02d:%02d:  ",y,m);
   \                     ??InputDataProgram_17:
   \   0001AF 8D000000              CALLF     L:?push_w0
   \   0001B3 89                    PUSHW     X
   \   0001B4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:  ">`
   \   0001B7 8D000000              CALLF     printf
   \   0001BB 5B04                  ADD       SP, #0x4
   2080                 d=adj(date_start,date_end,d);
   \                     ??InputDataProgram_18:
   \   0001BD C60000                LD        A, L:d
   \   0001C0 B700                  LD        S:?b1, A
   \   0001C2 450000                MOV       S:?b0, S:?b8
   \   0001C5 B600                  LD        A, S:?b9
   \   0001C7 8D000000              CALLF     adj
   \   0001CB C70000                LD        L:d, A
   2081              } while (!key_ok_on());
   \   0001CE 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_98:
   \   0001D2 27B2                  JREQ      L:??InputDataProgram_16
   2082          
   2083            return TRUE;
   \   0001D4 A601                  LD        A, #0x1
   \   0001D6 AC000000              JPF       L:?epilogue_l2
   2084          }
   2085          
   2086          

   \                                 In section .far_func.text, align 1, keep-with-next
   2087          void initBeep(void)
   2088          {
   2089            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2090            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2091             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2092               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2093             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2094          
   2095          }
   2096          

   \                                 In section .far_func.text, align 1, keep-with-next
   2097          void beep(u16 Interval)
   2098          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2099          
   2100           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2101               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2102            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2103          
   2104          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2105          

   \                                 In section .far_func.text, align 1, keep-with-next
   2106           PUTCHAR_PROTOTYPE
   2107          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2108            /* Place your implementation of fputc here */
   2109            /* e.g. write a character to the USART */
   2110                //USART_SendData(USART3, (u8) ch);
   2111               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2112             /* Loop until the end of transmission */
   2113              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2114            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2115          }
   2116          
   2117           #ifdef USE_FULL_ASSERT
   2118          
   2119          /**
   2120            * @brief  Reports the name of the source file and the source line number
   2121            *   where the assert_param error has occurred.
   2122            * @param file: pointer to the source file name
   2123            * @param line: assert_param error line source number
   2124            * @retval : None
   2125            */

   \                                 In section .far_func.text, align 1
   2126          void assert_failed(u8* file, u32 line)
   2127          {
   2128            /* User can add his own implementation to report the file name and line number,
   2129               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2130          
   2131            /* Infinite loop */
   2132            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2133            {
   2134          
   2135            }
   2136          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Off">`:
   \   000000 204F666600            DC8 " Off"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Sun">`:
   \   000000 2053756E00            DC8 " Sun"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Mon">`:
   \   000000 204D6F6E00            DC8 " Mon"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Tues">`:
   \   000000 205475657300          DC8 " Tues"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Wednes">`:
   \   000000 205765646E65          DC8 " Wednes"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Thurs">`:
   \   000000 205468757273          DC8 " Thurs"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Fri">`:
   \   000000 2046726900            DC8 " Fri"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Satur">`:
   \   000000 205361747572          DC8 " Satur"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Daily">`:
   \   000000 204461696C79          DC8 " Daily"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Month">`:
   \   000000 204D6F6E7468          DC8 " Month"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nPrgClear">`:
   \   000000 0A507267436C          DC8 "\012PrgClear"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetDate">`:
   \   000000 0A5365744461          DC8 "\012SetDate"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSh Date">`:
   \   000000 0A5368204461          DC8 "\012Sh Date"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit">`:
   \   000000 0A4578697400          DC8 "\012Exit"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMenu +/-">`:
   \   000000 0A4D656E7520          DC8 "\012Menu +/-"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%s">`:
   \   000000 0A257300              DC8 "\012%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-">`:
   \   000000 0A2B2F2D00            DC8 "\012+/-"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClear">`:
   \   000000 0A436C656172          DC8 "\012Clear"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nall prog">`:
   \   000000 0A616C6C2070          DC8 "\012all prog"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nError">`:
   \   000000 0A4572726F72          DC8 "\012Error"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDay is">`:
   \   000000 0A4461792069          DC8 "\012Day is"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d:%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  :%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nP%d%s">`:
   \   000000 0A5025642573          DC8 "\012P%d%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " On">`:
   \   000000 204F6E00              DC8 " On"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"
   2137          #endif
   2138          
   2139          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
   2140          
   2141          
   2142             /*
   2143          
   2144          void Menu (void)
   2145          {
   2146           // Clear Display
   2147              LCDInstr(0x01); //Clear LCD
   2148              Delay1(250);
   2149              //u8 key;
   2150           // First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   2151              Wait for Plus,Minius or OK
   2152              If plus next option from Menu on the end EXIT
   2153              If minus previous option from Menu  on the end EXIT
   2154              If OK enter to menu option
   2155              If time out about 10s exit from Menu
   2156           //
   2157          
   2158          
   2159          
   2160          
   2161          
   2162          
   2163              do {
   2164          
   2165          First_Menu:
   2166              line_lcd=0;
   2167              printf("\nON      ");
   2168              line_lcd=1;
   2169              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   2170               pressKey();
   2171              switch (button)
   2172                  {
   2173                  case 1: goto Second_Menu ;
   2174                   break;
   2175                  case 2: Set_Timer_On();
   2176                   break;
   2177                  case 3: goto Exit_Menu;
   2178                   break;
   2179                  }
   2180                  break; //Exit Menu
   2181          
   2182          
   2183          Second_Menu:
   2184              line_lcd=0;
   2185              printf("\nOFF     ");
   2186              line_lcd=1;
   2187              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   2188                pressKey();
   2189                switch (button)
   2190                  {
   2191                  case 1: goto Third_Menu ;
   2192                   break;
   2193                  case 2: Set_Timer_Off();
   2194                   break;
   2195                  case 3: goto First_Menu;
   2196                   break;
   2197                  }
   2198               break; //Exit Menu
   2199          
   2200          Third_Menu:
   2201                line_lcd=0;
   2202              printf("\nMonthly ");
   2203              line_lcd=1;
   2204              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   2205                pressKey();
   2206                switch (button)
   2207                  {
   2208                  case 1: goto Fourth_Menu;
   2209                   break;
   2210                  case 2:
   2211                    {
   2212                     setData();
   2213                     monthly_year=y;
   2214                     monthly_month=m;
   2215                     monthly_date=d;
   2216                     status.monthly=1;
   2217                     status.daily=0;  // Disable Daily Alarm On date enable it
   2218                     status.on=0;     // Power off
   2219                     // Save Status and Date in EEPROM
   2220                     EEPROM_INIT();
   2221                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2222                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2223                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   2224                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   2225                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   2226                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2227                     break;
   2228                    }
   2229                  case 3: goto Second_Menu ;
   2230                   break;
   2231                  }
   2232               break; //Exit Menu
   2233          
   2234          
   2235          Fourth_Menu:
   2236              line_lcd=0;
   2237              printf("\nClock   ");
   2238              line_lcd=1;
   2239              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   2240                pressKey();
   2241                switch (button)
   2242                  {
   2243                  case 1: goto Fifth_Menu ;
   2244                   break;
   2245                  case 2: SetClock();
   2246                   break;
   2247                  case 3: goto Third_Menu;
   2248                   break;
   2249                  }
   2250               break; //Exit Menu
   2251          
   2252          
   2253          Fifth_Menu:
   2254              line_lcd=0;
   2255              printf("\nDate    ");
   2256              line_lcd=1;
   2257              printf("\n%02d:%02d:%02d",year,month,date);
   2258                pressKey();
   2259                switch (button)
   2260                  {
   2261                  case 1: goto Exit_Menu ;
   2262                   break;
   2263                  case 2: SetClock();
   2264                   break;
   2265                  case 3: goto Fourth_Menu;
   2266                   break;
   2267                  }
   2268               break; //Exit Menu
   2269          
   2270          
   2271          Exit_Menu:
   2272              line_lcd=0;
   2273              printf("\nExit OK ");
   2274              line_lcd=1;
   2275              printf("\n+/-     ");
   2276                 pressKey();
   2277                switch (button)
   2278                  {
   2279                  case 1: goto First_Menu;
   2280                   break;
   2281                  case 2:
   2282                   break;
   2283                  case 3: goto Fifth_Menu;
   2284                   break;
   2285                  }
   2286                 break; //Exit Menu
   2287              }    while (1);
   2288              //exit:
   2289             ClearLine1();
   2290             ClearLine2();
   2291          
   2292          }
   2293          
   2294          */
   2295          
   2296          
   2297          /*
   2298          void InitAdc()
   2299          {
   2300               ADC1_DeInit();
   2301               ADC1_StartConversion();
   2302          
   2303               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   2304               //           ADC1_CHANNEL_0,
   2305               //           ADC1_PRESSEL_FCPU_D4,
   2306               //            ADC1_EXTTRIG_TIM,
   2307          
   2308          
   2309               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   2310               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   2311                                      ADC1_CHANNEL_0,
   2312                                      ADC1_ALIGN_RIGHT
   2313                                     );
   2314          
   2315          
   2316               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   2317          
   2318          
   2319               //ADC1_Cmd (ENABLE);
   2320               //ADC1->CR1 |= ADC1_CR1_ADON ;
   2321               ADC1_StartConversion();
   2322               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   2323          
   2324          }
   2325          */
   2326          
   2327          
   2328          
   2329          /*
   2330          void InitUart()
   2331          {
   2332             UART2_DeInit();
   2333             UART2_Init((u32)9600,
   2334                        UART2_WORDLENGTH_8D,
   2335                        UART2_STOPBITS_1,
   2336                        UART2_PARITY_NO,
   2337                        UART2_SYNCMODE_CLOCK_DISABLE,
   2338                        UART2_MODE_TXRX_ENABLE
   2339                          );
   2340          
   2341             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   2342             UART2_Cmd(ENABLE);
   2343          
   2344            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   2345          }
   2346            */
   2347          
   2348          
   2349          /*
   2350          void SendChar( u8 Char)
   2351          {
   2352             UART2->DR = Char;
   2353            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   2354          }
   2355          
   2356           */
   2357          
   2358           /*
   2359          void Send_Hello()
   2360          {
   2361            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   2362             Delay1(10);
   2363             sprintf(data,"Hello");
   2364              u8 i=0;
   2365            do
   2366           {
   2367            SendChar(data[i++]);
   2368           } while (data[i]!=0);
   2369            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   2370            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   2371          
   2372          
   2373          
   2374          }
   2375          
   2376          
   2377          
   2378          
   2379          
   2380          void SendData()
   2381          {
   2382           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   2383            Delay1(10);
   2384            u8 i=0;
   2385            sprintf(data,"%d %c",adcdata,0x0d);
   2386           do
   2387           {
   2388             SendChar(data[i++]);
   2389          
   2390           } while (data[i]!=0);
   2391             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   2392            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   2393            rx_data=0;
   2394          }
   2395          */
   2396          
   2397          
   2398           /*
   2399          u16 Average()
   2400          {
   2401           //Find average in measure
   2402            u8 i=0;
   2403            u16 Summa=0;
   2404            do
   2405            {
   2406             Summa+=measure[i++];
   2407            } while ( measure[i]!=0);
   2408             if(i!=0) Summa=Summa/i;
   2409             return Summa;
   2410          }
   2411             */
   2412          
   2413                 /*
   2414          bool Set_Timer_On()
   2415          {
   2416          
   2417             //clr
   2418             LCDInstr(0x01);
   2419             Delay1(1000);
   2420             line_lcd=0;
   2421             printf("\nH On>");
   2422              timer3=0;
   2423            do
   2424              {
   2425               line_lcd=1;
   2426               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   2427                 daily_hour_on=adj(0,23,daily_hour_on);
   2428              } while ( timer3<=time_menu && !key_ok_on());
   2429          
   2430          
   2431             LCDInstr(0x01);
   2432             Delay1(1000);
   2433             line_lcd=0;
   2434             printf("\nMin On>");
   2435              timer3=0;
   2436            do
   2437              {
   2438               line_lcd=1;
   2439               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   2440                 daily_minute_on=adj(0,59,daily_minute_on);
   2441              } while ((timer3<=time_menu)&& !key_ok_on());
   2442          
   2443             //Save data to eeprom
   2444               if (!status.monthly) status.daily=1;
   2445                 else status.daily=0;
   2446               EEPROM_INIT();
   2447              //u8 temp =*(u8*)(&status);
   2448              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   2449               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2450               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2451               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   2452               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   2453               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2454                time_on=daily_hour_on*60+daily_minute_on;
   2455                 change=TRUE;
   2456          
   2457             return TRUE;
   2458          }
   2459           */
   2460          
   2461          /*
   2462          bool Set_Timer_Off()
   2463          {
   2464          
   2465              LCDInstr(0x01);
   2466              Delay1(1000);
   2467              line_lcd=0;
   2468              printf("\nH Off>");
   2469               timer3=0;
   2470            do
   2471              {
   2472               line_lcd=1;
   2473               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   2474                 daily_hour_off=adj(0,23,daily_hour_off);
   2475              } while (timer3<=time_menu && !key_ok_on());
   2476          
   2477            LCDInstr(0x01);
   2478             Delay1(1000);
   2479             line_lcd=0;
   2480             printf("\nMin Off>");
   2481             timer3=0;
   2482            do
   2483              {
   2484               line_lcd=1;
   2485               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   2486                 daily_minute_off=adj(0,59,daily_minute_off);
   2487              } while (timer3<=time_menu && !key_ok_on());
   2488          
   2489            //Save data to eeprom
   2490               if (!status.monthly) status.daily=1;
   2491                 else status.daily=0;
   2492               EEPROM_INIT();
   2493              //u8 temp =*(u8*)(&status);
   2494              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   2495               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2496               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2497               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   2498               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   2499               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2500                time_off= daily_hour_off*60+daily_minute_off;
   2501                 change=TRUE;
   2502               return TRUE;
   2503          }
   2504          
   2505            */
   2506          

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     program_number                    1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     power                             1
     blink_flag                        1
     blink_time                        2
     key_ok_hold                       1
     rotate_line2                      1
     size_status                       1
     ptim                             22
     line1                            10
     line2                            10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     day_week                         22
     setup_menu                       10
     status                            2
     hardware                          2
     programpoint                     40
     ?Subroutine33                     5
     ?Subroutine73                     9
     ?Subroutine41                     7
     ??Subroutine84_0                  7
     ?Subroutine79                    11
     ?Subroutine50                     7
     main                            327
     ?Subroutine35                    11
     ?Subroutine34                    11
     ?Subroutine13                     9
     ?Subroutine76                     7
     Display                         218
     ?Subroutine39                    16
     Power_On                         14
     ?Subroutine37                    15
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine63                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine65                     1
     ??Subroutine91_0                  7
     ?Subroutine62                     9
     ReadDS1307                      120
     ?Subroutine54                    12
     ?Subroutine28                    11
     ?Subroutine24                    13
     ?Subroutine23                     8
     ?Subroutine72                    10
     Check_DS1307                     78
     Set_DS1307                      109
     ?Subroutine64                    11
     convert_tobcd                    23
     bcd2hex                          23
     ??Subroutine81_0                  9
     ?Subroutine46                    10
     ?Subroutine22                     8
     ?Subroutine71                     6
     SetupMenu                       141
     ?Subroutine45                     9
     ?Subroutine75                     8
     ?Subroutine2                      4
     ??Subroutine89_0                  4
     ??Subroutine90_0                 13
     ?Subroutine49                     9
     ?Subroutine44                     9
     SelectMenu                      226
     ?Subroutine47                     8
     ??Subroutine88_0                  7
     SetData                         197
     ?Subroutine16                     7
     ?Subroutine29                     6
     ??Subroutine82_0                  5
     SetClock                        255
     ?Subroutine40                    11
     adj                              85
     key_ok_on                        81
     ?Subroutine31                    14
     ?Subroutine26                    10
     key_plus_on                      59
     ?Subroutine36                     7
     ?Subroutine32                     7
     ?Subroutine30                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine15                    29
     SaveStatus                       38
     ?Subroutine43                     9
     ?Subroutine78                     8
     ReadStatus                       47
     ?Subroutine53                     9
     SaveProgram                      33
     ?Subroutine42                    19
     ReadProgram                      48
     ResetProgram                     47
     ?Subroutine38                     8
     CheckProgramPoint               267
     ?Subroutine52                    16
     ?Subroutine51                    12
     ?Subroutine1                     63
     ?Subroutine67                     3
     ??Subroutine87_0                  7
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine61                     9
     ?Subroutine55                     7
     InitClk                          62
     ?Subroutine60                     9
     LCDDataOut                       87
     ?Subroutine10                     7
     ??Subroutine85_0                  5
     ?Subroutine68                     7
     ?Subroutine12                     2
     InitLcd                          89
     ?Subroutine17                    17
     ?Subroutine11                    11
     ?Subroutine0                     13
     ??Subroutine80_0                 10
     ?Subroutine20                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine4                     24
     ??Subroutine86_0                  6
     LCD_Busy                         69
     LCD                             208
     ?Subroutine69                     9
     ??Subroutine83_0                  5
     ?Subroutine21                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine18                     2
     ?Subroutine14                    10
     ?Subroutine70                     9
     DS18_Read                        74
     ?Subroutine19                    12
     DS18_Reset                       72
     ?Subroutine58                     7
     temperature                      63
     ?Subroutine57                    15
     ?Subroutine77                     6
     ?Subroutine56                    23
     ?Subroutine3                     21
     Read_DS18                       121
     ?Subroutine59                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     ?Subroutine9                      6
     Display_Line                     49
     ?Subroutine48                    13
     ?Subroutine7                     10
     ?Subroutine66                     4
     DisplayLine2                     53
     Rotate_Line                      19
     ClearLine1                       19
     ?Subroutine8                     13
     ?Subroutine6                     12
     ClearLine2                       19
     FirstMenu                       115
     ?Subroutine25                     9
     ProgramMenu                     564
     ?Subroutine27                    13
     ?Subroutine74                     7
     ?Subroutine5                      3
     pressKey                         74
     InputDataProgram                474
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant " Off">                5
     ?<Constant " Sun">                5
     ?<Constant " Mon">                5
     ?<Constant " Tues">               6
     ?<Constant " Wednes">             8
     ?<Constant " Thurs">              7
     ?<Constant " Fri">                5
     ?<Constant " Satur">              7
     ?<Constant " Daily">              7
     ?<Constant " Month">              7
     ?<Constant "\nPrgClear">         10
     ?<Constant "\nSetClock">         10
     ?<Constant "\nSetDate">           9
     ?<Constant "\nSh Date">           9
     ?<Constant "\nExit">              6
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nMenu +/-">         10
     ?<Constant "\n%s">                4
     ?<Constant "\n+/-">               5
     ?<Constant "\nClear">             7
     ?<Constant "\nall prog">         10
     ?<Constant "\nError">             7
     ?<Constant "\nDay is">            8
     ?<Constant "\nHour>">             7
     ?<Constant "\n  :%02d:%02d">     14
     ?<Constant "\nMinute>">           9
     ?<Constant "\n%02d:  :%02d">     14
     ?<Constant "\nSeconds>">         10
     ?<Constant "\n%02d:%02d:  ">     14
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nP%d%s">             7
     ?<Constant " On">                 4
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\n  :%02d">           9
     ?<Constant "\n%02d:  ">           9
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7

 
 6 449 bytes in section .far_func.text
   150 bytes in section .near.bss
    35 bytes in section .near.data
   389 bytes in section .near.rodata
 
 6 449 bytes of CODE  memory
   389 bytes of CONST memory
   185 bytes of DATA  memory

Errors: none
Warnings: none
