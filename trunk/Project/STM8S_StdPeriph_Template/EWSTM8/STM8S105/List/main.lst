###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             01/Dec/2013  22:10:11 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          #ifdef __GNUC__
     81            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     82               set to 'Yes') calls __io_putchar() */
     83            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     84          #else
     85            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     86          #endif /* __GNUC__ */
     87          
     88          
     89          
     90          
     91          #define SpecialSymbol 0x1b //Esc to start message
     92          //#define data_size 20
     93          #define key_time 8000
     94          #define key_time_ok 15000
     95          #define key_time_press 4000
     96          #define key_time_release 400
     97          #define DS_Control  0x10  // Out 1s
     98          #define time_menu 10  // 5s
     99          #define TIMEOUT_DS18B20 1000
    100          #define LCDLEDON 20
    101          //#define sync_time 30 // 30s
    102          #define power_jitter 3 //3s
    103          
    104          
    105          
    106          
    107          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    108          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    109          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    110          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    111          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    113          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    114          //char data[data_size];
    115          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    116          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    121          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    122          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    123          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    124          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    136          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    137          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    138          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    139          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    142          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    143          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    144          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    145          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          char  manu_display,sync_display,program_display;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    150          u8 button;
   \                     button:
   \   000000                       DS8 1
    151          //bool  ds_temperature;
    152          
    153          
    154          

   \                                 In section .near.bss, align 1
    155          char line1[8];
   \                     line1:
   \   000000                       DS8 8
    156          //char string1[10];
    157          //char string2[10];

   \                                 In section .near.bss, align 1
    158          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    159          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    160          
    161          //u8 index=0;

   \                                 In section .near.bss, align 1
    162          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    163          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    164          
    165          
    166           struct   status_reg
    167           {
    168             unsigned manu:1;
    169             unsigned on:1;
    170             unsigned timer_on:1;
    171             unsigned daily:1;
    172             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    173           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    174          
    175          
    176           struct
    177           {
    178             unsigned ds1307:1;
    179             unsigned ds18B20:1;
    180             unsigned buzzer:1;
    181             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    182           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    183          
    184          
    185          
    186           typedef  struct
    187            {
    188              u8 day;
    189              u8 onhour ;
    190              u8 onminute ;
    191              u8 offhour;
    192              u8 offminute;
    193          
    194            } volatile program ;
    195          
    196                   // = new proram[8];

   \                                 In section .near.bss, align 1
    197             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 40
    198            /*
    199             =
    200           {
    201             {0x0A,0x00,0x00,0x00,0x00},
    202             {0x00,0x00,0x00,0x00,0x00},
    203             {0x00,0x00,0x00,0x00,0x00},
    204             {0x00,0x00,0x00,0x00,0x00},
    205             {0x00,0x00,0x00,0x00,0x00},
    206             {0x00,0x00,0x00,0x00,0x00},
    207             {0x00,0x00,0x00,0x00,0x00},
    208             {0x00,0x00,0x00,0x00,0xFF},
    209           };
    210              */
    211          
    212          //time_t  ltime;
    213          //struct tm ptim;
    214          
    215          
    216          
    217          
    218          
    219          /* Private function prototypes -----------------------------------------------*/
    220          void InitHardware();
    221          void GpioConfiguration();
    222          void InitClk();
    223          void InitAdc();
    224          void InitI2C();
    225          void EEPROM_INIT();
    226          bool ReadDS1307();
    227          //void InitUart();
    228          void InitLcd();
    229          void InitDelayTimer2();
    230          void InitDelayTimer3();
    231          void Delay1( u16 Delay);
    232          void Delay2( u16 Delay);
    233          void Delay_us(u16 Delay);
    234          void LCDInstrNibble (u8 Instr);
    235          void LCDInstr(u8 Instr);
    236          void LCDDataOut(u8 data);
    237          void LCD_Busy();
    238          void PulseEnable();
    239          //void SendData();
    240          void SendChar(u8 Char);
    241          //void Send_Hello();
    242          bool Set_Clock();
    243          bool key_ok_on();
    244          bool key_plus_on();
    245          bool key_minus_on();
    246          bool key_ok_plus();
    247          bool Init_DS1307(void);
    248          bool Check_DS1307(void);
    249          bool I2C_Start(void);
    250          bool I2C_WA(u8 address);
    251          bool I2C_WD(u8 data);
    252          bool I2C_RA(u8 address);
    253          bool Set_DS1307();
    254          //bool Set_Delay_Allarm();
    255          bool Set_Timer_On();
    256          bool Set_Timer_Off();
    257          bool Read_Allarm();
    258          bool Read_DS18();
    259          bool DS18_Write( u8 data);
    260          bool DS18_Reset();
    261          bool DS18Set();
    262          u8 temperature();
    263          u8 DS18_Read();
    264          u8 convert_tobcd(u8 data);
    265          u8 I2C_RD(void);
    266          u8 adj(u8 min,u8 max,u8 now);
    267          u8 bcd2hex(u8 bcd);
    268          void Power_On(void);
    269          void Power_Off();
    270          void SaveStatus();
    271          void Rotate_Line( char * line);
    272          void Display_Line(char * line);
    273          void Clear_Line1(void);
    274          void Clear_Line2(void);
    275          void Menu(void);
    276          void pressKey(void);
    277          void Display(void);
    278          bool setData(void);
    279          void initBeep(void);
    280          void beep(u16 Interval);
    281          void FirstMenu();
    282          void ProgramMenu();
    283          void SaveProgram();
    284          void ReadProgram();
    285          void ResetProgram();
    286          
    287          
    288          
    289          u16  Average();
    290          
    291          
    292          /* Private functions ---------------------------------------------------------*/
    293          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_201:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_218:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    294          void main(void)
    295          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    296              /*High speed internal clock prescaler: 1*/
    297              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    298              InitClk();
   \   000003 8D000000              CALLF     InitClk
    299              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    300              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    301              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    302              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine6
    303              GPIO_WriteLow(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_13:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteLow
    304              hardware.lcdLed=0;
   \   000020 CE0000                LDW       X, L:hardware
   \   000023 01                    RRWA      X, A
   \   000024 A4F7                  AND       A, #0xf7
   \   000026 02                    RLWA      X, A
   \   000027 CF0000                LDW       L:hardware, X
    305              //InitUart();
    306               enableInterrupts();
   \   00002A 9A                    RIM
    307               initBeep();
   \   00002B 8D000000              CALLF     initBeep
    308              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    309               InitLcd();
   \   00002F 8D000000              CALLF     InitLcd
    310              //InitAdc();
    311               InitI2C();
   \   000033 8D000000              CALLF     InitI2C
    312              // Enable Timer3
    313              TIM3_Cmd(ENABLE);
   \   000037 A601                  LD        A, #0x1
   \   000039 8D000000              CALLF     TIM3_Cmd
    314              //year=bcd2hex(13);
    315              //Delay1(10000);
    316               if (!ReadDS1307())
   \   00003D 8D000000              CALLF     ReadDS1307
   \   000041 A100                  CP        A, #0x0
   \   000043 261D                  JRNE      L:??main_0
    317               {
    318                 printf("\n E2:%d",error);
   \   000045 C60000                LD        A, L:error
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004E 8D000000              CALLF     printf
   \   000052 5B02                  ADD       SP, #0x2
    319                 // Reset the CPU: Enable the watchdog and wait until it expires
    320                  hardware.ds1307=0;
   \   000054 CE0000                LDW       X, L:hardware
   \   000057 01                    RRWA      X, A
   \   000058 A4FE                  AND       A, #0xfe
   \   00005A 02                    RLWA      X, A
   \   00005B CF0000                LDW       L:hardware, X
    321                   pressKey();
   \   00005E 8D000000              CALLF     pressKey
    322                //IWDG->KR = IWDG_KEY_ENABLE;
    323                // while ( 1 );    // Wait until reset occurs from IWDG
    324               }
    325               //Send_Hello();
    326              //line_lcd=0;
    327              //printf("\nHello");
    328                hardware.lcdLed=1;
   \                     ??main_0:
   \   000062 8D000000              CALLF     ?Subroutine37
    329                 lcdLedTimer=LCDLEDON;
    330                  //GPIO_WriteLow(GPIOB,lcdLed);
    331          
    332              if (!Check_DS1307())
   \                     ??CrossCallReturnLabel_85:
   \   000066 8D000000              CALLF     Check_DS1307
   \   00006A A100                  CP        A, #0x0
   \   00006C 2624                  JRNE      L:??main_1
    333              {
    334                 if (error!=0)
   \   00006E C60000                LD        A, L:error
   \   000071 2710                  JREQ      L:??main_2
    335                 {
    336                  printf("\n E:%d",error);
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    337                   pressKey();
   \   00007F 8D000000              CALLF     pressKey
    338          
    339                 }
    340               line_lcd=0;
   \                     ??main_2:
   \   000083 725F0000              CLR       L:line_lcd
    341               printf("\nSetClock");
   \   000087 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008A 8D000000              CALLF     printf
    342                Set_Clock();
   \   00008E 8D000000              CALLF     Set_Clock
    343                 // reset program point
    344          
    345              }
    346          
    347          
    348                 //Read Status register from eepom and update it
    349                //size=sizeof(status);
    350               //u16 status
    351               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000092 AE4000                LDW       X, #0x4000
   \   000095 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_156:
   \   000099 B700                  LD        S:?b8, A
   \   00009B AE4001                LDW       X, #0x4001
   \   00009E 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_155:
   \   0000A2 905F                  CLRW      Y
   \   0000A4 9097                  LD        YL, A
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b8
   \   0000AA 41                    EXG       A, XL
   \   0000AB 4F                    CLR       A
   \   0000AC 02                    RLWA      X, A
   \   0000AD 8D000000              CALLF     ??Subroutine90_0
   \                     ??CrossCallReturnLabel_277:
   \   0000B1 CF0000                LDW       L:status, X
    352                status_check = *(u16*)(&status);
   \   0000B4 CE0000                LDW       X, L:status
   \   0000B7 CF0000                LDW       L:status_check, X
    353          
    354                ReadProgram ();
   \   0000BA 8D000000              CALLF     ReadProgram
    355              //When Start Check for Allarm and computing Daily_long_on
    356               if ( Read_Allarm() == TRUE)
   \   0000BE 8D000000              CALLF     Read_Allarm
   \   0000C2 A101                  CP        A, #0x1
   \   0000C4 260B                  JRNE      L:??CrossCallReturnLabel_4
    357               {
    358                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000C6 8D000000              CALLF     ?Subroutine3
    359                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_6:
   \   0000CA C60000                LD        A, L:daily_hour_off
   \   0000CD 8D000000              CALLF     ?Subroutine2
    360               }
    361          
    362                     //Init DS18B20
    363              DS18Set();
   \                     ??CrossCallReturnLabel_4:
   \   0000D1 8D000000              CALLF     DS18Set
    364              line_lcd=0;
   \   0000D5 725F0000              CLR       L:line_lcd
    365              if (!Read_DS18())
   \   0000D9 8D000000              CALLF     Read_DS18
   \   0000DD A100                  CP        A, #0x0
   \   0000DF 2611                  JRNE      L:??main_3
    366              {
    367               printf("\nDS_Err_T");
   \   0000E1 AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000E4 8D000000              CALLF     printf
    368                 hardware.ds18B20=0;
   \   0000E8 8D000000              CALLF     ?Subroutine41
    369                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_100:
   \   0000EC 8D000000              CALLF     pressKey
   \   0000F0 2004                  JRA       L:??CrossCallReturnLabel_102
    370              }
    371               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000F2 8D000000              CALLF     ?Subroutine42
    372          
    373              //daily_dispaly=' ';
    374              //month_display=' ';
    375              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_102:
   \   0000F6 35010000              MOV       L:sync_time_ds1307, #0x1
    376          
    377                    //Same delay if  power jitter
    378              if (status.on)
   \   0000FA 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_151:
   \   0000FE 2713                  JREQ      L:??main_4
    379              {
    380               line_lcd=0;
   \   000100 725F0000              CLR       L:line_lcd
    381               printf("\nWait 3s.");
   \   000104 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   000107 8D000000              CALLF     ?Subroutine44
    382               timer3=0;
    383               while (timer3<=power_jitter);
   \                     ??CrossCallReturnLabel_109:
   \   00010B CE0000                LDW       X, L:timer3
   \   00010E A30004                CPW       X, #0x4
   \   000111 25F8                  JRC       L:??CrossCallReturnLabel_109
    384              }
    385          
    386               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    387          
    388               // Working fuction
    389              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 month,u8 hours,u8 minutes,u8 seconds)
    390          
    391          
    392          
    393              // strcpy(line1,"Hello I am here! ");
    394              //  while(1)
    395              //  {
    396              //     Display_Line(line1);
    397              //     Delay2(20000);
    398              //  }
    399              //  while (!key_ok_on());
    400                 //sprintf(line1,"TIMER ON ");
    401          
    402               /* Main Loop*/
    403          
    404              while(1)
    405              {
    406          
    407          
    408                if(key_ok_on()) FirstMenu();
   \                     ??main_4:
   \   000113 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_127:
   \   000117 2704                  JREQ      L:??main_5
   \   000119 8D000000              CALLF     FirstMenu
    409                if(key_plus_on()) Power_On();
   \                     ??main_5:
   \   00011D 8D000000              CALLF     key_plus_on
   \   000121 A100                  CP        A, #0x0
   \   000123 2704                  JREQ      L:??main_6
   \   000125 8D000000              CALLF     Power_On
    410                if(key_minus_on())Power_Off();
   \                     ??main_6:
   \   000129 8D000000              CALLF     key_minus_on
   \   00012D A100                  CP        A, #0x0
   \   00012F 2704                  JREQ      L:??main_7
   \   000131 8D000000              CALLF     Power_Off
    411                if(Time_Display) Display();  //
   \                     ??main_7:
   \   000135 C60000                LD        A, L:Time_Display
   \   000138 2704                  JREQ      L:??main_8
   \   00013A 8D000000              CALLF     Display
    412          
    413                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_8:
   \   00013E C60000                LD        A, L:sync_time_ds1307
   \   000141 2729                  JREQ      L:??main_9
    414                   {
    415                    if (!ReadDS1307())
   \   000143 8D000000              CALLF     ReadDS1307
   \   000147 A100                  CP        A, #0x0
   \   000149 2619                  JRNE      L:??main_10
    416                        {
    417                          GPIO_WriteLow(GPIOD, power_pin );
   \   00014B 8D000000              CALLF     ?Subroutine6
    418                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_12:
   \   00014F C60000                LD        A, L:error
   \   000152 5F                    CLRW      X
   \   000153 97                    LD        XL, A
   \   000154 89                    PUSHW     X
   \   000155 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000158 8D000000              CALLF     printf
   \   00015C 5B02                  ADD       SP, #0x2
    419                       //restart i2c
    420                       // Reset the CPU: Enable the watchdog and wait until it expires
    421                       IWDG->KR = IWDG_KEY_ENABLE;
   \   00015E 35CC50E0              MOV       L:0x50e0, #0xcc
    422                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_11:
   \   000162 20FE                  JRA       L:??main_11
    423                        }
    424                   sync_time_ds1307=FALSE;
   \                     ??main_10:
   \   000164 725F0000              CLR       L:sync_time_ds1307
    425                   sync_display='S';
   \   000168 35530000              MOV       L:sync_display, #0x53
    426                   }
    427          
    428                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_9:
   \   00016C 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_152:
   \   000170 2708                  JREQ      L:??main_12
   \   000172 A608                  LD        A, #0x8
   \   000174 8D000000              CALLF     ??Subroutine85_0
   \                     ??CrossCallReturnLabel_252:
   \   000178 2099                  JRA       L:??main_4
    429                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_12:
   \   00017A 8D000000              CALLF     ?Subroutine6
    430          
    431          
    432          
    433              }
   \                     ??CrossCallReturnLabel_11:
   \   00017E 2093                  JRA       L:??main_4
    434          
    435          
    436          
    437          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine55:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine53:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A502                  BCP       A, #0x2
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine42:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine41:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine6:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 905F                  CLRW      Y
   \   000005 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_212:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_280:
   \   000010 CF0000                LDW       L:time_on, X
   \   000013 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine90_0
   \   000002                       ;               // Fall through to label ??Subroutine90_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine90_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_211:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_279:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine77:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0
    438          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine83_0
   \   000004                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
    439          void Display(void)
    440          {
    441             //Clear_Line1 ();
    442              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    443               result2=0;
   \   000007 725F0000              CLR       L:result2
    444                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    445                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    446          
    447          
    448          
    449             if (status.manu) manu_display='M';
   \   000018 CE0000                LDW       X, L:status
   \   00001B 9F                    LD        A, XL
   \   00001C A501                  BCP       A, #0x1
   \   00001E 2706                  JREQ      L:??Display_1
   \   000020 354D0000              MOV       L:manu_display, #0x4d
   \   000024 2004                  JRA       L:??Display_2
    450               else manu_display='A';
   \                     ??Display_1:
   \   000026 35410000              MOV       L:manu_display, #0x41
    451               //Blink D
    452             if (status.on && !status.manu)
   \                     ??Display_2:
   \   00002A 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_149:
   \   00002E 2750                  JREQ      L:??Display_3
   \   000030 CE0000                LDW       X, L:status
   \   000033 9F                    LD        A, XL
   \   000034 A501                  BCP       A, #0x1
   \   000036 2648                  JRNE      L:??Display_3
    453             {
    454               if (program_display=='P') program_display=' ';
   \   000038 C60000                LD        A, L:program_display
   \   00003B A150                  CP        A, #0x50
   \   00003D 2647                  JRNE      L:??Display_4
   \                     ??Display_5:
   \   00003F 35200000              MOV       L:program_display, #0x20
    455                else program_display='P';
    456             }
    457          
    458              else if (status.on) program_display='P';
    459               else program_display=' ';
    460              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,sync_display,program_display,manu_display);
   \                     ??Display_6:
   \   000043 C60000                LD        A, L:sync_display
   \   000046 5F                    CLRW      X
   \   000047 97                    LD        XL, A
   \   000048 BF00                  LDW       S:?w1, X
   \   00004A C60000                LD        A, L:program_display
   \   00004D 97                    LD        XL, A
   \   00004E BF00                  LDW       S:?w0, X
   \   000050 C60000                LD        A, L:manu_display
   \   000053 97                    LD        XL, A
   \   000054 90CE0000              LDW       Y, L:hardware
   \   000058 909F                  LD        A, YL
   \   00005A A502                  BCP       A, #0x2
   \   00005C 89                    PUSHW     X
   \   00005D 272D                  JREQ      L:??Display_7
   \   00005F 8D000000              CALLF     L:?push_w0
   \   000063 8D000000              CALLF     L:?push_w1
   \   000067 C60000                LD        A, L:result2
   \   00006A 97                    LD        XL, A
   \   00006B 89                    PUSHW     X
   \   00006C C60000                LD        A, L:result1
   \   00006F 97                    LD        XL, A
   \   000070 89                    PUSHW     X
   \   000071 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000075 AE0000                LDW       X, #line1
   \   000078 8D000000              CALLF     sprintf
   \   00007C 5B0A                  ADD       SP, #0xa
   \   00007E 2021                  JRA       L:??Display_8
   \                     ??Display_3:
   \   000080 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_150:
   \   000084 27B9                  JREQ      L:??Display_5
   \                     ??Display_4:
   \   000086 35500000              MOV       L:program_display, #0x50
   \   00008A 20B7                  JRA       L:??Display_6
    461                else sprintf(line1,"\n%c%c%c",sync_display,program_display,manu_display);
   \                     ??Display_7:
   \   00008C 8D000000              CALLF     L:?push_w0
   \   000090 8D000000              CALLF     L:?push_w1
   \   000094 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   000098 AE0000                LDW       X, #line1
   \   00009B 8D000000              CALLF     sprintf
   \   00009F 5B06                  ADD       SP, #0x6
    462          
    463             line_lcd=0;
   \                     ??Display_8:
   \   0000A1 725F0000              CLR       L:line_lcd
    464             printf(line1);
   \   0000A5 AE0000                LDW       X, #line1
   \   0000A8 8D000000              CALLF     ?Subroutine24
    465          
    466             line_lcd=1;
    467             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_238:
   \   0000AC 89                    PUSHW     X
   \   0000AD C60000                LD        A, L:minutes
   \   0000B0 97                    LD        XL, A
   \   0000B1 89                    PUSHW     X
   \   0000B2 C60000                LD        A, L:hours
   \   0000B5 97                    LD        XL, A
   \   0000B6 89                    PUSHW     X
   \   0000B7 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000BA 8D000000              CALLF     printf
   \   0000BE 5B06                  ADD       SP, #0x6
    468          
    469          
    470             Time_Display=FALSE;
   \   0000C0 725F0000              CLR       L:Time_Display
    471             sync_display=' ';
   \   0000C4 35200000              MOV       L:sync_display, #0x20
    472          }
   \   0000C8 87                    RETF
    473          

   \                                 In section .far_func.text, align 1
    474          void Power_On()
    475          {
    476            //status.auto=0;
    477            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine43
    478            status.manu=1; //Manu
    479            SaveStatus();
   \                     ??CrossCallReturnLabel_104:
   \   00000A AC000000              JPF       SaveStatus
    480            //hardware.lcdLed=1;
    481          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine43:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_204:
   \   000004 AA01                  OR        A, #0x1
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine73:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 87                    RETF
    482          

   \                                 In section .far_func.text, align 1, keep-with-next
    483          void Power_Off()
    484          {
    485            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine43
    486            status.manu=1; //Manu
    487            SaveStatus();
   \                     ??CrossCallReturnLabel_103:
   \   00000A AC000000              JPF       SaveStatus
    488             //hardware.lcdLed=0;
    489          
    490          }
    491          

   \                                 In section .far_func.text, align 1, keep-with-next
    492          void InitI2C(void)
    493          {
    494             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    495             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    496             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    497          }
    498          

   \                                 In section .far_func.text, align 1, keep-with-next
    499          bool I2C_Start(void)
    500          {
    501             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    502                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    503              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_138:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    504                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    505                  {
    506                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    507                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    508                  }
    509                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    510          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    511          

   \                                 In section .far_func.text, align 1, keep-with-next
    512          bool I2C_WA(u8 address)
    513          {
    514            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    515                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    516                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_137:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    517                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    518                   {
    519                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    520                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    521                   }
    522                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    523          }
    524          

   \                                 In section .far_func.text, align 1, keep-with-next
    525          bool I2C_RA(u8 address)
    526          {
    527            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    528                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    529                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_139:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    530                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    531                   {
    532                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    533                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    534                   }
    535                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    536          }
    537          
    538          

   \                                 In section .far_func.text, align 1, keep-with-next
    539          bool I2C_WD(u8 data)
    540          {
    541           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    542             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    543             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_136:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    544              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    545              {
    546                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    547                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    548              }
    549               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    550          }
    551          

   \                                 In section .far_func.text, align 1, keep-with-next
    552          u8 I2C_RD(void)
    553          {
    554           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    555            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    556           //while((!(I2C->SR1 & 0x40))&&timeout);
    557           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    558           {
    559             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    560             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    561           }
    562           u8 data=I2C_ReceiveData();
    563           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    564          }
    565          
    566            /*
    567          bool Init_DS1307(void)
    568          {
    569             // Test DS1307
    570              error=0;
    571              if (!I2C_Start()) return FALSE;
    572              if(!I2C_WA(0xD0)) return FALSE;
    573              if(!I2C_WD(0x00)) return FALSE;
    574              if(!I2C_WD(0x00)) return FALSE;
    575              I2C_GenerateSTOP(ENABLE);
    576          
    577              // timeout=100;  error=4;
    578              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    579              //    if (!timeout)return FALSE ;
    580               return TRUE;
    581          }
    582             */
    583          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine89_0
   \   000001                       ;               // Fall through to label ??Subroutine89_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    584          bool  ReadDS1307(void)
    585          {        TIM3_Cmd(DISABLE);
   \                     ReadDS1307:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     TIM3_Cmd
    586                 error=0;
   \   000005 8D000000              CALLF     ?Subroutine50
    587                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_141:
   \   000009 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   00000B 4F                    CLR       A
   \   00000C 87                    RETF
    588                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   00000D 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_135:
   \   000011 27F8                  JREQ      L:??ReadDS1307_1
    589                 if(!I2C_WD(0x00)) return FALSE;
   \   000013 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_273:
   \   000017 27F2                  JREQ      L:??ReadDS1307_1
    590                 I2C_GenerateSTOP(ENABLE);
   \   000019 8D000000              CALLF     ?Subroutine31
    591                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_66:
   \   00001D 27EC                  JREQ      L:??ReadDS1307_1
    592                 if(!I2C_RA(0xD0))return FALSE;
   \   00001F A6D0                  LD        A, #0xd0
   \   000021 8D000000              CALLF     I2C_RA
   \   000025 A100                  CP        A, #0x0
   \   000027 27E2                  JREQ      L:??ReadDS1307_1
    593                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000029 8D000000              CALLF     ?Subroutine30
    594                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_64:
   \   00002D C70000                LD        L:seconds, A
    595                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000030 8D000000              CALLF     ?Subroutine30
    596                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_63:
   \   000034 C70000                LD        L:minutes, A
    597                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000037 8D000000              CALLF     ?Subroutine30
    598                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_62:
   \   00003B C70000                LD        L:hours, A
    599                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00003E 8D000000              CALLF     ?Subroutine30
    600                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_61:
   \   000042 C70000                LD        L:days, A
    601                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000045 8D000000              CALLF     ?Subroutine30
    602                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_60:
   \   000049 C70000                LD        L:`date`, A
    603                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004C 8D000000              CALLF     ?Subroutine30
    604                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_59:
   \   000050 C70000                LD        L:month, A
    605                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000053 8D000000              CALLF     ?Subroutine34
    606                   I2C_GenerateSTOP(ENABLE);
    607                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_72:
   \   000057 8D000000              CALLF     I2C_RD
   \   00005B 8D000000              CALLF     bcd2hex
   \   00005F C70000                LD        L:year, A
    608          
    609               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    610               //   u8 data1 = I2C_RD();
    611                //Last read byte by I2C slave
    612               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    613               //  I2C_GenerateSTOP(ENABLE);
    614               //  temp2= I2C_RD();
    615                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   000062 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    616                    {
    617                      seconds &= 0x7f;
   \   000067 721F0000              BRES      L:seconds, #0x7
    618                      Set_DS1307();
   \   00006B 8D000000              CALLF     Set_DS1307
    619                    }
    620                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006F CE0000                LDW       X, L:hardware
   \   000072 01                    RRWA      X, A
   \   000073 AA01                  OR        A, #0x1
   \   000075 02                    RLWA      X, A
   \   000076 CF0000                LDW       L:hardware, X
    621                 TIM3_Cmd(ENABLE);
   \   000079 A601                  LD        A, #0x1
   \   00007B 8D000000              CALLF     TIM3_Cmd
    622                 return TRUE;
   \   00007F A601                  LD        A, #0x1
   \   000081 87                    RETF
    623          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_198:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    624          

   \                                 In section .far_func.text, align 1, keep-with-next
    625          bool Check_DS1307(void)
    626          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    627             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    628                 error=0;
   \   000003 725F0000              CLR       L:error
    629                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    630                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    631                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_134:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    632                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_276:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    633                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine31
    634                  //Last read byte by I2C slave
    635                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_65:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    636                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    637                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine71
    638                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_199:
   \   00003C B700                  LD        S:?b8, A
    639                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine34
    640                 I2C_GenerateSTOP(ENABLE);
    641                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_73:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    642                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    643          }
    644          

   \                                 In section .far_func.text, align 1, keep-with-next
    645          bool Set_DS1307()
    646          {
    647                 // convert hex or decimal to bcd format
    648          
    649          
    650                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine50
    651                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_140:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    652                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_133:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    653                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_272:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    654                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_142:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    655                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_143:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    656                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_144:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    657                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_145:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    658                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_146:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    659                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_147:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    660                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_148:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    661                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_274:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    662                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_275:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    663                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    664          
    665          
    666             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    667          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    668          
    669          

   \                                 In section .far_func.text, align 1, keep-with-next
    670          u8 convert_tobcd(u8 data)
    671          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    672             u8 data_second_decimal=data/10;
    673             u8 data_first_decimal=data - 10*data_second_decimal;
    674             data=16*data_second_decimal + data_first_decimal;
    675            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    676          }
    677          

   \                                 In section .far_func.text, align 1, keep-with-next
    678          u8 bcd2hex(u8 bcd)
    679          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    680            u8 hex=0;
    681            hex=(bcd>>4)*10 +(bcd&0x0f);
    682            bcd=0;
    683            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    684          }
    685          
    686          

   \                                 In section .far_func.text, align 1, keep-with-next
    687          bool Set_Clock()
    688          {
    689              //Clear Display
    690             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine16
    691             Delay1(1000);
    692             line_lcd=0;
    693              printf("\nYear>");
    694                do
    695              {
    696               line_lcd=1;
   \                     ??CrossCallReturnLabel_32:
   \   000004 8D000000              CALLF     ?Subroutine25
    697               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_44:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    698                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine81_0
    699              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_224:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_116:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_32
    700          
    701               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine45
    702              printf("\nMonth>");
    703                do
    704              {
    705               line_lcd=1;
   \                     ??CrossCallReturnLabel_110:
   \   000036 8D000000              CALLF     ?Subroutine25
    706               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_45:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    707                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    708              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_117:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_110
    709          
    710              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine17
    711               Delay1(1000);
    712                line_lcd=0;
    713              printf("\nDate>");
    714                do
    715              {
    716               line_lcd=1;
   \                     ??CrossCallReturnLabel_34:
   \   00006A 8D000000              CALLF     ?Subroutine25
    717               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_46:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    718                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    719              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_118:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_34
    720          
    721          
    722              //Clear Display
    723             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine18
    724             Delay1(1000);
    725             line_lcd=0;
    726              printf("\nDays>");
   \                     ??CrossCallReturnLabel_230:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    727                do
    728              {
    729                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    730               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    731                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    732              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_119:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    733          
    734          
    735          
    736             //Clear Display
    737             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine18
    738             Delay1(1000);
    739             line_lcd=0;
    740              printf("\nHour>");
   \                     ??CrossCallReturnLabel_231:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    741                do
    742              {
    743                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine83_0
    744               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_239:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    745                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine81_0
    746              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_223:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_120:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    747          
    748               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    749               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    750                do
    751              {
    752                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine83_0
    753               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_240:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    754                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine33
    755              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_229:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_121:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    756          
    757              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    758              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    759              do
    760              {
    761                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine83_0
    762               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_241:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    763                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine33
    764              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_228:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_122:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    765          
    766                // Set parameter to DS1307 + time byte
    767                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    768          
    769                //bool k=Check_DS1307();
    770          
    771            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    772          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_190:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_191:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_215:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine81_0
   \   000006                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_214:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine82_0
   \   000007                       ;               // Fall through to label ??Subroutine82_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    773          
    774          

   \                                 In section .far_func.text, align 1, keep-with-next
    775          u8 adj(u8 min,u8 max,u8 now)
    776          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    777             u8 adj=now;
    778             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    779             {
    780               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    781               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    782             }
    783             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    784             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    785             {
    786               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    787               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    788             }
    789             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    790             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    791          
    792             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    793          }
    794          
    795          

   \                                 In section .far_func.text, align 1, keep-with-next
    796          bool key_ok_on()
    797          {
    798            //Read Key OK
    799            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_67:
   \   000004 2635                  JRNE      L:??key_ok_on_0
    800             {
    801               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    802                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_68:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    803                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 251B                  JRC       L:??key_ok_on_0
    804                 {
    805                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    806                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000024 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_69:
   \   000028 2711                  JREQ      L:??key_ok_on_0
    807                    {
    808                       beep(2000);
   \   00002A 8D000000              CALLF     ?Subroutine38
    809                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_86:
   \   00002E 2606                  JRNE      L:??key_ok_on_3
    810                        {
    811                         hardware.lcdLed=1;
   \   000030 8D000000              CALLF     ?Subroutine37
    812                         lcdLedTimer=LCDLEDON;
    813                         return FALSE;
   \                     ??CrossCallReturnLabel_81:
   \   000034 2005                  JRA       ??key_ok_on_0
    814                        }
    815                       hardware.lcdLed=1;
   \                     ??key_ok_on_3:
   \   000036 8D000000              CALLF     ?Subroutine36
    816                       lcdLedTimer=LCDLEDON;
    817          
    818                      return TRUE;   //if realease retrun true
    819                    }
    820                 }
    821             }
   \                     ??CrossCallReturnLabel_78:
   \   00003A 87                    RETF
    822          
    823            return FALSE;
   \                     ??key_ok_on_0:
   \   00003B 4F                    CLR       A
   \   00003C 87                    RETF
    824          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_200:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    825          
    826          
    827          

   \                                 In section .far_func.text, align 1, keep-with-next
    828           bool key_plus_on()
    829          {
    830            //Read Key OK
    831              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_75:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
    832               {
    833               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    834                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_96:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_74:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    835                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
    836                  {
    837                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_71:
   \   000026 2711                  JREQ      L:??key_plus_on_0
    838                    {
    839                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine38
    840                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_88:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
    841                        {
    842                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine37
    843                         lcdLedTimer=LCDLEDON;
    844                         return FALSE;
   \                     ??CrossCallReturnLabel_83:
   \   000032 2005                  JRA       ??key_plus_on_0
    845                        }
    846                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine36
    847                        lcdLedTimer=LCDLEDON;
    848          
    849                      return TRUE;
    850                    }
    851                  }
    852               }
   \                     ??CrossCallReturnLabel_80:
   \   000038 87                    RETF
    853          
    854            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    855          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData
    856          
    857          

   \                                 In section .far_func.text, align 1, keep-with-next
    858            bool key_minus_on()
    859          {
    860            //Read Key OK
    861             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_77:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
    862               {
    863               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    864                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_95:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_76:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    865                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
    866                  {
    867                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_70:
   \   000026 2711                  JREQ      L:??key_minus_on_0
    868                   {
    869                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine38
    870                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_87:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
    871                       {
    872                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine37
    873                        lcdLedTimer=LCDLEDON;
    874                        return FALSE;
   \                     ??CrossCallReturnLabel_82:
   \   000032 2005                  JRA       ??key_minus_on_0
    875                       }
    876                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine36
    877                     lcdLedTimer=LCDLEDON;
    878                     return TRUE;
    879                   }
    880                  }
    881               }
   \                     ??CrossCallReturnLabel_79:
   \   000038 87                    RETF
    882          
    883            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    884          }
    885          
    886          

   \                                 In section .far_func.text, align 1, keep-with-next
    887          bool  key_ok_plus()
    888          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    889            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_28:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
    890            {
    891                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    892                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_97:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_29:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    893                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_98:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_217
    894                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine79
    895                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_217:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
    896                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
    897            }
    898          
    899           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
    900          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    901          
    902          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    903          bool Set_Timer_On()
    904          {
    905          
    906             //clr
    907             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine18
    908             Delay1(1000);
    909             line_lcd=0;
    910             printf("\nH On>");
   \                     ??CrossCallReturnLabel_234:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On>">`
   \   000007 8D000000              CALLF     ?Subroutine44
    911              timer3=0;
    912            do
    913              {
    914               line_lcd=1;
   \                     ??CrossCallReturnLabel_107:
   \   00000B 8D000000              CALLF     ?Subroutine28
    915               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_54:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    916                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine81_0
    917              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_221:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_131:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_125:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_107
    918          
    919             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine18
    920             Delay1(1000);
    921             line_lcd=0;
    922             printf("\nMin On>");
   \                     ??CrossCallReturnLabel_235:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On>">`
   \   000041 8D000000              CALLF     ?Subroutine44
    923              timer3=0;
    924            do
    925              {
    926               line_lcd=1;
   \                     ??CrossCallReturnLabel_108:
   \   000045 8D000000              CALLF     ?Subroutine28
    927               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_55:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    928                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine33
    929              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_226:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_132:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_126:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_108
    930          
    931             //Save data to eeprom
    932               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A410                  AND       A, #0x10
   \   000074 2608                  JRNE      L:??Set_Timer_On_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA08                  OR        A, #0x8
   \   00007C 2006                  JRA       ??Set_Timer_On_3
    933                 else status.daily=0;
   \                     ??Set_Timer_On_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4F7                  AND       A, #0xf7
   \                     ??Set_Timer_On_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    934               EEPROM_INIT();
    935              //u8 temp =*(u8*)(&status);
    936              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    937               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    938               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    939               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    940               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    941               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    942                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_1:
   \   000088 8D000000              CALLF     ?Subroutine3
    943                 change=TRUE;
   \                     ??CrossCallReturnLabel_5:
   \   00008C 35010000              MOV       L:change, #0x1
    944          
    945             return TRUE;
   \   000090 A601                  LD        A, #0x1
   \   000092 87                    RETF
    946          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_205:
   \   000008 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_187:
   \   00000C CE0000                LDW       X, L:status
   \   00000F 9F                    LD        A, XL
   \   000010 AE4001                LDW       X, #0x4001
   \   000013 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_186:
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    947          

   \                                 In section .far_func.text, align 1, keep-with-next
    948          bool Set_Timer_Off()
    949          {
    950          
    951              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine18
    952              Delay1(1000);
    953              line_lcd=0;
    954              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_232:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine44
    955               timer3=0;
    956            do
    957              {
    958               line_lcd=1;
   \                     ??CrossCallReturnLabel_105:
   \   00000B 8D000000              CALLF     ?Subroutine27
    959               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_51:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    960                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine81_0
    961              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_222:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_129:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_123:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_105
    962          
    963            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine18
    964             Delay1(1000);
    965             line_lcd=0;
    966             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_233:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   000041 8D000000              CALLF     ?Subroutine44
    967             timer3=0;
    968            do
    969              {
    970               line_lcd=1;
   \                     ??CrossCallReturnLabel_106:
   \   000045 8D000000              CALLF     ?Subroutine27
    971               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_52:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    972                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine33
    973              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_227:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_130:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_124:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_106
    974          
    975            //Save data to eeprom
    976               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A410                  AND       A, #0x10
   \   000074 2608                  JRNE      L:??Set_Timer_Off_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA08                  OR        A, #0x8
   \   00007C 2006                  JRA       ??Set_Timer_Off_3
    977                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4F7                  AND       A, #0xf7
   \                     ??Set_Timer_Off_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    978               EEPROM_INIT();
    979              //u8 temp =*(u8*)(&status);
    980              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    981               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    982               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    983               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    984               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    985               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    986                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_2:
   \   000088 C60000                LD        A, L:daily_hour_off
   \   00008B 905F                  CLRW      Y
   \   00008D 8D000000              CALLF     ?Subroutine2
    987                 change=TRUE;
   \                     ??CrossCallReturnLabel_3:
   \   000091 35010000              MOV       L:change, #0x1
    988               return TRUE;
   \   000095 A601                  LD        A, #0x1
   \   000097 87                    RETF
    989          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    990          
    991          /*
    992               //Computing time_long_on
    993          
    994               u8 hour=daily_hour_on;
    995               u8 minute=daily_minute_on;
    996               daily_long_on=0;
    997               do
    998               {
    999                    daily_long_on++;
   1000                    minute++;
   1001                    if (minute==60)
   1002                    {
   1003                      minute=0;
   1004                      hour++;
   1005                    }
   1006                    if(hour==24) hour=0;
   1007          
   1008               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   1009          
   1010                //Display daily_long_on
   1011              LCDInstr(0x01);
   1012              Delay1(1000);
   1013              line_lcd=0;
   1014              printf("\nLong :");
   1015          
   1016                do
   1017              {
   1018               line_lcd=1;
   1019               printf("\n%d",daily_long_on);
   1020                 //daily_long_on=adj(0,1440,daily_long_on);
   1021              } while (!key_ok_on());
   1022          
   1023              time_on=daily_hour_on*60+daily_minute_on;
   1024              time_off= daily_hour_off*60+daily_minute_off;
   1025              //Save data to eeprom
   1026                status.daily=1;
   1027               EEPROM_INIT();
   1028              //u8 temp =*(u8*)(&status);
   1029              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   1030               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1031               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1032               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   1033               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   1034               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   1035               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   1036               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1037          
   1038             return TRUE;
   1039          
   1040          }
   1041            */
   1042          

   \                                 In section .far_func.text, align 1, keep-with-next
   1043          void SaveStatus()
   1044          {
   1045            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     ?Subroutine74
   1046            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \                     ??CrossCallReturnLabel_206:
   \   000004 8D000000              CALLF     ?Subroutine54
   1047            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   \                     ??CrossCallReturnLabel_153:
   \   000008 CE0000                LDW       X, L:status
   \   00000B 9F                    LD        A, XL
   \   00000C AE4001                LDW       X, #0x4001
   \   00000F 8D000000              CALLF     ?Subroutine54
   1048            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_154:
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 AC000000              JPF       FLASH_Lock
   1049          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_185:
   \   000004 87                    RETF
   1050          
   1051          

   \                                 In section .far_func.text, align 1, keep-with-next
   1052          void SaveProgram ()
   1053          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
   1054               char *pp = (char*)&programpoint[0];
   1055              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1056             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1057             {
   1058              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 1C4002                ADDW      X, #0x4002
   \   000014 8D000000              CALLF     L:?sext32_l0_x
   \   000018 8D000000              CALLF     FLASH_ProgramByte
   1059             }
   \   00001C B600                  LD        A, S:?b8
   \   00001E 4C                    INC       A
   \   00001F B700                  LD        S:?b8, A
   \   000021 A128                  CP        A, #0x28
   \   000023 25E4                  JRC       L:??SaveProgram_0
   1060              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000025 A6F7                  LD        A, #0xf7
   \   000027 8D000000              CALLF     FLASH_Lock
   1061          }
   \   00002B 320000                POP       S:?b8
   \   00002E 87                    RETF
   1062          
   1063          

   \                                 In section .far_func.text, align 1, keep-with-next
   1064          void ReadProgram()
   1065          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1066              char *pp = (char*)&programpoint[0];
   1067            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1068             {
   1069               *(pp+i)=FLASH_ReadByte( EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1070             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A128                  CP        A, #0x28
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1071          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1072          
   1073          

   \                                 In section .far_func.text, align 1, keep-with-next
   1074          void ResetProgram()
   1075          {
   1076            /*
   1077            programpoint[8]=
   1078            {
   1079             {0x0A,0x00,0x00,0x00,0x00},
   1080             {0x00,0x00,0x00,0x00,0x00},
   1081             {0x00,0x00,0x00,0x00,0x00},
   1082             {0x00,0x00,0x00,0x00,0x00},
   1083             {0x00,0x00,0x00,0x00,0x00},
   1084             {0x00,0x00,0x00,0x00,0x00},
   1085             {0x00,0x00,0x00,0x00,0x00},
   1086             {0x00,0x00,0x00,0x00,0xFF},
   1087           };
   1088              */
   1089          }
   \                     ResetProgram:
   \   000000 87                    RETF
   1090          

   \                                 In section .far_func.text, align 1, keep-with-next
   1091          bool Read_Allarm()
   1092          {
   1093             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1094              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1095             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1096              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1097             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1098              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1099             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1100              if(daily_hour_off > 59) return FALSE;
   1101             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1102              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1103             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1104              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1105             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1106              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1107            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1108          }
   1109          

   \                                 In section .far_func.text, align 1, keep-with-next
   1110          void EEPROM_INIT()
   1111          {
   1112            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1113            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1114            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1115          
   1116          
   1117          
   1118          }
   1119          
   1120          

   \                                 In section .far_func.text, align 1, keep-with-next
   1121          void GpioConfiguration()
   1122          {
   1123          
   1124            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1125          
   1126            // ADC PE6 NEW PB0
   1127            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1128          
   1129            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1130            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1131          
   1132            //PD0 Led
   1133            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine60
   1134            //I2C
   1135            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_175:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1136            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine63
   1137            // Remap Pins pb4,pb5  sda,scl ;
   1138          
   1139             //Init KEY OK,PLUS,MINUS
   1140            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_182:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine63
   1141            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_183:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine63
   1142            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_184:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1143          
   1144            //Init DS18b20 data pin
   1145            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine60
   1146          
   1147            // Power Pin
   1148             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_174:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine60
   1149          
   1150            // lcdLed Pin
   1151             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_LOW_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_173:
   \   00006B 35800000              MOV       S:?b0, #0x80
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1152          
   1153          
   1154          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1155          

   \                                 In section .far_func.text, align 1, keep-with-next
   1156          void InitClk()
   1157          {
   1158            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1159            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1160            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1161            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1162            CLK_SOURCE_HSI,       // Switch to internal timer.
   1163            DISABLE,              // Disable the clock switch interrupt.
   1164            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1165          
   1166            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine61
   1167            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_176:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine61
   1168            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_177:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine61
   1169            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_178:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine61
   1170            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_179:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1171          
   1172          
   1173          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1174          
   1175          
   1176          /*
   1177          void InitAdc()
   1178          {
   1179               ADC1_DeInit();
   1180               ADC1_StartConversion();
   1181          
   1182               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1183               //           ADC1_CHANNEL_0,
   1184               //           ADC1_PRESSEL_FCPU_D4,
   1185               //            ADC1_EXTTRIG_TIM,
   1186          
   1187          
   1188               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1189               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1190                                      ADC1_CHANNEL_0,
   1191                                      ADC1_ALIGN_RIGHT
   1192                                     );
   1193          
   1194          
   1195               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1196          
   1197          
   1198               //ADC1_Cmd (ENABLE);
   1199               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1200               ADC1_StartConversion();
   1201               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1202          
   1203          }
   1204          */
   1205          
   1206          
   1207          
   1208          /*
   1209          void InitUart()
   1210          {
   1211             UART2_DeInit();
   1212             UART2_Init((u32)9600,
   1213                        UART2_WORDLENGTH_8D,
   1214                        UART2_STOPBITS_1,
   1215                        UART2_PARITY_NO,
   1216                        UART2_SYNCMODE_CLOCK_DISABLE,
   1217                        UART2_MODE_TXRX_ENABLE
   1218                          );
   1219          
   1220             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1221             UART2_Cmd(ENABLE);
   1222          
   1223            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1224          }
   1225            */
   1226          
   1227          
   1228          /*
   1229          void SendChar( u8 Char)
   1230          {
   1231             UART2->DR = Char;
   1232            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1233          }
   1234          
   1235           */
   1236          
   1237           /*
   1238          void Send_Hello()
   1239          {
   1240            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1241             Delay1(10);
   1242             sprintf(data,"Hello");
   1243              u8 i=0;
   1244            do
   1245           {
   1246            SendChar(data[i++]);
   1247           } while (data[i]!=0);
   1248            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1249            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1250          
   1251          
   1252          
   1253          }
   1254          
   1255          
   1256          
   1257          
   1258          
   1259          void SendData()
   1260          {
   1261           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1262            Delay1(10);
   1263            u8 i=0;
   1264            sprintf(data,"%d %c",adcdata,0x0d);
   1265           do
   1266           {
   1267             SendChar(data[i++]);
   1268          
   1269           } while (data[i]!=0);
   1270             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1271            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1272            rx_data=0;
   1273          }
   1274          */
   1275          
   1276          
   1277           /*
   1278          u16 Average()
   1279          {
   1280           //Find average in measure
   1281            u8 i=0;
   1282            u16 Summa=0;
   1283            do
   1284            {
   1285             Summa+=measure[i++];
   1286            } while ( measure[i]!=0);
   1287             if(i!=0) Summa=Summa/i;
   1288             return Summa;
   1289          }
   1290             */
   1291          

   \                                 In section .far_func.text, align 1, keep-with-next
   1292          void LCDDataOut(u8 data)
   1293          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1294            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_25:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_261
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine87_0
   1295            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_261:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_24:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_262
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine87_0
   1296            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_262:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_23:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_263
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine87_0
   1297            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_263:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_22:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_264
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine87_0
   1298          }
   \                     ??CrossCallReturnLabel_264:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_269:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1299          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_213:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine87_0
   \   000002                       ;               // Fall through to label ??Subroutine87_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1300          void InitLcd()
   1301          {
   1302           LCD_EN(0);
   \                     InitLcd:
   \   000000 8D000000              CALLF     ?Subroutine10
   1303            LCD_RW(0);
   \                     ??CrossCallReturnLabel_19:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ??Subroutine87_0
   1304            LCD_RS(0);
   \                     ??CrossCallReturnLabel_268:
   \   00000A 8D000000              CALLF     ??Subroutine86_0
   1305            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_260:
   \   00000E AE0FA0                LDW       X, #0xfa0
   \   000011 8D000000              CALLF     ?Subroutine15
   1306          
   1307            LCDInstrNibble(0x03);
   1308             Delay1(10);
   1309            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_31:
   \   000015 A603                  LD        A, #0x3
   \   000017 8D000000              CALLF     LCDInstrNibble
   1310             Delay1(10);
   \   00001B AE000A                LDW       X, #0xa
   \   00001E 8D000000              CALLF     ?Subroutine15
   1311            LCDInstrNibble(0x03);
   1312             Delay1(10);
   1313          
   1314             //Line 4
   1315            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_30:
   \   000022 A602                  LD        A, #0x2
   \   000024 8D000000              CALLF     LCDInstrNibble
   1316            LCDInstrNibble(0x02);
   \   000028 A602                  LD        A, #0x2
   \   00002A 8D000000              CALLF     LCDInstrNibble
   1317            LCDInstrNibble(0x08);
   \   00002E A608                  LD        A, #0x8
   \   000030 8D000000              CALLF     LCDInstrNibble
   1318            Delay1(100);
   \   000034 AE0064                LDW       X, #0x64
   \   000037 8D000000              CALLF     Delay1
   1319          
   1320            LCDInstr(0x0C);
   \   00003B A60C                  LD        A, #0xc
   \   00003D 8D000000              CALLF     LCDInstr
   1321            Delay1(10);
   \   000041 AE000A                LDW       X, #0xa
   \   000044 8D000000              CALLF     Delay1
   1322          
   1323            LCDInstr(0x01) ;
   \   000048 8D000000              CALLF     ?Subroutine21
   1324            Delay1(250);
   1325          
   1326            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_39:
   \   00004C A606                  LD        A, #0x6
   \   00004E 8D000000              CALLF     LCDInstr
   1327            Delay1(10);
   \   000052 AE000A                LDW       X, #0xa
   \   000055 AC000000              JPF       Delay1
   1328          
   1329          
   1330          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_197:
   \   000004 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_270:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 A608                  LD        A, #0x8
   \   000002                       REQUIRE ??Subroutine88_0
   \   000002                       ;               // Fall through to label ??Subroutine88_0
   1331          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_265:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_220:
   \   00000D                       REQUIRE ??Subroutine80_0
   \   00000D                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_219:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1332          void LCDInstr(u8 Instr)
   1333          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine11
   1334            LCD_RS(0);
   1335            LCD_RW(0);
   \                     ??CrossCallReturnLabel_257:
   \   000007 2000                  JRA       ?Subroutine0
   1336            LCDDataOut(Instr>>4);
   1337            PulseEnable();
   1338            LCDDataOut(Instr & 0x0F);
   1339            PulseEnable();
   1340          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 B700                  LD        S:?b8, A
   \   000002                       REQUIRE ??Subroutine86_0
   \   000002                       ;               // Fall through to label ??Subroutine86_0
   1341          

   \                                 In section .far_func.text, align 1, keep-with-next
   1342          void LCDData(u8 Data)
   1343          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1344            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1345            LCD_RW(0);
   \                     ??CrossCallReturnLabel_21:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1346            LCDDataOut(Data>>4);
   1347            PulseEnable() ;
   1348            LCDDataOut(Data & 0x0F) ;
   1349            PulseEnable();
   1350          }
   1351          

   \                                 In section .far_func.text, align 1, keep-with-next
   1352          void LCDInstrNibble(u8 Instr)
   1353          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine11
   1354            LCD_RS(0);
   1355            LCD_RW(0);
   \                     ??CrossCallReturnLabel_258:
   \   000007 A602                  LD        A, #0x2
   \   000009 8D000000              CALLF     ??Subroutine87_0
   1356            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_267:
   \   00000D AC000000              JPF       ??Subroutine80_0
   1357            PulseEnable();
   1358          }
   1359          

   \                                 In section .far_func.text, align 1, keep-with-next
   1360          void PulseEnable(void)
   1361          {
   1362            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1363             Delay1(1);
   1364            LCD_EN(1);
   1365             Delay1(1);
   1366            LCD_EN(0);
   \                     ??CrossCallReturnLabel_7:
   \   000004 8D000000              CALLF     ?Subroutine10
   1367             Delay1(1);
   \                     ??CrossCallReturnLabel_18:
   \   000008 5F                    CLRW      X
   \   000009 5C                    INCW      X
   \   00000A AC000000              JPF       Delay1
   1368          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_271:
   \   000004 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_248:
   \   000008 A608                  LD        A, #0x8
   \   00000A AE500A                LDW       X, #0x500a
   \   00000D 8D000000              CALLF     GPIO_WriteHigh
   \   000011 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_247:
   \   000015 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1369          

   \                                 In section .far_func.text, align 1, keep-with-next
   1370          void LCD_Busy(void)
   1371          {
   1372             //set Port D7 as Input
   1373             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1374             //Set Read
   1375             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1376             LCD_RS(0);
   \                     ??CrossCallReturnLabel_20:
   \   000013 8D000000              CALLF     ??Subroutine86_0
   1377             // Read Busy Flag
   1378                timer2=0;
   \                     ??CrossCallReturnLabel_259:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1379             do
   1380             {
   1381             // Enable set
   1382               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1383                Delay1(1);
   1384               LCD_EN(1);
   1385                Delay1(1);
   1386             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_8:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1387                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1388                //Clear read
   1389              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine87_0
   1390             //set Port D7 as Output
   1391             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_266:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1392          
   1393          }
   1394          
   1395          

   \                                 In section .far_func.text, align 1, keep-with-next
   1396          void LCD(u8 data)
   1397           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1398             //  static u8 linet=0;
   1399          
   1400          
   1401               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2674                  JRNE      L:??CrossCallReturnLabel_245
   1402               {
   1403          
   1404                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 272C                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2735                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 273E                  JREQ      L:??LCD_3
   \   000018 2046                  JRA       L:??LCD_4
   1405                   {
   1406                   case 0:
   1407                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1408                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1409                      {
   1410                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1411                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     ?Subroutine9
   1412                         Delay1(1);
   1413                      }
   \                     ??CrossCallReturnLabel_242:
   \   000030 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_36:
   \   000034 25EC                  JRC       L:??LCD_5
   1414                     LCDInstr(0x80 | 0x00);
   \   000036 A680                  LD        A, #0x80
   \   000038 8D000000              CALLF     ?Subroutine69
   1415                     count=0;
   1416                     break;
   \                     ??CrossCallReturnLabel_192:
   \   00003C 2022                  JRA       L:??LCD_4
   1417                   case 1:
   1418                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00003E A6C0                  LD        A, #0xc0
   \   000040 8D000000              CALLF     LCDInstr
   1419                     count=20;
   \   000044 35140000              MOV       L:count, #0x14
   1420                     break;
   \   000048 2016                  JRA       L:??LCD_4
   1421                   case 2:
   1422                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004A A694                  LD        A, #0x94
   \   00004C 8D000000              CALLF     LCDInstr
   1423                     count=40;
   \   000050 35280000              MOV       L:count, #0x28
   1424                     break;
   \   000054 200A                  JRA       L:??LCD_4
   1425                   case 3:
   1426                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000056 A6D4                  LD        A, #0xd4
   \   000058 8D000000              CALLF     LCDInstr
   1427                     count=60;
   \   00005C 353C0000              MOV       L:count, #0x3c
   1428                     break;
   1429                   //default:
   1430                    //  LCDInstr(0x80 |0x40);    //Line 1
   1431                    }
   1432                   line_lcd++;
   \                     ??LCD_4:
   \   000060 C60000                LD        A, L:line_lcd
   \   000063 4C                    INC       A
   \   000064 C70000                LD        L:line_lcd, A
   1433                   if (line_lcd>=5)
   \   000067 A105                  CP        A, #0x5
   \   000069 250F                  JRC       L:??LCD_6
   1434                   {
   1435                    line_lcd=1;   //line >=5
   \   00006B 35010000              MOV       L:line_lcd, #0x1
   1436                    LCDInstr(0x01); //Clear LCD
   \   00006F 8D000000              CALLF     ?Subroutine78
   1437                    Delay1(2500);
   \                     ??CrossCallReturnLabel_216:
   \   000073 AE09C4                LDW       X, #0x9c4
   \   000076 8D000000              CALLF     Delay1
   1438                   }
   1439          
   1440                   Delay1(1);
   \                     ??LCD_6:
   \   00007A 8D000000              CALLF     ??Subroutine84_0
   1441          
   1442          
   1443               }
   1444          
   1445          
   1446               if (count==20)
   \                     ??CrossCallReturnLabel_245:
   \   00007E C60000                LD        A, L:count
   \   000081 A114                  CP        A, #0x14
   \   000083 260A                  JRNE      L:??LCD_7
   1447                {
   1448                  LCDInstr(0x80 | 0x40);
   \   000085 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   000087 8D000000              CALLF     LCDInstr
   1449                  Delay1(1);
   \                     ??LCD_9:
   \   00008B 5F                    CLRW      X
   \   00008C 5C                    INCW      X
   \   00008D 2020                  JRA       ??CrossCallReturnLabel_195
   1450                }
   1451                   else if(count==40)
   \                     ??LCD_7:
   \   00008F A128                  CP        A, #0x28
   \   000091 2604                  JRNE      L:??LCD_10
   1452                  {
   1453                    LCDInstr(0x80 | 0x14);
   \   000093 A694                  LD        A, #0x94
   \   000095 20F0                  JRA       ??LCD_8
   1454                    Delay1(1);
   1455                  }
   1456                    else if(count==60)
   \                     ??LCD_10:
   \   000097 A13C                  CP        A, #0x3c
   \   000099 2608                  JRNE      L:??LCD_11
   1457                    {
   1458                      LCDInstr(0x80 | 0x54);
   \   00009B A6D4                  LD        A, #0xd4
   \   00009D 8D000000              CALLF     ?Subroutine69
   1459                      count=0;
   1460                      Delay1(1);
   \                     ??CrossCallReturnLabel_193:
   \   0000A1 20E8                  JRA       ??LCD_9
   1461                    }
   1462                      else if(count >80)
   \                     ??LCD_11:
   \   0000A3 A151                  CP        A, #0x51
   \   0000A5 250C                  JRC       L:??LCD_12
   1463                        {
   1464                          count=0;
   \   0000A7 725F0000              CLR       L:count
   1465                          LCDInstr(0x01); //Clear LCD
   \   0000AB 8D000000              CALLF     ?Subroutine70
   1466                          Delay1(250);
   1467                        }
   \                     ??CrossCallReturnLabel_195:
   \   0000AF 8D000000              CALLF     Delay1
   1468          
   1469               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B3 B600                  LD        A, S:?b9
   \   0000B5 A11C                  CP        A, #0x1c
   \   0000B7 250B                  JRC       L:??LCD_13
   1470               {
   1471                 LCDData(data);
   \   0000B9 8D000000              CALLF     ?Subroutine9
   1472                  Delay1(1);
   1473                 count++;
   \                     ??CrossCallReturnLabel_243:
   \   0000BD C60000                LD        A, L:count
   \   0000C0 4C                    INC       A
   \   0000C1 C70000                LD        L:count, A
   1474               }
   1475           }
   \                     ??LCD_13:
   \   0000C4 AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine84_0
   \   000004                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_249:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1476          

   \                                 In section .far_func.text, align 1, keep-with-next
   1477          void InitDelayTimer2()
   1478          {
   1479             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1480             //Tclock 16/8=2Mhz  /20 10us
   1481                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1482                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1483                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1484                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1485                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1486          
   1487          }
   1488          

   \                                 In section .far_func.text, align 1, keep-with-next
   1489          void InitDelayTimer3()
   1490          {
   1491             //Timer 3 use for 1s Delay
   1492             //Tclock 16000000/1024=15626
   1493                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1494                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1495                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1496                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1497          
   1498               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1499          
   1500          }
   1501          
   1502          
   1503          
   1504          

   \                                 In section .far_func.text, align 1, keep-with-next
   1505          bool DS18_Write(u8 data)
   1506          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1507            disableInterrupts();
   \   000006 9B                    SIM
   1508            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1509            {
   1510             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine13
   1511             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1512             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_27:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_256
   \   00001A 8D000000              CALLF     ?Subroutine20
   1513               //else DS18(0);
   1514             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_256:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1515             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine20
   1516             //Delay1(0);
   1517            }
   \                     ??CrossCallReturnLabel_255:
   \   000029 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_37:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1518            enableInterrupts();
   \   00002F 9A                    RIM
   1519            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1520          
   1521          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine85_0
   \   000002                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_188:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1522          
   1523          

   \                                 In section .far_func.text, align 1, keep-with-next
   1524          u8  DS18_Read()
   1525          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1526              //Init DS18b20 data pin as Input
   1527          
   1528            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1529              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1530            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1531            {
   1532              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine13
   1533              Delay_us(1); //Start time slot 4,5 us
   1534              DS18(1);
   \                     ??CrossCallReturnLabel_26:
   \   00000D 8D000000              CALLF     ?Subroutine20
   1535              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_253:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1536              //Delay1(0);
   1537             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_43:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1538              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1539              //  DS18(1);  // Next bit
   1540             // Delay1(0);
   1541          
   1542            }
   \   00003D 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_38:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1543              enableInterrupts();
   \   000043 9A                    RIM
   1544              //Init DS18b20 data pin
   1545             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1546             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1547          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1548          

   \                                 In section .far_func.text, align 1, keep-with-next
   1549          bool DS18_Reset()
   1550          {
   1551             //Init Reset Pulse
   1552              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine67
   1553              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_189:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1554              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine20
   1555              //Delay1(1);
   1556              timer2=0;
   \                     ??CrossCallReturnLabel_254:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1557              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_89:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_41:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1558              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_90:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1559              {
   1560                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine41
   1561                return FALSE;
   \                     ??CrossCallReturnLabel_99:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1562              }
   1563          
   1564              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1565               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_91:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_42:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1566                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_92:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1567                 {
   1568                  hardware.ds18B20=0;
   1569                  return FALSE;
   1570                 }
   1571          
   1572              // Delay1(10);
   1573              //Delay1(20);    //25=524us
   1574               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine42
   1575              return TRUE;
   \                     ??CrossCallReturnLabel_101:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1576          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1577          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1578          u8 temperature ()
   1579          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1580          
   1581             //Init Reset Pulse
   1582               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_171:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1583             //Skip ROM Command 0xCC
   1584              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine58
   1585             //Function command  CONVERT T [44h]
   1586              DS18_Write(0x44);
   1587              //Wait util end convert
   1588              timer2=0;
   1589               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_166:
   \   000013 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_94:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_166
   1590                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1591               //u8 temp8=timer2;
   1592              //Init Reset Pulse
   1593              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_172:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1594              // Skip ROM Command 0xCC
   1595              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine57
   1596              //Function command READ SCRATCHPAD [BEh]
   1597              DS18_Write(0xBE);
   1598               u8 temp1=DS18_Read();
   1599               u8 temp2=DS18_Read();
   1600              DS18_Reset();
   \                     ??CrossCallReturnLabel_164:
   \   000033 8D000000              CALLF     DS18_Reset
   1601                u16 result = temp2*256+temp1;
   1602                temp1= (u8)(result>>3);
   1603               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1604          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_208:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_207:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine90_0
   \                     ??CrossCallReturnLabel_278:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1605          

   \                                 In section .far_func.text, align 1, keep-with-next
   1606          bool Read_DS18()
   1607          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1608          
   1609             //Init Reset Pulse
   1610               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_169:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1611             //Skip ROM Command 0xCC
   1612              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine58
   1613             //Function command  CONVERT T [44h]
   1614              DS18_Write(0x44);
   1615              //Wait util end convert
   1616              timer2=0;
   1617               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_165:
   \   000013 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_93:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_165
   1618                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1619               //u8 temp8=timer2;
   1620              //Init Reset Pulse
   1621              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_170:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1622              // Skip ROM Command 0xCC
   1623              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine57
   1624              //Function command READ SCRATCHPAD [BEh]
   1625              DS18_Write(0xBE);
   1626               u8 temp1=DS18_Read();
   1627               u8 temp2=DS18_Read();
   1628               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_163:
   \   000033 8D000000              CALLF     ?Subroutine62
   1629               u8 temp4=DS18_Read();
   1630               u8 temp5=DS18_Read();
   1631               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_181:
   \   000037 8D000000              CALLF     ?Subroutine62
   1632               u8 temp7=DS18_Read();
   1633               u8 temp8=DS18_Read();
   1634               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_180:
   \   00003B 8D000000              CALLF     DS18_Read
   1635          
   1636               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1637          
   1638                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1639                result2=0;
   \   000047 725F0000              CLR       L:result2
   1640                u16 result = temp2*256+temp1;
   1641                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   00004F C70000                LD        L:result1, A
   1642                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1643                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1644          
   1645          
   1646                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1647               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1648               //line_lcd=1;
   1649               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1650               // while (!key_ok_on());
   1651          
   1652               //u8 temp3=DS18_Read();
   1653          
   1654              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1655          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1656          

   \                                 In section .far_func.text, align 1, keep-with-next
   1657          bool DS18Set ()
   1658          {
   1659               //Init Reset Pulse
   1660              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_167:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1661             //Skip ROM Command 0xCC
   1662              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine75
   1663             //Function command  WRITE SCRATCHPAD 0x4E
   1664              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_210:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1665             //Write 3 bytes last is config reg
   1666              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1667              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1668              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1669          
   1670             //Init Reset Pulse
   1671              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_168:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1672              //Skip ROM Command 0xCC
   1673              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine75
   1674              //Function   Store in Conf Reg
   1675              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_209:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1676          
   1677          
   1678          
   1679          
   1680          
   1681          
   1682            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1683          }
   1684          
   1685          
   1686          
   1687          
   1688          
   1689          
   1690          
   1691          

   \                                 In section .far_func.text, align 1, keep-with-next
   1692          void Delay1(u16 Delay)
   1693          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1694              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1695            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1696            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1697          }
   \   00000D 87                    RETF
   1698          

   \                                 In section .far_func.text, align 1, keep-with-next
   1699           void Delay2(u16 Delay)
   1700          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1701            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1702            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1703          }
   \   00000D 87                    RETF
   1704          
   1705          

   \                                 In section .far_func.text, align 1, keep-with-next
   1706          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1707          {
   1708            //disableInterrupts();
   1709            do
   1710              {
   1711                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1712                nop();
   \   000001 9D                    NOP
   1713              }
   1714              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1715            //enableInterrupts();
   1716          }
   \   000005 87                    RETF
   1717          
   1718          

   \                                 In section .far_func.text, align 1, keep-with-next
   1719          void Display_Line(char* line)
   1720          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1721            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1722            u8 count;
   1723              //Set Cursor to First Line
   1724             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1725             count=0;
   \   000010 3F00                  CLR       S:?b10
   1726             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine84_0
   1727            do
   1728            {
   1729          
   1730              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_246:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1731               {
   1732                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine9
   1733                  Delay1(1);
   1734                 count++;
   \                     ??CrossCallReturnLabel_244:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1735               }
   1736               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1737            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_246
   1738          
   1739             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1740          
   1741          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1742          

   \                                 In section .far_func.text, align 1, keep-with-next
   1743          void Rotate_Line( char * line)
   1744          {
   1745          
   1746             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1747             char temp_next;
   1748          
   1749             do
   1750             {
   1751                temp_next=*(line+1);
   1752               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1753                //line++;
   1754                //temp_next=*line;
   1755               //*line=*line++;
   1756             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1757             line--;
   1758             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1759          
   1760          }
   \   000012 87                    RETF
   1761          

   \                                 In section .far_func.text, align 1, keep-with-next
   1762          void Clear_Line1 ()
   1763          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1764               //Set Cursor to First Line
   1765             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine8
   1766             count=0;
   1767             Delay1(1);
   1768              u8 count=0;
   1769             do
   1770             {
   1771               LCDData(' ');
   \                     ??CrossCallReturnLabel_17:
   \   000009 8D000000              CALLF     ?Subroutine7
   1772                  Delay1(1);
   1773                  count++;
   1774             }while (count<8);
   \                     ??CrossCallReturnLabel_15:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_17
   1775          
   1776          
   1777          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_194:
   \   000004 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_251:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_250:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1778          

   \                                 In section .far_func.text, align 1, keep-with-next
   1779          void Clear_Line2 ()
   1780          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1781               //Set Cursor to Second  Line
   1782             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine8
   1783             count=0;
   1784             Delay1(1);
   1785              u8 count=0;
   1786             do
   1787             {
   1788               LCDData(' ');
   \                     ??CrossCallReturnLabel_16:
   \   000009 8D000000              CALLF     ?Subroutine7
   1789                  Delay1(1);
   1790                  count++;
   1791             }while (count<8);
   \                     ??CrossCallReturnLabel_14:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_16
   1792          
   1793          
   1794          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1795          
   1796          
   1797          

   \                                 In section .far_func.text, align 1, keep-with-next
   1798          void FirstMenu()
   1799          {
   1800                // Clear Display
   1801              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_196:
   \   000004 8D000000              CALLF     ??Subroutine82_0
   1802              Delay1(250);
   1803          
   1804                line_lcd=0;
   1805                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_236:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1806                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine29
   1807                 if (!status.manu)
   \                     ??CrossCallReturnLabel_57:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1808                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1809                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1810          
   1811                 do
   1812                 {
   1813                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     pressKey
   1814          
   1815                  if(button==2)      // Plus Button
   \   000025 C60000                LD        A, L:button
   \   000028 A102                  CP        A, #0x2
   \   00002A 262C                  JRNE      L:??FirstMenu_3
   1816                  {
   1817                    if(status.manu) status.manu=0;
   \   00002C CE0000                LDW       X, L:status
   \   00002F 9F                    LD        A, XL
   \   000030 A401                  AND       A, #0x1
   \   000032 2708                  JREQ      L:??FirstMenu_4
   \   000034 CE0000                LDW       X, L:status
   \   000037 01                    RRWA      X, A
   \   000038 A4FE                  AND       A, #0xfe
   \   00003A 2006                  JRA       ??FirstMenu_5
   1818                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   00003C CE0000                LDW       X, L:status
   \   00003F 01                    RRWA      X, A
   \   000040 AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   000042 02                    RLWA      X, A
   \   000043 CF0000                LDW       L:status, X
   1819                    line_lcd=1;
   \   000046 8D000000              CALLF     ?Subroutine29
   1820                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_58:
   \   00004A 2705                  JREQ      L:??FirstMenu_6
   \   00004C AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004F 2003                  JRA       ??FirstMenu_7
   1821                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   000051 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   000054 8D000000              CALLF     printf
   1822                  }
   1823          
   1824                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000058 C60000                LD        A, L:button
   \   00005B A103                  CP        A, #0x3
   \   00005D 2705                  JREQ      L:??FirstMenu_8
   \   00005F C60000                LD        A, L:button
   \   000062 2604                  JRNE      L:??FirstMenu_9
   1825                  {
   1826                    SaveStatus();
   \                     ??FirstMenu_8:
   \   000064 AC000000              JPF       SaveStatus
   1827                    return;
   1828                  }
   1829          
   1830          
   1831                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000068 A101                  CP        A, #0x1
   \   00006A 26B5                  JRNE      L:??FirstMenu_2
   1832          
   1833                   SaveStatus();
   \   00006C 8D000000              CALLF     SaveStatus
   1834                   button=0;
   \   000070 725F0000              CLR       L:button
   1835                   ProgramMenu();
   1836          
   1837          
   1838          }
   \   000074 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 CE0000                LDW       X, L:status
   \   000007 9F                    LD        A, XL
   \   000008 A501                  BCP       A, #0x1
   \   00000A 87                    RETF
   1839          
   1840          
   1841          

   \                                 In section .far_func.text, align 1, keep-with-next
   1842          void ProgramMenu()
   1843          {
   1844            return;
   \                     ProgramMenu:
   \   000000 87                    RETF
   1845          }
   1846          
   1847          
   1848          

   \                                 In section .far_func.text, align 1, keep-with-next
   1849          void Menu (void)
   1850          {
   1851           // Clear Display
   1852              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine21
   1853              Delay1(250);
   1854              //u8 key;
   1855           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1856              Wait for Plus,Minius or OK
   1857              If plus next option from Menu on the end EXIT
   1858              If minus previous option from Menu  on the end EXIT
   1859              If OK enter to menu option
   1860              If time out about 10s exit from Menu
   1861           */
   1862          
   1863          
   1864          
   1865          
   1866          
   1867          
   1868              do {
   1869          
   1870          First_Menu:
   1871              line_lcd=0;
   \                     ??CrossCallReturnLabel_40:
   \   000004 725F0000              CLR       L:line_lcd
   1872              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1873              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine28
   1874              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_56:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1875               pressKey();
   \   000022 8D000000              CALLF     ?Subroutine56
   1876              switch (button)
   \                     ??CrossCallReturnLabel_157:
   \   000026 2713                  JREQ      L:??Menu_0
   \   000028 4A                    DEC       A
   \   000029 2709                  JREQ      L:??Menu_1
   \   00002B 4A                    DEC       A
   \   00002C 2603                  JRNE      ??lb_0
   \   00002E CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000031 CC0000                JP        L:??Menu_3
   1877                  {
   1878                  case 1: goto Second_Menu ;
   1879                   break;
   1880                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000034 8D000000              CALLF     Set_Timer_On
   1881                   break;
   \   000038 CC0000                JP        L:??Menu_3
   1882                  case 3: goto Exit_Menu;
   1883                   break;
   1884                  }
   1885                  break; //Exit Menu
   1886          
   1887          
   1888          Second_Menu:
   1889              line_lcd=0;
   \                     ??Menu_0:
   \   00003B 725F0000              CLR       L:line_lcd
   1890              printf("\nOFF     ");
   \   00003F AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000042 8D000000              CALLF     printf
   1891              line_lcd=1;
   \   000046 8D000000              CALLF     ?Subroutine27
   1892              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_53:
   \   00004A 89                    PUSHW     X
   \   00004B C60000                LD        A, L:daily_hour_off
   \   00004E 97                    LD        XL, A
   \   00004F 89                    PUSHW     X
   \   000050 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000053 8D000000              CALLF     printf
   \   000057 5B04                  ADD       SP, #0x4
   1893                pressKey();
   \   000059 8D000000              CALLF     ?Subroutine56
   1894                switch (button)
   \                     ??CrossCallReturnLabel_158:
   \   00005D 2710                  JREQ      L:??Menu_4
   \   00005F 4A                    DEC       A
   \   000060 2706                  JREQ      L:??Menu_5
   \   000062 4A                    DEC       A
   \   000063 279F                  JREQ      L:??CrossCallReturnLabel_40
   \   000065 CC0000                JP        L:??Menu_3
   1895                  {
   1896                  case 1: goto Third_Menu ;
   1897                   break;
   1898                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   000068 8D000000              CALLF     Set_Timer_Off
   1899                   break;
   \   00006C CC0000                JP        L:??Menu_3
   1900                  case 3: goto First_Menu;
   1901                   break;
   1902                  }
   1903               break; //Exit Menu
   1904          
   1905          Third_Menu:
   1906                line_lcd=0;
   \                     ??Menu_4:
   \   00006F 725F0000              CLR       L:line_lcd
   1907              printf("\nMonthly ");
   \   000073 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000076 8D000000              CALLF     printf
   1908              line_lcd=1;
   \   00007A 35010000              MOV       L:line_lcd, #0x1
   1909              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \   00007E C60000                LD        A, L:monthly_date
   \   000081 5F                    CLRW      X
   \   000082 97                    LD        XL, A
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:monthly_month
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:monthly_year
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
   1910                pressKey();
   \   000097 8D000000              CALLF     ?Subroutine56
   1911                switch (button)
   \                     ??CrossCallReturnLabel_159:
   \   00009B 2738                  JREQ      L:??Menu_6
   \   00009D 4A                    DEC       A
   \   00009E 2706                  JREQ      L:??Menu_7
   \   0000A0 4A                    DEC       A
   \   0000A1 2798                  JREQ      L:??Menu_0
   \   0000A3 CC0000                JP        L:??Menu_3
   1912                  {
   1913                  case 1: goto Fourth_Menu;
   1914                   break;
   1915                  case 2:
   1916                    {
   1917                     setData();
   \                     ??Menu_7:
   \   0000A6 8D000000              CALLF     setData
   1918                     monthly_year=y;
   \   0000AA C60000                LD        A, L:`y`
   \   0000AD C70000                LD        L:monthly_year, A
   1919                     monthly_month=m;
   \   0000B0 C60000                LD        A, L:m
   \   0000B3 C70000                LD        L:monthly_month, A
   1920                     monthly_date=d;
   \   0000B6 C60000                LD        A, L:d
   \   0000B9 C70000                LD        L:monthly_date, A
   1921                     status.monthly=1;
   \   0000BC CE0000                LDW       X, L:status
   \   0000BF 01                    RRWA      X, A
   \   0000C0 AA10                  OR        A, #0x10
   \   0000C2 8D000000              CALLF     ?Subroutine73
   1922                     status.daily=0;  // Disable Daily Alarm On date enable it
   \                     ??CrossCallReturnLabel_202:
   \   0000C6 A4F7                  AND       A, #0xf7
   \   0000C8 8D000000              CALLF     ?Subroutine73
   1923                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_203:
   \   0000CC A4FD                  AND       A, #0xfd
   \   0000CE 8D000000              CALLF     ?Subroutine1
   1924                     // Save Status and Date in EEPROM
   1925                     EEPROM_INIT();
   1926                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1927                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1928                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   1929                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   1930                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   1931                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1932                     break;
   \                     ??CrossCallReturnLabel_0:
   \   0000D2 CC0000                JP        L:??Menu_3
   1933                    }
   1934                  case 3: goto Second_Menu ;
   1935                   break;
   1936                  }
   1937               break; //Exit Menu
   1938          
   1939          
   1940          Fourth_Menu:
   1941              line_lcd=0;
   \                     ??Menu_6:
   \   0000D5 725F0000              CLR       L:line_lcd
   1942              printf("\nClock   ");
   \   0000D9 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000DC 8D000000              CALLF     ?Subroutine24
   1943              line_lcd=1;
   1944              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_237:
   \   0000E0 89                    PUSHW     X
   \   0000E1 C60000                LD        A, L:minutes
   \   0000E4 97                    LD        XL, A
   \   0000E5 89                    PUSHW     X
   \   0000E6 C60000                LD        A, L:hours
   \   0000E9 97                    LD        XL, A
   \   0000EA 89                    PUSHW     X
   \   0000EB AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EE 8D000000              CALLF     printf
   \   0000F2 5B06                  ADD       SP, #0x6
   1945                pressKey();
   \   0000F4 8D000000              CALLF     ?Subroutine56
   1946                switch (button)
   \                     ??CrossCallReturnLabel_160:
   \   0000F8 2711                  JREQ      L:??Menu_8
   \   0000FA 4A                    DEC       A
   \   0000FB 2708                  JREQ      L:??Menu_9
   \   0000FD 4A                    DEC       A
   \   0000FE 2603                  JRNE      ??lb_1
   \   000100 CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   000103 205A                  JRA       L:??Menu_3
   1947                  {
   1948                  case 1: goto Fifth_Menu ;
   1949                   break;
   1950                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000105 8D000000              CALLF     Set_Clock
   1951                   break;
   \   000109 2054                  JRA       L:??Menu_3
   1952                  case 3: goto Third_Menu;
   1953                   break;
   1954                  }
   1955               break; //Exit Menu
   1956          
   1957          
   1958          Fifth_Menu:
   1959              line_lcd=0;
   \                     ??Menu_8:
   \   00010B 725F0000              CLR       L:line_lcd
   1960              printf("\nDate    ");
   \   00010F AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   000112 8D000000              CALLF     printf
   1961              line_lcd=1;
   \   000116 8D000000              CALLF     ?Subroutine25
   1962              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_47:
   \   00011A 89                    PUSHW     X
   \   00011B C60000                LD        A, L:month
   \   00011E 97                    LD        XL, A
   \   00011F 89                    PUSHW     X
   \   000120 C60000                LD        A, L:year
   \   000123 97                    LD        XL, A
   \   000124 89                    PUSHW     X
   \   000125 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000128 8D000000              CALLF     printf
   \   00012C 5B06                  ADD       SP, #0x6
   1963                pressKey();
   \   00012E 8D000000              CALLF     ?Subroutine56
   1964                switch (button)
   \                     ??CrossCallReturnLabel_161:
   \   000132 2708                  JREQ      L:??Menu_2
   \   000134 4A                    DEC       A
   \   000135 27CE                  JREQ      L:??Menu_9
   \   000137 4A                    DEC       A
   \   000138 279B                  JREQ      L:??Menu_6
   \   00013A 2023                  JRA       L:??Menu_3
   1965                  {
   1966                  case 1: goto Exit_Menu ;
   1967                   break;
   1968                  case 2: Set_Clock();
   1969                   break;
   1970                  case 3: goto Fourth_Menu;
   1971                   break;
   1972                  }
   1973               break; //Exit Menu
   1974          
   1975          
   1976          Exit_Menu:
   1977              line_lcd=0;
   \                     ??Menu_2:
   \   00013C 725F0000              CLR       L:line_lcd
   1978              printf("\nExit OK ");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000143 8D000000              CALLF     printf
   1979              line_lcd=1;
   \   000147 35010000              MOV       L:line_lcd, #0x1
   1980              printf("\n+/-     ");
   \   00014B AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   00014E 8D000000              CALLF     printf
   1981                 pressKey();
   \   000152 8D000000              CALLF     ?Subroutine56
   1982                switch (button)
   1983                  {
   1984                  case 1: goto First_Menu;
   1985                   break;
   1986                  case 2:
   1987                   break;
   1988                  case 3: goto Fifth_Menu;
   1989                   break;
   1990                  }
   1991                 break; //Exit Menu
   1992              }    while (1);
   \                     ??CrossCallReturnLabel_162:
   \   000156 2603                  JRNE      ??lb_2
   \   000158 CC0000                JP        L:??CrossCallReturnLabel_40
   \                     ??lb_2:
   \   00015B A002                  SUB       A, #0x2
   \   00015D 27AC                  JREQ      L:??Menu_8
   1993              //exit:
   1994             Clear_Line1();
   \                     ??Menu_3:
   \   00015F 8D000000              CALLF     Clear_Line1
   1995             Clear_Line2();
   \   000163 AC000000              JPF       Clear_Line2
   1996          
   1997          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 4A                    DEC       A
   \   000008 87                    RETF
   1998          
   1999          

   \                                 In section .far_func.text, align 1, keep-with-next
   2000          void pressKey(void)
   2001          {
   2002             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2003             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2004             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine37
   2005             lcdLedTimer=LCDLEDON;
   2006             do
   2007             {
   2008                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_84:
   \   00000C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_115:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2009                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2010                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2011             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_128:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_84
   2012          
   2013              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2014          
   2015             //return button;
   2016          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2017          
   2018          
   2019          
   2020          

   \                                 In section .far_func.text, align 1, keep-with-next
   2021          bool setData(void)
   2022          {
   \                     setData:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   2023             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000007 3F00                  CLR       S:?b8
   \   000009 35010000              MOV       S:?b10, #0x1
   \   00000D 35010000              MOV       S:?b9, #0x1
   2024             int yy;
   2025          
   2026                   //Clear Display
   2027             LCDInstr(0x01);
   \   000011 8D000000              CALLF     ?Subroutine16
   2028             Delay1(1000);
   2029             line_lcd=0;
   2030             printf("\nYear>");
   2031             y=year;
   \                     ??CrossCallReturnLabel_33:
   \   000015 C60000                LD        A, L:year
   \   000018 C70000                LD        L:`y`, A
   2032             m=month;
   \   00001B C60000                LD        A, L:month
   \   00001E C70000                LD        L:m, A
   2033             d=date;
   \   000021 C60000                LD        A, L:`date`
   \   000024 C70000                LD        L:d, A
   2034                do
   2035              {
   2036               line_lcd=1;
   \                     ??setData_0:
   \   000027 8D000000              CALLF     ?Subroutine26
   2037               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_48:
   \   00002B 89                    PUSHW     X
   \   00002C C60000                LD        A, L:m
   \   00002F 97                    LD        XL, A
   \   000030 89                    PUSHW     X
   \   000031 C60000                LD        A, L:`y`
   \   000034 97                    LD        XL, A
   \   000035 89                    PUSHW     X
   \   000036 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000039 8D000000              CALLF     printf
   \   00003D 5B06                  ADD       SP, #0x6
   2038                 y=adj(0,99,y);
   \   00003F C60000                LD        A, L:`y`
   \   000042 B700                  LD        S:?b1, A
   \   000044 35630000              MOV       S:?b0, #0x63
   \   000048 8D000000              CALLF     ??Subroutine81_0
   2039              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_225:
   \   00004C C70000                LD        L:`y`, A
   \   00004F 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_112:
   \   000053 27D2                  JREQ      L:??setData_0
   2040                  yy=y+2000;
   \   000055 C60000                LD        A, L:`y`
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A 1C07D0                ADDW      X, #0x7d0
   \   00005D BF00                  LDW       S:?w0, X
   2041              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00005F 90AE0190              LDW       Y, #0x190
   \   000063 8D000000              CALLF     L:?smod16_y_x_y
   \   000067 905D                  TNZW      Y
   \   000069 271C                  JREQ      L:??setData_1
   \   00006B 90AE0064              LDW       Y, #0x64
   \   00006F BE00                  LDW       X, S:?w0
   \   000071 8D000000              CALLF     L:?smod16_y_x_y
   \   000075 905D                  TNZW      Y
   \   000077 2712                  JREQ      L:??setData_2
   \   000079 90AE0004              LDW       Y, #0x4
   \   00007D BE00                  LDW       X, S:?w0
   \   00007F 8D000000              CALLF     L:?smod16_y_x_y
   \   000083 905D                  TNZW      Y
   \   000085 2604                  JRNE      L:??setData_2
   \                     ??setData_1:
   \   000087 35010000              MOV       S:?b8, #0x1
   2042                  y=yy-2000;
   \                     ??setData_2:
   \   00008B B600                  LD        A, S:?b1
   \   00008D AB30                  ADD       A, #0x30
   \   00008F C70000                LD        L:`y`, A
   2043                   if(y==year) month_start=month;
   \   000092 C60000                LD        A, L:year
   \   000095 C10000                CP        A, L:`y`
   \   000098 2605                  JRNE      L:??setData_3
   \   00009A C60000                LD        A, L:month
   \   00009D B700                  LD        S:?b10, A
   2044               line_lcd=0;
   \                     ??setData_3:
   \   00009F 8D000000              CALLF     ?Subroutine45
   2045              printf("\nMonth>");
   2046                do
   2047              {
   2048               line_lcd=1;
   \                     ??CrossCallReturnLabel_111:
   \   0000A3 8D000000              CALLF     ?Subroutine26
   2049               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_49:
   \   0000A7 89                    PUSHW     X
   \   0000A8 C60000                LD        A, L:m
   \   0000AB 97                    LD        XL, A
   \   0000AC 89                    PUSHW     X
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 97                    LD        XL, A
   \   0000B1 89                    PUSHW     X
   \   0000B2 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B5 8D000000              CALLF     printf
   \   0000B9 5B06                  ADD       SP, #0x6
   2050                m=adj(month_start,12,m);
   \   0000BB C60000                LD        A, L:m
   \   0000BE B700                  LD        S:?b1, A
   \   0000C0 350C0000              MOV       S:?b0, #0xc
   \   0000C4 B600                  LD        A, S:?b10
   \   0000C6 8D000000              CALLF     adj
   \   0000CA C70000                LD        L:m, A
   2051              } while (!key_ok_on());
   \   0000CD 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_113:
   \   0000D1 27D0                  JREQ      L:??CrossCallReturnLabel_111
   2052          
   2053              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000D3 C60000                LD        A, L:m
   \   0000D6 A101                  CP        A, #0x1
   \   0000D8 2718                  JREQ      L:??setData_4
   \   0000DA A103                  CP        A, #0x3
   \   0000DC 2714                  JREQ      L:??setData_4
   \   0000DE A105                  CP        A, #0x5
   \   0000E0 2710                  JREQ      L:??setData_4
   \   0000E2 A107                  CP        A, #0x7
   \   0000E4 270C                  JREQ      L:??setData_4
   \   0000E6 A108                  CP        A, #0x8
   \   0000E8 2708                  JREQ      L:??setData_4
   \   0000EA A10A                  CP        A, #0xa
   \   0000EC 2704                  JREQ      L:??setData_4
   \   0000EE A10C                  CP        A, #0xc
   \   0000F0 2606                  JRNE      L:??setData_5
   \                     ??setData_4:
   \   0000F2 351F0000              MOV       S:?b8, #0x1f
   \   0000F6 2024                  JRA       L:??setData_6
   2054               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??setData_5:
   \   0000F8 A104                  CP        A, #0x4
   \   0000FA 270C                  JREQ      L:??setData_7
   \   0000FC A106                  CP        A, #0x6
   \   0000FE 2708                  JREQ      L:??setData_7
   \   000100 A109                  CP        A, #0x9
   \   000102 2704                  JREQ      L:??setData_7
   \   000104 A10B                  CP        A, #0xb
   \   000106 2606                  JRNE      L:??setData_8
   \                     ??setData_7:
   \   000108 351E0000              MOV       S:?b8, #0x1e
   \   00010C 200E                  JRA       L:??setData_6
   2055                else
   2056                 {
   2057                   if(leap) date_end=29;
   \                     ??setData_8:
   \   00010E 3D00                  TNZ       S:?b8
   \   000110 2706                  JREQ      L:??setData_9
   \   000112 351D0000              MOV       S:?b8, #0x1d
   \   000116 2004                  JRA       L:??setData_6
   2058                    else date_end=28;
   \                     ??setData_9:
   \   000118 351C0000              MOV       S:?b8, #0x1c
   2059                 }
   2060               if( y==year && m==month) date_start=d;
   \                     ??setData_6:
   \   00011C C60000                LD        A, L:year
   \   00011F C10000                CP        A, L:`y`
   \   000122 260D                  JRNE      L:??setData_10
   \   000124 C60000                LD        A, L:month
   \   000127 C10000                CP        A, L:m
   \   00012A 2605                  JRNE      L:??setData_10
   \   00012C C60000                LD        A, L:d
   \   00012F B700                  LD        S:?b9, A
   2061              LCDInstr(0x01);
   \                     ??setData_10:
   \   000131 8D000000              CALLF     ?Subroutine17
   2062               Delay1(1000);
   2063                line_lcd=0;
   2064              printf("\nDate>");
   2065                do
   2066              {
   2067               line_lcd=1;
   \                     ??CrossCallReturnLabel_35:
   \   000135 8D000000              CALLF     ?Subroutine26
   2068               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_50:
   \   000139 89                    PUSHW     X
   \   00013A C60000                LD        A, L:m
   \   00013D 97                    LD        XL, A
   \   00013E 89                    PUSHW     X
   \   00013F C60000                LD        A, L:`y`
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B06                  ADD       SP, #0x6
   2069                 d=adj(date_start,date_end,d);
   \   00014D C60000                LD        A, L:d
   \   000150 B700                  LD        S:?b1, A
   \   000152 450000                MOV       S:?b0, S:?b8
   \   000155 B600                  LD        A, S:?b9
   \   000157 8D000000              CALLF     adj
   \   00015B C70000                LD        L:d, A
   2070              } while (!key_ok_on());
   \   00015E 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_114:
   \   000162 27D1                  JREQ      L:??CrossCallReturnLabel_35
   2071          
   2072                //Set clock keeper
   2073               //year=y;
   2074               //month=m;
   2075               //date=d;
   2076               //Set_DS1307();
   2077          
   2078            return TRUE;
   \   000164 A601                  LD        A, #0x1
   \   000166 320000                POP       S:?b10
   \   000169 AC000000              JPF       L:?epilogue_w4
   2079          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   2080          
   2081          

   \                                 In section .far_func.text, align 1, keep-with-next
   2082          void initBeep(void)
   2083          {
   2084            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2085            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2086             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2087               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2088             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2089          
   2090          }
   2091          

   \                                 In section .far_func.text, align 1, keep-with-next
   2092          void beep(u16 Interval)
   2093          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2094          
   2095           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2096               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2097            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2098          
   2099          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2100          

   \                                 In section .far_func.text, align 1, keep-with-next
   2101           PUTCHAR_PROTOTYPE
   2102          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2103            /* Place your implementation of fputc here */
   2104            /* e.g. write a character to the USART */
   2105                //USART_SendData(USART3, (u8) ch);
   2106               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2107             /* Loop until the end of transmission */
   2108              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2109            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2110          }
   2111          
   2112           #ifdef USE_FULL_ASSERT
   2113          
   2114          /**
   2115            * @brief  Reports the name of the source file and the source line number
   2116            *   where the assert_param error has occurred.
   2117            * @param file: pointer to the source file name
   2118            * @param line: assert_param error line source number
   2119            * @retval : None
   2120            */

   \                                 In section .far_func.text, align 1
   2121          void assert_failed(u8* file, u32 line)
   2122          {
   2123            /* User can add his own implementation to report the file name and line number,
   2124               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2125          
   2126            /* Infinite loop */
   2127            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2128            {
   2129          
   2130            }
   2131          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On>">`:
   \   000000 0A48204F6E3E          DC8 "\012H On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On>">`:
   \   000000 0A4D696E204F          DC8 "\012Min On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   2132          #endif
   2133          
   2134          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     line1                             8
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     hardware                          2
     programpoint                     40
     ?Subroutine37                     5
     ?Subroutine72                     9
     ?Subroutine46                     7
     ?Subroutine44                     9
     ??Subroutine85_0                  7
     ?Subroutine79                    11
     main                            384
     ?Subroutine55                     9
     ?Subroutine53                     7
     ?Subroutine42                    11
     ?Subroutine41                    11
     ?Subroutine6                      9
     ?Subroutine3                     20
     ?Subroutine76                     2
     ??Subroutine90_0                  8
     ?Subroutine2                     15
     ?Subroutine77                    12
     ?Subroutine24                     4
     ??Subroutine83_0                 10
     Display                         201
     Power_On                         14
     ?Subroutine43                    11
     ?Subroutine73                     9
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine49                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine52                     1
     ??Subroutine89_0                  7
     ?Subroutine48                     9
     ReadDS1307                      130
     ?Subroutine50                    11
     ?Subroutine34                    11
     ?Subroutine31                    13
     ?Subroutine30                     8
     ?Subroutine71                    10
     Check_DS1307                     78
     Set_DS1307                      108
     ?Subroutine51                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       374
     ?Subroutine45                    11
     ?Subroutine17                    11
     ?Subroutine16                    11
     ?Subroutine68                    16
     ?Subroutine33                     6
     ??Subroutine81_0                  5
     ?Subroutine18                     7
     ??Subroutine82_0                  9
     ?Subroutine78                     6
     ?Subroutine25                    10
     adj                              85
     key_ok_on                        61
     ?Subroutine38                    14
     ?Subroutine36                     7
     ?Subroutine32                    10
     key_plus_on                      59
     ?Subroutine40                     7
     ?Subroutine35                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine14                    29
     ?Subroutine47                     7
     Set_Timer_On                    147
     ?Subroutine1                     29
     ?Subroutine28                    10
     ?Subroutine74                    14
     ?Subroutine65                     9
     Set_Timer_Off                   152
     ?Subroutine27                    10
     SaveStatus                       25
     ?Subroutine54                     5
     SaveProgram                      47
     ReadProgram                      48
     ResetProgram                      1
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine63                     9
     ?Subroutine60                     7
     InitClk                          62
     ?Subroutine61                     9
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine87_0                  5
     ??Subroutine88_0                  7
     ?Subroutine70                     8
     ??Subroutine86_0                  2
     InitLcd                          89
     ?Subroutine21                     8
     ?Subroutine15                    17
     ?Subroutine10                     5
     ?Subroutine66                     2
     ?Subroutine0                     13
     ??Subroutine80_0                 10
     ?Subroutine23                    10
     LCDInstr                          9
     ?Subroutine11                     2
     LCDData                          11
     LCDInstrNibble                   17
     PulseEnable                      14
     ?Subroutine4                     22
     ?Subroutine64                     6
     LCD_Busy                         69
     LCD                             200
     ?Subroutine69                     9
     ?Subroutine9                      4
     ??Subroutine84_0                  5
     ?Subroutine19                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine20                     2
     ?Subroutine13                    10
     ?Subroutine67                     9
     DS18_Read                        74
     ?Subroutine22                    12
     DS18_Reset                       72
     ?Subroutine39                     7
     ?Subroutine59                     7
     temperature                      63
     ?Subroutine58                    15
     ?Subroutine75                     6
     ?Subroutine57                    23
     ?Subroutine5                     21
     Read_DS18                       121
     ?Subroutine62                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine8                     13
     ?Subroutine7                     16
     Clear_Line2                      19
     FirstMenu                       117
     ?Subroutine29                    11
     ProgramMenu                       1
     Menu                            359
     ?Subroutine56                     9
     pressKey                         74
     setData                         365
     ?Subroutine26                    10
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH On>">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On>">           9
     ?<Constant "\nH Off>">            8
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 5 569 bytes in section .far_func.text
   108 bytes in section .near.bss
     3 bytes in section .near.data
   288 bytes in section .near.rodata
 
 5 569 bytes of CODE  memory
   288 bytes of CONST memory
   111 bytes of DATA  memory

Errors: none
Warnings: none
