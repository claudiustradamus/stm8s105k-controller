###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             12/Jul/2013  14:55:45 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          
     14          /* Includes ------------------------------------------------------------------*/
     15          #include "stm8s.h"
     16          #include "stdio.h"
     17          #include "string.h"
     18          /* Private defines -----------------------------------------------------------*/
     19          
     20          /* ================ LCD ======================= */
     21          
     22          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     23          #define LCD_PORT (GPIOC)
     24          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     25          #define DATA4 GPIO_PIN_4
     26          #define DATA5 GPIO_PIN_5
     27          #define DATA6 GPIO_PIN_6
     28          #define DATA7 GPIO_PIN_7
     29          #define EN  GPIO_PIN_3
     30          #define RW  GPIO_PIN_1
     31          #define RS  GPIO_PIN_2
     32          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     33          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     34          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     35          
     36          
     37          #ifdef __GNUC__
     38            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     39               set to 'Yes') calls __io_putchar() */
     40            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     41          #else
     42            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     43          #endif /* __GNUC__ */
     44          
     45          
     46          
     47          
     48          #define SpecialSymbol 0x1b //Esc to start message
     49          
     50          
     51          
     52          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     53          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     54          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     55          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     56          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     57          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
     58          #define data_size 20

   \                                 In section .near.bss, align 1
     59          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     60          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     61          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     62          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     63          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     64          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     65          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     66          u8 mounts;
   \                     mounts:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     67          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     68          u8 error;
   \                     error:
   \   000000                       DS8 1
     69          //u8 index=0;

   \                                 In section .near.bss, align 1
     70          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
     71          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
     72          
     73          
     74          
     75          
     76          
     77          
     78          
     79          
     80          /* Private function prototypes -----------------------------------------------*/
     81          void InitHardware();
     82          void GpioConfiguration();
     83          void InitClk();
     84          void InitAdc();
     85          void InitI2C();
     86          bool ReadDS1307();
     87          void InitUart();
     88          void InitLcd();
     89          void InitDelayTimer();
     90          void Delay1( u16 Delay);
     91          void Delay2( u16 Delay);
     92          void LCDInstrNibble (u8 Instr);
     93          void LCDInstr(u8 Instr);
     94          void LCDDataOut(u8 data);
     95          void LCD_Busy();
     96          void PulseEnable();
     97          void SendData();
     98          void SendChar(u8 Char);
     99          void Send_Hello();
    100          bool Init_DS1307(void);
    101          bool Check_DS1307(void);
    102          bool I2C_Start(void);
    103          bool I2C_WA(u8 address);
    104          bool I2C_WD(u8 data);
    105          bool I2C_RA(u8 address);
    106          bool Set_DS1307( u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds);
    107          u8 convert_tobcd(u8 data);
    108          u8 I2C_RD(void);
    109          
    110          u16  Average();
    111          
    112          
    113          /* Private functions ---------------------------------------------------------*/
    114          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1, keep-with-next
    115          void main(void)
    116          {
    117              /*High speed internal clock prescaler: 1*/
    118              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    119          
    120              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    121              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    122              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    123              InitUart();
   \   00000C 8D000000              CALLF     InitUart
    124              enableInterrupts();
   \   000010 9A                    RIM
    125              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000011 8D000000              CALLF     ?Subroutine6
    126              InitLcd();
   \                     ??CrossCallReturnLabel_12:
   \   000015 8D000000              CALLF     InitLcd
    127              InitAdc();
   \   000019 8D000000              CALLF     InitAdc
    128              InitI2C();
   \   00001D 8D000000              CALLF     InitI2C
    129              //if (!Init_DS1307())printf("E1:%d",error);
    130              Send_Hello();
   \   000021 8D000000              CALLF     Send_Hello
   \   000025 202F                  JRA       L:??main_0
    131               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    132          
    133               // Working fuction
    134              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    135          
    136              while(1)
    137              {
    138                ADC1_Cmd (ENABLE);
    139          
    140                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    141                   Delay2(30000);
    142                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    143                   Delay2(30000);
    144          
    145                line_lcd=0;
    146               if (!ReadDS1307())
    147               {
    148                 printf("\n E2:%d",error);
    149                  //restart i2c
    150                // Reset the CPU: Enable the watchdog and wait until it expires
    151                 IWDG->KR = IWDG_KEY_ENABLE;
    152                 while ( 1 );    // Wait until reset occurs from IWDG
    153          
    154          
    155               }
    156                 else  printf("\n      ");
   \                     ??main_1:
   \   000027 AE0000                LDW       X, #`?<Constant "\\n      ">`
   \   00002A 8D000000              CALLF     printf
    157               line_lcd=1;
   \   00002E 35010000              MOV       L:line_lcd, #0x1
    158               printf("\n%02x:%02x:%02x",hours,minutes,seconds);
   \   000032 C60000                LD        A, L:seconds
   \   000035 5F                    CLRW      X
   \   000036 97                    LD        XL, A
   \   000037 89                    PUSHW     X
   \   000038 C60000                LD        A, L:minutes
   \   00003B 97                    LD        XL, A
   \   00003C 89                    PUSHW     X
   \   00003D C60000                LD        A, L:hours
   \   000040 97                    LD        XL, A
   \   000041 89                    PUSHW     X
   \   000042 AE0000                LDW       X, #`?<Constant "\\n%02x:%02x:%02x">`
   \   000045 8D000000              CALLF     printf
   \   000049 5B06                  ADD       SP, #0x6
    159               //line_lcd=2;
    160               //printf("\n Just Test:%X", timer2);
    161                if (rx_data==SpecialSymbol) SendData();
   \   00004B C60000                LD        A, L:rx_data
   \   00004E A11B                  CP        A, #0x1b
   \   000050 2604                  JRNE      L:??main_0
   \   000052 8D000000              CALLF     SendData
   \                     ??main_0:
   \   000056 A601                  LD        A, #0x1
   \   000058 8D000000              CALLF     ADC1_Cmd
   \   00005C 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_20:
   \   000060 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_19:
   \   000064 725F0000              CLR       L:line_lcd
   \   000068 8D000000              CALLF     ReadDS1307
   \   00006C A100                  CP        A, #0x0
   \   00006E 26B7                  JRNE      L:??main_1
   \   000070 C60000                LD        A, L:error
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
   \   00007F 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_2:
   \   000083 20FE                  JRA       L:??main_2
    162                //SendData();
    163          
    164              }
    165          
    166          
    167          
    168          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine10:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE7530                LDW       X, #0x7530
   \   00000C AC000000              JPF       Delay2
    169          

   \                                 In section .far_func.text, align 1, keep-with-next
    170          void InitI2C(void)
    171          {
    172             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    173             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    174             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    175          }
    176          

   \                                 In section .far_func.text, align 1, keep-with-next
    177          bool I2C_Start(void)
    178          {
    179             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    180                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    181              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_42:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    182                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    183                  {
    184                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    185                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    186                  }
    187                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    188          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    189          

   \                                 In section .far_func.text, align 1, keep-with-next
    190          bool I2C_WA(u8 address)
    191          {
    192            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    193                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    194                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_41:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    195                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    196                   {
    197                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    198                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    199                   }
    200                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    201          }
    202          

   \                                 In section .far_func.text, align 1, keep-with-next
    203          bool I2C_RA(u8 address)
    204          {
    205            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    206                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    207                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_43:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    208                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    209                   {
    210                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    211                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    212                   }
    213                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    214          }
    215          
    216          

   \                                 In section .far_func.text, align 1, keep-with-next
    217          bool I2C_WD(u8 data)
    218          {
    219           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    220             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    221             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_40:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    222              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    223              {
    224                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    225                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    226              }
    227               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    228          }
    229          

   \                                 In section .far_func.text, align 1, keep-with-next
    230          u8 I2C_RD(void)
    231          {
    232           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    233            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    234           //while((!(I2C->SR1 & 0x40))&&timeout);
    235           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    236           {
    237             error=4;
   \   000019 35040000              MOV       L:error, #0x4
    238             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    239           }
    240           u8 data=I2C_ReceiveData();
    241           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    242          }
    243          
    244          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
    245          bool Init_DS1307(void)
    246          {
    247             // Test DS1307
    248              error=0;
   \                     Init_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine14
    249              if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_32:
   \   000004 2602                  JRNE      L:??Init_DS1307_0
   \                     ??Init_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    250              if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Init_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_36:
   \   00000C 27F8                  JREQ      L:??Init_DS1307_1
    251              if(!I2C_WD(0x00)) return FALSE;
   \   00000E 4F                    CLR       A
   \   00000F 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_75:
   \   000013 27F1                  JREQ      L:??Init_DS1307_1
    252              if(!I2C_WD(0x00)) return FALSE;
   \   000015 4F                    CLR       A
   \   000016 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_76:
   \   00001A 27EA                  JREQ      L:??Init_DS1307_1
    253              I2C_GenerateSTOP(ENABLE);
   \   00001C 8D000000              CALLF     ?Subroutine12
    254          
    255              // timeout=100;  error=4;
    256              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    257              //    if (!timeout)return FALSE ;
    258               return TRUE;
   \                     ??CrossCallReturnLabel_23:
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    259          }
    260          

   \                                 In section .far_func.text, align 1, keep-with-next
    261          bool  ReadDS1307(void)
    262          {
    263          
    264                error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine14
    265                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_31:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    266                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_35:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    267                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 4F                    CLR       A
   \   00000F 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_74:
   \   000013 27F1                  JREQ      L:??ReadDS1307_1
    268                 I2C_GenerateSTOP(ENABLE);
   \   000015 8D000000              CALLF     ?Subroutine12
    269                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_24:
   \   000019 8D000000              CALLF     I2C_Start
   \   00001D A100                  CP        A, #0x0
   \   00001F 27E5                  JREQ      L:??ReadDS1307_1
    270                 if(!I2C_RA(0xD0))return FALSE;
   \   000021 A6D0                  LD        A, #0xd0
   \   000023 8D000000              CALLF     I2C_RA
   \   000027 A100                  CP        A, #0x0
   \   000029 27DB                  JREQ      L:??ReadDS1307_1
    271                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine13
    272                 seconds = I2C_RD();
   \                     ??CrossCallReturnLabel_28:
   \   00002F C70000                LD        L:seconds, A
    273                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine13
    274                 minutes = I2C_RD();
   \                     ??CrossCallReturnLabel_27:
   \   000036 C70000                LD        L:minutes, A
    275                //Last read byte by I2C slave
    276                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000039 8D000000              CALLF     ?Subroutine11
    277                 I2C_GenerateSTOP(ENABLE);
    278                 hours = I2C_RD();
   \                     ??CrossCallReturnLabel_21:
   \   00003D C70000                LD        L:hours, A
    279                 return TRUE;
   \   000040 A601                  LD        A, #0x1
   \   000042 87                    RETF
    280          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 8D000000              CALLF     I2C_GenerateSTOP
   \   00000B AC000000              JPF       I2C_RD
    281          

   \                                 In section .far_func.text, align 1, keep-with-next
    282          bool Check_DS1307(void)
    283          {
    284             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    285                 error=0;
   \                     Check_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine14
    286                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_30:
   \   000004 2602                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    287                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_34:
   \   00000C 27F8                  JREQ      L:??Check_DS1307_1
    288                 if(!I2C_WD(0x08)) return FALSE;
   \   00000E A608                  LD        A, #0x8
   \   000010 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_73:
   \   000014 27F0                  JREQ      L:??Check_DS1307_1
    289                 I2C_GenerateSTOP(ENABLE);
   \   000016 8D000000              CALLF     ?Subroutine12
    290                  //Last read byte by I2C slave
    291                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \                     ??CrossCallReturnLabel_25:
   \   00001A 8D000000              CALLF     ?Subroutine11
    292                 I2C_GenerateSTOP(ENABLE);
    293                 u8 data = I2C_RD();
    294                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_22:
   \   00001E A1AA                  CP        A, #0xaa
   \   000020 26E4                  JRNE      L:??Check_DS1307_1
    295                 else return TRUE;
   \   000022 A601                  LD        A, #0x1
   \   000024 87                    RETF
    296          }
    297          

   \                                 In section .far_func.text, align 1, keep-with-next
    298          bool Set_DS1307( u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    299          {
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 3B0000                PUSH      S:?b12
   \   000007 B700                  LD        S:?b8, A
   \   000009 450000                MOV       S:?b9, S:?b0
   \   00000C 450000                MOV       S:?b10, S:?b1
   \   00000F 450000                MOV       S:?b11, S:?b2
   \   000012 450000                MOV       S:?b12, S:?b3
    300                 // convert hex or decimal to bcd format
    301          
    302          
    303                 error=0;
   \   000015 8D000000              CALLF     ?Subroutine14
    304                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_29:
   \   000019 2603                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   00001B 4F                    CLR       A
   \   00001C 203B                  JRA       L:??Set_DS1307_2
    305                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   00001E 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_33:
   \   000022 27F7                  JREQ      L:??Set_DS1307_1
    306                 if(!I2C_WD(0x00)) return FALSE;
   \   000024 4F                    CLR       A
   \   000025 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_72:
   \   000029 27F0                  JREQ      L:??Set_DS1307_1
    307                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   00002B B600                  LD        A, S:?b12
   \   00002D 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_67:
   \   000031 27E8                  JREQ      L:??Set_DS1307_1
    308                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   000033 B600                  LD        A, S:?b11
   \   000035 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_68:
   \   000039 27E0                  JREQ      L:??Set_DS1307_1
    309                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   00003B B600                  LD        A, S:?b10
   \   00003D 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_69:
   \   000041 27D8                  JREQ      L:??Set_DS1307_1
    310                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000043 B600                  LD        A, S:?b9
   \   000045 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_70:
   \   000049 27D0                  JREQ      L:??Set_DS1307_1
    311                 if(!I2C_WD(convert_tobcd(year))) return FALSE;
   \   00004B B600                  LD        A, S:?b8
   \   00004D 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_71:
   \   000051 27C8                  JREQ      L:??Set_DS1307_1
    312                 I2C_GenerateSTOP(ENABLE);
   \   000053 8D000000              CALLF     ?Subroutine12
    313          
    314          
    315             return TRUE;
   \                     ??CrossCallReturnLabel_26:
   \   000057 A601                  LD        A, #0x1
   \                     ??Set_DS1307_2:
   \   000059 320000                POP       S:?b12
   \   00005C AC000000              JPF       L:?epilogue_l2
    316          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004                       REQUIRE ??Subroutine24_0
   \   000004                       ;               // Fall through to label ??Subroutine24_0
    317          
    318          

   \                                 In section .far_func.text, align 1, keep-with-next
    319          u8 convert_tobcd(u8 data)
    320          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    321             u8 data_second_decimal=data/10;
    322             u8 data_first_decimal=data - 10*data_second_decimal;
    323             data=16*data_second_decimal + data_first_decimal;
    324            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    325          }
    326          
    327          
    328          
    329          
    330          
    331          

   \                                 In section .far_func.text, align 1, keep-with-next
    332          void GpioConfiguration()
    333          {
    334          
    335            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    336          
    337            // ADC PE6 NEW PB0
    338            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    339          
    340            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    341            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    342          
    343            //PD0 Led
    344            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     GPIO_Init
    345            //I2C
    346            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000032 35B00000              MOV       S:?b0, #0xb0
   \   000036 A610                  LD        A, #0x10
   \   000038 AE5005                LDW       X, #0x5005
   \   00003B 8D000000              CALLF     GPIO_Init
    347            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00003F 35B00000              MOV       S:?b0, #0xb0
   \   000043 A620                  LD        A, #0x20
   \   000045 AE5005                LDW       X, #0x5005
   \   000048 AC000000              JPF       GPIO_Init
    348            // Remap Pins pb4,pb5  sda,scl ;
    349          
    350          
    351          }
    352          

   \                                 In section .far_func.text, align 1, keep-with-next
    353          void InitClk()
    354          {
    355            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    356            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    357            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    358            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    359            CLK_SOURCE_HSI,       // Switch to internal timer.
    360            DISABLE,              // Disable the clock switch interrupt.
    361            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    362          
    363            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine17
    364            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_37:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine17
    365            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_38:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine17
    366            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_39:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    367          
    368          
    369          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    370          
    371          

   \                                 In section .far_func.text, align 1, keep-with-next
    372          void InitAdc()
    373          {
    374               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    375               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    376               /*
    377               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    378                          ADC1_CHANNEL_0,
    379                          ADC1_PRESSEL_FCPU_D4,
    380                           ADC1_EXTTRIG_TIM,
    381          
    382                 */
    383               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    384               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    385                                      ADC1_CHANNEL_0,
    386                                      ADC1_ALIGN_RIGHT
    387                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    388          
    389          
    390               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    391          
    392          
    393               //ADC1_Cmd (ENABLE);
    394               //ADC1->CR1 |= ADC1_CR1_ADON ;
    395               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    396               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    397          
    398          }
    399          

   \                                 In section .far_func.text, align 1, keep-with-next
    400          void InitUart()
    401          {
    402             UART2_DeInit();
   \                     InitUart:
   \   000000 8D000000              CALLF     UART2_DeInit
    403             UART2_Init((u32)9600,
    404                        UART2_WORDLENGTH_8D,
    405                        UART2_STOPBITS_1,
    406                        UART2_PARITY_NO,
    407                        UART2_SYNCMODE_CLOCK_DISABLE,
    408                        UART2_MODE_TXRX_ENABLE
    409                          );
   \   000004 350C0000              MOV       S:?b7, #0xc
   \   000008 35800000              MOV       S:?b6, #0x80
   \   00000C 3F00                  CLR       S:?b5
   \   00000E 3F00                  CLR       S:?b4
   \   000010 4F                    CLR       A
   \   000011 AE2580                LDW       X, #0x2580
   \   000014 BF00                  LDW       S:?w1, X
   \   000016 5F                    CLRW      X
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 8D000000              CALLF     UART2_Init
    410          
    411             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   \   00001D A601                  LD        A, #0x1
   \   00001F AE0255                LDW       X, #0x255
   \   000022 8D000000              CALLF     UART2_ITConfig
    412             UART2_Cmd(ENABLE);
   \   000026 A601                  LD        A, #0x1
   \   000028 AC000000              JPF       UART2_Cmd
    413          
    414            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    415          }
    416          

   \                                 In section .far_func.text, align 1, keep-with-next
    417          void SendChar( u8 Char)
    418          {
    419             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    420            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    421          }
   \   00000E 87                    RETF
    422          

   \                                 In section .far_func.text, align 1, keep-with-next
    423          void Send_Hello()
    424          {
   \                     Send_Hello:
   \   000000 3B0000                PUSH      S:?b8
    425            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine8
    426             Delay1(10);
    427             sprintf(data,"Hello");
   \                     ??CrossCallReturnLabel_18:
   \   000007 90AE0000              LDW       Y, #`?<Constant "Hello">`
   \   00000B AE0000                LDW       X, #data
   \   00000E 8D000000              CALLF     sprintf
    428              u8 i=0;
   \   000012 3F00                  CLR       S:?b8
    429            do
    430           {
    431            SendChar(data[i++]);
   \                     ??Send_Hello_0:
   \   000014 8D000000              CALLF     ?Subroutine2
    432           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_3:
   \   000018 26FA                  JRNE      L:??Send_Hello_0
    433            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??Send_Hello_1:
   \   00001A AE0040                LDW       X, #0x40
   \   00001D 8D000000              CALLF     UART2_GetFlagStatus
   \   000021 A100                  CP        A, #0x0
   \   000023 27F5                  JREQ      L:??Send_Hello_1
    434            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000025 8D000000              CALLF     ?Subroutine6
    435          
    436          
    437          
    438          }
   \                     ??CrossCallReturnLabel_13:
   \   000029 320000                POP       S:?b8
   \   00002C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteHigh
   \   000009 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_48:
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 AE000A                LDW       X, #0xa
   \   000003 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 D60000                LD        A, (L:data,X)
   \   000008 8D000000              CALLF     SendChar
   \   00000C B600                  LD        A, S:?b8
   \   00000E 4C                    INC       A
   \   00000F B700                  LD        S:?b8, A
   \   000011 5F                    CLRW      X
   \   000012 41                    EXG       A, XL
   \   000013 B600                  LD        A, S:?b8
   \   000015 724D0000              TNZ       (L:data,X)
   \   000019 87                    RETF
    439          
    440          
    441          
    442          
    443          

   \                                 In section .far_func.text, align 1, keep-with-next
    444          void SendData()
    445          {
   \                     SendData:
   \   000000 3B0000                PUSH      S:?b8
    446           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine8
    447            Delay1(10);
    448            u8 i=0;
   \                     ??CrossCallReturnLabel_17:
   \   000007 3F00                  CLR       S:?b8
    449            sprintf(data,"%d %c",adcdata,0x0d);
   \   000009 4B0D                  PUSH      #0xd
   \   00000B 4B00                  PUSH      #0x0
   \   00000D 3B0000                PUSH      L:adcdata + 1
   \   000010 3B0000                PUSH      L:adcdata
   \   000013 90AE0000              LDW       Y, #`?<Constant "%d %c">`
   \   000017 AE0000                LDW       X, #data
   \   00001A 8D000000              CALLF     sprintf
   \   00001E 5B04                  ADD       SP, #0x4
    450           do
    451           {
    452             SendChar(data[i++]);
   \                     ??SendData_0:
   \   000020 8D000000              CALLF     ?Subroutine2
    453          
    454           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_2:
   \   000024 26FA                  JRNE      L:??SendData_0
    455             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??SendData_1:
   \   000026 AE0040                LDW       X, #0x40
   \   000029 8D000000              CALLF     UART2_GetFlagStatus
   \   00002D A100                  CP        A, #0x0
   \   00002F 27F5                  JREQ      L:??SendData_1
    456            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000031 8D000000              CALLF     ?Subroutine6
    457            rx_data=0;
   \                     ??CrossCallReturnLabel_14:
   \   000035 725F0000              CLR       L:rx_data
    458          }
   \   000039 320000                POP       S:?b8
   \   00003C 87                    RETF
    459          

   \                                 In section .far_func.text, align 1, keep-with-next
    460          void LCDDataOut(u8 data)
    461          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    462            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_57
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine23_0
    463            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_57:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_58
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine23_0
    464            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_58:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_59
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine23_0
    465            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_59:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_60
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine23_0
    466          }
   \                     ??CrossCallReturnLabel_60:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_66:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    467          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine23_0
   \   000002                       ;               // Fall through to label ??Subroutine23_0

   \                                 In section .far_func.text, align 1, keep-with-next
    468          void InitLcd()
    469          {
    470           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine4
    471            LCD_RW(0);
    472            LCD_RS(0);
   \                     ??CrossCallReturnLabel_11:
   \   000006 8D000000              CALLF     ?Subroutine5
    473            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_55:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine7
    474          
    475            LCDInstrNibble(0x03);
    476             Delay1(10);
    477            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_15:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    478             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine7
    479            LCDInstrNibble(0x03);
    480             Delay1(10);
    481          
    482             //Line 4
    483            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_16:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    484            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    485            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    486            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    487          
    488            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    489            Delay1(10);
   \   00003D 8D000000              CALLF     ?Subroutine21
    490          
    491            LCDInstr(0x01) ;
   \                     ??CrossCallReturnLabel_50:
   \   000041 A601                  LD        A, #0x1
   \   000043 8D000000              CALLF     LCDInstr
    492            Delay1(250);
   \   000047 AE00FA                LDW       X, #0xfa
   \   00004A 8D000000              CALLF     Delay1
    493          
    494            LCDInstr(0x06);
   \   00004E A606                  LD        A, #0x6
   \   000050 8D000000              CALLF     LCDInstr
    495            Delay1(10);
   \   000054 AE000A                LDW       X, #0xa
   \   000057 AC000000              JPF       Delay1
    496          
    497          
    498          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_49:
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_64:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_63:
   \   00000A 87                    RETF
    499          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine23_0
   \                     ??CrossCallReturnLabel_61:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_52:
   \   00000D                       REQUIRE ??Subroutine22_0
   \   00000D                       ;               // Fall through to label ??Subroutine22_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_51:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    500          void LCDInstr(u8 Instr)
    501          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    502            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine5
    503            LCD_RW(0);
   \                     ??CrossCallReturnLabel_53:
   \   000009 2000                  JRA       ?Subroutine0
    504            LCDDataOut(Instr>>4);
    505            PulseEnable();
    506            LCDDataOut(Instr & 0x0F);
    507            PulseEnable();
    508          }
    509          

   \                                 In section .far_func.text, align 1, keep-with-next
    510          void LCDData(u8 Data)
    511          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    512            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine3
    513            LCD_RW(0);
   \                     ??CrossCallReturnLabel_5:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    514            LCDDataOut(Data>>4);
    515            PulseEnable() ;
    516            LCDDataOut(Data & 0x0F) ;
    517            PulseEnable();
    518          }
    519          

   \                                 In section .far_func.text, align 1, keep-with-next
    520          void LCDInstrNibble(u8 Instr)
    521          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    522            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine4
    523            LCD_RW(0);
    524            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_10:
   \   00000B AC000000              JPF       ??Subroutine22_0
    525            PulseEnable();
    526          }
    527          

   \                                 In section .far_func.text, align 1, keep-with-next
    528          void PulseEnable(void)
    529          {
    530            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine1
    531             Delay1(1);
    532            LCD_EN(1);
    533             Delay1(1);
    534            LCD_EN(0);
   \                     ??CrossCallReturnLabel_0:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine23_0
    535             Delay1(1);
   \                     ??CrossCallReturnLabel_56:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
    536          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_65:
   \   000006 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_45:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_44:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
    537          

   \                                 In section .far_func.text, align 1, keep-with-next
    538          void LCD_Busy(void)
    539          {
    540             //set Port D7 as Input
    541             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    542             //Set Read
    543             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine3
    544             LCD_RS(0);
   \                     ??CrossCallReturnLabel_4:
   \   000013 8D000000              CALLF     ?Subroutine5
    545             // Read Busy Flag
    546                timer2=0;
   \                     ??CrossCallReturnLabel_54:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
    547             do
    548             {
    549             // Enable set
    550               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine1
    551                Delay1(1);
    552               LCD_EN(1);
    553                Delay1(1);
    554             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_1:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
    555                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
    556                //Clear read
    557              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine23_0
    558             //set Port D7 as Output
    559             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_62:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
    560          
    561          }
    562          
    563          

   \                                 In section .far_func.text, align 1, keep-with-next
    564          void LCD(u8 data)
    565           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    566             //  static u8 linet=0;
    567          
    568          
    569               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265E                  JRNE      L:??CrossCallReturnLabel_47
    570               {
    571          
    572                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
    573                   {
    574                   case 0:
    575                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
    576                     count=0;
   \   00001F 725F0000              CLR       L:count
    577                     break;
   \   000023 2022                  JRA       L:??LCD_4
    578                   case 1:
    579                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
    580                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
    581                     break;
   \   00002F 2016                  JRA       L:??LCD_4
    582                   case 2:
    583                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
    584                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
    585                     break;
   \   00003B 200A                  JRA       L:??LCD_4
    586                   case 3:
    587                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
    588                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
    589                     break;
    590                   //default:
    591                    //  LCDInstr(0x80 |0x40);    //Line 1
    592                    }
    593                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
    594                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 2511                  JRC       L:??LCD_5
    595                   {
    596                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
    597                    LCDInstr(0x01); //Clear LCD
   \   000056 A601                  LD        A, #0x1
   \   000058 8D000000              CALLF     LCDInstr
    598                    Delay1(2500);
   \   00005C AE09C4                LDW       X, #0x9c4
   \   00005F 8D000000              CALLF     Delay1
    599                   }
    600          
    601                   Delay1(1);
   \                     ??LCD_5:
   \   000063 8D000000              CALLF     ?Subroutine20
    602          
    603          
    604               }
    605          
    606          
    607               if (count==20)
   \                     ??CrossCallReturnLabel_47:
   \   000067 C60000                LD        A, L:count
   \   00006A A114                  CP        A, #0x14
   \   00006C 260A                  JRNE      L:??LCD_6
    608                {
    609                  LCDInstr(0x80 | 0x40);
   \   00006E A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   000070 8D000000              CALLF     LCDInstr
    610                  Delay1(1);
   \                     ??LCD_8:
   \   000074 5F                    CLRW      X
   \   000075 5C                    INCW      X
   \   000076 2029                  JRA       ??LCD_9
    611                }
    612                   else if(count==40)
   \                     ??LCD_6:
   \   000078 A128                  CP        A, #0x28
   \   00007A 2604                  JRNE      L:??LCD_10
    613                  {
    614                    LCDInstr(0x80 | 0x14);
   \   00007C A694                  LD        A, #0x94
   \   00007E 20F0                  JRA       ??LCD_7
    615                    Delay1(1);
    616                  }
    617                    else if(count==60)
   \                     ??LCD_10:
   \   000080 A13C                  CP        A, #0x3c
   \   000082 260C                  JRNE      L:??LCD_11
    618                    {
    619                      LCDInstr(0x80 | 0x54);
   \   000084 A6D4                  LD        A, #0xd4
   \   000086 8D000000              CALLF     LCDInstr
    620                      count=0;
   \   00008A 725F0000              CLR       L:count
    621                      Delay1(1);
   \   00008E 20E4                  JRA       ??LCD_8
    622                    }
    623                      else if(count >80)
   \                     ??LCD_11:
   \   000090 A151                  CP        A, #0x51
   \   000092 2511                  JRC       L:??LCD_12
    624                        {
    625                          count=0;
   \   000094 725F0000              CLR       L:count
    626                          LCDInstr(0x01); //Clear LCD
   \   000098 A601                  LD        A, #0x1
   \   00009A 8D000000              CALLF     LCDInstr
    627                          Delay1(250);
   \   00009E AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   0000A1 8D000000              CALLF     Delay1
    628                        }
    629          
    630          
    631              /*
    632                   line++;
    633                   if (line>3)
    634                   {
    635                     line=1;  //Line 0 for Time
    636                   }
    637                 switch(line)
    638                   {
    639                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
    640                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
    641                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
    642                   default : LCDInstr(0x80 | 0x40); // Line 1
    643                   }
    644                   Delay(1);
    645                   count=0;
    646                }
    647          
    648               */
    649          
    650               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A5 B600                  LD        A, S:?b8
   \   0000A7 A11C                  CP        A, #0x1c
   \   0000A9 250F                  JRC       L:??LCD_13
    651               {
    652                 LCDData(data);
   \   0000AB 8D000000              CALLF     LCDData
    653                  Delay1(1);
   \   0000AF 8D000000              CALLF     ?Subroutine20
    654                 count++;
   \                     ??CrossCallReturnLabel_46:
   \   0000B3 C60000                LD        A, L:count
   \   0000B6 4C                    INC       A
   \   0000B7 C70000                LD        L:count, A
    655               }
    656           }
   \                     ??LCD_13:
   \   0000BA 320000                POP       S:?b8
   \   0000BD 87                    RETF
    657          

   \                                 In section .far_func.text, align 1, keep-with-next
    658          void InitDelayTimer()
    659          {
    660             //Timer 2 use for Delay  long Delay is 40ms for lcd
    661             //Tclock 16/8=2Mhz  /20 10us
    662                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
    663                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
    664                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
    665                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
    666            //Enable TIM2
    667                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
    668          
    669          }
    670          
    671          

   \                                 In section .far_func.text, align 1, keep-with-next
    672          u16 Average()
    673          {
    674           //Find average in measure
    675            u8 i=0;
   \                     Average:
   \   000000 3F00                  CLR       S:?b0
    676            u16 Summa=0;
   \   000002 3F00                  CLR       S:?b3
   \   000004 3F00                  CLR       S:?b2
    677            do
    678            {
    679             Summa+=measure[i++];
   \                     ??Average_0:
   \   000006 5F                    CLRW      X
   \   000007 41                    EXG       A, XL
   \   000008 B600                  LD        A, S:?b0
   \   00000A 41                    EXG       A, XL
   \   00000B 58                    SLLW      X
   \   00000C DE0000                LDW       X, (L:measure,X)
   \   00000F 72BB0000              ADDW      X, S:?w1
   \   000013 BF00                  LDW       S:?w1, X
   \   000015 B600                  LD        A, S:?b0
   \   000017 4C                    INC       A
   \   000018 B700                  LD        S:?b0, A
    680            } while ( measure[i]!=0);
   \   00001A 5F                    CLRW      X
   \   00001B 41                    EXG       A, XL
   \   00001C B600                  LD        A, S:?b0
   \   00001E 58                    SLLW      X
   \   00001F DE0000                LDW       X, (L:measure,X)
   \   000022 26E2                  JRNE      L:??Average_0
    681             if(i!=0) Summa=Summa/i;
   \   000024 3D00                  TNZ       S:?b0
   \   000026 2708                  JREQ      L:??Average_1
   \   000028 905F                  CLRW      Y
   \   00002A 61                    EXG       A, YL
   \   00002B BE00                  LDW       X, S:?w1
   \   00002D 65                    DIVW      X, Y
   \   00002E BF00                  LDW       S:?w1, X
    682             return Summa;
   \                     ??Average_1:
   \   000030 BE00                  LDW       X, S:?w1
   \   000032 87                    RETF
    683          }
    684          

   \                                 In section .far_func.text, align 1, keep-with-next
    685          PUTCHAR_PROTOTYPE
    686          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
    687            /* Place your implementation of fputc here */
    688            /* e.g. write a character to the USART */
    689                //USART_SendData(USART3, (u8) ch);
    690               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
    691             /* Loop until the end of transmission */
    692              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
    693            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
    694          }
    695          
    696          

   \                                 In section .far_func.text, align 1, keep-with-next
    697          void Delay1(u16 Delay)
    698          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
    699            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
    700            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
    701          }
   \   00000D 87                    RETF
    702          

   \                                 In section .far_func.text, align 1, keep-with-next
    703           void Delay2(u16 Delay)
    704          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
    705            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
    706            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
    707          }
   \   00000D 87                    RETF
    708          
    709          
    710          
    711          /*
    712          void Delay12 (u16 Delay)
    713          {
    714            timer2=0;
    715            while ( timer2 < Delay); ;
    716          }
    717          */
    718          
    719          
    720          #ifdef USE_FULL_ASSERT
    721          
    722          /**
    723            * @brief  Reports the name of the source file and the source line number
    724            *   where the assert_param error has occurred.
    725            * @param file: pointer to the source file name
    726            * @param line: assert_param error line source number
    727            * @retval : None
    728            */

   \                                 In section .far_func.text, align 1
    729          void assert_failed(u8* file, u32 line)
    730          {
    731            /* User can add his own implementation to report the file name and line number,
    732               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    733          
    734            /* Infinite loop */
    735            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
    736            {
    737          
    738            }
    739          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n      ">`:
   \   000000 0A2020202020          DC8 "\012      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02x:%02x:%02x">`:
   \   000000 0A253032783A          DC8 "\012%02x:%02x:%02x"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "Hello">`:
   \   000000 48656C6C6F00          DC8 "Hello"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d %c">`:
   \   000000 256420256300          DC8 "%d %c"
    740          #endif
    741          
    742          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     mounts                            1
     years                             1
     error                             1
     result                            4
     k                                 2
     ?Subroutine6                      9
     main                            133
     ?Subroutine10                    16
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine18                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine16                     9
     ??Subroutine24_0                  7
     ?Subroutine14                    11
     ?Subroutine12                     6
     Init_DS1307                      35
     ReadDS1307                       67
     ?Subroutine13                    10
     ?Subroutine11                    15
     Check_DS1307                     37
     Set_DS1307                       96
     ?Subroutine15                     4
     convert_tobcd                    23
     GpioConfiguration                76
     InitClk                          56
     ?Subroutine17                     9
     InitAdc                          45
     InitUart                         44
     SendChar                         15
     Send_Hello                       45
     ?Subroutine8                     14
     ?Subroutine21                     7
     ?Subroutine2                     26
     SendData                         61
     LCDDataOut                       87
     ?Subroutine3                      7
     ??Subroutine23_0                  5
     ?Subroutine19                     7
     ?Subroutine5                      2
     InitLcd                          91
     ?Subroutine7                     15
     ?Subroutine4                     11
     ?Subroutine0                     13
     ??Subroutine22_0                 10
     ?Subroutine9                     10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine1                     24
     ?Subroutine20                     6
     LCD_Busy                         69
     LCD                             190
     InitDelayTimer                   29
     Average                          51
     fputc                            18
     Delay1                           14
     Delay2                           14
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n      ">            8
     ?<Constant "\n%02x:%02x:%02x">   16
     ?<Constant "Hello">               6
     ?<Constant "%d %c">               6

 
 1 836 bytes in section .far_func.text
    82 bytes in section .near.bss
    44 bytes in section .near.rodata
 
 1 836 bytes of CODE  memory
    44 bytes of CONST memory
    82 bytes of DATA  memory

Errors: none
Warnings: none
