###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             21/Sep/2013  20:24:53 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     52          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     53          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     54          
     55          #define key_ok    GPIO_PIN_4
     56          #define key_plus  GPIO_PIN_1
     57          #define key_minus GPIO_PIN_2
     58            //DS18B20  Temp Sensor
     59          #define ds18_data GPIO_PIN_2 //2
     60          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     61            //Power
     62          #define power_pin GPIO_PIN_3
     63          
     64          
     65          
     66          //EEPROM Address;
     67          #define EEPROM_ADDR 0x4000
     68          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     69          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     70          #define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     71          #define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     72          #define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     73          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     74          #define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     75          #define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     76          #define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     77          
     78          #ifdef __GNUC__
     79            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     80               set to 'Yes') calls __io_putchar() */
     81            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     82          #else
     83            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     84          #endif /* __GNUC__ */
     85          
     86          
     87          
     88          
     89          #define SpecialSymbol 0x1b //Esc to start message
     90          //#define data_size 20
     91          #define key_time 8000
     92          #define key_time_ok 15000
     93          #define key_time_press 4000
     94          #define key_time_release 400
     95          #define DS_Control  0x10  // Out 1s
     96          #define time_menu 10  // 5s
     97          //#define sync_time 30 // 30s
     98          
     99          
    100          
    101          
    102          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    103          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    104          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    105          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    106          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    107          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    108          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    109          //char data[data_size];
    110          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    111          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    116          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    117          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    118          u8 month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    119          u8 year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    131          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    132          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    133          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    134          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    140          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    142          char  daily_dispaly,month_display,sync_display;
   \                     daily_dispaly:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     month_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    143          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1
    144          
    145          
    146          

   \                                 In section .near.bss, align 1
    147          char line1[8];
   \                     line1:
   \   000000                       DS8 8
    148          //char string1[10];
    149          //char string2[10];

   \                                 In section .near.bss, align 1
    150          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    152          
    153          //u8 index=0;

   \                                 In section .near.bss, align 1
    154          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    155          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    156          
    157          
    158           struct   status_reg
    159           {
    160             unsigned on:1;
    161             unsigned timer_on:1;
    162             unsigned daily:1;
    163             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    164           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    165          
    166          //time_t  ltime;
    167          //struct tm ptim;
    168          
    169          
    170          
    171          
    172          
    173          /* Private function prototypes -----------------------------------------------*/
    174          void InitHardware();
    175          void GpioConfiguration();
    176          void InitClk();
    177          void InitAdc();
    178          void InitI2C();
    179          void EEPROM_INIT();
    180          bool ReadDS1307();
    181          //void InitUart();
    182          void InitLcd();
    183          void InitDelayTimer2();
    184          void InitDelayTimer3();
    185          void Delay1( u16 Delay);
    186          void Delay2( u16 Delay);
    187          void Delay_us(u16 Delay);
    188          void LCDInstrNibble (u8 Instr);
    189          void LCDInstr(u8 Instr);
    190          void LCDDataOut(u8 data);
    191          void LCD_Busy();
    192          void PulseEnable();
    193          //void SendData();
    194          void SendChar(u8 Char);
    195          //void Send_Hello();
    196          bool Set_Clock();
    197          bool key_ok_on();
    198          bool key_plus_on();
    199          bool key_minus_on();
    200          bool key_ok_plus();
    201          bool Init_DS1307(void);
    202          bool Check_DS1307(void);
    203          bool I2C_Start(void);
    204          bool I2C_WA(u8 address);
    205          bool I2C_WD(u8 data);
    206          bool I2C_RA(u8 address);
    207          bool Set_DS1307();
    208          //bool Set_Delay_Allarm();
    209          bool Set_Timer_On();
    210          bool Set_Timer_Off();
    211          bool Read_Allarm();
    212          bool Read_DS18();
    213          bool DS18_Write( u8 data);
    214          bool DS18_Reset();
    215          bool DS18Set();
    216          u8 temperature();
    217          u8 DS18_Read();
    218          u8 convert_tobcd(u8 data);
    219          u8 I2C_RD(void);
    220          u8 adj(u8 min,u8 max,u8 now);
    221          u8 bcd2hex(u8 bcd);
    222          void Power_On(void);
    223          void Power_Off();
    224          void Save_Status();
    225          void Rotate_Line( char * line);
    226          void Display_Line(char * line);
    227          void Clear_Line1(void);
    228          void Clear_Line2(void);
    229          void Menu(void);
    230          u8 Key_Press(void);
    231          void Display(void);
    232          bool Set_Date(void);
    233          
    234          u16  Average();
    235          
    236          
    237          /* Private functions ---------------------------------------------------------*/
    238          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1
    239          void main(void)
    240          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    241              /*High speed internal clock prescaler: 1*/
    242              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    243          
    244              InitClk();
   \   000003 8D000000              CALLF     InitClk
    245              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    246              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    247              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    248              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine16
    249              //InitUart();
    250               enableInterrupts();
   \                     ??CrossCallReturnLabel_39:
   \   000017 9A                    RIM
    251              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    252               InitLcd();
   \   000018 8D000000              CALLF     InitLcd
    253              //InitAdc();
    254              InitI2C();
   \   00001C 8D000000              CALLF     InitI2C
    255          
    256              //year=bcd2hex(13);
    257              Delay1(1000);
   \   000020 AE03E8                LDW       X, #0x3e8
   \   000023 8D000000              CALLF     Delay1
    258               if (!ReadDS1307())
   \   000027 8D000000              CALLF     ReadDS1307
   \   00002B A100                  CP        A, #0x0
   \   00002D 2615                  JRNE      L:??main_0
    259               {
    260                 printf("\n E2:%d",error);
   \   00002F C60000                LD        A, L:error
   \   000032 5F                    CLRW      X
   \   000033 97                    LD        XL, A
   \   000034 89                    PUSHW     X
   \   000035 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000038 8D000000              CALLF     printf
   \   00003C 5B02                  ADD       SP, #0x2
    261                 // Reset the CPU: Enable the watchdog and wait until it expires
    262                 IWDG->KR = IWDG_KEY_ENABLE;
   \   00003E 35CC50E0              MOV       L:0x50e0, #0xcc
    263                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_1:
   \   000042 20FE                  JRA       L:??main_1
    264               }
    265               //Send_Hello();
    266              //line_lcd=0;
    267              //printf("\nHello");
    268          
    269          
    270              if (!Check_DS1307())
   \                     ??main_0:
   \   000044 8D000000              CALLF     Check_DS1307
   \   000048 A100                  CP        A, #0x0
   \   00004A 2626                  JRNE      L:??main_2
    271              {
    272                 if (error!=0)
   \   00004C C60000                LD        A, L:error
   \   00004F 2712                  JREQ      L:??main_3
    273                 {
    274                  printf("\n E:%d",error);
   \   000051 5F                    CLRW      X
   \   000052 97                    LD        XL, A
   \   000053 89                    PUSHW     X
   \   000054 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000057 8D000000              CALLF     printf
   \   00005B 5B02                  ADD       SP, #0x2
    275                   while (!key_ok_on());
   \                     ??main_4:
   \   00005D 8D000000              CALLF     ?Subroutine41
    276          
    277                 }
   \                     ??CrossCallReturnLabel_119:
   \   000061 27FA                  JREQ      L:??main_4
    278               line_lcd=0;
   \                     ??main_3:
   \   000063 725F0000              CLR       L:line_lcd
    279               printf("\nSetClock");
   \   000067 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00006A 8D000000              CALLF     printf
    280                Set_Clock();
   \   00006E 8D000000              CALLF     Set_Clock
    281          
    282              }
    283          
    284          
    285                 //Read Status register from eepom and update it
    286                //size=sizeof(status);
    287               //u16 status
    288               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_2:
   \   000072 AE4000                LDW       X, #0x4000
   \   000075 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   000079 B700                  LD        S:?b8, A
   \   00007B AE4001                LDW       X, #0x4001
   \   00007E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   000082 905F                  CLRW      Y
   \   000084 9097                  LD        YL, A
   \   000086 5F                    CLRW      X
   \   000087 41                    EXG       A, XL
   \   000088 B600                  LD        A, S:?b8
   \   00008A 41                    EXG       A, XL
   \   00008B 4F                    CLR       A
   \   00008C 02                    RLWA      X, A
   \   00008D 8D000000              CALLF     ??Subroutine76_0
   \                     ??CrossCallReturnLabel_244:
   \   000091 CF0000                LDW       L:status, X
    289                status_check = *(u16*)(&status);
   \   000094 CE0000                LDW       X, L:status
   \   000097 CF0000                LDW       L:status_check, X
    290              //When Start Check for Allarm and computing Daily_long_on
    291               if ( Read_Allarm() == TRUE)
   \   00009A 8D000000              CALLF     Read_Allarm
   \   00009E A101                  CP        A, #0x1
   \   0000A0 260B                  JRNE      L:??CrossCallReturnLabel_1
    292               {
    293                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000A2 8D000000              CALLF     ?Subroutine3
    294                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_3:
   \   0000A6 C60000                LD        A, L:daily_hour_off
   \   0000A9 8D000000              CALLF     ?Subroutine2
    295               }
    296          
    297          
    298                // Enable Timer3
    299                 TIM3_Cmd(ENABLE);
   \                     ??CrossCallReturnLabel_1:
   \   0000AD A601                  LD        A, #0x1
   \   0000AF 8D000000              CALLF     TIM3_Cmd
    300          
    301                     //Init DS18B20
    302              DS18Set();
   \   0000B3 8D000000              CALLF     DS18Set
    303              line_lcd=0;
   \   0000B7 725F0000              CLR       L:line_lcd
    304              if (!Read_DS18())
   \   0000BB 8D000000              CALLF     Read_DS18
   \   0000BF A100                  CP        A, #0x0
   \   0000C1 260D                  JRNE      L:??main_5
    305              {
    306               printf("\nDS_Err_I");
   \   0000C3 AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   0000C6 8D000000              CALLF     printf
    307                while (!key_ok_on());
   \                     ??main_6:
   \   0000CA 8D000000              CALLF     ?Subroutine41
    308              }
   \                     ??CrossCallReturnLabel_120:
   \   0000CE 27FA                  JREQ      L:??main_6
    309          
    310              daily_dispaly=' ';
   \                     ??main_5:
   \   0000D0 35200000              MOV       L:daily_dispaly, #0x20
    311              month_display=' ';
   \   0000D4 35200000              MOV       L:month_display, #0x20
    312              sync_time_ds1307= TRUE;
   \   0000D8 35010000              MOV       L:sync_time_ds1307, #0x1
   \   0000DC 2006                  JRA       L:??CrossCallReturnLabel_220
    313          
    314               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    315          
    316               // Working fuction
    317              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 month,u8 hours,u8 minutes,u8 seconds)
    318          
    319          
    320          
    321              // strcpy(line1,"Hello I am here! ");
    322              //  while(1)
    323              //  {
    324              //     Display_Line(line1);
    325              //     Delay2(20000);
    326              //  }
    327              //  while (!key_ok_on());
    328                 //sprintf(line1,"TIMER ON ");
    329              while(1)
    330              {
    331               // ADC1_Cmd (ENABLE);
    332          
    333                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    334                  // Delay2(10000);
    335                   //ttimer++;
    336                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    337                //   Delay2(5000);
    338          
    339                     //status_check = *(u16*)(&status);
    340          
    341          
    342                /*
    343               if (!ReadDS1307())
    344               {
    345                 printf("\n E2:%d",error);
    346                  //restart i2c
    347                // Reset the CPU: Enable the watchdog and wait until it expires
    348                 IWDG->KR = IWDG_KEY_ENABLE;
    349                 while ( 1 );    // Wait until reset occurs from IWDG
    350          
    351               }
    352               */
    353          
    354          
    355                if(key_ok_on()) Menu();
    356                if(key_plus_on()) Power_On();
    357                if(key_minus_on())Power_Off();
    358          
    359                /*
    360                //Check for Allarm
    361                    if (status.daily==1)
    362                  {
    363                u16 time_now=hours*60+minutes;
    364                status.on=0;
    365                     u16 time=time_on;
    366                     do
    367                    {
    368                       if(time==time_now)
    369                       {
    370                         status.on=1;
    371                          break ;
    372                       }
    373                        time++;
    374                         if( time==1441) time=0;
    375                    } while(!(time==time_off));
    376                   };
    377          
    378                 */
    379                      //Read Temperature
    380                  // if( ttimer > 5 )
    381                   //{
    382          
    383                     /*
    384                      result1=temperature();
    385                      if (result_old != result1) change=TRUE;
    386                       //else  change=FALSE;
    387                      result_old=result1;
    388                      result2=0;
    389                      if(result1%2!=0) result2=5;
    390                      result1/=2;
    391                     */
    392          
    393                     // char result3;
    394                     // ttimer=0;
    395                 //  }
    396          
    397                   //printf("\n%d.%d",result1,result2);
    398          
    399                     //Display
    400                     // line_lcd=0;
    401          
    402                  /*
    403                     if (status.daily==1)  sprintf(string1,"TIMER On");
    404                      else sprintf(string1,"TIMER Off");
    405                     if (status.monthly==1) sprintf(string2,"Monthly On");
    406                       else sprintf(string2,"Monthly Off");
    407                  */
    408          
    409          
    410                   /*
    411                       if (change)
    412                       {
    413                      sprintf(line1,"%d.%dC %s %s",result1,result2,string1,string2);
    414                         change=FALSE;
    415                       }
    416                     line_lcd=0;
    417                      Display_Line(line1);
    418                    line_lcd=1;
    419                    printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    420          
    421                   */
    422          
    423                      if(Time_Display) Display();  //
    424                      if(sync_time_ds1307)  // Sync local time with DS1307
    425                      {
    426                         if (!ReadDS1307())
    427                           {
    428                             printf("\n E2:%d",error);
    429                             //restart i2c
    430                            // Reset the CPU: Enable the watchdog and wait until it expires
    431                            IWDG->KR = IWDG_KEY_ENABLE;
    432                             while ( 1 );    // Wait until reset occurs from IWDG
    433                            }
    434                         sync_time_ds1307=FALSE;
    435                         sync_display='S';
    436                      }
    437          
    438                     if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_7:
   \   0000DE A608                  LD        A, #0x8
   \   0000E0 8D000000              CALLF     ??Subroutine73_0
   \                     ??CrossCallReturnLabel_220:
   \   0000E4 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_121:
   \   0000E8 2704                  JREQ      L:??main_8
   \   0000EA 8D000000              CALLF     Menu
   \                     ??main_8:
   \   0000EE 8D000000              CALLF     key_plus_on
   \   0000F2 A100                  CP        A, #0x0
   \   0000F4 2704                  JREQ      L:??main_9
   \   0000F6 8D000000              CALLF     Power_On
   \                     ??main_9:
   \   0000FA 8D000000              CALLF     key_minus_on
   \   0000FE A100                  CP        A, #0x0
   \   000100 2704                  JREQ      L:??main_10
   \   000102 8D000000              CALLF     Power_Off
   \                     ??main_10:
   \   000106 C60000                LD        A, L:Time_Display
   \   000109 2704                  JREQ      L:??main_11
   \   00010B 8D000000              CALLF     Display
   \                     ??main_11:
   \   00010F C60000                LD        A, L:sync_time_ds1307
   \   000112 2725                  JREQ      L:??main_12
   \   000114 8D000000              CALLF     ReadDS1307
   \   000118 A100                  CP        A, #0x0
   \   00011A 2615                  JRNE      L:??main_13
   \   00011C C60000                LD        A, L:error
   \   00011F 5F                    CLRW      X
   \   000120 97                    LD        XL, A
   \   000121 89                    PUSHW     X
   \   000122 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000125 8D000000              CALLF     printf
   \   000129 5B02                  ADD       SP, #0x2
   \   00012B 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_14:
   \   00012F 20FE                  JRA       L:??main_14
   \                     ??main_13:
   \   000131 725F0000              CLR       L:sync_time_ds1307
   \   000135 35530000              MOV       L:sync_display, #0x53
   \                     ??main_12:
   \   000139 CE0000                LDW       X, L:status
   \   00013C 9F                    LD        A, XL
   \   00013D A501                  BCP       A, #0x1
   \   00013F 269D                  JRNE      L:??main_7
    439                       else   GPIO_WriteLow(GPIOD, power_pin );
   \   000141 8D000000              CALLF     ?Subroutine16
    440          
    441          
    442          
    443              }
   \                     ??CrossCallReturnLabel_38:
   \   000145 209D                  JRA       L:??CrossCallReturnLabel_220
    444          
    445          
    446          
    447          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine16:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine5:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 905F                  CLRW      Y
   \   000005 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_182:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_247:
   \   000010 CF0000                LDW       L:time_on, X
   \   000013 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine76_0
   \   000002                       ;               // Fall through to label ??Subroutine76_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine76_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_181:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_246:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine66:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0
    448          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine71_0
   \   000004                       ;               // Fall through to label ??Subroutine71_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
    449          void Display(void)
    450          {
    451             //Clear_Line1 ();
    452             result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    453             result2=0;
   \   000007 725F0000              CLR       L:result2
    454             if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    455             result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    456          
    457          
    458             if (status.monthly) month_display='M';
   \   000018 CE0000                LDW       X, L:status
   \   00001B 9F                    LD        A, XL
   \   00001C A508                  BCP       A, #0x8
   \   00001E 2706                  JREQ      L:??Display_1
   \   000020 354D0000              MOV       L:month_display, #0x4d
   \   000024 2004                  JRA       L:??Display_2
    459               else month_display=' ';
   \                     ??Display_1:
   \   000026 35200000              MOV       L:month_display, #0x20
    460               //Blink D
    461             if (status.on && status.daily)
   \                     ??Display_2:
   \   00002A CE0000                LDW       X, L:status
   \   00002D 9F                    LD        A, XL
   \   00002E A501                  BCP       A, #0x1
   \   000030 2762                  JREQ      L:??Display_3
   \   000032 CE0000                LDW       X, L:status
   \   000035 9F                    LD        A, XL
   \   000036 A504                  BCP       A, #0x4
   \   000038 275A                  JREQ      L:??Display_3
    462             {
    463               if (daily_dispaly=='D') daily_dispaly=' ';
   \   00003A C60000                LD        A, L:daily_dispaly
   \   00003D A144                  CP        A, #0x44
   \   00003F 265B                  JRNE      L:??Display_4
   \                     ??Display_5:
   \   000041 35200000              MOV       L:daily_dispaly, #0x20
    464                else daily_dispaly='D';
    465             }
    466              else if (status.daily) daily_dispaly='D';
    467               else daily_dispaly=' ';
    468             sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,sync_display,daily_dispaly,month_display);
   \                     ??Display_6:
   \   000045 C60000                LD        A, L:month_display
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B C60000                LD        A, L:daily_dispaly
   \   00004E 97                    LD        XL, A
   \   00004F 89                    PUSHW     X
   \   000050 C60000                LD        A, L:sync_display
   \   000053 97                    LD        XL, A
   \   000054 89                    PUSHW     X
   \   000055 C60000                LD        A, L:result2
   \   000058 97                    LD        XL, A
   \   000059 89                    PUSHW     X
   \   00005A C60000                LD        A, L:result1
   \   00005D 97                    LD        XL, A
   \   00005E 89                    PUSHW     X
   \   00005F 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000063 AE0000                LDW       X, #line1
   \   000066 8D000000              CALLF     sprintf
   \   00006A 5B0A                  ADD       SP, #0xa
    469             line_lcd=0;
   \   00006C 725F0000              CLR       L:line_lcd
    470             printf(line1);
   \   000070 AE0000                LDW       X, #line1
   \   000073 8D000000              CALLF     ?Subroutine26
    471          
    472             line_lcd=1;
    473             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_207:
   \   000077 89                    PUSHW     X
   \   000078 C60000                LD        A, L:minutes
   \   00007B 97                    LD        XL, A
   \   00007C 89                    PUSHW     X
   \   00007D C60000                LD        A, L:hours
   \   000080 97                    LD        XL, A
   \   000081 89                    PUSHW     X
   \   000082 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000085 8D000000              CALLF     printf
   \   000089 5B06                  ADD       SP, #0x6
    474          
    475          
    476             Time_Display=FALSE;
   \   00008B 725F0000              CLR       L:Time_Display
    477             sync_display=' ';
   \   00008F 35200000              MOV       L:sync_display, #0x20
    478          }
   \   000093 87                    RETF
   \                     ??Display_3:
   \   000094 CE0000                LDW       X, L:status
   \   000097 9F                    LD        A, XL
   \   000098 A504                  BCP       A, #0x4
   \   00009A 27A5                  JREQ      L:??Display_5
   \                     ??Display_4:
   \   00009C 35440000              MOV       L:daily_dispaly, #0x44
   \   0000A0 20A3                  JRA       L:??Display_6
    479          

   \                                 In section .far_func.text, align 1
    480          void Power_On()
    481          {
    482            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine42
    483            status.daily=0; //Off Daily timer
    484            status.monthly=0; //Off Monthly alarm
    485            Save_Status();
   \                     ??CrossCallReturnLabel_123:
   \   00000A AC000000              JPF       Save_Status
    486          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_180:
   \   000004 A4F7                  AND       A, #0xf7
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine64:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E CE0000                LDW       X, L:status
   \   000011 01                    RRWA      X, A
   \   000012 87                    RETF
    487          

   \                                 In section .far_func.text, align 1, keep-with-next
    488          void Power_Off()
    489          {
    490            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine42
    491            status.daily=0; //Off Daily alarm
    492            status.monthly=0; //Off Monthly alarm
    493            Save_Status();
   \                     ??CrossCallReturnLabel_122:
   \   00000A AC000000              JPF       Save_Status
    494          
    495          }
    496          

   \                                 In section .far_func.text, align 1, keep-with-next
    497          void InitI2C(void)
    498          {
    499             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    500             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    501             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    502          }
    503          

   \                                 In section .far_func.text, align 1, keep-with-next
    504          bool I2C_Start(void)
    505          {
    506             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    507                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    508              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_144:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    509                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    510                  {
    511                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    512                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    513                  }
    514                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    515          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    516          

   \                                 In section .far_func.text, align 1, keep-with-next
    517          bool I2C_WA(u8 address)
    518          {
    519            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    520                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    521                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_143:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    522                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    523                   {
    524                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    525                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    526                   }
    527                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    528          }
    529          

   \                                 In section .far_func.text, align 1, keep-with-next
    530          bool I2C_RA(u8 address)
    531          {
    532            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    533                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    534                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_145:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    535                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    536                   {
    537                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    538                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    539                   }
    540                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    541          }
    542          
    543          

   \                                 In section .far_func.text, align 1, keep-with-next
    544          bool I2C_WD(u8 data)
    545          {
    546           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    547             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    548             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_142:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    549              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    550              {
    551                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    552                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    553              }
    554               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    555          }
    556          

   \                                 In section .far_func.text, align 1, keep-with-next
    557          u8 I2C_RD(void)
    558          {
    559           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    560            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    561           //while((!(I2C->SR1 & 0x40))&&timeout);
    562           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    563           {
    564             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    565             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    566           }
    567           u8 data=I2C_ReceiveData();
    568           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    569          }
    570          
    571            /*
    572          bool Init_DS1307(void)
    573          {
    574             // Test DS1307
    575              error=0;
    576              if (!I2C_Start()) return FALSE;
    577              if(!I2C_WA(0xD0)) return FALSE;
    578              if(!I2C_WD(0x00)) return FALSE;
    579              if(!I2C_WD(0x00)) return FALSE;
    580              I2C_GenerateSTOP(ENABLE);
    581          
    582              // timeout=100;  error=4;
    583              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    584              //    if (!timeout)return FALSE ;
    585               return TRUE;
    586          }
    587             */
    588          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine75_0
   \   000001                       ;               // Fall through to label ??Subroutine75_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    589          bool  ReadDS1307(void)
    590          {
    591                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine45
    592                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_138:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    593                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_141:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    594                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_240:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    595                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine33
    596                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_83:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    597                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    598                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine31
    599                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_76:
   \   000028 C70000                LD        L:seconds, A
    600                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine31
    601                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_75:
   \   00002F C70000                LD        L:minutes, A
    602                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine31
    603                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_74:
   \   000036 C70000                LD        L:hours, A
    604                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine31
    605                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_73:
   \   00003D C70000                LD        L:days, A
    606                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine31
    607                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_72:
   \   000044 C70000                LD        L:`date`, A
    608                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine31
    609                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_71:
   \   00004B C70000                LD        L:month, A
    610                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine35
    611                   I2C_GenerateSTOP(ENABLE);
    612                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_84:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    613          
    614               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    615               //   u8 data1 = I2C_RD();
    616                //Last read byte by I2C slave
    617               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    618               //  I2C_GenerateSTOP(ENABLE);
    619               //  temp2= I2C_RD();
    620                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    621                    {
    622                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    623                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    624                    }
    625          
    626                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    627          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_177:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    628          

   \                                 In section .far_func.text, align 1, keep-with-next
    629          bool Check_DS1307(void)
    630          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    631             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    632                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine45
    633                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_137:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    634                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_140:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    635                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine75_0
   \                     ??CrossCallReturnLabel_243:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    636                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine33
    637                  //Last read byte by I2C slave
    638                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_82:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    639                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    640                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine63
    641                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_178:
   \   00002E B700                  LD        S:?b8, A
    642                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine35
    643                 I2C_GenerateSTOP(ENABLE);
    644                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_85:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    645                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    646          }
    647          

   \                                 In section .far_func.text, align 1, keep-with-next
    648          bool Set_DS1307()
    649          {
    650                 // convert hex or decimal to bcd format
    651          
    652          
    653                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine45
    654                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_136:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    655                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_139:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    656                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_239:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    657                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_129:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    658                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_130:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    659                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_131:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    660                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_132:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    661                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_133:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    662                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_134:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    663                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_135:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    664                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine75_0
   \                     ??CrossCallReturnLabel_241:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    665                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine75_0
   \                     ??CrossCallReturnLabel_242:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    666                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    667          
    668          
    669             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    670          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    671          
    672          

   \                                 In section .far_func.text, align 1, keep-with-next
    673          u8 convert_tobcd(u8 data)
    674          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    675             u8 data_second_decimal=data/10;
    676             u8 data_first_decimal=data - 10*data_second_decimal;
    677             data=16*data_second_decimal + data_first_decimal;
    678            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    679          }
    680          

   \                                 In section .far_func.text, align 1, keep-with-next
    681          u8 bcd2hex(u8 bcd)
    682          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    683            u8 hex=0;
    684            hex=(bcd>>4)*10 +(bcd&0x0f);
    685            bcd=0;
    686            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    687          }
    688          
    689          

   \                                 In section .far_func.text, align 1, keep-with-next
    690          bool Set_Clock()
    691          {
    692              //Clear Display
    693             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine19
    694             Delay1(1000);
    695             line_lcd=0;
    696              printf("\nYear>");
    697                do
    698              {
    699               line_lcd=1;
   \                     ??CrossCallReturnLabel_44:
   \   000004 8D000000              CALLF     ?Subroutine27
    700               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_58:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    701                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine69_0
    702              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_192:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_108:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_44
    703          
    704               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine40
    705              printf("\nMonth>");
    706                do
    707              {
    708               line_lcd=1;
   \                     ??CrossCallReturnLabel_102:
   \   000036 8D000000              CALLF     ?Subroutine27
    709               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_59:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    710                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    711              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_109:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_102
    712          
    713              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine20
    714               Delay1(1000);
    715                line_lcd=0;
    716              printf("\nDate>");
    717                do
    718              {
    719               line_lcd=1;
   \                     ??CrossCallReturnLabel_46:
   \   00006A 8D000000              CALLF     ?Subroutine27
    720               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_60:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    721                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    722              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_110:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_46
    723          
    724          
    725              //Clear Display
    726             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine21
    727             Delay1(1000);
    728             line_lcd=0;
    729              printf("\nDays>");
   \                     ??CrossCallReturnLabel_48:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    730                do
    731              {
    732                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    733               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    734                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    735              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_111:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    736          
    737          
    738          
    739             //Clear Display
    740             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine21
    741             Delay1(1000);
    742             line_lcd=0;
    743              printf("\nHour>");
   \                     ??CrossCallReturnLabel_49:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    744                do
    745              {
    746                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine71_0
    747               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_208:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    748                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine69_0
    749              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_191:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_112:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    750          
    751               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    752               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    753                do
    754              {
    755                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine71_0
    756               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_209:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    757                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine34
    758              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_197:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_113:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    759          
    760              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    761              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    762              do
    763              {
    764                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine71_0
    765               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_210:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    766                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine34
    767              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_196:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_114:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    768          
    769                // Set parameter to DS1307 + time byte
    770                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    771          
    772                //bool k=Check_DS1307();
    773          
    774            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    775          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_171:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_172:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine69_0
   \   000006                       ;               // Fall through to label ??Subroutine69_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_173:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_184:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    776          
    777          

   \                                 In section .far_func.text, align 1, keep-with-next
    778          u8 adj(u8 min,u8 max,u8 now)
    779          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    780             u8 adj=now;
    781             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    782             {
    783               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    784               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    785             }
    786             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    787             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    788             {
    789               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    790               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    791             }
    792             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    793             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    794          
    795             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    796          }
    797          
    798          

   \                                 In section .far_func.text, align 1, keep-with-next
    799          bool key_ok_on()
    800          {
    801            //Read Key OK
    802            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_77:
   \   000004 2627                  JRNE      L:??key_ok_on_0
    803             {
    804               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    805                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_78:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    806                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 250D                  JRC       L:??key_ok_on_0
    807                 {
    808                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    809                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;   //if realease retrun true
   \   000024 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_79:
   \   000028 2703                  JREQ      L:??key_ok_on_0
   \   00002A A601                  LD        A, #0x1
   \   00002C 87                    RETF
    810                 }
    811             }
    812          
    813            return FALSE;
   \                     ??key_ok_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    814          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    815          
    816          
    817          

   \                                 In section .far_func.text, align 1, keep-with-next
    818           bool key_plus_on()
    819          {
    820            //Read Key OK
    821              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_95:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2623                  JRNE      L:??key_plus_on_0
    822               {
    823               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    824                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_87:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_94:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    825                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_plus_on_0
    826                  {
    827                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_81:
   \   000026 2703                  JREQ      L:??key_plus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    828                  }
    829               }
    830          
    831            return FALSE;
   \                     ??key_plus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    832          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    833          
    834          

   \                                 In section .far_func.text, align 1, keep-with-next
    835            bool key_minus_on()
    836          {
    837            //Read Key OK
    838             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_97:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2623                  JRNE      L:??key_minus_on_0
    839               {
    840               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    841                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_86:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_96:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    842                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_minus_on_0
    843                  {
    844                   if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_80:
   \   000026 2703                  JREQ      L:??key_minus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    845                  }
    846               }
    847          
    848            return FALSE;
   \                     ??key_minus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    849          }
    850          
    851          

   \                                 In section .far_func.text, align 1, keep-with-next
    852          bool  key_ok_plus()
    853          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    854            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_40:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    855            {
    856                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    857                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_88:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_41:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    858                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_89:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    859            }
    860          
    861           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    862          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    863          
    864          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    865          bool Set_Timer_On()
    866          {
    867          
    868             //clr
    869             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine21
    870             Delay1(1000);
    871             line_lcd=0;
    872             printf("\nH On>");
   \                     ??CrossCallReturnLabel_52:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On>">`
   \   000007 8D000000              CALLF     ?Subroutine39
    873              timer3=0;
    874            do
    875              {
    876               line_lcd=1;
   \                     ??CrossCallReturnLabel_100:
   \   00000B 8D000000              CALLF     ?Subroutine30
    877               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_68:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    878                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine69_0
    879              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_189:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_127:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_117:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_100
    880          
    881             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    882             Delay1(1000);
    883             line_lcd=0;
    884             printf("\nMin On>");
   \                     ??CrossCallReturnLabel_53:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On>">`
   \   000041 8D000000              CALLF     ?Subroutine39
    885              timer3=0;
    886            do
    887              {
    888               line_lcd=1;
   \                     ??CrossCallReturnLabel_101:
   \   000045 8D000000              CALLF     ?Subroutine30
    889               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_69:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    890                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine34
    891              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_194:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_128:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_118:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_101
    892          
    893             //Save data to eeprom
    894               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_On_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_On_3
    895                 else status.daily=0;
   \                     ??Set_Timer_On_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_On_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    896               EEPROM_INIT();
    897              //u8 temp =*(u8*)(&status);
    898              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    899               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    900               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    901               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_199:
   \   000088 C60000                LD        A, L:daily_hour_on
   \   00008B AE4002                LDW       X, #0x4002
   \   00008E 8D000000              CALLF     ?Subroutine6
    902               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_17:
   \   000092 C60000                LD        A, L:daily_minute_on
   \   000095 AE4003                LDW       X, #0x4003
   \   000098 8D000000              CALLF     ?Subroutine4
    903               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    904                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_5:
   \   00009C 8D000000              CALLF     ?Subroutine3
    905                 change=TRUE;
   \                     ??CrossCallReturnLabel_2:
   \   0000A0 35010000              MOV       L:change, #0x1
    906          
    907             return TRUE;
   \   0000A4 A601                  LD        A, #0x1
   \   0000A6 87                    RETF
    908          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_205:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_204:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004                       REQUIRE ??Subroutine70_0
   \   000004                       ;               // Fall through to label ??Subroutine70_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_203:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_202:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    909          

   \                                 In section .far_func.text, align 1, keep-with-next
    910          bool Set_Timer_Off()
    911          {
    912          
    913              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine21
    914              Delay1(1000);
    915              line_lcd=0;
    916              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_50:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine39
    917               timer3=0;
    918            do
    919              {
    920               line_lcd=1;
   \                     ??CrossCallReturnLabel_98:
   \   00000B 8D000000              CALLF     ?Subroutine29
    921               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_65:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    922                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine69_0
    923              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_190:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_125:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_115:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_98
    924          
    925            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    926             Delay1(1000);
    927             line_lcd=0;
    928             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_51:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   000041 8D000000              CALLF     ?Subroutine39
    929             timer3=0;
    930            do
    931              {
    932               line_lcd=1;
   \                     ??CrossCallReturnLabel_99:
   \   000045 8D000000              CALLF     ?Subroutine29
    933               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_66:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    934                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine34
    935              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_195:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_126:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_116:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_99
    936          
    937            //Save data to eeprom
    938               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_Off_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_Off_3
    939                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_Off_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    940               EEPROM_INIT();
    941              //u8 temp =*(u8*)(&status);
    942              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    943               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    944               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    945               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_198:
   \   000088 C60000                LD        A, L:daily_hour_off
   \   00008B AE4004                LDW       X, #0x4004
   \   00008E 8D000000              CALLF     ?Subroutine6
    946               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_16:
   \   000092 C60000                LD        A, L:daily_minute_off
   \   000095 AE4005                LDW       X, #0x4005
   \   000098 8D000000              CALLF     ?Subroutine4
    947               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    948                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_6:
   \   00009C C60000                LD        A, L:daily_hour_off
   \   00009F 905F                  CLRW      Y
   \   0000A1 8D000000              CALLF     ?Subroutine2
    949                 change=TRUE;
   \                     ??CrossCallReturnLabel_0:
   \   0000A5 35010000              MOV       L:change, #0x1
    950               return TRUE;
   \   0000A9 A601                  LD        A, #0x1
   \   0000AB 87                    RETF
    951          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    952          
    953          /*
    954               //Computing time_long_on
    955          
    956               u8 hour=daily_hour_on;
    957               u8 minute=daily_minute_on;
    958               daily_long_on=0;
    959               do
    960               {
    961                    daily_long_on++;
    962                    minute++;
    963                    if (minute==60)
    964                    {
    965                      minute=0;
    966                      hour++;
    967                    }
    968                    if(hour==24) hour=0;
    969          
    970               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
    971          
    972                //Display daily_long_on
    973              LCDInstr(0x01);
    974              Delay1(1000);
    975              line_lcd=0;
    976              printf("\nLong :");
    977          
    978                do
    979              {
    980               line_lcd=1;
    981               printf("\n%d",daily_long_on);
    982                 //daily_long_on=adj(0,1440,daily_long_on);
    983              } while (!key_ok_on());
    984          
    985              time_on=daily_hour_on*60+daily_minute_on;
    986              time_off= daily_hour_off*60+daily_minute_off;
    987              //Save data to eeprom
    988                status.daily=1;
    989               EEPROM_INIT();
    990              //u8 temp =*(u8*)(&status);
    991              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    992               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    993               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    994               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    995               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    996               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    997               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    998               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    999          
   1000             return TRUE;
   1001          
   1002          }
   1003            */
   1004          

   \                                 In section .far_func.text, align 1, keep-with-next
   1005          void Save_Status()
   1006          {
   1007            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ??Subroutine70_0
   1008            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1009            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1010            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_201:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
   1011          }
   1012          

   \                                 In section .far_func.text, align 1
   1013          bool Read_Allarm()
   1014          {
   1015             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   000007 C70000                LD        L:daily_hour_on, A
   1016              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
   1017             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000017 C70000                LD        L:daily_minute_on, A
   1018              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
   1019             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000025 C70000                LD        L:daily_hour_off, A
   1020              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
   1021             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000033 C70000                LD        L:daily_minute_off, A
   1022              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
   1023             monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   \   00003D AE4006                LDW       X, #0x4006
   \   000040 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   000044 C70000                LD        L:monthly_year, A
   1024              if(monthly_year >99) return FALSE;
   \   000047 A164                  CP        A, #0x64
   \   000049 24C3                  JRNC      L:??Read_Allarm_1
   1025             monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   \   00004B AE4007                LDW       X, #0x4007
   \   00004E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000052 C70000                LD        L:monthly_month, A
   1026              if(monthly_month>12) return FALSE;
   \   000055 A10D                  CP        A, #0xd
   \   000057 24B5                  JRNC      L:??Read_Allarm_1
   1027             monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   \   000059 AE4008                LDW       X, #0x4008
   \   00005C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   000060 C70000                LD        L:monthly_date, A
   1028              if(monthly_date >31) return FALSE;
   \   000063 A120                  CP        A, #0x20
   \   000065 24A7                  JRNC      L:??Read_Allarm_1
   1029            return TRUE;
   \   000067 A601                  LD        A, #0x1
   \   000069 87                    RETF
   1030          }
   1031          

   \                                 In section .far_func.text, align 1, keep-with-next
   1032          void EEPROM_INIT()
   1033          {
   1034            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1035            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1036            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1037          
   1038          
   1039          
   1040          }
   1041          
   1042          

   \                                 In section .far_func.text, align 1
   1043          void GpioConfiguration()
   1044          {
   1045          
   1046            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1047          
   1048            // ADC PE6 NEW PB0
   1049            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1050          
   1051            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1052            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine49
   1053          
   1054            //PD0 Led
   1055            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_146:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine54
   1056            //I2C
   1057            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_159:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine54
   1058            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_160:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine55
   1059            // Remap Pins pb4,pb5  sda,scl ;
   1060          
   1061             //Init KEY OK,PLUS,MINUS
   1062            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_162:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine55
   1063            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_163:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine55
   1064            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_164:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine54
   1065          
   1066            //Init DS18b20 data pin
   1067            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_161:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine49
   1068          
   1069            // Power Pin
   1070             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_147:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
   1071          
   1072          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine55:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine49:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
   1073          

   \                                 In section .far_func.text, align 1
   1074          void InitClk()
   1075          {
   1076            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1077            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1078            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1079            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1080            CLK_SOURCE_HSI,       // Switch to internal timer.
   1081            DISABLE,              // Disable the clock switch interrupt.
   1082            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1083          
   1084            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine56
   1085            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_165:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine56
   1086            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_166:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine56
   1087            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_167:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine56
   1088            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_168:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1089          
   1090          
   1091          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1092          
   1093          
   1094          /*
   1095          void InitAdc()
   1096          {
   1097               ADC1_DeInit();
   1098               ADC1_StartConversion();
   1099          
   1100               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1101               //           ADC1_CHANNEL_0,
   1102               //           ADC1_PRESSEL_FCPU_D4,
   1103               //            ADC1_EXTTRIG_TIM,
   1104          
   1105          
   1106               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1107               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1108                                      ADC1_CHANNEL_0,
   1109                                      ADC1_ALIGN_RIGHT
   1110                                     );
   1111          
   1112          
   1113               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1114          
   1115          
   1116               //ADC1_Cmd (ENABLE);
   1117               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1118               ADC1_StartConversion();
   1119               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1120          
   1121          }
   1122          */
   1123          
   1124          
   1125          
   1126          /*
   1127          void InitUart()
   1128          {
   1129             UART2_DeInit();
   1130             UART2_Init((u32)9600,
   1131                        UART2_WORDLENGTH_8D,
   1132                        UART2_STOPBITS_1,
   1133                        UART2_PARITY_NO,
   1134                        UART2_SYNCMODE_CLOCK_DISABLE,
   1135                        UART2_MODE_TXRX_ENABLE
   1136                          );
   1137          
   1138             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1139             UART2_Cmd(ENABLE);
   1140          
   1141            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1142          }
   1143            */
   1144          
   1145          
   1146          /*
   1147          void SendChar( u8 Char)
   1148          {
   1149             UART2->DR = Char;
   1150            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1151          }
   1152          
   1153           */
   1154          
   1155           /*
   1156          void Send_Hello()
   1157          {
   1158            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1159             Delay1(10);
   1160             sprintf(data,"Hello");
   1161              u8 i=0;
   1162            do
   1163           {
   1164            SendChar(data[i++]);
   1165           } while (data[i]!=0);
   1166            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1167            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1168          
   1169          
   1170          
   1171          }
   1172          
   1173          
   1174          
   1175          
   1176          
   1177          void SendData()
   1178          {
   1179           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1180            Delay1(10);
   1181            u8 i=0;
   1182            sprintf(data,"%d %c",adcdata,0x0d);
   1183           do
   1184           {
   1185             SendChar(data[i++]);
   1186          
   1187           } while (data[i]!=0);
   1188             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1189            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1190            rx_data=0;
   1191          }
   1192          */
   1193          
   1194          
   1195           /*
   1196          u16 Average()
   1197          {
   1198           //Find average in measure
   1199            u8 i=0;
   1200            u16 Summa=0;
   1201            do
   1202            {
   1203             Summa+=measure[i++];
   1204            } while ( measure[i]!=0);
   1205             if(i!=0) Summa=Summa/i;
   1206             return Summa;
   1207          }
   1208             */
   1209          

   \                                 In section .far_func.text, align 1, keep-with-next
   1210          void LCDDataOut(u8 data)
   1211          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1212            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_229
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine74_0
   1213            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_229:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_32:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_230
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine74_0
   1214            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_230:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_31:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_231
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine74_0
   1215            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_231:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_30:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_232
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine74_0
   1216          }
   \                     ??CrossCallReturnLabel_232:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_238:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine59:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1217          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine74_0
   \   000002                       ;               // Fall through to label ??Subroutine74_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1218          void InitLcd()
   1219          {
   1220           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine13
   1221            LCD_RW(0);
   1222            LCD_RS(0);
   \                     ??CrossCallReturnLabel_35:
   \   000006 8D000000              CALLF     ?Subroutine14
   1223            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_227:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine18
   1224          
   1225            LCDInstrNibble(0x03);
   1226             Delay1(10);
   1227            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_43:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1228             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine18
   1229            LCDInstrNibble(0x03);
   1230             Delay1(10);
   1231          
   1232             //Line 4
   1233            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_42:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1234            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1235            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1236            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1237          
   1238            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1239            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1240          
   1241            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine23
   1242            Delay1(250);
   1243          
   1244            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_54:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1245            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1246          
   1247          
   1248          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_183:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_236:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_235:
   \   00000A 87                    RETF
   1249          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine74_0
   \                     ??CrossCallReturnLabel_233:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_188:
   \   00000D                       REQUIRE ??Subroutine68_0
   \   00000D                       ;               // Fall through to label ??Subroutine68_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_187:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1250          void LCDInstr(u8 Instr)
   1251          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1252            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine14
   1253            LCD_RW(0);
   \                     ??CrossCallReturnLabel_225:
   \   000009 2000                  JRA       ?Subroutine0
   1254            LCDDataOut(Instr>>4);
   1255            PulseEnable();
   1256            LCDDataOut(Instr & 0x0F);
   1257            PulseEnable();
   1258          }
   1259          

   \                                 In section .far_func.text, align 1, keep-with-next
   1260          void LCDData(u8 Data)
   1261          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1262            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1263            LCD_RW(0);
   \                     ??CrossCallReturnLabel_29:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1264            LCDDataOut(Data>>4);
   1265            PulseEnable() ;
   1266            LCDDataOut(Data & 0x0F) ;
   1267            PulseEnable();
   1268          }
   1269          

   \                                 In section .far_func.text, align 1, keep-with-next
   1270          void LCDInstrNibble(u8 Instr)
   1271          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1272            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine13
   1273            LCD_RW(0);
   1274            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_34:
   \   00000B AC000000              JPF       ??Subroutine68_0
   1275            PulseEnable();
   1276          }
   1277          

   \                                 In section .far_func.text, align 1, keep-with-next
   1278          void PulseEnable(void)
   1279          {
   1280            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine8
   1281             Delay1(1);
   1282            LCD_EN(1);
   1283             Delay1(1);
   1284            LCD_EN(0);
   \                     ??CrossCallReturnLabel_22:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine74_0
   1285             Delay1(1);
   \                     ??CrossCallReturnLabel_228:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1286          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_237:
   \   000006 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_216:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_215:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1287          

   \                                 In section .far_func.text, align 1, keep-with-next
   1288          void LCD_Busy(void)
   1289          {
   1290             //set Port D7 as Input
   1291             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1292             //Set Read
   1293             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1294             LCD_RS(0);
   \                     ??CrossCallReturnLabel_28:
   \   000013 8D000000              CALLF     ?Subroutine14
   1295             // Read Busy Flag
   1296                timer2=0;
   \                     ??CrossCallReturnLabel_226:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1297             do
   1298             {
   1299             // Enable set
   1300               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine8
   1301                Delay1(1);
   1302               LCD_EN(1);
   1303                Delay1(1);
   1304             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_23:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1305                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1306                //Clear read
   1307              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine74_0
   1308             //set Port D7 as Output
   1309             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_234:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1310          
   1311          }
   1312          
   1313          

   \                                 In section .far_func.text, align 1, keep-with-next
   1314          void LCD(u8 data)
   1315           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1316             //  static u8 linet=0;
   1317          
   1318          
   1319               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 2658                  JRNE      L:??CrossCallReturnLabel_213
   1320               {
   1321          
   1322                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2710                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 2719                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2722                  JREQ      L:??LCD_3
   \   000017 202A                  JRA       L:??LCD_4
   1323                   {
   1324                   case 0:
   1325                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     ?Subroutine62
   1326                     count=0;
   1327                     break;
   \                     ??CrossCallReturnLabel_174:
   \   00001F 2022                  JRA       L:??LCD_4
   1328                   case 1:
   1329                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000021 A6C0                  LD        A, #0xc0
   \   000023 8D000000              CALLF     LCDInstr
   1330                     count=20;
   \   000027 35140000              MOV       L:count, #0x14
   1331                     break;
   \   00002B 2016                  JRA       L:??LCD_4
   1332                   case 2:
   1333                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00002D A694                  LD        A, #0x94
   \   00002F 8D000000              CALLF     LCDInstr
   1334                     count=40;
   \   000033 35280000              MOV       L:count, #0x28
   1335                     break;
   \   000037 200A                  JRA       L:??LCD_4
   1336                   case 3:
   1337                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000039 A6D4                  LD        A, #0xd4
   \   00003B 8D000000              CALLF     LCDInstr
   1338                     count=60;
   \   00003F 353C0000              MOV       L:count, #0x3c
   1339                     break;
   1340                   //default:
   1341                    //  LCDInstr(0x80 |0x40);    //Line 1
   1342                    }
   1343                   line_lcd++;
   \                     ??LCD_4:
   \   000043 C60000                LD        A, L:line_lcd
   \   000046 4C                    INC       A
   \   000047 C70000                LD        L:line_lcd, A
   1344                   if (line_lcd>=5)
   \   00004A A105                  CP        A, #0x5
   \   00004C 250F                  JRC       L:??LCD_5
   1345                   {
   1346                    line_lcd=1;   //line >=5
   \   00004E 35010000              MOV       L:line_lcd, #0x1
   1347                    LCDInstr(0x01); //Clear LCD
   \   000052 8D000000              CALLF     ?Subroutine67
   1348                    Delay1(2500);
   \                     ??CrossCallReturnLabel_186:
   \   000056 AE09C4                LDW       X, #0x9c4
   \   000059 8D000000              CALLF     Delay1
   1349                   }
   1350          
   1351                   Delay1(1);
   \                     ??LCD_5:
   \   00005D 8D000000              CALLF     ??Subroutine72_0
   1352          
   1353          
   1354               }
   1355          
   1356          
   1357               if (count==20)
   \                     ??CrossCallReturnLabel_213:
   \   000061 C60000                LD        A, L:count
   \   000064 A114                  CP        A, #0x14
   \   000066 260A                  JRNE      L:??LCD_6
   1358                {
   1359                  LCDInstr(0x80 | 0x40);
   \   000068 A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006A 8D000000              CALLF     LCDInstr
   1360                  Delay1(1);
   \                     ??LCD_8:
   \   00006E 5F                    CLRW      X
   \   00006F 5C                    INCW      X
   \   000070 2023                  JRA       ??LCD_9
   1361                }
   1362                   else if(count==40)
   \                     ??LCD_6:
   \   000072 A128                  CP        A, #0x28
   \   000074 2604                  JRNE      L:??LCD_10
   1363                  {
   1364                    LCDInstr(0x80 | 0x14);
   \   000076 A694                  LD        A, #0x94
   \   000078 20F0                  JRA       ??LCD_7
   1365                    Delay1(1);
   1366                  }
   1367                    else if(count==60)
   \                     ??LCD_10:
   \   00007A A13C                  CP        A, #0x3c
   \   00007C 2608                  JRNE      L:??LCD_11
   1368                    {
   1369                      LCDInstr(0x80 | 0x54);
   \   00007E A6D4                  LD        A, #0xd4
   \   000080 8D000000              CALLF     ?Subroutine62
   1370                      count=0;
   1371                      Delay1(1);
   \                     ??CrossCallReturnLabel_175:
   \   000084 20E8                  JRA       ??LCD_8
   1372                    }
   1373                      else if(count >80)
   \                     ??LCD_11:
   \   000086 A151                  CP        A, #0x51
   \   000088 250F                  JRC       L:??LCD_12
   1374                        {
   1375                          count=0;
   \   00008A 725F0000              CLR       L:count
   1376                          LCDInstr(0x01); //Clear LCD
   \   00008E 8D000000              CALLF     ?Subroutine67
   1377                          Delay1(250);
   \                     ??CrossCallReturnLabel_185:
   \   000092 AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   000095 8D000000              CALLF     Delay1
   1378                        }
   1379          
   1380               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   000099 B600                  LD        A, S:?b8
   \   00009B A11C                  CP        A, #0x1c
   \   00009D 250B                  JRC       L:??LCD_13
   1381               {
   1382                 LCDData(data);
   \   00009F 8D000000              CALLF     ?Subroutine11
   1383                  Delay1(1);
   1384                 count++;
   \                     ??CrossCallReturnLabel_211:
   \   0000A3 C60000                LD        A, L:count
   \   0000A6 4C                    INC       A
   \   0000A7 C70000                LD        L:count, A
   1385               }
   1386           }
   \                     ??LCD_13:
   \   0000AA 320000                POP       S:?b8
   \   0000AD 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine72_0
   \   000004                       ;               // Fall through to label ??Subroutine72_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_217:
   \   000004 87                    RETF
   1387          

   \                                 In section .far_func.text, align 1, keep-with-next
   1388          void InitDelayTimer2()
   1389          {
   1390             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1391             //Tclock 16/8=2Mhz  /20 10us
   1392                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1393                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1394                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1395                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1396                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1397          
   1398          }
   1399          

   \                                 In section .far_func.text, align 1, keep-with-next
   1400          void InitDelayTimer3()
   1401          {
   1402             //Timer 3 use for 1s Delay
   1403             //Tclock 16000000/1024=15626
   1404                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1405                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1406                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1407                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1408          
   1409               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1410          
   1411          }
   1412          
   1413          
   1414          
   1415          

   \                                 In section .far_func.text, align 1, keep-with-next
   1416          bool DS18_Write(u8 data)
   1417          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1418            disableInterrupts();
   \   000006 9B                    SIM
   1419            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1420            {
   1421             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine15
   1422             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1423             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_37:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_224
   \   00001A 8D000000              CALLF     ?Subroutine22
   1424               //else DS18(0);
   1425             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_224:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1426             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine22
   1427             //Delay1(0);
   1428            }
   \                     ??CrossCallReturnLabel_223:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1429            enableInterrupts();
   \   000032 9A                    RIM
   1430            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1431          
   1432          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine73_0
   \   000002                       ;               // Fall through to label ??Subroutine73_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_169:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1433          
   1434          

   \                                 In section .far_func.text, align 1, keep-with-next
   1435          u8  DS18_Read()
   1436          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1437              //Init DS18b20 data pin as Input
   1438          
   1439            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1440              disableInterrupts();
   \   000006 9B                    SIM
   1441            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1442            {
   1443              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine15
   1444              Delay_us(1); //Start time slot 4,5 us
   1445              DS18(1);
   \                     ??CrossCallReturnLabel_36:
   \   00000D 8D000000              CALLF     ?Subroutine22
   1446              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_221:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1447              //Delay1(0);
   1448             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_57:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1449              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1450              //  DS18(1);  // Next bit
   1451             // Delay1(0);
   1452          
   1453            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1454              enableInterrupts();
   \   000046 9A                    RIM
   1455              //Init DS18b20 data pin
   1456             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1457             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1458          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1459          

   \                                 In section .far_func.text, align 1, keep-with-next
   1460          bool DS18_Reset()
   1461          {
   1462             //Init Reset Pulse
   1463              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine60
   1464              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_170:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1465              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine22
   1466              //Delay1(1);
   1467              timer2=0;
   \                     ??CrossCallReturnLabel_222:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1468              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_90:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_56:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1469              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_91:
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1470              // Delay1(10);
   1471              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000027 AE0014                LDW       X, #0x14
   \   00002A 8D000000              CALLF     Delay1
   1472          
   1473              return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 87                    RETF
   1474          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1475          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1476          u8 temperature ()
   1477          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1478          
   1479             //Init Reset Pulse
   1480               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_157:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1481             //Skip ROM Command 0xCC
   1482              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine51
   1483             //Function command  CONVERT T [44h]
   1484              DS18_Write(0x44);
   1485              //Wait util end convert
   1486              timer2=0;
   1487               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_151:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_93:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_151
   1488                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1489               //u8 temp8=timer2;
   1490              //Init Reset Pulse
   1491              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_158:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1492              // Skip ROM Command 0xCC
   1493              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine50
   1494              //Function command READ SCRATCHPAD [BEh]
   1495              DS18_Write(0xBE);
   1496               u8 temp1=DS18_Read();
   1497               u8 temp2=DS18_Read();
   1498              DS18_Reset();
   \                     ??CrossCallReturnLabel_149:
   \   000033 8D000000              CALLF     DS18_Reset
   1499                u16 result = temp2*256+temp1;
   1500                temp1= (u8)(result>>3);
   1501               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_21:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1502          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine76_0
   \                     ??CrossCallReturnLabel_245:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1503          

   \                                 In section .far_func.text, align 1, keep-with-next
   1504          bool Read_DS18()
   1505          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1506          
   1507             //Init Reset Pulse
   1508               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_155:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1509             //Skip ROM Command 0xCC
   1510              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine51
   1511             //Function command  CONVERT T [44h]
   1512              DS18_Write(0x44);
   1513              //Wait util end convert
   1514              timer2=0;
   1515               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_150:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_92:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_150
   1516                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1517               //u8 temp8=timer2;
   1518              //Init Reset Pulse
   1519              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_156:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1520              // Skip ROM Command 0xCC
   1521              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine50
   1522              //Function command READ SCRATCHPAD [BEh]
   1523              DS18_Write(0xBE);
   1524               u8 temp1=DS18_Read();
   1525               u8 temp2=DS18_Read();
   1526               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_148:
   \   000033 8D000000              CALLF     ?Subroutine52
   1527               u8 temp4=DS18_Read();
   1528               u8 temp5=DS18_Read();
   1529               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_153:
   \   000037 8D000000              CALLF     ?Subroutine52
   1530               u8 temp7=DS18_Read();
   1531               u8 temp8=DS18_Read();
   1532               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_152:
   \   00003B 8D000000              CALLF     DS18_Read
   1533          
   1534               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1535          
   1536                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1537                result2=0;
   \   000047 725F0000              CLR       L:result2
   1538                u16 result = temp2*256+temp1;
   1539                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   00004F C70000                LD        L:result1, A
   1540                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1541                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1542          
   1543          
   1544                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1545               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1546               //line_lcd=1;
   1547               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1548               // while (!key_ok_on());
   1549          
   1550               //u8 temp3=DS18_Read();
   1551          
   1552              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1553          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1554          

   \                                 In section .far_func.text, align 1, keep-with-next
   1555          bool DS18Set ()
   1556          {
   1557               //Init Reset Pulse
   1558              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_154:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1559             //Skip ROM Command 0xCC
   1560              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1561             //Function command  WRITE SCRATCHPAD 0x4E
   1562              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1563             //Write 3 bytes last is config reg
   1564              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1565              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1566              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1567          
   1568          
   1569          
   1570          
   1571            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1572          }
   1573          
   1574          
   1575          
   1576          
   1577          
   1578          
   1579          
   1580          

   \                                 In section .far_func.text, align 1, keep-with-next
   1581          void Delay1(u16 Delay)
   1582          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1583              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1584            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1585            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1586          }
   \   00000D 87                    RETF
   1587          

   \                                 In section .far_func.text, align 1, keep-with-next
   1588           void Delay2(u16 Delay)
   1589          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1590            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1591            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1592          }
   \   00000D 87                    RETF
   1593          
   1594          

   \                                 In section .far_func.text, align 1, keep-with-next
   1595          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1596          {
   1597            //disableInterrupts();
   1598            do
   1599              {
   1600                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1601                nop();
   \   000001 9D                    NOP
   1602              }
   1603              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1604            //enableInterrupts();
   1605          }
   \   000005 87                    RETF
   1606          
   1607          

   \                                 In section .far_func.text, align 1, keep-with-next
   1608          void Display_Line(char* line)
   1609          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1610            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1611            u8 count;
   1612              //Set Cursor to First Line
   1613             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1614             count=0;
   \   000010 3F00                  CLR       S:?b10
   1615             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine72_0
   1616            do
   1617            {
   1618          
   1619              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_214:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1620               {
   1621                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine11
   1622                  Delay1(1);
   1623                 count++;
   \                     ??CrossCallReturnLabel_212:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1624               }
   1625               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1626            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_214
   1627          
   1628             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1629          
   1630          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1631          

   \                                 In section .far_func.text, align 1, keep-with-next
   1632          void Rotate_Line( char * line)
   1633          {
   1634          
   1635             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1636             char temp_next;
   1637          
   1638             do
   1639             {
   1640                temp_next=*(line+1);
   1641               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1642                //line++;
   1643                //temp_next=*line;
   1644               //*line=*line++;
   1645             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1646             line--;
   1647             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1648          
   1649          }
   \   000012 87                    RETF
   1650          

   \                                 In section .far_func.text, align 1, keep-with-next
   1651          void Clear_Line1 ()
   1652          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1653               //Set Cursor to First Line
   1654             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine10
   1655             count=0;
   1656             Delay1(1);
   1657              u8 count=0;
   1658             do
   1659             {
   1660               LCDData(' ');
   \                     ??CrossCallReturnLabel_27:
   \   000009 8D000000              CALLF     ?Subroutine9
   1661                  Delay1(1);
   1662                  count++;
   1663             }while (count<8);
   \                     ??CrossCallReturnLabel_25:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_27
   1664          
   1665          
   1666          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_176:
   \   000004 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_219:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_218:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1667          

   \                                 In section .far_func.text, align 1, keep-with-next
   1668          void Clear_Line2 ()
   1669          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1670               //Set Cursor to Second  Line
   1671             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine10
   1672             count=0;
   1673             Delay1(1);
   1674              u8 count=0;
   1675             do
   1676             {
   1677               LCDData(' ');
   \                     ??CrossCallReturnLabel_26:
   \   000009 8D000000              CALLF     ?Subroutine9
   1678                  Delay1(1);
   1679                  count++;
   1680             }while (count<8);
   \                     ??CrossCallReturnLabel_24:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_26
   1681          
   1682          
   1683          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1684          
   1685          
   1686          
   1687          
   1688          

   \                                 In section .far_func.text, align 1, keep-with-next
   1689          void Menu (void)
   1690          {
   1691           // Clear Display
   1692              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine23
   1693              Delay1(250);
   1694              //u8 key;
   1695           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1696              Wait for Plus,Minius or OK
   1697              If plus next option from Menu on the end EXIT
   1698              If minus previous option from Menu  on the end EXIT
   1699              If OK enter to menu option
   1700              If time out about 10s exit from Menu
   1701           */
   1702              do {
   1703          First_Menu:
   1704              line_lcd=0;
   \                     ??CrossCallReturnLabel_55:
   \   000004 725F0000              CLR       L:line_lcd
   1705              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1706              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine30
   1707              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_70:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1708              switch (Key_Press())
   \   000022 8D000000              CALLF     Key_Press
   \   000026 4A                    DEC       A
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   1709                  {
   1710                  case 1: goto Second_Menu ;
   1711                   break;
   1712                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   1713                   break;
   \   000039 CC0000                JP        L:??Menu_3
   1714                  case 3: goto Exit_Menu;
   1715                   break;
   1716                  }
   1717                  break; //Exit Menu
   1718          
   1719          
   1720          Second_Menu:
   1721              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   1722              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     printf
   1723              line_lcd=1;
   \   000047 8D000000              CALLF     ?Subroutine29
   1724              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_67:
   \   00004B 89                    PUSHW     X
   \   00004C C60000                LD        A, L:daily_hour_off
   \   00004F 97                    LD        XL, A
   \   000050 89                    PUSHW     X
   \   000051 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000054 8D000000              CALLF     printf
   \   000058 5B04                  ADD       SP, #0x4
   1725                switch (Key_Press())
   \   00005A 8D000000              CALLF     Key_Press
   \   00005E 4A                    DEC       A
   \   00005F 2710                  JREQ      L:??Menu_4
   \   000061 4A                    DEC       A
   \   000062 2706                  JREQ      L:??Menu_5
   \   000064 4A                    DEC       A
   \   000065 279D                  JREQ      L:??CrossCallReturnLabel_55
   \   000067 CC0000                JP        L:??Menu_3
   1726                  {
   1727                  case 1: goto Third_Menu ;
   1728                   break;
   1729                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   00006A 8D000000              CALLF     Set_Timer_Off
   1730                   break;
   \   00006E CC0000                JP        L:??Menu_3
   1731                  case 3: goto First_Menu;
   1732                   break;
   1733                  }
   1734               break; //Exit Menu
   1735          
   1736          Third_Menu:
   1737                line_lcd=0;
   \                     ??Menu_4:
   \   000071 725F0000              CLR       L:line_lcd
   1738              printf("\nMonthly ");
   \   000075 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000078 8D000000              CALLF     printf
   1739              line_lcd=1;
   \   00007C 35010000              MOV       L:line_lcd, #0x1
   1740              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \   000080 C60000                LD        A, L:monthly_date
   \   000083 5F                    CLRW      X
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:monthly_month
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B C60000                LD        A, L:monthly_year
   \   00008E 97                    LD        XL, A
   \   00008F 89                    PUSHW     X
   \   000090 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000093 8D000000              CALLF     printf
   \   000097 5B06                  ADD       SP, #0x6
   1741                switch (Key_Press())
   \   000099 8D000000              CALLF     Key_Press
   \   00009D 4A                    DEC       A
   \   00009E 2750                  JREQ      L:??Menu_6
   \   0000A0 4A                    DEC       A
   \   0000A1 2706                  JREQ      L:??Menu_7
   \   0000A3 4A                    DEC       A
   \   0000A4 2796                  JREQ      L:??Menu_0
   \   0000A6 CC0000                JP        L:??Menu_3
   1742                  {
   1743                  case 1: goto Fourth_Menu;
   1744                   break;
   1745                  case 2:
   1746                    {
   1747                     Set_Date();
   \                     ??Menu_7:
   \   0000A9 8D000000              CALLF     Set_Date
   1748                     monthly_year=y;
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 C70000                LD        L:monthly_year, A
   1749                     monthly_month=m;
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 C70000                LD        L:monthly_month, A
   1750                     monthly_date=d;
   \   0000B9 C60000                LD        A, L:d
   \   0000BC C70000                LD        L:monthly_date, A
   1751                     status.monthly=1;
   \   0000BF CE0000                LDW       X, L:status
   \   0000C2 01                    RRWA      X, A
   \   0000C3 AA08                  OR        A, #0x8
   \   0000C5 8D000000              CALLF     ?Subroutine64
   1752                     status.daily=0;  // Disable Daily Alarm On date enable it
   1753                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_179:
   \   0000C9 A4FE                  AND       A, #0xfe
   \   0000CB 8D000000              CALLF     ?Subroutine1
   1754                     // Save Status and Date in EEPROM
   1755                     EEPROM_INIT();
   1756                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1757                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1758                     FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   \                     ??CrossCallReturnLabel_200:
   \   0000CF C60000                LD        A, L:`y`
   \   0000D2 AE4006                LDW       X, #0x4006
   \   0000D5 8D000000              CALLF     ?Subroutine6
   1759                     FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   \                     ??CrossCallReturnLabel_18:
   \   0000D9 C60000                LD        A, L:m
   \   0000DC AE4007                LDW       X, #0x4007
   \   0000DF 8D000000              CALLF     ?Subroutine6
   1760                     FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   \                     ??CrossCallReturnLabel_19:
   \   0000E3 C60000                LD        A, L:d
   \   0000E6 AE4008                LDW       X, #0x4008
   \   0000E9 8D000000              CALLF     ?Subroutine4
   1761                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1762                     break;
   \                     ??CrossCallReturnLabel_4:
   \   0000ED CC0000                JP        L:??Menu_3
   1763                    }
   1764                  case 3: goto Second_Menu ;
   1765                   break;
   1766                  }
   1767               break; //Exit Menu
   1768          
   1769          
   1770          Fourth_Menu:
   1771              line_lcd=0;
   \                     ??Menu_6:
   \   0000F0 725F0000              CLR       L:line_lcd
   1772              printf("\nClock   ");
   \   0000F4 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000F7 8D000000              CALLF     ?Subroutine26
   1773              line_lcd=1;
   1774              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_206:
   \   0000FB 89                    PUSHW     X
   \   0000FC C60000                LD        A, L:minutes
   \   0000FF 97                    LD        XL, A
   \   000100 89                    PUSHW     X
   \   000101 C60000                LD        A, L:hours
   \   000104 97                    LD        XL, A
   \   000105 89                    PUSHW     X
   \   000106 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000109 8D000000              CALLF     printf
   \   00010D 5B06                  ADD       SP, #0x6
   1775                switch (Key_Press())
   \   00010F 8D000000              CALLF     Key_Press
   \   000113 4A                    DEC       A
   \   000114 2711                  JREQ      L:??Menu_8
   \   000116 4A                    DEC       A
   \   000117 2708                  JREQ      L:??Menu_9
   \   000119 4A                    DEC       A
   \   00011A 2603                  JRNE      ??lb_1
   \   00011C CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   00011F 2062                  JRA       L:??Menu_3
   1776                  {
   1777                  case 1: goto Fifth_Menu ;
   1778                   break;
   1779                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000121 8D000000              CALLF     Set_Clock
   1780                   break;
   \   000125 205C                  JRA       L:??Menu_3
   1781                  case 3: goto Third_Menu;
   1782                   break;
   1783                  }
   1784               break; //Exit Menu
   1785          
   1786          
   1787          Fifth_Menu:
   1788              line_lcd=0;
   \                     ??Menu_8:
   \   000127 725F0000              CLR       L:line_lcd
   1789              printf("\nDate    ");
   \   00012B AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   00012E 8D000000              CALLF     printf
   1790              line_lcd=1;
   \   000132 8D000000              CALLF     ?Subroutine27
   1791              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_61:
   \   000136 89                    PUSHW     X
   \   000137 C60000                LD        A, L:month
   \   00013A 97                    LD        XL, A
   \   00013B 89                    PUSHW     X
   \   00013C C60000                LD        A, L:year
   \   00013F 97                    LD        XL, A
   \   000140 89                    PUSHW     X
   \   000141 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000144 8D000000              CALLF     printf
   \   000148 5B06                  ADD       SP, #0x6
   1792                switch (Key_Press())
   \   00014A 8D000000              CALLF     Key_Press
   \   00014E 4A                    DEC       A
   \   00014F 270E                  JREQ      L:??Menu_2
   \   000151 4A                    DEC       A
   \   000152 2705                  JREQ      L:??Menu_10
   \   000154 4A                    DEC       A
   \   000155 2799                  JREQ      L:??Menu_6
   \   000157 202A                  JRA       L:??Menu_3
   1793                  {
   1794                  case 1: goto Exit_Menu ;
   1795                   break;
   1796                  case 2: Set_Date();
   \                     ??Menu_10:
   \   000159 8D000000              CALLF     Set_Date
   1797                   break;
   \   00015D 2024                  JRA       L:??Menu_3
   1798                  case 3: goto Fourth_Menu;
   1799                   break;
   1800                  }
   1801               break; //Exit Menu
   1802          
   1803          
   1804          Exit_Menu:
   1805              line_lcd=0;
   \                     ??Menu_2:
   \   00015F 725F0000              CLR       L:line_lcd
   1806              printf("\nExit OK ");
   \   000163 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000166 8D000000              CALLF     printf
   1807              line_lcd=1;
   \   00016A 35010000              MOV       L:line_lcd, #0x1
   1808              printf("\n+/-     ");
   \   00016E AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   000171 8D000000              CALLF     printf
   1809                 switch (Key_Press())
   \   000175 8D000000              CALLF     Key_Press
   \   000179 4A                    DEC       A
   \   00017A 2603                  JRNE      ??lb_2
   \   00017C CC0000                JP        L:??CrossCallReturnLabel_55
   \                     ??lb_2:
   \   00017F A002                  SUB       A, #0x2
   \   000181 27A4                  JREQ      L:??Menu_8
   1810                  {
   1811                  case 1: goto First_Menu;
   1812                   break;
   1813                  case 2:
   1814                   break;
   1815                  case 3: goto Fifth_Menu;
   1816                   break;
   1817                  }
   1818                 break; //Exit Menu
   1819              }    while (1);
   1820              //exit:
   1821             Clear_Line1();
   \                     ??Menu_3:
   \   000183 8D000000              CALLF     Clear_Line1
   1822             Clear_Line2();
   \   000187 AC000000              JPF       Clear_Line2
   1823          
   1824          }
   1825          
   1826          

   \                                 In section .far_func.text, align 1, keep-with-next
   1827          u8 Key_Press(void)
   1828          {
   \                     Key_Press:
   \   000000 3B0000                PUSH      S:?b8
   1829             u8 key_press =0;
   \   000003 3F00                  CLR       S:?b8
   1830             timer3=0;
   \   000005 5F                    CLRW      X
   \   000006 CF0000                LDW       L:timer3, X
   1831             do {
   1832                if (key_ok_on()) key_press=1;
   \                     ??Key_Press_0:
   \   000009 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_107:
   \   00000D 2706                  JREQ      L:??Key_Press_1
   \   00000F 35010000              MOV       S:?b8, #0x1
   \   000013 201A                  JRA       L:??Key_Press_2
   1833                   else if (key_plus_on())key_press=2;
   \                     ??Key_Press_1:
   \   000015 8D000000              CALLF     key_plus_on
   \   000019 A100                  CP        A, #0x0
   \   00001B 2706                  JREQ      L:??Key_Press_3
   \   00001D 35020000              MOV       S:?b8, #0x2
   \   000021 200C                  JRA       L:??Key_Press_2
   1834                  else if (key_minus_on())key_press=3;
   \                     ??Key_Press_3:
   \   000023 8D000000              CALLF     key_minus_on
   \   000027 A100                  CP        A, #0x0
   \   000029 2704                  JREQ      L:??Key_Press_2
   \   00002B 35030000              MOV       S:?b8, #0x3
   1835             } while ( (timer3<=time_menu) && !key_press);    //(timer3<=time_menu) &&
   \                     ??Key_Press_2:
   \   00002F 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_124:
   \   000033 2404                  JRNC      L:??Key_Press_4
   \   000035 3D00                  TNZ       S:?b8
   \   000037 27D0                  JREQ      L:??Key_Press_0
   1836          
   1837             return key_press;
   \                     ??Key_Press_4:
   \   000039 B600                  LD        A, S:?b8
   \   00003B 320000                POP       S:?b8
   \   00003E 87                    RETF
   1838          }
   1839          
   1840          
   1841          
   1842          

   \                                 In section .far_func.text, align 1, keep-with-next
   1843          bool Set_Date(void)
   1844          {
   \                     Set_Date:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1845             u8 leap=0 ,date_end,month_start,date_start;
   \   000007 3F00                  CLR       S:?b8
   1846             int yy;
   1847          
   1848                   //Clear Display
   1849             LCDInstr(0x01);
   \   000009 8D000000              CALLF     ?Subroutine19
   1850             Delay1(1000);
   1851             line_lcd=0;
   1852             printf("\nYear>");
   1853             y=year;
   \                     ??CrossCallReturnLabel_45:
   \   00000D C60000                LD        A, L:year
   \   000010 C70000                LD        L:`y`, A
   1854             m=month;
   \   000013 C60000                LD        A, L:month
   \   000016 C70000                LD        L:m, A
   1855             d=date;
   \   000019 C60000                LD        A, L:`date`
   \   00001C C70000                LD        L:d, A
   1856                do
   1857              {
   1858               line_lcd=1;
   \                     ??Set_Date_0:
   \   00001F 8D000000              CALLF     ?Subroutine28
   1859               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_62:
   \   000023 89                    PUSHW     X
   \   000024 C60000                LD        A, L:m
   \   000027 97                    LD        XL, A
   \   000028 89                    PUSHW     X
   \   000029 C60000                LD        A, L:`y`
   \   00002C 97                    LD        XL, A
   \   00002D 89                    PUSHW     X
   \   00002E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000031 8D000000              CALLF     printf
   \   000035 5B06                  ADD       SP, #0x6
   1860                 y=adj(0,99,y);
   \   000037 C60000                LD        A, L:`y`
   \   00003A B700                  LD        S:?b1, A
   \   00003C 35630000              MOV       S:?b0, #0x63
   \   000040 8D000000              CALLF     ??Subroutine69_0
   1861              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_193:
   \   000044 C70000                LD        L:`y`, A
   \   000047 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_104:
   \   00004B 27D2                  JREQ      L:??Set_Date_0
   1862                  yy=y+2000;
   \   00004D C60000                LD        A, L:`y`
   \   000050 5F                    CLRW      X
   \   000051 97                    LD        XL, A
   \   000052 1C07D0                ADDW      X, #0x7d0
   \   000055 BF00                  LDW       S:?w0, X
   1863              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   000057 90AE0190              LDW       Y, #0x190
   \   00005B 8D000000              CALLF     L:?smod16_y_x_y
   \   00005F 905D                  TNZW      Y
   \   000061 271C                  JREQ      L:??Set_Date_1
   \   000063 90AE0064              LDW       Y, #0x64
   \   000067 BE00                  LDW       X, S:?w0
   \   000069 8D000000              CALLF     L:?smod16_y_x_y
   \   00006D 905D                  TNZW      Y
   \   00006F 2712                  JREQ      L:??Set_Date_2
   \   000071 90AE0004              LDW       Y, #0x4
   \   000075 BE00                  LDW       X, S:?w0
   \   000077 8D000000              CALLF     L:?smod16_y_x_y
   \   00007B 905D                  TNZW      Y
   \   00007D 2604                  JRNE      L:??Set_Date_2
   \                     ??Set_Date_1:
   \   00007F 35010000              MOV       S:?b8, #0x1
   1864                  y=yy-2000;
   \                     ??Set_Date_2:
   \   000083 B600                  LD        A, S:?b1
   \   000085 AB30                  ADD       A, #0x30
   \   000087 C70000                LD        L:`y`, A
   1865                   if(y==year) month_start=month;
   \   00008A C60000                LD        A, L:year
   \   00008D C10000                CP        A, L:`y`
   \   000090 2605                  JRNE      L:??Set_Date_3
   \   000092 C60000                LD        A, L:month
   \   000095 B700                  LD        S:?b9, A
   1866               line_lcd=0;
   \                     ??Set_Date_3:
   \   000097 8D000000              CALLF     ?Subroutine40
   1867              printf("\nMonth>");
   1868                do
   1869              {
   1870               line_lcd=1;
   \                     ??CrossCallReturnLabel_103:
   \   00009B 8D000000              CALLF     ?Subroutine28
   1871               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_63:
   \   00009F 89                    PUSHW     X
   \   0000A0 C60000                LD        A, L:m
   \   0000A3 97                    LD        XL, A
   \   0000A4 89                    PUSHW     X
   \   0000A5 C60000                LD        A, L:`y`
   \   0000A8 97                    LD        XL, A
   \   0000A9 89                    PUSHW     X
   \   0000AA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000AD 8D000000              CALLF     printf
   \   0000B1 5B06                  ADD       SP, #0x6
   1872                m=adj(month_start,12,m);
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 B700                  LD        S:?b1, A
   \   0000B8 350C0000              MOV       S:?b0, #0xc
   \   0000BC B600                  LD        A, S:?b9
   \   0000BE 8D000000              CALLF     adj
   \   0000C2 C70000                LD        L:m, A
   1873              } while (!key_ok_on());
   \   0000C5 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_105:
   \   0000C9 27D0                  JREQ      L:??CrossCallReturnLabel_103
   1874          
   1875              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000CB C60000                LD        A, L:m
   \   0000CE A101                  CP        A, #0x1
   \   0000D0 2718                  JREQ      L:??Set_Date_4
   \   0000D2 A103                  CP        A, #0x3
   \   0000D4 2714                  JREQ      L:??Set_Date_4
   \   0000D6 A105                  CP        A, #0x5
   \   0000D8 2710                  JREQ      L:??Set_Date_4
   \   0000DA A107                  CP        A, #0x7
   \   0000DC 270C                  JREQ      L:??Set_Date_4
   \   0000DE A108                  CP        A, #0x8
   \   0000E0 2708                  JREQ      L:??Set_Date_4
   \   0000E2 A10A                  CP        A, #0xa
   \   0000E4 2704                  JREQ      L:??Set_Date_4
   \   0000E6 A10C                  CP        A, #0xc
   \   0000E8 2606                  JRNE      L:??Set_Date_5
   \                     ??Set_Date_4:
   \   0000EA 351F0000              MOV       S:?b8, #0x1f
   \   0000EE 2024                  JRA       L:??Set_Date_6
   1876               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??Set_Date_5:
   \   0000F0 A104                  CP        A, #0x4
   \   0000F2 270C                  JREQ      L:??Set_Date_7
   \   0000F4 A106                  CP        A, #0x6
   \   0000F6 2708                  JREQ      L:??Set_Date_7
   \   0000F8 A109                  CP        A, #0x9
   \   0000FA 2704                  JREQ      L:??Set_Date_7
   \   0000FC A10B                  CP        A, #0xb
   \   0000FE 2606                  JRNE      L:??Set_Date_8
   \                     ??Set_Date_7:
   \   000100 351E0000              MOV       S:?b8, #0x1e
   \   000104 200E                  JRA       L:??Set_Date_6
   1877                else
   1878                 {
   1879                   if(leap) date_end=29;
   \                     ??Set_Date_8:
   \   000106 3D00                  TNZ       S:?b8
   \   000108 2706                  JREQ      L:??Set_Date_9
   \   00010A 351D0000              MOV       S:?b8, #0x1d
   \   00010E 2004                  JRA       L:??Set_Date_6
   1880                    else date_end=28;
   \                     ??Set_Date_9:
   \   000110 351C0000              MOV       S:?b8, #0x1c
   1881                 }
   1882               if(y==year) date_start=d;
   \                     ??Set_Date_6:
   \   000114 C60000                LD        A, L:year
   \   000117 C10000                CP        A, L:`y`
   \   00011A 2605                  JRNE      L:??Set_Date_10
   \   00011C C60000                LD        A, L:d
   \   00011F B700                  LD        S:?b10, A
   1883              LCDInstr(0x01);
   \                     ??Set_Date_10:
   \   000121 8D000000              CALLF     ?Subroutine20
   1884               Delay1(1000);
   1885                line_lcd=0;
   1886              printf("\nDate>");
   1887                do
   1888              {
   1889               line_lcd=1;
   \                     ??CrossCallReturnLabel_47:
   \   000125 8D000000              CALLF     ?Subroutine28
   1890               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_64:
   \   000129 89                    PUSHW     X
   \   00012A C60000                LD        A, L:m
   \   00012D 97                    LD        XL, A
   \   00012E 89                    PUSHW     X
   \   00012F C60000                LD        A, L:`y`
   \   000132 97                    LD        XL, A
   \   000133 89                    PUSHW     X
   \   000134 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000137 8D000000              CALLF     printf
   \   00013B 5B06                  ADD       SP, #0x6
   1891                 d=adj(date_start,date_end,d);
   \   00013D C60000                LD        A, L:d
   \   000140 B700                  LD        S:?b1, A
   \   000142 450000                MOV       S:?b0, S:?b8
   \   000145 B600                  LD        A, S:?b10
   \   000147 8D000000              CALLF     adj
   \   00014B C70000                LD        L:d, A
   1892              } while (!key_ok_on());
   \   00014E 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_106:
   \   000152 27D1                  JREQ      L:??CrossCallReturnLabel_47
   1893          
   1894            return TRUE;
   \   000154 A601                  LD        A, #0x1
   \   000156 320000                POP       S:?b10
   \   000159 AC000000              JPF       L:?epilogue_w4
   1895          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   1896          

   \                                 In section .far_func.text, align 1, keep-with-next
   1897           PUTCHAR_PROTOTYPE
   1898          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1899            /* Place your implementation of fputc here */
   1900            /* e.g. write a character to the USART */
   1901                //USART_SendData(USART3, (u8) ch);
   1902               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1903             /* Loop until the end of transmission */
   1904              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1905            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1906          }
   1907          
   1908           #ifdef USE_FULL_ASSERT
   1909          
   1910          /**
   1911            * @brief  Reports the name of the source file and the source line number
   1912            *   where the assert_param error has occurred.
   1913            * @param file: pointer to the source file name
   1914            * @param line: assert_param error line source number
   1915            * @retval : None
   1916            */

   \                                 In section .far_func.text, align 1
   1917          void assert_failed(u8* file, u32 line)
   1918          {
   1919            /* User can add his own implementation to report the file name and line number,
   1920               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1921          
   1922            /* Infinite loop */
   1923            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1924            {
   1925          
   1926            }
   1927          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On>">`:
   \   000000 0A48204F6E3E          DC8 "\012H On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On>">`:
   \   000000 0A4D696E204F          DC8 "\012Min On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   1928          #endif
   1929          
   1930          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     daily_dispaly                     1
     month_display                     1
     sync_display                      1
     sync_time_ds1307                  1
     line1                             8
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     ?Subroutine41                     7
     ??Subroutine73_0                  7
     main                            327
     ?Subroutine16                     9
     ?Subroutine5                      9
     ?Subroutine3                     20
     ?Subroutine65                     2
     ??Subroutine76_0                  8
     ?Subroutine2                     15
     ?Subroutine66                    12
     ?Subroutine26                     4
     ??Subroutine71_0                 10
     Display                         162
     Power_On                         14
     ?Subroutine42                    11
     ?Subroutine64                    19
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine48                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine47                     1
     ??Subroutine75_0                  7
     ?Subroutine46                     9
     ?Subroutine45                    11
     ReadDS1307                      109
     ?Subroutine35                    11
     ?Subroutine33                    13
     ?Subroutine31                     8
     ?Subroutine63                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine44                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       374
     ?Subroutine40                    11
     ?Subroutine20                    11
     ?Subroutine19                    11
     ?Subroutine34                     6
     ??Subroutine69_0                  5
     ?Subroutine21                     5
     ?Subroutine61                    16
     ?Subroutine67                     6
     ?Subroutine27                    10
     adj                              85
     key_ok_on                        47
     ?Subroutine32                    10
     key_plus_on                      45
     ?Subroutine38                     7
     ?Subroutine36                     7
     key_minus_on                     45
     key_ok_plus                      40
     ?Subroutine17                    29
     ?Subroutine43                     7
     Set_Timer_On                    167
     ?Subroutine39                     9
     ?Subroutine6                      5
     ?Subroutine4                     10
     ?Subroutine1                      4
     ??Subroutine70_0                 29
     ?Subroutine57                     9
     ?Subroutine30                    10
     Set_Timer_Off                   172
     ?Subroutine29                    10
     Save_Status                      10
     Read_Allarm                     106
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine55                     9
     ?Subroutine54                     9
     ?Subroutine49                    12
     InitClk                          62
     ?Subroutine56                     9
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine74_0                  5
     ?Subroutine59                     7
     ?Subroutine14                     2
     InitLcd                          85
     ?Subroutine23                    11
     ?Subroutine18                    17
     ?Subroutine13                    11
     ?Subroutine0                     13
     ??Subroutine68_0                 10
     ?Subroutine25                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine8                     24
     ?Subroutine58                     6
     LCD_Busy                         69
     LCD                             174
     ?Subroutine62                     9
     ?Subroutine11                     4
     ??Subroutine72_0                  5
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       57
     ?Subroutine22                     2
     ?Subroutine15                    10
     ?Subroutine60                     9
     DS18_Read                        77
     ?Subroutine24                    12
     DS18_Reset                       49
     ?Subroutine37                     7
     ?Subroutine53                     7
     temperature                      63
     ?Subroutine51                    17
     ?Subroutine50                    25
     ?Subroutine7                     21
     Read_DS18                       121
     ?Subroutine52                    12
     DS18Set                          41
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine10                    13
     ?Subroutine9                     16
     Clear_Line2                      19
     Menu                            395
     Key_Press                        63
     Set_Date                        349
     ?Subroutine28                    10
     fputc                            18
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH On>">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On>">           9
     ?<Constant "\nH Off>">            8
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 5 043 bytes in section .far_func.text
    64 bytes in section .near.bss
     3 bytes in section .near.data
   248 bytes in section .near.rodata
 
 5 043 bytes of CODE  memory
   248 bytes of CONST memory
    67 bytes of DATA  memory

Errors: none
Warnings: none
