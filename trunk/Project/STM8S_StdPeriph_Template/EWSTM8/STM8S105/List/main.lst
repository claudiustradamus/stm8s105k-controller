###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             07/Dec/2013  22:17:45 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          
     81          
     82          
     83          
     84          #ifdef __GNUC__
     85            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     86               set to 'Yes') calls __io_putchar() */
     87            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     88          #else
     89            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     90          #endif /* __GNUC__ */
     91          
     92          
     93          
     94          
     95          #define SpecialSymbol 0x1b //Esc to start message
     96          //#define data_size 20
     97          #define key_time 8000
     98          #define KEY_TIME_ON 8000
     99          #define KEY_TIME_HOLD 65000
    100          #define key_time_press 4000
    101          #define key_time_release 400
    102          #define DS_Control  0x10  // Out 1s
    103          #define time_menu 10  // 5s
    104          #define TIMEOUT_DS18B20 1000
    105          #define LCDLEDON 20
    106          //#define sync_time 30 // 30s
    107          #define power_jitter 3 //3s
    108          
    109          
    110          
    111          
    112          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    113          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    114          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    115          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    116          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    118          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    119          //char data[data_size];
    120          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    121          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    126          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    127          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    128          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    129          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    141          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    142          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    143          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    144          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    150          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    152          char  manu_display,sync_display,program_display,program_number;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_number:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    153          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    154          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    155          u8 button;
   \                     button:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    156          u8 power;
   \                     power:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    157          bool blink_flag;
   \                     blink_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    158          u16 blink_time;
   \                     blink_time:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    159          bool key_ok_hold;
   \                     key_ok_hold:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    160          bool rotate_line2=FALSE;
   \                     rotate_line2:
   \   000000                       DS8 1
    161          //bool  ds_temperature;
    162          
    163          
    164          

   \                                 In section .near.bss, align 1
    165          char line1[10];
   \                     line1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    166          char line2[10];
   \                     line2:
   \   000000                       DS8 10
    167          //char string1[10];
    168          //char string2[10];

   \                                 In section .near.bss, align 1
    169          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    170          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    171          
    172          //u8 index=0;

   \                                 In section .near.bss, align 1
    173          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    174          int volatile k=0;
   \                     k:
   \   000000                       DS8 2

   \                                 In section .near.data, align 1
    175          char *day_week[11] = {" Off"," Sun"," Mon"," Tues"," Wednes"," Thurs"," Fri"," Satur"," Daily"," Month"};
   \                     day_week:
   \   000000 000000000000          DC16 `?<Constant " Off">`, `?<Constant " Sun">`, `?<Constant " Mon">`
   \   000006 00000000              DC16 `?<Constant " Tues">`, `?<Constant " Wednes">`
   \   00000A 00000000              DC16 `?<Constant " Thurs">`, `?<Constant " Fri">`
   \   00000E 00000000              DC16 `?<Constant " Satur">`, `?<Constant " Daily">`
   \   000012 0000                  DC16 `?<Constant " Month">`
   \   000014 0000                  DC8 0, 0

   \                                 In section .near.data, align 1
    176          char *setup_menu[3] ={"\nPrgClear","\nSetClock","\nSetDate"};
   \                     setup_menu:
   \   000000 00000000              DC16 `?<Constant "\\nPrgClear">`, `?<Constant "\\nSetClock">`
   \   000004 0000                  DC16 `?<Constant "\\nSetDate">`
    177          //char *test[3] ={"18777","2","3"};
    178          
    179           struct   status_reg
    180           {
    181             unsigned manu:1;
    182             unsigned on:1;
    183             unsigned timer_on:1;
    184             unsigned daily:1;
    185             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    186           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    187          
    188          
    189           struct
    190           {
    191             unsigned ds1307:1;
    192             unsigned ds18B20:1;
    193             unsigned buzzer:1;
    194             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    195           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    196          
    197          
    198          
    199           typedef  struct
    200            {
    201              u8 day;
    202              u8 onhour ;
    203              u8 onminute ;
    204              u8 offhour;
    205              u8 offminute;
    206          
    207            }  program ;
    208          
    209                   // = new proram[8];

   \                                 In section .near.bss, align 1
    210             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 40
    211            /*
    212             =
    213           {
    214             {0x00,0x00,0x00,0x00,0x00},
    215             {0x00,0x00,0x00,0x00,0x00},
    216             {0x00,0x00,0x00,0x00,0x00},
    217             {0x00,0x00,0x00,0x00,0x00},
    218             {0x00,0x00,0x00,0x00,0x00},
    219             {0x00,0x00,0x00,0x00,0x00},
    220             {0x00,0x00,0x00,0x00,0x00},
    221             {0x00,0x00,0x00,0x00,0x00},
    222           };
    223              */
    224          
    225          //time_t  ltime;
    226          //struct tm ptim;
    227          
    228          
    229          
    230          
    231          
    232          /* Private function prototypes -----------------------------------------------*/
    233          void InitHardware();
    234          void GpioConfiguration();
    235          void InitClk();
    236          void InitAdc();
    237          void InitI2C();
    238          void EEPROM_INIT();
    239          bool ReadDS1307();
    240          //void InitUart();
    241          void InitLcd();
    242          void InitDelayTimer2();
    243          void InitDelayTimer3();
    244          void Delay1( u16 Delay);
    245          void Delay2( u16 Delay);
    246          void Delay_us(u16 Delay);
    247          void LCDInstrNibble (u8 Instr);
    248          void LCDInstr(u8 Instr);
    249          void LCDDataOut(u8 data);
    250          void LCD_Busy();
    251          void PulseEnable();
    252          //void SendData();
    253          void SendChar(u8 Char);
    254          //void Send_Hello();
    255          bool Set_Clock();
    256          //bool key_ok_hold();
    257          bool key_ok_on();
    258          bool key_plus_on();
    259          bool key_minus_on();
    260          bool key_ok_plus();
    261          bool Init_DS1307(void);
    262          bool Check_DS1307(void);
    263          bool I2C_Start(void);
    264          bool I2C_WA(u8 address);
    265          bool I2C_WD(u8 data);
    266          bool I2C_RA(u8 address);
    267          bool Set_DS1307();
    268          //bool Set_Delay_Allarm();
    269          bool Set_Timer_On();
    270          bool Set_Timer_Off();
    271          bool Read_Allarm();
    272          bool Read_DS18();
    273          bool DS18_Write( u8 data);
    274          bool DS18_Reset();
    275          bool DS18Set();
    276          u8 temperature();
    277          u8 DS18_Read();
    278          u8 convert_tobcd(u8 data);
    279          u8 I2C_RD(void);
    280          u8 adj(u8 min,u8 max,u8 now);
    281          u8 bcd2hex(u8 bcd);
    282          void Power_On(void);
    283          void Power_Off();
    284          void SaveStatus();
    285          void Rotate_Line( char * line);
    286          void Display_Line(char * line);
    287          void DisplayLine2(void);
    288          void Clear_Line1(void);
    289          void Clear_Line2(void);
    290          void Menu(void);
    291          void pressKey(void);
    292          void Display(void);
    293          bool setData(void);
    294          void initBeep(void);
    295          void beep(u16 Interval);
    296          void FirstMenu();
    297          void ProgramMenu();
    298          void SaveProgram();
    299          void ReadProgram();
    300          void ResetProgram();
    301          void CheckProgramPoint();
    302          void SetupMenu();
    303          
    304          
    305          
    306          u16  Average();
    307          
    308          
    309          /* Private functions ---------------------------------------------------------*/
    310          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_202:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000 8D000000              CALLF     ?Subroutine82
   \                     ??CrossCallReturnLabel_222:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    311          void main(void)
    312          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    313              /*High speed internal clock prescaler: 1*/
    314              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    315              InitClk();
   \   000003 8D000000              CALLF     InitClk
    316              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    317              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    318              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    319              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine13
    320              GPIO_WriteLow(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_22:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteLow
    321              hardware.lcdLed=0;
   \   000020 CE0000                LDW       X, L:hardware
   \   000023 01                    RRWA      X, A
   \   000024 A4F7                  AND       A, #0xf7
   \   000026 02                    RLWA      X, A
   \   000027 CF0000                LDW       L:hardware, X
    322              //InitUart();
    323               enableInterrupts();
   \   00002A 9A                    RIM
    324               initBeep();
   \   00002B 8D000000              CALLF     initBeep
    325              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    326               InitLcd();
   \   00002F 8D000000              CALLF     InitLcd
    327              //InitAdc();
    328               InitI2C();
   \   000033 8D000000              CALLF     InitI2C
    329              // Enable Timer3
    330              TIM3_Cmd(ENABLE);
   \   000037 A601                  LD        A, #0x1
   \   000039 8D000000              CALLF     TIM3_Cmd
    331              //year=bcd2hex(13);
    332              //Delay1(10000);
    333               if (!ReadDS1307())
   \   00003D 8D000000              CALLF     ReadDS1307
   \   000041 A100                  CP        A, #0x0
   \   000043 261D                  JRNE      L:??main_0
    334               {
    335                 printf("\n E2:%d",error);
   \   000045 C60000                LD        A, L:error
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004E 8D000000              CALLF     printf
   \   000052 5B02                  ADD       SP, #0x2
    336                 // Reset the CPU: Enable the watchdog and wait until it expires
    337                  hardware.ds1307=0;
   \   000054 CE0000                LDW       X, L:hardware
   \   000057 01                    RRWA      X, A
   \   000058 A4FE                  AND       A, #0xfe
   \   00005A 02                    RLWA      X, A
   \   00005B CF0000                LDW       L:hardware, X
    338                   pressKey();
   \   00005E 8D000000              CALLF     pressKey
    339                //IWDG->KR = IWDG_KEY_ENABLE;
    340                // while ( 1 );    // Wait until reset occurs from IWDG
    341               }
    342               //Send_Hello();
    343              //line_lcd=0;
    344              //printf("\nHello");
    345                hardware.lcdLed=1;
   \                     ??main_0:
   \   000062 8D000000              CALLF     ?Subroutine39
    346                 lcdLedTimer=LCDLEDON;
    347                  //GPIO_WriteLow(GPIOB,lcdLed);
    348          
    349              if (!Check_DS1307())
   \                     ??CrossCallReturnLabel_84:
   \   000066 8D000000              CALLF     Check_DS1307
   \   00006A A100                  CP        A, #0x0
   \   00006C 2624                  JRNE      L:??main_1
    350              {
    351                 if (error!=0)
   \   00006E C60000                LD        A, L:error
   \   000071 2710                  JREQ      L:??main_2
    352                 {
    353                  printf("\n E:%d",error);
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    354                   pressKey();
   \   00007F 8D000000              CALLF     pressKey
    355          
    356                 }
    357               line_lcd=0;
   \                     ??main_2:
   \   000083 725F0000              CLR       L:line_lcd
    358               printf("\nSetClock");
   \   000087 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008A 8D000000              CALLF     printf
    359                Set_Clock();
   \   00008E 8D000000              CALLF     Set_Clock
    360                 // reset program point
    361          
    362              }
    363          
    364          
    365                 //Read Status register from eepom and update it
    366                //size=sizeof(status);
    367               //u16 status
    368               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000092 AE4000                LDW       X, #0x4000
   \   000095 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_166:
   \   000099 B700                  LD        S:?b8, A
   \   00009B AE4001                LDW       X, #0x4001
   \   00009E 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_165:
   \   0000A2 905F                  CLRW      Y
   \   0000A4 9097                  LD        YL, A
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b8
   \   0000AA 41                    EXG       A, XL
   \   0000AB 4F                    CLR       A
   \   0000AC 02                    RLWA      X, A
   \   0000AD 8D000000              CALLF     ?Subroutine81
   \                     ??CrossCallReturnLabel_219:
   \   0000B1 CF0000                LDW       L:status, X
    369                status_check = *(u16*)(&status);
   \   0000B4 CE0000                LDW       X, L:status
   \   0000B7 CF0000                LDW       L:status_check, X
    370                //ResetProgram();
    371                ReadProgram ();
   \   0000BA 8D000000              CALLF     ReadProgram
    372                //printf("%s",Day_Week[1]);
    373                // pressKey();
    374          
    375                /*
    376              //When Start Check for Allarm and computing Daily_long_on
    377               if ( Read_Allarm() == TRUE)
    378               {
    379                 time_on=daily_hour_on*60+daily_minute_on;
    380                 time_off= daily_hour_off*60+daily_minute_off;
    381               }
    382                  */
    383          
    384                     //Init DS18B20
    385              DS18Set();
   \   0000BE 8D000000              CALLF     DS18Set
    386              line_lcd=0;
   \   0000C2 725F0000              CLR       L:line_lcd
    387              if (!Read_DS18())
   \   0000C6 8D000000              CALLF     Read_DS18
   \   0000CA A100                  CP        A, #0x0
   \   0000CC 2611                  JRNE      L:??main_3
    388              {
    389               printf("\nDS_Err_T");
   \   0000CE AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000D1 8D000000              CALLF     printf
    390                 hardware.ds18B20=0;
   \   0000D5 8D000000              CALLF     ?Subroutine42
    391                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_96:
   \   0000D9 8D000000              CALLF     pressKey
   \   0000DD 2004                  JRA       L:??CrossCallReturnLabel_98
    392              }
    393               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000DF 8D000000              CALLF     ?Subroutine43
    394          
    395              //daily_dispaly=' ';
    396              //month_display=' ';
    397              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_98:
   \   0000E3 35010000              MOV       L:sync_time_ds1307, #0x1
    398          
    399                    //Same delay if  power jitter
    400              if (status.on)
   \   0000E7 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_153:
   \   0000EB 2717                  JREQ      L:??main_4
    401              {
    402               line_lcd=0;
   \   0000ED 725F0000              CLR       L:line_lcd
    403               printf("\nWait 3s.");
   \   0000F1 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   0000F4 8D000000              CALLF     printf
    404               timer3=0;
   \   0000F8 5F                    CLRW      X
   \   0000F9 CF0000                LDW       L:timer3, X
    405               while (timer3<=power_jitter);
   \                     ??main_5:
   \   0000FC CE0000                LDW       X, L:timer3
   \   0000FF A30004                CPW       X, #0x4
   \   000102 25F8                  JRC       L:??main_5
    406              }
    407          
    408          
    409               /* Main Loop*/
    410          
    411              while(1)
    412              {
    413          
    414          
    415                if(key_ok_on())
   \                     ??main_4:
   \   000104 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_123:
   \   000108 270F                  JREQ      L:??main_6
    416                {
    417                   if( key_ok_hold) SetupMenu();
   \   00010A C60000                LD        A, L:key_ok_hold
   \   00010D 2706                  JREQ      L:??main_7
   \   00010F 8D000000              CALLF     SetupMenu
   \   000113 2004                  JRA       L:??main_6
    418                    else FirstMenu();
   \                     ??main_7:
   \   000115 8D000000              CALLF     FirstMenu
    419                }
    420                if(key_plus_on()) Power_On();
   \                     ??main_6:
   \   000119 8D000000              CALLF     key_plus_on
   \   00011D A100                  CP        A, #0x0
   \   00011F 2704                  JREQ      L:??main_8
   \   000121 8D000000              CALLF     Power_On
    421                if(key_minus_on())Power_Off();
   \                     ??main_8:
   \   000125 8D000000              CALLF     key_minus_on
   \   000129 A100                  CP        A, #0x0
   \   00012B 2704                  JREQ      L:??main_9
   \   00012D 8D000000              CALLF     Power_Off
    422                if(Time_Display) Display();  //
   \                     ??main_9:
   \   000131 C60000                LD        A, L:Time_Display
   \   000134 2704                  JREQ      L:??main_10
   \   000136 8D000000              CALLF     Display
    423          
    424                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_10:
   \   00013A C60000                LD        A, L:sync_time_ds1307
   \   00013D 2729                  JREQ      L:??main_11
    425                   {
    426                    if (!ReadDS1307())
   \   00013F 8D000000              CALLF     ReadDS1307
   \   000143 A100                  CP        A, #0x0
   \   000145 2619                  JRNE      L:??main_12
    427                        {
    428                          GPIO_WriteLow(GPIOD, power_pin );
   \   000147 8D000000              CALLF     ?Subroutine13
    429                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_21:
   \   00014B C60000                LD        A, L:error
   \   00014E 5F                    CLRW      X
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000154 8D000000              CALLF     printf
   \   000158 5B02                  ADD       SP, #0x2
    430                       //restart i2c
    431                       // Reset the CPU: Enable the watchdog and wait until it expires
    432                       IWDG->KR = IWDG_KEY_ENABLE;
   \   00015A 35CC50E0              MOV       L:0x50e0, #0xcc
    433                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_13:
   \   00015E 20FE                  JRA       L:??main_13
    434                        }
    435                   sync_time_ds1307=FALSE;
   \                     ??main_12:
   \   000160 725F0000              CLR       L:sync_time_ds1307
    436                   sync_display='S';
   \   000164 35530000              MOV       L:sync_display, #0x53
    437                   }
    438          
    439                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_11:
   \   000168 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_154:
   \   00016C 2708                  JREQ      L:??main_14
   \   00016E A608                  LD        A, #0x8
   \   000170 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_242:
   \   000174 208E                  JRA       L:??main_4
    440                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_14:
   \   000176 8D000000              CALLF     ?Subroutine13
    441          
    442          
    443          
    444              }
   \                     ??CrossCallReturnLabel_20:
   \   00017A 2088                  JRA       L:??main_4
    445          
    446          
    447          
    448          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine61:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine56:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A502                  BCP       A, #0x2
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine43:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine42:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
    449          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine85_0
   \   000004                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A501                  BCP       A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    450          void Display(void)
    451          {
    452             //Clear_Line1 ();
    453              char power_display;
    454              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    455               result2=0;
   \   000007 725F0000              CLR       L:result2
    456                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    457                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    458          
    459          
    460          
    461             if (status.manu)
   \   000018 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_209:
   \   00001C 271D                  JREQ      L:??Display_1
    462             {
    463               program_display=' ';
   \   00001E 35200000              MOV       L:program_display, #0x20
    464               power_display=' ';
    465               if(status.on)
   \   000022 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_151:
   \   000026 270D                  JREQ      L:??Display_2
    466               {
    467                if(manu_display=='M') manu_display=' ';
   \   000028 C60000                LD        A, L:manu_display
   \   00002B A14D                  CP        A, #0x4d
   \   00002D 2606                  JRNE      L:??Display_2
   \   00002F 35200000              MOV       L:manu_display, #0x20
   \   000033 200A                  JRA       L:??Display_3
    468                 else manu_display='M';
   \                     ??Display_2:
   \   000035 354D0000              MOV       L:manu_display, #0x4d
   \   000039 2004                  JRA       L:??Display_3
    469               }
    470                else manu_display='M';
    471             }
    472               else manu_display='A';
   \                     ??Display_1:
   \   00003B 35410000              MOV       L:manu_display, #0x41
    473          
    474          
    475          
    476          
    477               //Blink D
    478          
    479             if (status.on && !status.manu)
   \                     ??Display_3:
   \   00003F 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_152:
   \   000043 271A                  JREQ      L:??Display_4
   \   000045 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_210:
   \   000049 2614                  JRNE      L:??Display_4
    480             {
    481               if (program_display==' ')
   \   00004B C60000                LD        A, L:program_display
   \   00004E A120                  CP        A, #0x20
   \   000050 260D                  JRNE      L:??Display_4
    482                 {
    483                   program_display='P';
   \   000052 35500000              MOV       L:program_display, #0x50
    484                   power_display=0x30 +power;
   \   000056 C60000                LD        A, L:power
   \   000059 AB30                  ADD       A, #0x30
   \   00005B B700                  LD        S:?b6, A
   \   00005D 2008                  JRA       L:??Display_5
    485                 }
    486               else
    487                 {
    488                   program_display=' ';
   \                     ??Display_4:
   \   00005F 35200000              MOV       L:program_display, #0x20
    489                   power_display=' ';
   \   000063 35200000              MOV       S:?b6, #0x20
    490                 }
    491             }
    492               else
    493                 {
    494                   program_display=' ';
    495                   power_display=' ';
    496                 }
    497          
    498          
    499             // else if (status.on) program_display='P';
    500             //  else program_display=' ';
    501          
    502              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c%c",result1,result2,sync_display,manu_display,program_display,power_display);
   \                     ??Display_5:
   \   000067 C60000                LD        A, L:sync_display
   \   00006A 5F                    CLRW      X
   \   00006B 97                    LD        XL, A
   \   00006C BF00                  LDW       S:?w2, X
   \   00006E C60000                LD        A, L:manu_display
   \   000071 97                    LD        XL, A
   \   000072 BF00                  LDW       S:?w1, X
   \   000074 C60000                LD        A, L:program_display
   \   000077 97                    LD        XL, A
   \   000078 BF00                  LDW       S:?w0, X
   \   00007A B600                  LD        A, S:?b6
   \   00007C 41                    EXG       A, XL
   \   00007D 90CE0000              LDW       Y, L:hardware
   \   000081 909F                  LD        A, YL
   \   000083 A502                  BCP       A, #0x2
   \   000085 89                    PUSHW     X
   \   000086 2725                  JREQ      L:??Display_6
   \   000088 8D000000              CALLF     L:?push_w0
   \   00008C 8D000000              CALLF     L:?push_w1
   \   000090 8D000000              CALLF     L:?push_w2
   \   000094 C60000                LD        A, L:result2
   \   000097 97                    LD        XL, A
   \   000098 89                    PUSHW     X
   \   000099 C60000                LD        A, L:result1
   \   00009C 97                    LD        XL, A
   \   00009D 89                    PUSHW     X
   \   00009E 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c%c">`
   \   0000A2 AE0000                LDW       X, #line1
   \   0000A5 8D000000              CALLF     sprintf
   \   0000A9 5B0C                  ADD       SP, #0xc
   \   0000AB 2019                  JRA       L:??Display_7
    503                else sprintf(line1,"\n%c%c%c%c",sync_display,manu_display,program_display,power_display);
   \                     ??Display_6:
   \   0000AD 8D000000              CALLF     L:?push_w0
   \   0000B1 8D000000              CALLF     L:?push_w1
   \   0000B5 8D000000              CALLF     L:?push_w2
   \   0000B9 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c%c">`
   \   0000BD AE0000                LDW       X, #line1
   \   0000C0 8D000000              CALLF     sprintf
   \   0000C4 5B08                  ADD       SP, #0x8
    504          
    505             line_lcd=0;
   \                     ??Display_7:
   \   0000C6 725F0000              CLR       L:line_lcd
    506             printf(line1);
   \   0000CA AE0000                LDW       X, #line1
   \   0000CD 8D000000              CALLF     ?Subroutine26
    507          
    508             line_lcd=1;
    509             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_233:
   \   0000D1 89                    PUSHW     X
   \   0000D2 C60000                LD        A, L:minutes
   \   0000D5 97                    LD        XL, A
   \   0000D6 89                    PUSHW     X
   \   0000D7 C60000                LD        A, L:hours
   \   0000DA 97                    LD        XL, A
   \   0000DB 89                    PUSHW     X
   \   0000DC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000DF 8D000000              CALLF     printf
   \   0000E3 5B06                  ADD       SP, #0x6
    510          
    511          
    512             Time_Display=FALSE;
   \   0000E5 725F0000              CLR       L:Time_Display
    513             sync_display=' ';
   \   0000E9 35200000              MOV       L:sync_display, #0x20
    514          
    515          
    516          }
   \   0000ED 87                    RETF
    517          

   \                                 In section .far_func.text, align 1
    518          void Power_On()
    519          {
    520            //status.auto=0;
    521            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine44
    522            status.manu=1; //Manu
    523            SaveStatus();
   \                     ??CrossCallReturnLabel_100:
   \   00000A AC000000              JPF       SaveStatus
    524            //hardware.lcdLed=1;
    525          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine44:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 AA01                  OR        A, #0x1
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    526          

   \                                 In section .far_func.text, align 1, keep-with-next
    527          void Power_Off()
    528          {
    529            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine44
    530            status.manu=1; //Manu
    531            SaveStatus();
   \                     ??CrossCallReturnLabel_99:
   \   00000A AC000000              JPF       SaveStatus
    532             //hardware.lcdLed=0;
    533          
    534          }
    535          

   \                                 In section .far_func.text, align 1, keep-with-next
    536          void InitI2C(void)
    537          {
    538             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    539             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    540             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    541          }
    542          

   \                                 In section .far_func.text, align 1, keep-with-next
    543          bool I2C_Start(void)
    544          {
    545             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    546                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    547              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_138:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    548                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    549                  {
    550                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    551                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    552                  }
    553                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    554          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    555          

   \                                 In section .far_func.text, align 1, keep-with-next
    556          bool I2C_WA(u8 address)
    557          {
    558            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    559                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    560                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_137:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    561                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    562                   {
    563                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    564                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    565                   }
    566                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    567          }
    568          

   \                                 In section .far_func.text, align 1, keep-with-next
    569          bool I2C_RA(u8 address)
    570          {
    571            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    572                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    573                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_139:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    574                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    575                   {
    576                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    577                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    578                   }
    579                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    580          }
    581          
    582          

   \                                 In section .far_func.text, align 1, keep-with-next
    583          bool I2C_WD(u8 data)
    584          {
    585           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    586             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    587             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_136:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    588              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    589              {
    590                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    591                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    592              }
    593               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    594          }
    595          

   \                                 In section .far_func.text, align 1, keep-with-next
    596          u8 I2C_RD(void)
    597          {
    598           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    599            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    600           //while((!(I2C->SR1 & 0x40))&&timeout);
    601           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    602           {
    603             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    604             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    605           }
    606           u8 data=I2C_ReceiveData();
    607           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    608          }
    609          
    610          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine93_0
   \   000001                       ;               // Fall through to label ??Subroutine93_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    611          bool  ReadDS1307(void)
    612          {        //TIM3_Cmd(DISABLE);
    613                   disableInterrupts();
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine51
    614                 error=0;
    615                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_135:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    616                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_133:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    617                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_278:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    618                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine31
    619                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_60:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    620                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    621                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine30
    622                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_58:
   \   000028 C70000                LD        L:seconds, A
    623                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine30
    624                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_57:
   \   00002F C70000                LD        L:minutes, A
    625                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine30
    626                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_56:
   \   000036 C70000                LD        L:hours, A
    627                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine30
    628                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_55:
   \   00003D C70000                LD        L:days, A
    629                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine30
    630                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_54:
   \   000044 C70000                LD        L:`date`, A
    631                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine30
    632                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_53:
   \   00004B C70000                LD        L:month, A
    633                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine34
    634                   I2C_GenerateSTOP(ENABLE);
    635                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_68:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    636          
    637               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    638               //   u8 data1 = I2C_RD();
    639                //Last read byte by I2C slave
    640               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    641               //  I2C_GenerateSTOP(ENABLE);
    642               //  temp2= I2C_RD();
    643                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    644                    {
    645                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    646                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    647                    }
    648                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006A CE0000                LDW       X, L:hardware
   \   00006D 01                    RRWA      X, A
   \   00006E AA01                  OR        A, #0x1
   \   000070 02                    RLWA      X, A
   \   000071 CF0000                LDW       L:hardware, X
    649                 //TIM3_Cmd(ENABLE);
    650                  enableInterrupts();
   \   000074 9A                    RIM
    651                 return TRUE;
   \   000075 A601                  LD        A, #0x1
   \   000077 87                    RETF
    652          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 9B                    SIM
   \   000001 725F0000              CLR       L:error
   \   000005 8D000000              CALLF     I2C_Start
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_200:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    653          

   \                                 In section .far_func.text, align 1, keep-with-next
    654          bool Check_DS1307(void)
    655          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    656             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    657                 error=0;
   \   000003 725F0000              CLR       L:error
    658                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    659                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    660                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_132:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    661                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine93_0
   \                     ??CrossCallReturnLabel_281:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    662                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine31
    663                  //Last read byte by I2C slave
    664                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_59:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    665                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    666                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine75
    667                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_201:
   \   00003C B700                  LD        S:?b8, A
    668                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine34
    669                 I2C_GenerateSTOP(ENABLE);
    670                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_69:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    671                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    672          }
    673          

   \                                 In section .far_func.text, align 1, keep-with-next
    674          bool Set_DS1307()
    675          {
    676                 // convert hex or decimal to bcd format
    677          
    678                 disableInterrupts();
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine51
    679                 error=0;
    680                 if (!I2C_Start())
   \                     ??CrossCallReturnLabel_134:
   \   000004 2603                  JRNE      L:??Set_DS1307_0
    681                 {
    682                   enableInterrupts();
   \   000006 9A                    RIM
   \   000007 2006                  JRA       L:??Set_DS1307_1
    683                   return FALSE;
    684                 }
    685                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000009 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_131:
   \   00000D 2602                  JRNE      L:??Set_DS1307_2
   \                     ??Set_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 87                    RETF
    686                 if(!I2C_WD(0x00)) return FALSE;
   \                     ??Set_DS1307_2:
   \   000011 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_277:
   \   000015 27F8                  JREQ      L:??Set_DS1307_1
    687                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000017 C60000                LD        A, L:seconds
   \   00001A 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_124:
   \   00001E 27EF                  JREQ      L:??Set_DS1307_1
    688                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   000020 C60000                LD        A, L:minutes
   \   000023 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_125:
   \   000027 27E6                  JREQ      L:??Set_DS1307_1
    689                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000029 C60000                LD        A, L:hours
   \   00002C 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_126:
   \   000030 27DD                  JREQ      L:??Set_DS1307_1
    690                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   000032 C60000                LD        A, L:days
   \   000035 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_127:
   \   000039 27D4                  JREQ      L:??Set_DS1307_1
    691                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   00003B C60000                LD        A, L:`date`
   \   00003E 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_128:
   \   000042 27CB                  JREQ      L:??Set_DS1307_1
    692                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000044 C60000                LD        A, L:month
   \   000047 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_129:
   \   00004B 27C2                  JREQ      L:??Set_DS1307_1
    693                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004D C60000                LD        A, L:year
   \   000050 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_130:
   \   000054 27B9                  JREQ      L:??Set_DS1307_1
    694                 if(!I2C_WD(DS_Control))return FALSE;
   \   000056 A610                  LD        A, #0x10
   \   000058 8D000000              CALLF     ??Subroutine93_0
   \                     ??CrossCallReturnLabel_279:
   \   00005C 27B1                  JREQ      L:??Set_DS1307_1
    695                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005E A6AA                  LD        A, #0xaa
   \   000060 8D000000              CALLF     ??Subroutine93_0
   \                     ??CrossCallReturnLabel_280:
   \   000064 27A9                  JREQ      L:??Set_DS1307_1
    696                 I2C_GenerateSTOP(ENABLE);
   \   000066 A601                  LD        A, #0x1
   \   000068 8D000000              CALLF     I2C_GenerateSTOP
    697                 enableInterrupts();
   \   00006C 9A                    RIM
    698          
    699             return TRUE;
   \   00006D A601                  LD        A, #0x1
   \   00006F 87                    RETF
    700          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    701          
    702          

   \                                 In section .far_func.text, align 1, keep-with-next
    703          u8 convert_tobcd(u8 data)
    704          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    705             u8 data_second_decimal=data/10;
    706             u8 data_first_decimal=data - 10*data_second_decimal;
    707             data=16*data_second_decimal + data_first_decimal;
    708            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    709          }
    710          

   \                                 In section .far_func.text, align 1, keep-with-next
    711          u8 bcd2hex(u8 bcd)
    712          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    713            u8 hex=0;
    714            hex=(bcd>>4)*10 +(bcd&0x0f);
    715            bcd=0;
    716            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    717          }
    718          
    719          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 A102                  CP        A, #0x2
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_198:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    720          void  SetupMenu()
    721          {
   \                     SetupMenu:
   \   000000 3B0000                PUSH      S:?b8
    722               // Clear Display
    723              LCDInstr(0x01); //Clear LCD
   \   000003 8D000000              CALLF     ?Subroutine25
    724              Delay1(250);
   \                     ??CrossCallReturnLabel_43:
   \   000007 8D000000              CALLF     ??Subroutine91_0
    725          
    726              line_lcd=0;
    727              printf("\nMenu +/-");
   \                     ??CrossCallReturnLabel_273:
   \   00000B AE0000                LDW       X, #`?<Constant "\\nMenu +/-">`
   \   00000E 8D000000              CALLF     printf
    728               u8 mi=0;
   \   000012 3F00                  CLR       S:?b8
    729               u8 size_setup_menu = (sizeof(setup_menu)/2) -1;
    730          
    731              do
    732              {
    733                 //strcpy(line2,"\nPrgClear");
    734                  line_lcd=1;
   \                     ??SetupMenu_0:
   \   000014 8D000000              CALLF     ??Subroutine92_0
    735                   printf(setup_menu[mi]);
    736                 pressKey();
   \                     ??CrossCallReturnLabel_274:
   \   000018 8D000000              CALLF     ?Subroutine54
    737                     if(button==2)    // Plus Key  Enter Menu
   \                     ??CrossCallReturnLabel_148:
   \   00001C 260F                  JRNE      L:??CrossCallReturnLabel_276
    738                     {
    739                        mi++;
   \   00001E B600                  LD        A, S:?b8
   \   000020 4C                    INC       A
   \   000021 B700                  LD        S:?b8, A
    740                        if(mi > size_setup_menu) mi=0;
   \   000023 A103                  CP        A, #0x3
   \   000025 2502                  JRC       L:??SetupMenu_1
   \   000027 3F00                  CLR       S:?b8
    741                         Clear_Line2();
   \                     ??SetupMenu_1:
   \   000029 8D000000              CALLF     ?Subroutine3
    742                          line_lcd=1;
    743                          printf(setup_menu[mi]);
    744          
    745                     }
    746          
    747                      if (button==3)  // Minus Key  down Menu
   \                     ??CrossCallReturnLabel_276:
   \   00002D C60000                LD        A, L:button
   \   000030 A103                  CP        A, #0x3
   \   000032 2611                  JRNE      L:??CrossCallReturnLabel_275
    748                      {
    749                           mi--;
   \   000034 B600                  LD        A, S:?b8
   \   000036 4A                    DEC       A
   \   000037 B700                  LD        S:?b8, A
    750                          if(mi==255) mi=size_setup_menu;
   \   000039 A1FF                  CP        A, #0xff
   \   00003B 2604                  JRNE      L:??SetupMenu_2
   \   00003D 35020000              MOV       S:?b8, #0x2
    751                          Clear_Line2();
   \                     ??SetupMenu_2:
   \   000041 8D000000              CALLF     ?Subroutine3
    752                          line_lcd=1;
    753                          printf(setup_menu[mi]);
    754          
    755                      }
    756          
    757          
    758          
    759                     if(button==0)  // No key press
   \                     ??CrossCallReturnLabel_275:
   \   000045 C60000                LD        A, L:button
   \   000048 26CA                  JRNE      L:??SetupMenu_0
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    760                     {
    761                       return;
    762                     }
    763          
    764              } while ( button != 0);   //Ok Next Menu   button != 1 &&
    765          
    766          
    767          
    768          
    769          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 8D000000              CALLF     Clear_Line2
   \   000004                       REQUIRE ??Subroutine92_0
   \   000004                       ;               // Fall through to label ??Subroutine92_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 5F                    CLRW      X
   \   000005 41                    EXG       A, XL
   \   000006 B600                  LD        A, S:?b8
   \   000008 41                    EXG       A, XL
   \   000009 58                    SLLW      X
   \   00000A DE0000                LDW       X, (L:setup_menu,X)
   \   00000D AC000000              JPF       printf
    770          
    771          
    772          

   \                                 In section .far_func.text, align 1, keep-with-next
    773          bool Set_Clock()
    774          {
    775              //Clear Display
    776             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine17
    777             Delay1(1000);
    778             line_lcd=0;
    779              printf("\nYear>");
    780                do
    781              {
    782               line_lcd=1;
   \                     ??CrossCallReturnLabel_29:
   \   000004 8D000000              CALLF     ?Subroutine27
    783               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_44:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    784                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine84_0
    785              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_227:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_112:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_29
    786          
    787               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine46
    788              printf("\nMonth>");
    789                do
    790              {
    791               line_lcd=1;
   \                     ??CrossCallReturnLabel_106:
   \   000036 8D000000              CALLF     ?Subroutine27
    792               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_45:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    793                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    794              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_113:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_106
    795          
    796              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine18
    797               Delay1(1000);
    798                line_lcd=0;
    799              printf("\nDate>");
    800                do
    801              {
    802               line_lcd=1;
   \                     ??CrossCallReturnLabel_31:
   \   00006A 8D000000              CALLF     ?Subroutine27
    803               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_46:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    804                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    805              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_114:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_31
    806          
    807          
    808              //Clear Display
    809             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine19
    810             Delay1(1000);
    811             line_lcd=0;
    812              printf("\nDays>");
   \                     ??CrossCallReturnLabel_270:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    813                do
    814              {
    815                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    816               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    817                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    818              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_115:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    819          
    820          
    821          
    822             //Clear Display
    823             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine19
    824             Delay1(1000);
    825             line_lcd=0;
    826              printf("\nHour>");
   \                     ??CrossCallReturnLabel_271:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    827                do
    828              {
    829                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine85_0
    830               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_234:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    831                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine84_0
    832              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_226:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_116:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    833          
    834               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    835               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    836                do
    837              {
    838                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine85_0
    839               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_235:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    840                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine35
    841              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_231:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_117:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    842          
    843              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    844              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    845              do
    846              {
    847                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine85_0
    848               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_236:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    849                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine35
    850              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_230:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_118:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    851          
    852                // Set parameter to DS1307 + time byte
    853                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    854          
    855                //bool k=Check_DS1307();
    856          
    857            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    858          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine84_0
   \   000006                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_191:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_192:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     LCDInstr
   \   000006 AE03E8                LDW       X, #0x3e8
   \   000009 8D000000              CALLF     Delay1
   \   00000D 725F0000              CLR       L:line_lcd
   \   000011 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_196:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine91_0
   \   000007                       ;               // Fall through to label ??Subroutine91_0
    859          
    860          

   \                                 In section .far_func.text, align 1, keep-with-next
    861          u8 adj(u8 min,u8 max,u8 now)
    862          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    863             u8 adj=now;
    864             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    865             {
    866               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    867               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    868             }
    869             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    870             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    871             {
    872               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    873               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    874             }
    875             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    876             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    877          
    878             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    879          }
    880          
    881          

   \                                 In section .far_func.text, align 1, keep-with-next
    882          bool key_ok_on()
    883          {
    884            //Read Key OK
    885            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_61:
   \   000004 2649                  JRNE      L:??key_ok_on_0
    886             {
    887               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    888                key_ok_hold=FALSE;
   \   00000A 725F0000              CLR       L:key_ok_hold
    889                while((timer2 < KEY_TIME_HOLD) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000E CE0000                LDW       X, L:timer2
   \   000011 A3FDE8                CPW       X, #0xfde8
   \   000014 2406                  JRNC      L:??key_ok_on_2
   \   000016 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_62:
   \   00001A 27F2                  JREQ      L:??key_ok_on_1
    890                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A30FA0                CPW       X, #0xfa0
   \   000022 252B                  JRC       L:??key_ok_on_0
    891                 {
    892                      if(timer2>=KEY_TIME_HOLD)
   \   000024 CE0000                LDW       X, L:timer2
   \   000027 A3FDE8                CPW       X, #0xfde8
   \   00002A 2507                  JRC       L:??key_ok_on_3
    893                      {
    894                        key_ok_hold=TRUE;
   \   00002C 35010000              MOV       L:key_ok_hold, #0x1
    895                         return TRUE;
   \                     ??key_ok_on_4:
   \   000030 A601                  LD        A, #0x1
   \   000032 87                    RETF
    896                      }
    897                   timer2=0; // and next must be release
   \                     ??key_ok_on_3:
   \   000033 5F                    CLRW      X
   \   000034 CF0000                LDW       L:timer2, X
    898                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000037 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_63:
   \   00003B 2712                  JREQ      L:??key_ok_on_0
    899                    {
    900                       beep(2000);
   \   00003D 8D000000              CALLF     ?Subroutine37
    901                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_74:
   \   000041 2606                  JRNE      L:??key_ok_on_5
    902                        {
    903                         hardware.lcdLed=1;
   \   000043 8D000000              CALLF     ?Subroutine39
    904                         lcdLedTimer=LCDLEDON;
    905                         return FALSE;
   \                     ??CrossCallReturnLabel_79:
   \   000047 2006                  JRA       ??key_ok_on_0
    906                        }
    907                       hardware.lcdLed=1;
   \                     ??key_ok_on_5:
   \   000049 8D000000              CALLF     ?Subroutine39
    908                       lcdLedTimer=LCDLEDON;
    909          
    910                      return TRUE;   //if realease retrun true
   \                     ??CrossCallReturnLabel_80:
   \   00004D 20E1                  JRA       ??key_ok_on_4
    911                    }
    912                 }
    913             }
    914          
    915            return FALSE;
   \                     ??key_ok_on_0:
   \   00004F 4F                    CLR       A
   \   000050 87                    RETF
    916          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    917          
    918          
    919          

   \                                 In section .far_func.text, align 1, keep-with-next
    920           bool key_plus_on()
    921          {
    922            //Read Key OK
    923              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_71:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
    924               {
    925               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    926                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_92:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_70:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    927                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
    928                  {
    929                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_65:
   \   000026 2711                  JREQ      L:??key_plus_on_0
    930                    {
    931                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine37
    932                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_76:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
    933                        {
    934                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine39
    935                         lcdLedTimer=LCDLEDON;
    936                         return FALSE;
   \                     ??CrossCallReturnLabel_82:
   \   000032 2005                  JRA       ??key_plus_on_0
    937                        }
    938                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine38
    939                        lcdLedTimer=LCDLEDON;
    940          
    941                      return TRUE;
    942                    }
    943                  }
    944               }
   \                     ??CrossCallReturnLabel_78:
   \   000038 87                    RETF
    945          
    946            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    947          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_203:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData
    948          
    949          

   \                                 In section .far_func.text, align 1, keep-with-next
    950            bool key_minus_on()
    951          {
    952            //Read Key OK
    953             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_73:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
    954               {
    955               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    956                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_91:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_72:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    957                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
    958                  {
    959                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_64:
   \   000026 2711                  JREQ      L:??key_minus_on_0
    960                   {
    961                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine37
    962                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_75:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
    963                       {
    964                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine39
    965                        lcdLedTimer=LCDLEDON;
    966                        return FALSE;
   \                     ??CrossCallReturnLabel_81:
   \   000032 2005                  JRA       ??key_minus_on_0
    967                       }
    968                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine38
    969                     lcdLedTimer=LCDLEDON;
    970                     return TRUE;
    971                   }
    972                  }
    973               }
   \                     ??CrossCallReturnLabel_77:
   \   000038 87                    RETF
    974          
    975            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    976          }
    977          
    978          

   \                                 In section .far_func.text, align 1, keep-with-next
    979          bool  key_ok_plus()
    980          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    981            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_25:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
    982            {
    983                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    984                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_93:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_26:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    985                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_94:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_221
    986                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine82
    987                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_221:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
    988                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
    989            }
    990          
    991           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
    992          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    993          
    994           /*
    995          bool Set_Timer_On()
    996          {
    997          
    998             //clr
    999             LCDInstr(0x01);
   1000             Delay1(1000);
   1001             line_lcd=0;
   1002             printf("\nH On>");
   1003              timer3=0;
   1004            do
   1005              {
   1006               line_lcd=1;
   1007               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   1008                 daily_hour_on=adj(0,23,daily_hour_on);
   1009              } while ( timer3<=time_menu && !key_ok_on());
   1010          
   1011          
   1012             LCDInstr(0x01);
   1013             Delay1(1000);
   1014             line_lcd=0;
   1015             printf("\nMin On>");
   1016              timer3=0;
   1017            do
   1018              {
   1019               line_lcd=1;
   1020               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   1021                 daily_minute_on=adj(0,59,daily_minute_on);
   1022              } while ((timer3<=time_menu)&& !key_ok_on());
   1023          
   1024             //Save data to eeprom
   1025               if (!status.monthly) status.daily=1;
   1026                 else status.daily=0;
   1027               EEPROM_INIT();
   1028              //u8 temp =*(u8*)(&status);
   1029              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   1030               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1031               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1032               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   1033               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   1034               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1035                time_on=daily_hour_on*60+daily_minute_on;
   1036                 change=TRUE;
   1037          
   1038             return TRUE;
   1039          }
   1040           */
   1041          
   1042          /*
   1043          bool Set_Timer_Off()
   1044          {
   1045          
   1046              LCDInstr(0x01);
   1047              Delay1(1000);
   1048              line_lcd=0;
   1049              printf("\nH Off>");
   1050               timer3=0;
   1051            do
   1052              {
   1053               line_lcd=1;
   1054               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   1055                 daily_hour_off=adj(0,23,daily_hour_off);
   1056              } while (timer3<=time_menu && !key_ok_on());
   1057          
   1058            LCDInstr(0x01);
   1059             Delay1(1000);
   1060             line_lcd=0;
   1061             printf("\nMin Off>");
   1062             timer3=0;
   1063            do
   1064              {
   1065               line_lcd=1;
   1066               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   1067                 daily_minute_off=adj(0,59,daily_minute_off);
   1068              } while (timer3<=time_menu && !key_ok_on());
   1069          
   1070            //Save data to eeprom
   1071               if (!status.monthly) status.daily=1;
   1072                 else status.daily=0;
   1073               EEPROM_INIT();
   1074              //u8 temp =*(u8*)(&status);
   1075              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   1076               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1077               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1078               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   1079               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   1080               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1081                time_off= daily_hour_off*60+daily_minute_off;
   1082                 change=TRUE;
   1083               return TRUE;
   1084          }
   1085          
   1086            */
   1087          

   \                                 In section .far_func.text, align 1, keep-with-next
   1088          void SaveStatus()
   1089          {
   1090            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     ?Subroutine1
   1091            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1092            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1093            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_1:
   \   000004 AC000000              JPF       FLASH_Lock
   1094          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine80
   \                     ??CrossCallReturnLabel_217:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine80
   \                     ??CrossCallReturnLabel_216:
   \   00001C A6F7                  LD        A, #0xf7
   \   00001E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
   1095          
   1096          

   \                                 In section .far_func.text, align 1, keep-with-next
   1097          void SaveProgram ()
   1098          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
   1099               char *pp = (char*)&programpoint[0];
   1100              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1101             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1102             {
   1103              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 8D000000              CALLF     ?Subroutine57
   1104             }
   \                     ??CrossCallReturnLabel_155:
   \   000015 25F2                  JRC       L:??SaveProgram_0
   1105              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 8D000000              CALLF     FLASH_Lock
   1106          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 1C4002                ADDW      X, #0x4002
   \   000003 8D000000              CALLF     L:?sext32_l0_x
   \   000007 8D000000              CALLF     FLASH_ProgramByte
   \   00000B B600                  LD        A, S:?b8
   \   00000D 4C                    INC       A
   \   00000E B700                  LD        S:?b8, A
   \   000010 A128                  CP        A, #0x28
   \   000012 87                    RETF
   1107          
   1108          

   \                                 In section .far_func.text, align 1, keep-with-next
   1109          void ReadProgram()
   1110          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1111              char *pp = (char*)&programpoint[0];
   1112            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1113             {
   1114               *(pp+i)=FLASH_ReadByte( EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1115             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A128                  CP        A, #0x28
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1116          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1117          
   1118          

   \                                 In section .far_func.text, align 1, keep-with-next
   1119          void ResetProgram()
   1120          {
   \                     ResetProgram:
   \   000000 3B0000                PUSH      S:?b8
   1121          
   1122              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1123             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1124             {
   1125              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,0);
   \                     ??ResetProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A B600                  LD        A, S:?b8
   \   00000C 41                    EXG       A, XL
   \   00000D 8D000000              CALLF     ?Subroutine57
   1126             }
   \                     ??CrossCallReturnLabel_156:
   \   000011 25F6                  JRC       L:??ResetProgram_0
   1127              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 8D000000              CALLF     FLASH_Lock
   1128          
   1129               //Reload ProgrmaPoint
   1130             ReadProgram();
   \   000019 8D000000              CALLF     ReadProgram
   1131          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF
   1132          

   \                                 In section .far_func.text, align 1, keep-with-next
   1133          void CheckProgramPoint()
   1134          {
   \                     CheckProgramPoint:
   \   000000 8D000000              CALLF     L:?push_w4
   1135             if(status.manu) return;
   \   000004 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_208:
   \   000008 2703                  JREQ      ??lb_5
   \   00000A CC0000                JP        L:??CheckProgramPoint_0
   1136             u16 timenow=hours*60+minutes;
   \                     ??lb_5:
   \   00000D C60000                LD        A, L:hours
   \   000010 905F                  CLRW      Y
   \   000012 9097                  LD        YL, A
   \   000014 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_268:
   \   000018 C60000                LD        A, L:minutes
   \   00001B 9097                  LD        YL, A
   \   00001D 8D000000              CALLF     ?Subroutine81
   \                     ??CrossCallReturnLabel_218:
   \   000021 BF00                  LDW       S:?w4, X
   1137             status.on=0;
   \   000023 8D000000              CALLF     ?Subroutine55
   1138              //u8 daytoday;
   1139               for( u8 i=0; i<8;i++)
   \                     ??CrossCallReturnLabel_150:
   \   000027 3F00                  CLR       S:?b6
   1140               {
   1141                  //For Daily Allarm
   1142                 if(programpoint[i].day==8)
   \                     ??CheckProgramPoint_1:
   \   000029 5F                    CLRW      X
   \   00002A 41                    EXG       A, XL
   \   00002B B600                  LD        A, S:?b6
   \   00002D 41                    EXG       A, XL
   \   00002E 9093                  LDW       Y, X
   \   000030 AE0005                LDW       X, #0x5
   \   000033 8D000000              CALLF     ??Subroutine90_0
   \                     ??CrossCallReturnLabel_267:
   \   000037 1C0000                ADDW      X, #programpoint
   \   00003A BF00                  LDW       S:?w1, X
   \   00003C 92C600                LD        A, [S:?w1.w]
   \   00003F A108                  CP        A, #0x8
   \   000041 266D                  JRNE      L:??CheckProgramPoint_2
   1143                 {
   1144                  int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   000043 5C                    INCW      X
   \   000044 F6                    LD        A, (X)
   \   000045 5F                    CLRW      X
   \   000046 97                    LD        XL, A
   \   000047 9093                  LDW       Y, X
   \   000049 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_269:
   \   00004D 9093                  LDW       Y, X
   \   00004F BE00                  LDW       X, S:?w1
   \   000051 1C0002                ADDW      X, #0x2
   \   000054 F6                    LD        A, (X)
   \   000055 5F                    CLRW      X
   \   000056 97                    LD        XL, A
   \   000057 BF00                  LDW       S:?w0, X
   \   000059 93                    LDW       X, Y
   \   00005A 72BB0000              ADDW      X, S:?w0
   \   00005E 9093                  LDW       Y, X
   1145                  int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   \   000060 BE00                  LDW       X, S:?w1
   \   000062 1C0003                ADDW      X, #0x3
   \   000065 F6                    LD        A, (X)
   \   000066 5F                    CLRW      X
   \   000067 97                    LD        XL, A
   \   000068 BF00                  LDW       S:?w2, X
   \   00006A AE003C                LDW       X, #0x3c
   \   00006D BF00                  LDW       S:?w0, X
   \   00006F BE00                  LDW       X, S:?w2
   \   000071 8D000000              CALLF     L:?mul16_x_x_w0
   \   000075 BF00                  LDW       S:?w0, X
   \   000077 BE00                  LDW       X, S:?w1
   \   000079 1C0004                ADDW      X, #0x4
   \   00007C F6                    LD        A, (X)
   \   00007D 5F                    CLRW      X
   \   00007E 97                    LD        XL, A
   \   00007F BF00                  LDW       S:?w1, X
   \   000081 BE00                  LDW       X, S:?w0
   \   000083 72BB0000              ADDW      X, S:?w1
   \   000087 BF00                  LDW       S:?w0, X
   1146                      do
   1147                        {
   1148                         if (timeon == timenow)
   \                     ??CheckProgramPoint_3:
   \   000089 90B300                CPW       Y, S:?w4
   \   00008C 2611                  JRNE      L:??CheckProgramPoint_4
   1149                          {
   1150                            power = i;
   \   00008E B600                  LD        A, S:?b6
   \   000090 C70000                LD        L:power, A
   1151                            status.on=1;
   \   000093 CE0000                LDW       X, L:status
   \   000096 01                    RRWA      X, A
   \   000097 AA02                  OR        A, #0x2
   \   000099 02                    RLWA      X, A
   \   00009A CF0000                LDW       L:status, X
   1152                           break;
   \   00009D 2011                  JRA       L:??CheckProgramPoint_2
   1153                          }
   1154                         timeon ++;
   \                     ??CheckProgramPoint_4:
   \   00009F 93                    LDW       X, Y
   \   0000A0 5C                    INCW      X
   \   0000A1 9093                  LDW       Y, X
   1155                        if (timeon == 1441) timeon = 0;
   \   0000A3 90A305A1              CPW       Y, #0x5a1
   \   0000A7 2602                  JRNE      L:??CheckProgramPoint_5
   \   0000A9 905F                  CLRW      Y
   1156                        } while (!(timeon==timeoff));
   \                     ??CheckProgramPoint_5:
   \   0000AB 90B300                CPW       Y, S:?w0
   \   0000AE 26D9                  JRNE      L:??CheckProgramPoint_3
   1157                  }
   1158          
   1159                     // for Day of the Week Allarm
   1160                  else if (programpoint[i].day== days) //Point is Weekly Mode
   1161                  {
   1162          
   1163                  }
   1164                 // for Monthly Allarm
   1165                  else if (programpoint[i].day == 9)//Point is Monthly Mode
   1166                   {
   1167                   }
   1168          
   1169          
   1170               }
   \                     ??CheckProgramPoint_2:
   \   0000B0 B600                  LD        A, S:?b6
   \   0000B2 4C                    INC       A
   \   0000B3 B700                  LD        S:?b6, A
   \   0000B5 A108                  CP        A, #0x8
   \   0000B7 2403                  JRNC      ??lb_6
   \   0000B9 CC0000                JP        L:??CheckProgramPoint_1
   \                     ??lb_6:
   \                     ??CheckProgramPoint_0:
   \   0000BC AC000000              JPF       L:?epilogue_w4
   1171          
   1172          
   1173          
   1174          
   1175          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 AE003C                LDW       X, #0x3c
   \   000003                       REQUIRE ??Subroutine90_0
   \   000003                       ;               // Fall through to label ??Subroutine90_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000 BF00                  LDW       S:?w0, X
   \   000002 93                    LDW       X, Y
   \   000003 AC000000              JPF       L:?mul16_x_x_w0
   1176          
   1177          

   \                                 In section .far_func.text, align 1, keep-with-next
   1178          bool Read_Allarm()
   1179          {
   1180             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1181              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1182             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1183              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1184             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1185              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1186             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1187              if(daily_hour_off > 59) return FALSE;
   1188             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1189              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1190             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1191              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1192             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1193              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1194            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1195          }
   1196          

   \                                 In section .far_func.text, align 1, keep-with-next
   1197          void EEPROM_INIT()
   1198          {
   1199            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1200            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1201            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1202          
   1203          }
   1204          
   1205          

   \                                 In section .far_func.text, align 1, keep-with-next
   1206          void GpioConfiguration()
   1207          {
   1208          
   1209            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1210          
   1211            // ADC PE6 NEW PB0
   1212            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1213          
   1214            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1215            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1216          
   1217            //PD0 Led
   1218            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine66
   1219            //I2C
   1220            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_181:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1221            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine68
   1222            // Remap Pins pb4,pb5  sda,scl ;
   1223          
   1224             //Init KEY OK,PLUS,MINUS
   1225            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_186:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine68
   1226            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_187:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine68
   1227            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_188:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1228          
   1229            //Init DS18b20 data pin
   1230            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine66
   1231          
   1232            // Power Pin
   1233             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_180:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine66
   1234          
   1235            // lcdLed Pin
   1236             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_LOW_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_179:
   \   00006B 35800000              MOV       S:?b0, #0x80
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1237          
   1238          
   1239          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1240          

   \                                 In section .far_func.text, align 1, keep-with-next
   1241          void InitClk()
   1242          {
   1243            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1244            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1245            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1246            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1247            CLK_SOURCE_HSI,       // Switch to internal timer.
   1248            DISABLE,              // Disable the clock switch interrupt.
   1249            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1250          
   1251            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine67
   1252            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_182:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine67
   1253            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_183:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine67
   1254            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_184:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine67
   1255            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_185:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1256          
   1257          
   1258          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1259          
   1260          
   1261          /*
   1262          void InitAdc()
   1263          {
   1264               ADC1_DeInit();
   1265               ADC1_StartConversion();
   1266          
   1267               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1268               //           ADC1_CHANNEL_0,
   1269               //           ADC1_PRESSEL_FCPU_D4,
   1270               //            ADC1_EXTTRIG_TIM,
   1271          
   1272          
   1273               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1274               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1275                                      ADC1_CHANNEL_0,
   1276                                      ADC1_ALIGN_RIGHT
   1277                                     );
   1278          
   1279          
   1280               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1281          
   1282          
   1283               //ADC1_Cmd (ENABLE);
   1284               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1285               ADC1_StartConversion();
   1286               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1287          
   1288          }
   1289          */
   1290          
   1291          
   1292          
   1293          /*
   1294          void InitUart()
   1295          {
   1296             UART2_DeInit();
   1297             UART2_Init((u32)9600,
   1298                        UART2_WORDLENGTH_8D,
   1299                        UART2_STOPBITS_1,
   1300                        UART2_PARITY_NO,
   1301                        UART2_SYNCMODE_CLOCK_DISABLE,
   1302                        UART2_MODE_TXRX_ENABLE
   1303                          );
   1304          
   1305             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1306             UART2_Cmd(ENABLE);
   1307          
   1308            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1309          }
   1310            */
   1311          
   1312          
   1313          /*
   1314          void SendChar( u8 Char)
   1315          {
   1316             UART2->DR = Char;
   1317            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1318          }
   1319          
   1320           */
   1321          
   1322           /*
   1323          void Send_Hello()
   1324          {
   1325            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1326             Delay1(10);
   1327             sprintf(data,"Hello");
   1328              u8 i=0;
   1329            do
   1330           {
   1331            SendChar(data[i++]);
   1332           } while (data[i]!=0);
   1333            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1334            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1335          
   1336          
   1337          
   1338          }
   1339          
   1340          
   1341          
   1342          
   1343          
   1344          void SendData()
   1345          {
   1346           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1347            Delay1(10);
   1348            u8 i=0;
   1349            sprintf(data,"%d %c",adcdata,0x0d);
   1350           do
   1351           {
   1352             SendChar(data[i++]);
   1353          
   1354           } while (data[i]!=0);
   1355             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1356            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1357            rx_data=0;
   1358          }
   1359          */
   1360          
   1361          
   1362           /*
   1363          u16 Average()
   1364          {
   1365           //Find average in measure
   1366            u8 i=0;
   1367            u16 Summa=0;
   1368            do
   1369            {
   1370             Summa+=measure[i++];
   1371            } while ( measure[i]!=0);
   1372             if(i!=0) Summa=Summa/i;
   1373             return Summa;
   1374          }
   1375             */
   1376          

   \                                 In section .far_func.text, align 1, keep-with-next
   1377          void LCDDataOut(u8 data)
   1378          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1379            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_17:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_251
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine88_0
   1380            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_251:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_16:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_252
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine88_0
   1381            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_252:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_15:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_253
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine88_0
   1382            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_253:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_14:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_254
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine88_0
   1383          }
   \                     ??CrossCallReturnLabel_254:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_260:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1384          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine88_0
   \   000002                       ;               // Fall through to label ??Subroutine88_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1385          void InitLcd()
   1386          {
   1387           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine11
   1388            LCD_RW(0);
   1389            LCD_RS(0);
   \                     ??CrossCallReturnLabel_19:
   \   000006 8D000000              CALLF     ?Subroutine12
   1390            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_249:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine16
   1391          
   1392            LCDInstrNibble(0x03);
   1393             Delay1(10);
   1394            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_28:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1395             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine16
   1396            LCDInstrNibble(0x03);
   1397             Delay1(10);
   1398          
   1399             //Line 4
   1400            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_27:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1401            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1402            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1403            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1404          
   1405            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1406            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1407          
   1408            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine21
   1409            Delay1(250);
   1410          
   1411            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_33:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1412            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1413          
   1414          
   1415          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_197:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_258:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_257:
   \   00000A 87                    RETF
   1416          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_255:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_224:
   \   00000D                       REQUIRE ??Subroutine83_0
   \   00000D                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_223:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1417          void LCDInstr(u8 Instr)
   1418          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1419            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine12
   1420            LCD_RW(0);
   \                     ??CrossCallReturnLabel_247:
   \   000009 2000                  JRA       ?Subroutine0
   1421            LCDDataOut(Instr>>4);
   1422            PulseEnable();
   1423            LCDDataOut(Instr & 0x0F);
   1424            PulseEnable();
   1425          }
   1426          

   \                                 In section .far_func.text, align 1, keep-with-next
   1427          void LCDData(u8 Data)
   1428          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1429            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine10
   1430            LCD_RW(0);
   \                     ??CrossCallReturnLabel_13:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1431            LCDDataOut(Data>>4);
   1432            PulseEnable() ;
   1433            LCDDataOut(Data & 0x0F) ;
   1434            PulseEnable();
   1435          }
   1436          

   \                                 In section .far_func.text, align 1, keep-with-next
   1437          void LCDInstrNibble(u8 Instr)
   1438          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1439            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine11
   1440            LCD_RW(0);
   1441            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_18:
   \   00000B AC000000              JPF       ??Subroutine83_0
   1442            PulseEnable();
   1443          }
   1444          

   \                                 In section .far_func.text, align 1, keep-with-next
   1445          void PulseEnable(void)
   1446          {
   1447            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine5
   1448             Delay1(1);
   1449            LCD_EN(1);
   1450             Delay1(1);
   1451            LCD_EN(0);
   \                     ??CrossCallReturnLabel_4:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine88_0
   1452             Delay1(1);
   \                     ??CrossCallReturnLabel_250:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1453          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_259:
   \   000006 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_262:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_261:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1454          

   \                                 In section .far_func.text, align 1, keep-with-next
   1455          void LCD_Busy(void)
   1456          {
   1457             //set Port D7 as Input
   1458             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1459             //Set Read
   1460             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine10
   1461             LCD_RS(0);
   \                     ??CrossCallReturnLabel_12:
   \   000013 8D000000              CALLF     ?Subroutine12
   1462             // Read Busy Flag
   1463                timer2=0;
   \                     ??CrossCallReturnLabel_248:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1464             do
   1465             {
   1466             // Enable set
   1467               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine5
   1468                Delay1(1);
   1469               LCD_EN(1);
   1470                Delay1(1);
   1471             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_5:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1472                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1473                //Clear read
   1474              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine88_0
   1475             //set Port D7 as Output
   1476             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_256:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1477          
   1478          }
   1479          
   1480          

   \                                 In section .far_func.text, align 1, keep-with-next
   1481          void LCD(u8 data)
   1482           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1483             //  static u8 linet=0;
   1484          
   1485          
   1486               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2678                  JRNE      L:??CrossCallReturnLabel_240
   1487               {
   1488          
   1489                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 2730                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2739                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 2742                  JREQ      L:??LCD_3
   \   000018 204A                  JRA       L:??LCD_4
   1490                   {
   1491                   case 0:
   1492                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1493                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1494                      {
   1495                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1496                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     LCDData
   1497                         Delay1(1);
   \   000030 8D000000              CALLF     ??Subroutine86_0
   1498                      }
   \                     ??CrossCallReturnLabel_239:
   \   000034 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_38:
   \   000038 25E8                  JRC       L:??LCD_5
   1499                     LCDInstr(0x80 | 0x00);
   \   00003A A680                  LD        A, #0x80
   \   00003C 8D000000              CALLF     ?Subroutine73
   1500                     count=0;
   1501                     break;
   \                     ??CrossCallReturnLabel_193:
   \   000040 2022                  JRA       L:??LCD_4
   1502                   case 1:
   1503                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000042 A6C0                  LD        A, #0xc0
   \   000044 8D000000              CALLF     LCDInstr
   1504                     count=20;
   \   000048 35140000              MOV       L:count, #0x14
   1505                     break;
   \   00004C 2016                  JRA       L:??LCD_4
   1506                   case 2:
   1507                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004E A694                  LD        A, #0x94
   \   000050 8D000000              CALLF     LCDInstr
   1508                     count=40;
   \   000054 35280000              MOV       L:count, #0x28
   1509                     break;
   \   000058 200A                  JRA       L:??LCD_4
   1510                   case 3:
   1511                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00005A A6D4                  LD        A, #0xd4
   \   00005C 8D000000              CALLF     LCDInstr
   1512                     count=60;
   \   000060 353C0000              MOV       L:count, #0x3c
   1513                     break;
   1514                   //default:
   1515                    //  LCDInstr(0x80 |0x40);    //Line 1
   1516                    }
   1517                   line_lcd++;
   \                     ??LCD_4:
   \   000064 C60000                LD        A, L:line_lcd
   \   000067 4C                    INC       A
   \   000068 C70000                LD        L:line_lcd, A
   1518                   if (line_lcd>=5)
   \   00006B A105                  CP        A, #0x5
   \   00006D 250F                  JRC       L:??LCD_6
   1519                   {
   1520                    line_lcd=1;   //line >=5
   \   00006F 35010000              MOV       L:line_lcd, #0x1
   1521                    LCDInstr(0x01); //Clear LCD
   \   000073 8D000000              CALLF     ?Subroutine74
   1522                    Delay1(2500);
   \                     ??CrossCallReturnLabel_199:
   \   000077 AE09C4                LDW       X, #0x9c4
   \   00007A 8D000000              CALLF     Delay1
   1523                   }
   1524          
   1525                   Delay1(1);
   \                     ??LCD_6:
   \   00007E 8D000000              CALLF     ??Subroutine86_0
   1526          
   1527          
   1528               }
   1529          
   1530          
   1531               if (count==20)
   \                     ??CrossCallReturnLabel_240:
   \   000082 C60000                LD        A, L:count
   \   000085 A114                  CP        A, #0x14
   \   000087 260A                  JRNE      L:??LCD_7
   1532                {
   1533                  LCDInstr(0x80 | 0x40);
   \   000089 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   00008B 8D000000              CALLF     LCDInstr
   1534                  Delay1(1);
   \                     ??LCD_9:
   \   00008F 5F                    CLRW      X
   \   000090 5C                    INCW      X
   \   000091 2020                  JRA       ??CrossCallReturnLabel_41
   1535                }
   1536                   else if(count==40)
   \                     ??LCD_7:
   \   000093 A128                  CP        A, #0x28
   \   000095 2604                  JRNE      L:??LCD_10
   1537                  {
   1538                    LCDInstr(0x80 | 0x14);
   \   000097 A694                  LD        A, #0x94
   \   000099 20F0                  JRA       ??LCD_8
   1539                    Delay1(1);
   1540                  }
   1541                    else if(count==60)
   \                     ??LCD_10:
   \   00009B A13C                  CP        A, #0x3c
   \   00009D 2608                  JRNE      L:??LCD_11
   1542                    {
   1543                      LCDInstr(0x80 | 0x54);
   \   00009F A6D4                  LD        A, #0xd4
   \   0000A1 8D000000              CALLF     ?Subroutine73
   1544                      count=0;
   1545                      Delay1(1);
   \                     ??CrossCallReturnLabel_194:
   \   0000A5 20E8                  JRA       ??LCD_9
   1546                    }
   1547                      else if(count >80)
   \                     ??LCD_11:
   \   0000A7 A151                  CP        A, #0x51
   \   0000A9 250C                  JRC       L:??LCD_12
   1548                        {
   1549                          count=0;
   \   0000AB 725F0000              CLR       L:count
   1550                          LCDInstr(0x01); //Clear LCD
   \   0000AF 8D000000              CALLF     ?Subroutine25
   1551                          Delay1(250);
   1552                        }
   \                     ??CrossCallReturnLabel_41:
   \   0000B3 8D000000              CALLF     Delay1
   1553          
   1554               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B7 B600                  LD        A, S:?b9
   \   0000B9 A11C                  CP        A, #0x1c
   \   0000BB 250F                  JRC       L:??LCD_13
   1555               {
   1556                 LCDData(data);
   \   0000BD 8D000000              CALLF     LCDData
   1557                  Delay1(1);
   \   0000C1 8D000000              CALLF     ??Subroutine86_0
   1558                 count++;
   \                     ??CrossCallReturnLabel_241:
   \   0000C5 C60000                LD        A, L:count
   \   0000C8 4C                    INC       A
   \   0000C9 C70000                LD        L:count, A
   1559               }
   1560           }
   \                     ??LCD_13:
   \   0000CC AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_263:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1561          

   \                                 In section .far_func.text, align 1, keep-with-next
   1562          void InitDelayTimer2()
   1563          {
   1564             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1565             //Tclock 16/8=2Mhz  /20 10us
   1566                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1567                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1568                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1569                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1570                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1571          
   1572          }
   1573          

   \                                 In section .far_func.text, align 1, keep-with-next
   1574          void InitDelayTimer3()
   1575          {
   1576             //Timer 3 use for 1s Delay
   1577             //Tclock 16000000/1024=15626
   1578                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1579                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1580                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1581                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1582          
   1583               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1584          
   1585          }
   1586          
   1587          
   1588          
   1589          

   \                                 In section .far_func.text, align 1, keep-with-next
   1590          bool DS18_Write(u8 data)
   1591          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1592            disableInterrupts();
   \   000006 9B                    SIM
   1593            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1594            {
   1595             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine14
   1596             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1597             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_24:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_246
   \   00001A 8D000000              CALLF     ?Subroutine20
   1598               //else DS18(0);
   1599             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_246:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1600             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine20
   1601             //Delay1(0);
   1602            }
   \                     ??CrossCallReturnLabel_245:
   \   000029 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_39:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1603            enableInterrupts();
   \   00002F 9A                    RIM
   1604            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1605          
   1606          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine87_0
   \   000002                       ;               // Fall through to label ??Subroutine87_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_189:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1607          
   1608          

   \                                 In section .far_func.text, align 1, keep-with-next
   1609          u8  DS18_Read()
   1610          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1611              //Init DS18b20 data pin as Input
   1612          
   1613            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1614              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1615            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1616            {
   1617              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine14
   1618              Delay_us(1); //Start time slot 4,5 us
   1619              DS18(1);
   \                     ??CrossCallReturnLabel_23:
   \   00000D 8D000000              CALLF     ?Subroutine20
   1620              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_243:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1621              //Delay1(0);
   1622             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_37:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1623              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1624              //  DS18(1);  // Next bit
   1625             // Delay1(0);
   1626          
   1627            }
   \   00003D 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_40:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1628              enableInterrupts();
   \   000043 9A                    RIM
   1629              //Init DS18b20 data pin
   1630             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1631             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1632          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1633          

   \                                 In section .far_func.text, align 1, keep-with-next
   1634          bool DS18_Reset()
   1635          {
   1636             //Init Reset Pulse
   1637              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine70
   1638              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_190:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1639              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine20
   1640              //Delay1(1);
   1641              timer2=0;
   \                     ??CrossCallReturnLabel_244:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1642              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_85:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_35:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1643              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_86:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1644              {
   1645                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine42
   1646                return FALSE;
   \                     ??CrossCallReturnLabel_95:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1647              }
   1648          
   1649              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1650               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_87:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_36:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1651                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_88:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1652                 {
   1653                  hardware.ds18B20=0;
   1654                  return FALSE;
   1655                 }
   1656          
   1657              // Delay1(10);
   1658              //Delay1(20);    //25=524us
   1659               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine43
   1660              return TRUE;
   \                     ??CrossCallReturnLabel_97:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1661          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1662          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1663          u8 temperature ()
   1664          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1665          
   1666             //Init Reset Pulse
   1667               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_175:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1668             //Skip ROM Command 0xCC
   1669              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine63
   1670             //Function command  CONVERT T [44h]
   1671              DS18_Write(0x44);
   1672              //Wait util end convert
   1673              timer2=0;
   1674               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_170:
   \   000013 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_90:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_170
   1675                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1676               //u8 temp8=timer2;
   1677              //Init Reset Pulse
   1678              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_176:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1679              // Skip ROM Command 0xCC
   1680              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine62
   1681              //Function command READ SCRATCHPAD [BEh]
   1682              DS18_Write(0xBE);
   1683               u8 temp1=DS18_Read();
   1684               u8 temp2=DS18_Read();
   1685              DS18_Reset();
   \                     ??CrossCallReturnLabel_168:
   \   000033 8D000000              CALLF     DS18_Reset
   1686                u16 result = temp2*256+temp1;
   1687                temp1= (u8)(result>>3);
   1688               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1689          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_213:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_212:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ?Subroutine81
   \                     ??CrossCallReturnLabel_220:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1690          

   \                                 In section .far_func.text, align 1, keep-with-next
   1691          bool Read_DS18()
   1692          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1693          
   1694             //Init Reset Pulse
   1695               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_173:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1696             //Skip ROM Command 0xCC
   1697              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine63
   1698             //Function command  CONVERT T [44h]
   1699              DS18_Write(0x44);
   1700              //Wait util end convert
   1701              timer2=0;
   1702               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_169:
   \   000013 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_89:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_169
   1703                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1704               //u8 temp8=timer2;
   1705              //Init Reset Pulse
   1706              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_174:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1707              // Skip ROM Command 0xCC
   1708              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine62
   1709              //Function command READ SCRATCHPAD [BEh]
   1710              DS18_Write(0xBE);
   1711               u8 temp1=DS18_Read();
   1712               u8 temp2=DS18_Read();
   1713               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_167:
   \   000033 8D000000              CALLF     ?Subroutine65
   1714               u8 temp4=DS18_Read();
   1715               u8 temp5=DS18_Read();
   1716               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_178:
   \   000037 8D000000              CALLF     ?Subroutine65
   1717               u8 temp7=DS18_Read();
   1718               u8 temp8=DS18_Read();
   1719               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_177:
   \   00003B 8D000000              CALLF     DS18_Read
   1720          
   1721               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1722          
   1723                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1724                result2=0;
   \   000047 725F0000              CLR       L:result2
   1725                u16 result = temp2*256+temp1;
   1726                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_2:
   \   00004F C70000                LD        L:result1, A
   1727                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1728                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1729          
   1730          
   1731                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1732               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1733               //line_lcd=1;
   1734               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1735               // while (!key_ok_on());
   1736          
   1737               //u8 temp3=DS18_Read();
   1738          
   1739              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1740          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1741          

   \                                 In section .far_func.text, align 1, keep-with-next
   1742          bool DS18Set ()
   1743          {
   1744               //Init Reset Pulse
   1745              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_171:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1746             //Skip ROM Command 0xCC
   1747              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine79
   1748             //Function command  WRITE SCRATCHPAD 0x4E
   1749              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_215:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1750             //Write 3 bytes last is config reg
   1751              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1752              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1753              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1754          
   1755             //Init Reset Pulse
   1756              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_172:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1757              //Skip ROM Command 0xCC
   1758              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine79
   1759              //Function   Store in Conf Reg
   1760              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_214:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1761            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1762          }
   1763          
   1764          
   1765          
   1766          
   1767          
   1768          
   1769          
   1770          

   \                                 In section .far_func.text, align 1, keep-with-next
   1771          void Delay1(u16 Delay)
   1772          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1773              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1774            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1775            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1776          }
   \   00000D 87                    RETF
   1777          

   \                                 In section .far_func.text, align 1, keep-with-next
   1778           void Delay2(u16 Delay)
   1779          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1780            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1781            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1782          }
   \   00000D 87                    RETF
   1783          
   1784          

   \                                 In section .far_func.text, align 1, keep-with-next
   1785          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1786          {
   1787            //disableInterrupts();
   1788            do
   1789              {
   1790                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1791                nop();
   \   000001 9D                    NOP
   1792              }
   1793              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1794            //enableInterrupts();
   1795          }
   \   000005 87                    RETF
   1796          
   1797          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 3F00                  CLR       S:?b10
   \   000006                       REQUIRE ??Subroutine86_0
   \   000006                       ;               // Fall through to label ??Subroutine86_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1798          void Display_Line(char* line)
   1799          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1800            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1801            u8 count;
   1802              //Set Cursor to First Line
   1803             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     ?Subroutine9
   1804             count=0;
   1805             Delay1(1);
   1806            do
   1807            {
   1808          
   1809              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_238:
   \   000010 B600                  LD        A, S:?b11
   \   000012 A11C                  CP        A, #0x1c
   \   000014 2504                  JRC       L:??CrossCallReturnLabel_9
   1810               {
   1811                 LCDData(current_char);
   \   000016 8D000000              CALLF     ?Subroutine7
   1812                  Delay1(1);
   1813                 count++;
   1814               }
   1815               current_char=*line++;
   \                     ??CrossCallReturnLabel_9:
   \   00001A 8D000000              CALLF     ?Subroutine60
   1816            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_164:
   \   00001E 2706                  JREQ      L:??Display_Line_0
   \   000020 B600                  LD        A, S:?b10
   \   000022 A107                  CP        A, #0x7
   \   000024 25EA                  JRC       L:??CrossCallReturnLabel_238
   1817          
   1818             Rotate_Line(line1);
   \                     ??Display_Line_0:
   \   000026 AE0000                LDW       X, #line1
   \   000029 8D000000              CALLF     Rotate_Line
   1819          
   1820          }
   \   00002D AC000000              JPF       L:?epilogue_l2

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 B700                  LD        S:?b11, A
   \   000005 BE00                  LDW       X, S:?w4
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   \   00000A 3D00                  TNZ       S:?b11
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_265:
   \   000004 B600                  LD        A, S:?b10
   \   000006 4C                    INC       A
   \   000007 B700                  LD        S:?b10, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine89_0
   \   000004                       ;               // Fall through to label ??Subroutine89_0
   1821          
   1822          

   \                                 In section .far_func.text, align 1, keep-with-next
   1823          void DisplayLine2(void)
   1824          {
   \                     DisplayLine2:
   \   000000 8D000000              CALLF     L:?push_l2
   1825            char * line=line2;
   1826            char current_char=  *line++;
   \   000004 C60000                LD        A, L:line2
   \   000007 B700                  LD        S:?b11, A
   \   000009 AE0000                LDW       X, #line2 + 1
   \   00000C BF00                  LDW       S:?w4, X
   1827            u8 count;
   1828              //Set Cursor to Second  Line
   1829             LCDInstr(0x80 | 0x40);
   \   00000E A6C0                  LD        A, #0xc0
   \   000010 8D000000              CALLF     ?Subroutine9
   1830             count=0;
   1831             Delay1(1);
   1832            do
   1833            {
   1834          
   1835              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_237:
   \   000014 B600                  LD        A, S:?b11
   \   000016 A11C                  CP        A, #0x1c
   \   000018 2504                  JRC       L:??CrossCallReturnLabel_8
   1836               {
   1837                 LCDData(current_char);
   \   00001A 8D000000              CALLF     ?Subroutine7
   1838                  Delay1(1);
   1839                 count++;
   1840               }
   1841               current_char=*line++;
   \                     ??CrossCallReturnLabel_8:
   \   00001E 8D000000              CALLF     ?Subroutine60
   1842            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_163:
   \   000022 2706                  JREQ      L:??DisplayLine2_0
   \   000024 B600                  LD        A, S:?b10
   \   000026 A107                  CP        A, #0x7
   \   000028 25EA                  JRC       L:??CrossCallReturnLabel_237
   1843          
   1844             Rotate_Line(line2);
   \                     ??DisplayLine2_0:
   \   00002A AE0000                LDW       X, #line2
   \   00002D 8D000000              CALLF     Rotate_Line
   1845          
   1846          }
   \   000031 AC000000              JPF       L:?epilogue_l2
   1847          
   1848          
   1849          
   1850          

   \                                 In section .far_func.text, align 1, keep-with-next
   1851          void Rotate_Line( char * line)
   1852          {
   1853          
   1854             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1855             char temp_next;
   1856          
   1857             do
   1858             {
   1859                temp_next=*(line+1);
   1860               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1861                //line++;
   1862                //temp_next=*line;
   1863               //*line=*line++;
   1864             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1865             line--;
   1866             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1867          
   1868          }
   \   000012 87                    RETF
   1869          

   \                                 In section .far_func.text, align 1, keep-with-next
   1870          void Clear_Line1 ()
   1871          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1872               //Set Cursor to First Line
   1873             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine8
   1874             count=0;
   1875             Delay1(1);
   1876              u8 count=0;
   1877             do
   1878             {
   1879               LCDData(' ');
   \                     ??CrossCallReturnLabel_11:
   \   000009 8D000000              CALLF     ?Subroutine6
   1880                  Delay1(1);
   1881                  count++;
   1882             }while (count<8);
   \                     ??CrossCallReturnLabel_7:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_11
   1883          
   1884          
   1885          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_195:
   \   000004 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_264:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_266:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4A                    DEC       A
   \   000009 B700                  LD        S:?b8, A
   \   00000B 87                    RETF
   1886          

   \                                 In section .far_func.text, align 1, keep-with-next
   1887          void Clear_Line2 ()
   1888          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1889               //Set Cursor to Second  Line
   1890             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine8
   1891             count=0;
   1892             Delay1(1);
   1893              u8 count=0;
   1894             do
   1895             {
   1896               LCDData(' ');
   \                     ??CrossCallReturnLabel_10:
   \   000009 8D000000              CALLF     ?Subroutine6
   1897                  Delay1(1);
   1898                  count++;
   1899             }while (count<8);
   \                     ??CrossCallReturnLabel_6:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_10
   1900          
   1901          
   1902          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1903          
   1904          
   1905          

   \                                 In section .far_func.text, align 1, keep-with-next
   1906          void FirstMenu()
   1907          {
   1908                // Clear Display
   1909              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_42:
   \   000004 8D000000              CALLF     ??Subroutine91_0
   1910              Delay1(250);
   1911          
   1912                line_lcd=0;
   1913                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_272:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1914                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine29
   1915                 if (!status.manu)
   \                     ??CrossCallReturnLabel_51:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1916                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1917                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1918          
   1919                 do
   1920                 {
   1921                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     ?Subroutine54
   1922          
   1923                  if(button==2)      // Plus Button
   \                     ??CrossCallReturnLabel_147:
   \   000025 262C                  JRNE      L:??FirstMenu_3
   1924                  {
   1925                    if(status.manu) status.manu=0;
   \   000027 CE0000                LDW       X, L:status
   \   00002A 9F                    LD        A, XL
   \   00002B A401                  AND       A, #0x1
   \   00002D 2708                  JREQ      L:??FirstMenu_4
   \   00002F CE0000                LDW       X, L:status
   \   000032 01                    RRWA      X, A
   \   000033 A4FE                  AND       A, #0xfe
   \   000035 2006                  JRA       ??FirstMenu_5
   1926                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   000037 CE0000                LDW       X, L:status
   \   00003A 01                    RRWA      X, A
   \   00003B AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   00003D 02                    RLWA      X, A
   \   00003E CF0000                LDW       L:status, X
   1927                    line_lcd=1;
   \   000041 8D000000              CALLF     ?Subroutine29
   1928                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_52:
   \   000045 2705                  JREQ      L:??FirstMenu_6
   \   000047 AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004A 2003                  JRA       ??FirstMenu_7
   1929                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   00004C AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   00004F 8D000000              CALLF     printf
   1930                  }
   1931          
   1932                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000053 C60000                LD        A, L:button
   \   000056 A103                  CP        A, #0x3
   \   000058 2705                  JREQ      L:??FirstMenu_8
   \   00005A C60000                LD        A, L:button
   \   00005D 2604                  JRNE      L:??FirstMenu_9
   1933                  {
   1934                    SaveStatus();
   \                     ??FirstMenu_8:
   \   00005F AC000000              JPF       SaveStatus
   1935                    return;
   1936                  }
   1937          
   1938          
   1939                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000063 A101                  CP        A, #0x1
   \   000065 26BA                  JRNE      L:??FirstMenu_2
   1940          
   1941                   SaveStatus();
   \   000067 8D000000              CALLF     SaveStatus
   1942                   button=0;
   \   00006B 725F0000              CLR       L:button
   1943                   ProgramMenu();
   \   00006F AC000000              JPF       ProgramMenu
   1944          
   1945          
   1946          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_211:
   \   000008 87                    RETF
   1947          
   1948          
   1949          

   \                                 In section .far_func.text, align 1, keep-with-next
   1950          void ProgramMenu()
   1951          {
   \                     ProgramMenu:
   \   000000 8D000000              CALLF     L:?push_l3
   \   000004 8D000000              CALLF     L:?push_w4
   \   000008 3B0000                PUSH      S:?b10
   1952              u8 program_number=0;
   \   00000B 3F00                  CLR       S:?b10
   1953             do
   1954             {
   1955               sprintf(line1,"\nP%d%s",program_number,day_week[programpoint[program_number].day]);
   \                     ??ProgramMenu_0:
   \   00000D 5F                    CLRW      X
   \   00000E 41                    EXG       A, XL
   \   00000F B600                  LD        A, S:?b10
   \   000011 41                    EXG       A, XL
   \   000012 BF00                  LDW       S:?w7, X
   \   000014 AE0005                LDW       X, #0x5
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 BE00                  LDW       X, S:?w7
   \   00001B 8D000000              CALLF     L:?mul16_x_x_w0
   \   00001F 1C0000                ADDW      X, #programpoint
   \   000022 BF00                  LDW       S:?w4, X
   \   000024 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_157:
   \   000028 89                    PUSHW     X
   \   000029 8D000000              CALLF     L:?push_w7
   \   00002D 90AE0000              LDW       Y, #`?<Constant "\\nP%d%s">`
   \   000031 AE0000                LDW       X, #line1
   \   000034 8D000000              CALLF     sprintf
   \   000038 5B04                  ADD       SP, #0x4
   1956               sprintf(line2,"\n%s",day_week[programpoint[program_number].day]);
   \   00003A 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_158:
   \   00003E 89                    PUSHW     X
   \   00003F 90AE0000              LDW       Y, #`?<Constant "\\n%s">`
   \   000043 AE0000                LDW       X, #line2
   \   000046 8D000000              CALLF     sprintf
   \   00004A 5B02                  ADD       SP, #0x2
   1957               Clear_Line2();
   \   00004C 8D000000              CALLF     Clear_Line2
   1958               Clear_Line1();
   \   000050 8D000000              CALLF     ?Subroutine59
   1959               line_lcd=0;
   1960               printf(line1);
   \                     ??CrossCallReturnLabel_160:
   \   000054 AE0000                LDW       X, #line1
   \   000057 8D000000              CALLF     ?Subroutine45
   1961               line_lcd=1;
   1962               printf(line2);
   \                     ??CrossCallReturnLabel_105:
   \   00005B AE0000                LDW       X, #line2
   \   00005E 8D000000              CALLF     printf
   1963                 do
   1964                 {
   1965                   pressKey();
   \                     ??ProgramMenu_1:
   \   000062 8D000000              CALLF     ?Subroutine54
   1966          
   1967                    if(button==2)   //Plus
   \                     ??CrossCallReturnLabel_146:
   \   000066 2625                  JRNE      L:??ProgramMenu_2
   1968                    {
   1969                       programpoint[program_number].day++;
   \   000068 92C600                LD        A, [S:?w4.w]
   \   00006B 4C                    INC       A
   \   00006C 92C700                LD        [S:?w4.w], A
   1970                        if( programpoint[program_number].day >=9) programpoint[program_number].day=0;
   \   00006F A109                  CP        A, #0x9
   \   000071 2504                  JRC       L:??ProgramMenu_3
   \   000073 4F                    CLR       A
   \   000074 92C700                LD        [S:?w4.w], A
   1971                          Clear_Line2();
   \                     ??ProgramMenu_3:
   \   000077 8D000000              CALLF     Clear_Line2
   1972                           line_lcd=1;
   \   00007B 35010000              MOV       L:line_lcd, #0x1
   1973                           printf("\n%s",day_week[programpoint[program_number].day]);
   \   00007F 8D000000              CALLF     ?Subroutine58
   1974                    }
   \                     ??CrossCallReturnLabel_159:
   \   000083 89                    PUSHW     X
   \   000084 AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000087 8D000000              CALLF     printf
   \   00008B 5B02                  ADD       SP, #0x2
   1975          
   1976                    if(button==3 || button==0 ) // Minus
   \                     ??ProgramMenu_2:
   \   00008D C60000                LD        A, L:button
   \   000090 A103                  CP        A, #0x3
   \   000092 2705                  JREQ      L:??ProgramMenu_4
   \   000094 C60000                LD        A, L:button
   \   000097 260B                  JRNE      L:??ProgramMenu_5
   1977                    {
   1978                       SaveProgram();
   \                     ??ProgramMenu_4:
   \   000099 8D000000              CALLF     SaveProgram
   1979                        button=0;
   \   00009D 725F0000              CLR       L:button
   1980                       return;
   \   0000A1 CC0000                JP        L:??ProgramMenu_6
   1981                    }
   1982          
   1983          
   1984                 } while (button != 1 && button != 0);
   \                     ??ProgramMenu_5:
   \   0000A4 A101                  CP        A, #0x1
   \   0000A6 26BA                  JRNE      L:??ProgramMenu_1
   1985          
   1986                     // Test programm is Active ?
   1987                  if( programpoint[program_number].day !=0)
   \   0000A8 923D00                TNZ       [S:?w4.w]
   \   0000AB 2603                  JRNE      ??lb_3
   \   0000AD CC0000                JP        L:??ProgramMenu_7
   1988                  {
   1989                        //Set On Hour
   1990                     Clear_Line1();
   \                     ??lb_3:
   \   0000B0 8D000000              CALLF     ?Subroutine59
   1991                     line_lcd=0;
   1992                     printf("\nP%d%s",program_number," On");
   \                     ??CrossCallReturnLabel_161:
   \   0000B4 4B00                  PUSH      #BYTE1(`?<Constant " On">`)
   \   0000B6 4B00                  PUSH      #BYTE2(`?<Constant " On">`)
   \   0000B8 8D000000              CALLF     L:?push_w7
   \   0000BC AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   0000BF 8D000000              CALLF     printf
   \   0000C3 5B04                  ADD       SP, #0x4
   1993                     timer3=0;
   \   0000C5 5F                    CLRW      X
   \   0000C6 CF0000                LDW       L:timer3, X
   1994                     Clear_Line2();
   \   0000C9 8D000000              CALLF     Clear_Line2
   \   0000CD BE00                  LDW       X, S:?w4
   \   0000CF 1C0002                ADDW      X, #0x2
   \   0000D2 BF00                  LDW       S:?w6, X
   1995                     do
   1996                      {
   1997                       line_lcd=1;
   \                     ??ProgramMenu_8:
   \   0000D4 35010000              MOV       L:line_lcd, #0x1
   1998                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   0000D8 C60000                LD        A, L:blink_flag
   \   0000DB 2718                  JREQ      L:??ProgramMenu_9
   \   0000DD 92C600                LD        A, [S:?w6.w]
   \   0000E0 5F                    CLRW      X
   \   0000E1 97                    LD        XL, A
   \   0000E2 89                    PUSHW     X
   \   0000E3 BE00                  LDW       X, S:?w4
   \   0000E5 5C                    INCW      X
   \   0000E6 F6                    LD        A, (X)
   \   0000E7 5F                    CLRW      X
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B04                  ADD       SP, #0x4
   \   0000F3 200F                  JRA       L:??ProgramMenu_10
   1999                         else printf("\n  :%02d",programpoint[program_number].onminute);
   \                     ??ProgramMenu_9:
   \   0000F5 92C600                LD        A, [S:?w6.w]
   \   0000F8 5F                    CLRW      X
   \   0000F9 97                    LD        XL, A
   \   0000FA 89                    PUSHW     X
   \   0000FB AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0000FE 8D000000              CALLF     printf
   \   000102 5B02                  ADD       SP, #0x2
   2000                       programpoint[program_number].onhour =adj(0,23,programpoint[program_number].onhour);
   \                     ??ProgramMenu_10:
   \   000104 BE00                  LDW       X, S:?w4
   \   000106 5C                    INCW      X
   \   000107 F6                    LD        A, (X)
   \   000108 B700                  LD        S:?b1, A
   \   00010A 35170000              MOV       S:?b0, #0x17
   \   00010E 8D000000              CALLF     ??Subroutine84_0
   2001                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_225:
   \   000112 BE00                  LDW       X, S:?w4
   \   000114 5C                    INCW      X
   \   000115 F7                    LD        (X), A
   \   000116 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_205:
   \   00011A 2406                  JRNC      L:??ProgramMenu_11
   \   00011C 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_119:
   \   000120 27B2                  JREQ      L:??ProgramMenu_8
   2002          
   2003                        //Set On Minute
   2004                      //Clear_Line1();
   2005                      //line_lcd=0;
   2006                      //printf("\nMin On>");
   2007                     // printf("\nP%d%s",program_number," On");
   2008                      timer3=0;
   \                     ??ProgramMenu_11:
   \   000122 5F                    CLRW      X
   \   000123 CF0000                LDW       L:timer3, X
   2009                    do
   2010                      {
   2011                       line_lcd=1;
   \                     ??ProgramMenu_12:
   \   000126 35010000              MOV       L:line_lcd, #0x1
   \   00012A BE00                  LDW       X, S:?w4
   \   00012C 5C                    INCW      X
   \   00012D F6                    LD        A, (X)
   \   00012E 5F                    CLRW      X
   \   00012F 97                    LD        XL, A
   \   000130 9093                  LDW       Y, X
   \   000132 C60000                LD        A, L:blink_flag
   \   000135 2712                  JREQ      L:??ProgramMenu_13
   2012                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   000137 92C600                LD        A, [S:?w6.w]
   \   00013A 97                    LD        XL, A
   \   00013B 89                    PUSHW     X
   \   00013C 9089                  PUSHW     Y
   \   00013E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000141 8D000000              CALLF     printf
   \   000145 5B04                  ADD       SP, #0x4
   \   000147 200B                  JRA       L:??ProgramMenu_14
   2013                         else  printf("\n%02d:  ",programpoint[program_number].onhour);
   \                     ??ProgramMenu_13:
   \   000149 9089                  PUSHW     Y
   \   00014B AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   00014E 8D000000              CALLF     printf
   \   000152 5B02                  ADD       SP, #0x2
   2014                           programpoint[program_number].onminute=adj(0,59,programpoint[program_number].onminute);
   \                     ??ProgramMenu_14:
   \   000154 92C600                LD        A, [S:?w6.w]
   \   000157 B700                  LD        S:?b1, A
   \   000159 353B0000              MOV       S:?b0, #0x3b
   \   00015D 8D000000              CALLF     ?Subroutine33
   2015                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_66:
   \   000161 2406                  JRNC      L:??ProgramMenu_15
   \   000163 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_120:
   \   000167 27BD                  JREQ      L:??ProgramMenu_12
   2016          
   2017          
   2018                     // Set Off Hour
   2019          
   2020                     Clear_Line1();
   \                     ??ProgramMenu_15:
   \   000169 8D000000              CALLF     ?Subroutine59
   2021                     line_lcd=0;
   2022                     printf("\nP%d%s",program_number," Off");
   \                     ??CrossCallReturnLabel_162:
   \   00016D 4B00                  PUSH      #BYTE1(`?<Constant " Off">`)
   \   00016F 4B00                  PUSH      #BYTE2(`?<Constant " Off">`)
   \   000171 8D000000              CALLF     L:?push_w7
   \   000175 AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   000178 8D000000              CALLF     printf
   \   00017C 5B04                  ADD       SP, #0x4
   2023                     timer3=0;
   \   00017E 5F                    CLRW      X
   \   00017F CF0000                LDW       L:timer3, X
   \   000182 BE00                  LDW       X, S:?w4
   \   000184 1C0003                ADDW      X, #0x3
   \   000187 BF00                  LDW       S:?w6, X
   \   000189 BE00                  LDW       X, S:?w4
   \   00018B 1C0004                ADDW      X, #0x4
   \   00018E BF00                  LDW       S:?w4, X
   2024                     do
   2025                      {
   2026                       line_lcd=1;
   \                     ??ProgramMenu_16:
   \   000190 35010000              MOV       L:line_lcd, #0x1
   2027                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   000194 C60000                LD        A, L:blink_flag
   \   000197 2716                  JREQ      L:??ProgramMenu_17
   \   000199 92C600                LD        A, [S:?w4.w]
   \   00019C 5F                    CLRW      X
   \   00019D 97                    LD        XL, A
   \   00019E 89                    PUSHW     X
   \   00019F 92C600                LD        A, [S:?w6.w]
   \   0001A2 97                    LD        XL, A
   \   0001A3 89                    PUSHW     X
   \   0001A4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001A7 8D000000              CALLF     printf
   \   0001AB 5B04                  ADD       SP, #0x4
   \   0001AD 200F                  JRA       L:??ProgramMenu_18
   2028                         else printf("\n  :%02d",programpoint[program_number].offminute);
   \                     ??ProgramMenu_17:
   \   0001AF 92C600                LD        A, [S:?w4.w]
   \   0001B2 5F                    CLRW      X
   \   0001B3 97                    LD        XL, A
   \   0001B4 89                    PUSHW     X
   \   0001B5 AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0001B8 8D000000              CALLF     printf
   \   0001BC 5B02                  ADD       SP, #0x2
   2029                       programpoint[program_number].offhour =adj(0,23,programpoint[program_number].offhour);
   \                     ??ProgramMenu_18:
   \   0001BE 92C600                LD        A, [S:?w6.w]
   \   0001C1 B700                  LD        S:?b1, A
   \   0001C3 35170000              MOV       S:?b0, #0x17
   \   0001C7 8D000000              CALLF     ?Subroutine33
   2030                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_67:
   \   0001CB 2406                  JRNC      L:??ProgramMenu_19
   \   0001CD 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_121:
   \   0001D1 27BD                  JREQ      L:??ProgramMenu_16
   2031          
   2032                    //Set Off Minute
   2033          
   2034                    timer3=0;
   \                     ??ProgramMenu_19:
   \   0001D3 5F                    CLRW      X
   \   0001D4 CF0000                LDW       L:timer3, X
   2035                    do
   2036                      {
   2037                       line_lcd=1;
   \                     ??ProgramMenu_20:
   \   0001D7 35010000              MOV       L:line_lcd, #0x1
   \   0001DB 92C600                LD        A, [S:?w6.w]
   \   0001DE 5F                    CLRW      X
   \   0001DF 97                    LD        XL, A
   \   0001E0 9093                  LDW       Y, X
   \   0001E2 C60000                LD        A, L:blink_flag
   \   0001E5 2712                  JREQ      L:??ProgramMenu_21
   2038                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   0001E7 92C600                LD        A, [S:?w4.w]
   \   0001EA 97                    LD        XL, A
   \   0001EB 89                    PUSHW     X
   \   0001EC 9089                  PUSHW     Y
   \   0001EE AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001F1 8D000000              CALLF     printf
   \   0001F5 5B04                  ADD       SP, #0x4
   \   0001F7 200B                  JRA       L:??ProgramMenu_22
   2039                         else  printf("\n%02d:  ",programpoint[program_number].offhour);
   \                     ??ProgramMenu_21:
   \   0001F9 9089                  PUSHW     Y
   \   0001FB AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   0001FE 8D000000              CALLF     printf
   \   000202 5B02                  ADD       SP, #0x2
   2040                           programpoint[program_number].offminute=adj(0,59,programpoint[program_number].offminute);
   \                     ??ProgramMenu_22:
   \   000204 92C600                LD        A, [S:?w4.w]
   \   000207 8D000000              CALLF     ?Subroutine35
   2041                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_229:
   \   00020B 92C700                LD        [S:?w4.w], A
   \   00020E 8D000000              CALLF     ?Subroutine77
   2042          
   2043                  }
   \                     ??CrossCallReturnLabel_206:
   \   000212 2406                  JRNC      L:??ProgramMenu_7
   \   000214 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_122:
   \   000218 27BD                  JREQ      L:??ProgramMenu_20
   2044          
   2045          
   2046                   program_number++;
   \                     ??ProgramMenu_7:
   \   00021A B600                  LD        A, S:?b10
   \   00021C 4C                    INC       A
   \   00021D B700                  LD        S:?b10, A
   2047          
   2048          
   2049          
   2050          
   2051          
   2052          
   2053          
   2054          
   2055                 } while ( (program_number < 8) && (button!=0));
   \   00021F A108                  CP        A, #0x8
   \   000221 2408                  JRNC      L:??ProgramMenu_23
   \   000223 C60000                LD        A, L:button
   \   000226 2703                  JREQ      ??lb_4
   \   000228 CC0000                JP        L:??ProgramMenu_0
   2056          
   2057                   SaveProgram();
   \                     ??lb_4:
   \                     ??ProgramMenu_23:
   \   00022B 8D000000              CALLF     SaveProgram
   2058          
   2059          
   2060          }
   \                     ??ProgramMenu_6:
   \   00022F 320000                POP       S:?b10
   \   000232 8D000000              CALLF     L:?pop_w4
   \   000236 8D000000              CALLF     L:?pop_l3
   \   00023A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     Clear_Line1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 5F                    CLRW      X
   \   000004 97                    LD        XL, A
   \   000005 58                    SLLW      X
   \   000006 DE0000                LDW       X, (L:day_week,X)
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     printf
   \   000004 35010000              MOV       L:line_lcd, #0x1
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     adj
   \   000005 92C700                LD        [S:?w6.w], A
   \   000008 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_207:
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF
   2061          
   2062          
   2063          

   \                                 In section .far_func.text, align 1, keep-with-next
   2064          void Menu (void)
   2065          {
   2066           // Clear Display
   2067              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine21
   2068              Delay1(250);
   2069              //u8 key;
   2070           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   2071              Wait for Plus,Minius or OK
   2072              If plus next option from Menu on the end EXIT
   2073              If minus previous option from Menu  on the end EXIT
   2074              If OK enter to menu option
   2075              If time out about 10s exit from Menu
   2076           */
   2077          
   2078          
   2079          
   2080          
   2081          
   2082          
   2083              do {
   2084          
   2085          First_Menu:
   2086              line_lcd=0;
   \                     ??CrossCallReturnLabel_34:
   \   000004 725F0000              CLR       L:line_lcd
   2087              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     ?Subroutine45
   2088              line_lcd=1;
   2089              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_101:
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
   2090               pressKey();
   \   000023 8D000000              CALLF     ?Subroutine53
   2091              switch (button)
   \                     ??CrossCallReturnLabel_140:
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   2092                  {
   2093                  case 1: goto Second_Menu ;
   2094                   break;
   2095                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   2096                   break;
   \   000039 CC0000                JP        L:??Menu_3
   2097                  case 3: goto Exit_Menu;
   2098                   break;
   2099                  }
   2100                  break; //Exit Menu
   2101          
   2102          
   2103          Second_Menu:
   2104              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   2105              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     ?Subroutine45
   2106              line_lcd=1;
   2107              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_102:
   \   000047 C60000                LD        A, L:daily_minute_off
   \   00004A 5F                    CLRW      X
   \   00004B 97                    LD        XL, A
   \   00004C 89                    PUSHW     X
   \   00004D C60000                LD        A, L:daily_hour_off
   \   000050 97                    LD        XL, A
   \   000051 89                    PUSHW     X
   \   000052 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000055 8D000000              CALLF     printf
   \   000059 5B04                  ADD       SP, #0x4
   2108                pressKey();
   \   00005B 8D000000              CALLF     ?Subroutine53
   2109                switch (button)
   \                     ??CrossCallReturnLabel_141:
   \   00005F 2710                  JREQ      L:??Menu_4
   \   000061 4A                    DEC       A
   \   000062 2706                  JREQ      L:??Menu_5
   \   000064 4A                    DEC       A
   \   000065 279D                  JREQ      L:??CrossCallReturnLabel_34
   \   000067 CC0000                JP        L:??Menu_3
   2110                  {
   2111                  case 1: goto Third_Menu ;
   2112                   break;
   2113                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   00006A 8D000000              CALLF     Set_Timer_Off
   2114                   break;
   \   00006E CC0000                JP        L:??Menu_3
   2115                  case 3: goto First_Menu;
   2116                   break;
   2117                  }
   2118               break; //Exit Menu
   2119          
   2120          Third_Menu:
   2121                line_lcd=0;
   \                     ??Menu_4:
   \   000071 725F0000              CLR       L:line_lcd
   2122              printf("\nMonthly ");
   \   000075 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000078 8D000000              CALLF     ?Subroutine45
   2123              line_lcd=1;
   2124              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \                     ??CrossCallReturnLabel_103:
   \   00007C C60000                LD        A, L:monthly_date
   \   00007F 5F                    CLRW      X
   \   000080 97                    LD        XL, A
   \   000081 89                    PUSHW     X
   \   000082 C60000                LD        A, L:monthly_month
   \   000085 97                    LD        XL, A
   \   000086 89                    PUSHW     X
   \   000087 C60000                LD        A, L:monthly_year
   \   00008A 97                    LD        XL, A
   \   00008B 89                    PUSHW     X
   \   00008C AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00008F 8D000000              CALLF     printf
   \   000093 5B06                  ADD       SP, #0x6
   2125                pressKey();
   \   000095 8D000000              CALLF     ?Subroutine53
   2126                switch (button)
   \                     ??CrossCallReturnLabel_142:
   \   000099 2742                  JREQ      L:??Menu_6
   \   00009B 4A                    DEC       A
   \   00009C 2706                  JREQ      L:??Menu_7
   \   00009E 4A                    DEC       A
   \   00009F 279B                  JREQ      L:??Menu_0
   \   0000A1 CC0000                JP        L:??Menu_3
   2127                  {
   2128                  case 1: goto Fourth_Menu;
   2129                   break;
   2130                  case 2:
   2131                    {
   2132                     setData();
   \                     ??Menu_7:
   \   0000A4 8D000000              CALLF     setData
   2133                     monthly_year=y;
   \   0000A8 C60000                LD        A, L:`y`
   \   0000AB C70000                LD        L:monthly_year, A
   2134                     monthly_month=m;
   \   0000AE C60000                LD        A, L:m
   \   0000B1 C70000                LD        L:monthly_month, A
   2135                     monthly_date=d;
   \   0000B4 C60000                LD        A, L:d
   \   0000B7 C70000                LD        L:monthly_date, A
   2136                     status.monthly=1;
   \   0000BA CE0000                LDW       X, L:status
   \   0000BD 01                    RRWA      X, A
   \   0000BE AA10                  OR        A, #0x10
   \   0000C0 02                    RLWA      X, A
   \   0000C1 CF0000                LDW       L:status, X
   2137                     status.daily=0;  // Disable Daily Alarm On date enable it
   \   0000C4 CE0000                LDW       X, L:status
   \   0000C7 01                    RRWA      X, A
   \   0000C8 A4F7                  AND       A, #0xf7
   \   0000CA 02                    RLWA      X, A
   \   0000CB CF0000                LDW       L:status, X
   2138                     status.on=0;     // Power off
   \   0000CE 8D000000              CALLF     ?Subroutine55
   2139                     // Save Status and Date in EEPROM
   2140                     EEPROM_INIT();
   \                     ??CrossCallReturnLabel_149:
   \   0000D2 8D000000              CALLF     ?Subroutine1
   2141                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \                     ??CrossCallReturnLabel_0:
   \   0000D6 8D000000              CALLF     FLASH_Lock
   2142                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2143                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   2144                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   2145                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   2146                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2147                     break;
   \   0000DA CC0000                JP        L:??Menu_3
   2148                    }
   2149                  case 3: goto Second_Menu ;
   2150                   break;
   2151                  }
   2152               break; //Exit Menu
   2153          
   2154          
   2155          Fourth_Menu:
   2156              line_lcd=0;
   \                     ??Menu_6:
   \   0000DD 725F0000              CLR       L:line_lcd
   2157              printf("\nClock   ");
   \   0000E1 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000E4 8D000000              CALLF     ?Subroutine26
   2158              line_lcd=1;
   2159              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_232:
   \   0000E8 89                    PUSHW     X
   \   0000E9 C60000                LD        A, L:minutes
   \   0000EC 97                    LD        XL, A
   \   0000ED 89                    PUSHW     X
   \   0000EE C60000                LD        A, L:hours
   \   0000F1 97                    LD        XL, A
   \   0000F2 89                    PUSHW     X
   \   0000F3 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000F6 8D000000              CALLF     printf
   \   0000FA 5B06                  ADD       SP, #0x6
   2160                pressKey();
   \   0000FC 8D000000              CALLF     ?Subroutine53
   2161                switch (button)
   \                     ??CrossCallReturnLabel_143:
   \   000100 2711                  JREQ      L:??Menu_8
   \   000102 4A                    DEC       A
   \   000103 2708                  JREQ      L:??Menu_9
   \   000105 4A                    DEC       A
   \   000106 2603                  JRNE      ??lb_1
   \   000108 CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   00010B 2056                  JRA       L:??Menu_3
   2162                  {
   2163                  case 1: goto Fifth_Menu ;
   2164                   break;
   2165                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   00010D 8D000000              CALLF     Set_Clock
   2166                   break;
   \   000111 2050                  JRA       L:??Menu_3
   2167                  case 3: goto Third_Menu;
   2168                   break;
   2169                  }
   2170               break; //Exit Menu
   2171          
   2172          
   2173          Fifth_Menu:
   2174              line_lcd=0;
   \                     ??Menu_8:
   \   000113 725F0000              CLR       L:line_lcd
   2175              printf("\nDate    ");
   \   000117 AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   00011A 8D000000              CALLF     printf
   2176              line_lcd=1;
   \   00011E 8D000000              CALLF     ?Subroutine27
   2177              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_47:
   \   000122 89                    PUSHW     X
   \   000123 C60000                LD        A, L:month
   \   000126 97                    LD        XL, A
   \   000127 89                    PUSHW     X
   \   000128 C60000                LD        A, L:year
   \   00012B 97                    LD        XL, A
   \   00012C 89                    PUSHW     X
   \   00012D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000130 8D000000              CALLF     printf
   \   000134 5B06                  ADD       SP, #0x6
   2178                pressKey();
   \   000136 8D000000              CALLF     ?Subroutine53
   2179                switch (button)
   \                     ??CrossCallReturnLabel_144:
   \   00013A 2708                  JREQ      L:??Menu_2
   \   00013C 4A                    DEC       A
   \   00013D 27CE                  JREQ      L:??Menu_9
   \   00013F 4A                    DEC       A
   \   000140 279B                  JREQ      L:??Menu_6
   \   000142 201F                  JRA       L:??Menu_3
   2180                  {
   2181                  case 1: goto Exit_Menu ;
   2182                   break;
   2183                  case 2: Set_Clock();
   2184                   break;
   2185                  case 3: goto Fourth_Menu;
   2186                   break;
   2187                  }
   2188               break; //Exit Menu
   2189          
   2190          
   2191          Exit_Menu:
   2192              line_lcd=0;
   \                     ??Menu_2:
   \   000144 725F0000              CLR       L:line_lcd
   2193              printf("\nExit OK ");
   \   000148 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   00014B 8D000000              CALLF     ?Subroutine45
   2194              line_lcd=1;
   2195              printf("\n+/-     ");
   \                     ??CrossCallReturnLabel_104:
   \   00014F AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   000152 8D000000              CALLF     printf
   2196                 pressKey();
   \   000156 8D000000              CALLF     ?Subroutine53
   2197                switch (button)
   2198                  {
   2199                  case 1: goto First_Menu;
   2200                   break;
   2201                  case 2:
   2202                   break;
   2203                  case 3: goto Fifth_Menu;
   2204                   break;
   2205                  }
   2206                 break; //Exit Menu
   2207              }    while (1);
   \                     ??CrossCallReturnLabel_145:
   \   00015A 2603                  JRNE      ??lb_2
   \   00015C CC0000                JP        L:??CrossCallReturnLabel_34
   \                     ??lb_2:
   \   00015F A002                  SUB       A, #0x2
   \   000161 27B0                  JREQ      L:??Menu_8
   2208              //exit:
   2209             Clear_Line1();
   \                     ??Menu_3:
   \   000163 8D000000              CALLF     Clear_Line1
   2210             Clear_Line2();
   \   000167 AC000000              JPF       Clear_Line2
   2211          
   2212          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 4A                    DEC       A
   \   000008 87                    RETF
   2213          
   2214          

   \                                 In section .far_func.text, align 1, keep-with-next
   2215          void pressKey(void)
   2216          {
   2217             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2218             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2219             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine39
   2220             lcdLedTimer=LCDLEDON;
   2221             do
   2222             {
   2223                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_83:
   \   00000C 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_111:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2224                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2225                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2226             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_204:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_83
   2227          
   2228              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2229          
   2230             //return button;
   2231          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2232          
   2233          
   2234          
   2235          

   \                                 In section .far_func.text, align 1, keep-with-next
   2236          bool setData(void)
   2237          {
   \                     setData:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   2238             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000007 3F00                  CLR       S:?b8
   \   000009 35010000              MOV       S:?b10, #0x1
   \   00000D 35010000              MOV       S:?b9, #0x1
   2239             int yy;
   2240          
   2241                   //Clear Display
   2242             LCDInstr(0x01);
   \   000011 8D000000              CALLF     ?Subroutine17
   2243             Delay1(1000);
   2244             line_lcd=0;
   2245             printf("\nYear>");
   2246             y=year;
   \                     ??CrossCallReturnLabel_30:
   \   000015 C60000                LD        A, L:year
   \   000018 C70000                LD        L:`y`, A
   2247             m=month;
   \   00001B C60000                LD        A, L:month
   \   00001E C70000                LD        L:m, A
   2248             d=date;
   \   000021 C60000                LD        A, L:`date`
   \   000024 C70000                LD        L:d, A
   2249                do
   2250              {
   2251               line_lcd=1;
   \                     ??setData_0:
   \   000027 8D000000              CALLF     ?Subroutine28
   2252               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_48:
   \   00002B 89                    PUSHW     X
   \   00002C C60000                LD        A, L:m
   \   00002F 97                    LD        XL, A
   \   000030 89                    PUSHW     X
   \   000031 C60000                LD        A, L:`y`
   \   000034 97                    LD        XL, A
   \   000035 89                    PUSHW     X
   \   000036 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000039 8D000000              CALLF     printf
   \   00003D 5B06                  ADD       SP, #0x6
   2253                 y=adj(0,99,y);
   \   00003F C60000                LD        A, L:`y`
   \   000042 B700                  LD        S:?b1, A
   \   000044 35630000              MOV       S:?b0, #0x63
   \   000048 8D000000              CALLF     ??Subroutine84_0
   2254              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_228:
   \   00004C C70000                LD        L:`y`, A
   \   00004F 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_108:
   \   000053 27D2                  JREQ      L:??setData_0
   2255                  yy=y+2000;
   \   000055 C60000                LD        A, L:`y`
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A 1C07D0                ADDW      X, #0x7d0
   \   00005D BF00                  LDW       S:?w0, X
   2256              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00005F 90AE0190              LDW       Y, #0x190
   \   000063 8D000000              CALLF     L:?smod16_y_x_y
   \   000067 905D                  TNZW      Y
   \   000069 271C                  JREQ      L:??setData_1
   \   00006B 90AE0064              LDW       Y, #0x64
   \   00006F BE00                  LDW       X, S:?w0
   \   000071 8D000000              CALLF     L:?smod16_y_x_y
   \   000075 905D                  TNZW      Y
   \   000077 2712                  JREQ      L:??setData_2
   \   000079 90AE0004              LDW       Y, #0x4
   \   00007D BE00                  LDW       X, S:?w0
   \   00007F 8D000000              CALLF     L:?smod16_y_x_y
   \   000083 905D                  TNZW      Y
   \   000085 2604                  JRNE      L:??setData_2
   \                     ??setData_1:
   \   000087 35010000              MOV       S:?b8, #0x1
   2257                  y=yy-2000;
   \                     ??setData_2:
   \   00008B B600                  LD        A, S:?b1
   \   00008D AB30                  ADD       A, #0x30
   \   00008F C70000                LD        L:`y`, A
   2258                   if(y==year) month_start=month;
   \   000092 C60000                LD        A, L:year
   \   000095 C10000                CP        A, L:`y`
   \   000098 2605                  JRNE      L:??setData_3
   \   00009A C60000                LD        A, L:month
   \   00009D B700                  LD        S:?b10, A
   2259               line_lcd=0;
   \                     ??setData_3:
   \   00009F 8D000000              CALLF     ?Subroutine46
   2260              printf("\nMonth>");
   2261                do
   2262              {
   2263               line_lcd=1;
   \                     ??CrossCallReturnLabel_107:
   \   0000A3 8D000000              CALLF     ?Subroutine28
   2264               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_49:
   \   0000A7 89                    PUSHW     X
   \   0000A8 C60000                LD        A, L:m
   \   0000AB 97                    LD        XL, A
   \   0000AC 89                    PUSHW     X
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 97                    LD        XL, A
   \   0000B1 89                    PUSHW     X
   \   0000B2 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B5 8D000000              CALLF     printf
   \   0000B9 5B06                  ADD       SP, #0x6
   2265                m=adj(month_start,12,m);
   \   0000BB C60000                LD        A, L:m
   \   0000BE B700                  LD        S:?b1, A
   \   0000C0 350C0000              MOV       S:?b0, #0xc
   \   0000C4 B600                  LD        A, S:?b10
   \   0000C6 8D000000              CALLF     adj
   \   0000CA C70000                LD        L:m, A
   2266              } while (!key_ok_on());
   \   0000CD 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_109:
   \   0000D1 27D0                  JREQ      L:??CrossCallReturnLabel_107
   2267          
   2268              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000D3 C60000                LD        A, L:m
   \   0000D6 A101                  CP        A, #0x1
   \   0000D8 2718                  JREQ      L:??setData_4
   \   0000DA A103                  CP        A, #0x3
   \   0000DC 2714                  JREQ      L:??setData_4
   \   0000DE A105                  CP        A, #0x5
   \   0000E0 2710                  JREQ      L:??setData_4
   \   0000E2 A107                  CP        A, #0x7
   \   0000E4 270C                  JREQ      L:??setData_4
   \   0000E6 A108                  CP        A, #0x8
   \   0000E8 2708                  JREQ      L:??setData_4
   \   0000EA A10A                  CP        A, #0xa
   \   0000EC 2704                  JREQ      L:??setData_4
   \   0000EE A10C                  CP        A, #0xc
   \   0000F0 2606                  JRNE      L:??setData_5
   \                     ??setData_4:
   \   0000F2 351F0000              MOV       S:?b8, #0x1f
   \   0000F6 2024                  JRA       L:??setData_6
   2269               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??setData_5:
   \   0000F8 A104                  CP        A, #0x4
   \   0000FA 270C                  JREQ      L:??setData_7
   \   0000FC A106                  CP        A, #0x6
   \   0000FE 2708                  JREQ      L:??setData_7
   \   000100 A109                  CP        A, #0x9
   \   000102 2704                  JREQ      L:??setData_7
   \   000104 A10B                  CP        A, #0xb
   \   000106 2606                  JRNE      L:??setData_8
   \                     ??setData_7:
   \   000108 351E0000              MOV       S:?b8, #0x1e
   \   00010C 200E                  JRA       L:??setData_6
   2270                else
   2271                 {
   2272                   if(leap) date_end=29;
   \                     ??setData_8:
   \   00010E 3D00                  TNZ       S:?b8
   \   000110 2706                  JREQ      L:??setData_9
   \   000112 351D0000              MOV       S:?b8, #0x1d
   \   000116 2004                  JRA       L:??setData_6
   2273                    else date_end=28;
   \                     ??setData_9:
   \   000118 351C0000              MOV       S:?b8, #0x1c
   2274                 }
   2275               if( y==year && m==month) date_start=d;
   \                     ??setData_6:
   \   00011C C60000                LD        A, L:year
   \   00011F C10000                CP        A, L:`y`
   \   000122 260D                  JRNE      L:??setData_10
   \   000124 C60000                LD        A, L:month
   \   000127 C10000                CP        A, L:m
   \   00012A 2605                  JRNE      L:??setData_10
   \   00012C C60000                LD        A, L:d
   \   00012F B700                  LD        S:?b9, A
   2276              LCDInstr(0x01);
   \                     ??setData_10:
   \   000131 8D000000              CALLF     ?Subroutine18
   2277               Delay1(1000);
   2278                line_lcd=0;
   2279              printf("\nDate>");
   2280                do
   2281              {
   2282               line_lcd=1;
   \                     ??CrossCallReturnLabel_32:
   \   000135 8D000000              CALLF     ?Subroutine28
   2283               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_50:
   \   000139 89                    PUSHW     X
   \   00013A C60000                LD        A, L:m
   \   00013D 97                    LD        XL, A
   \   00013E 89                    PUSHW     X
   \   00013F C60000                LD        A, L:`y`
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B06                  ADD       SP, #0x6
   2284                 d=adj(date_start,date_end,d);
   \   00014D C60000                LD        A, L:d
   \   000150 B700                  LD        S:?b1, A
   \   000152 450000                MOV       S:?b0, S:?b8
   \   000155 B600                  LD        A, S:?b9
   \   000157 8D000000              CALLF     adj
   \   00015B C70000                LD        L:d, A
   2285              } while (!key_ok_on());
   \   00015E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_110:
   \   000162 27D1                  JREQ      L:??CrossCallReturnLabel_32
   2286          
   2287                //Set clock keeper
   2288               //year=y;
   2289               //month=m;
   2290               //date=d;
   2291               //Set_DS1307();
   2292          
   2293            return TRUE;
   \   000164 A601                  LD        A, #0x1
   \   000166 320000                POP       S:?b10
   \   000169 AC000000              JPF       L:?epilogue_w4
   2294          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   2295          
   2296          

   \                                 In section .far_func.text, align 1, keep-with-next
   2297          void initBeep(void)
   2298          {
   2299            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2300            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2301             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2302               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2303             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2304          
   2305          }
   2306          

   \                                 In section .far_func.text, align 1, keep-with-next
   2307          void beep(u16 Interval)
   2308          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2309          
   2310           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2311               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2312            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2313          
   2314          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2315          

   \                                 In section .far_func.text, align 1, keep-with-next
   2316           PUTCHAR_PROTOTYPE
   2317          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2318            /* Place your implementation of fputc here */
   2319            /* e.g. write a character to the USART */
   2320                //USART_SendData(USART3, (u8) ch);
   2321               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2322             /* Loop until the end of transmission */
   2323              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2324            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2325          }
   2326          
   2327           #ifdef USE_FULL_ASSERT
   2328          
   2329          /**
   2330            * @brief  Reports the name of the source file and the source line number
   2331            *   where the assert_param error has occurred.
   2332            * @param file: pointer to the source file name
   2333            * @param line: assert_param error line source number
   2334            * @retval : None
   2335            */

   \                                 In section .far_func.text, align 1
   2336          void assert_failed(u8* file, u32 line)
   2337          {
   2338            /* User can add his own implementation to report the file name and line number,
   2339               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2340          
   2341            /* Infinite loop */
   2342            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2343            {
   2344          
   2345            }
   2346          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Off">`:
   \   000000 204F666600            DC8 " Off"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Sun">`:
   \   000000 2053756E00            DC8 " Sun"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Mon">`:
   \   000000 204D6F6E00            DC8 " Mon"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Tues">`:
   \   000000 205475657300          DC8 " Tues"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Wednes">`:
   \   000000 205765646E65          DC8 " Wednes"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Thurs">`:
   \   000000 205468757273          DC8 " Thurs"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Fri">`:
   \   000000 2046726900            DC8 " Fri"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Satur">`:
   \   000000 205361747572          DC8 " Satur"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Daily">`:
   \   000000 204461696C79          DC8 " Daily"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Month">`:
   \   000000 204D6F6E7468          DC8 " Month"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nPrgClear">`:
   \   000000 0A507267436C          DC8 "\012PrgClear"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetDate">`:
   \   000000 0A5365744461          DC8 "\012SetDate"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMenu +/-">`:
   \   000000 0A4D656E7520          DC8 "\012Menu +/-"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nP%d%s">`:
   \   000000 0A5025642573          DC8 "\012P%d%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%s">`:
   \   000000 0A257300              DC8 "\012%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " On">`:
   \   000000 204F6E00              DC8 " On"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   2347          #endif
   2348          
   2349          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     program_number                    1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     power                             1
     blink_flag                        1
     blink_time                        2
     key_ok_hold                       1
     rotate_line2                      1
     line1                            10
     line2                            10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     day_week                         22
     setup_menu                        6
     status                            2
     hardware                          2
     programpoint                     40
     ?Subroutine39                     5
     ?Subroutine76                     9
     ?Subroutine47                     7
     ??Subroutine87_0                  7
     ?Subroutine81                     8
     ?Subroutine82                    11
     main                            380
     ?Subroutine61                     9
     ?Subroutine56                     7
     ?Subroutine43                    11
     ?Subroutine42                    11
     ?Subroutine13                     9
     ?Subroutine26                     4
     ??Subroutine85_0                 10
     ?Subroutine78                     7
     Display                         238
     Power_On                         14
     ?Subroutine44                    15
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine52                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine50                     1
     ??Subroutine93_0                  7
     ?Subroutine49                     9
     ReadDS1307                      120
     ?Subroutine51                    12
     ?Subroutine34                    11
     ?Subroutine31                    13
     ?Subroutine30                     8
     ?Subroutine75                    10
     Check_DS1307                     78
     Set_DS1307                      112
     ?Subroutine48                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine54                    10
     ?Subroutine25                     8
     ?Subroutine74                     6
     SetupMenu                        78
     ??Subroutine91_0                  9
     ?Subroutine3                      4
     ??Subroutine92_0                 17
     Set_Clock                       374
     ?Subroutine46                    11
     ?Subroutine35                     6
     ??Subroutine84_0                  5
     ?Subroutine18                    11
     ?Subroutine17                    11
     ?Subroutine71                    18
     ?Subroutine27                    10
     ?Subroutine19                     7
     adj                              85
     key_ok_on                        81
     ?Subroutine37                    14
     ?Subroutine32                    10
     key_plus_on                      59
     ?Subroutine41                     7
     ?Subroutine38                     7
     ?Subroutine36                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine15                    29
     SaveStatus                        8
     ?Subroutine1                     31
     ?Subroutine80                     9
     SaveProgram                      33
     ?Subroutine57                    19
     ReadProgram                      48
     ResetProgram                     33
     CheckProgramPoint               192
     ?Subroutine55                    11
     ?Subroutine2                      3
     ??Subroutine90_0                  7
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine68                     9
     ?Subroutine66                     7
     InitClk                          62
     ?Subroutine67                     9
     LCDDataOut                       87
     ?Subroutine10                     7
     ??Subroutine88_0                  5
     ?Subroutine72                     7
     ?Subroutine12                     2
     InitLcd                          85
     ?Subroutine21                    11
     ?Subroutine16                    17
     ?Subroutine11                    11
     ?Subroutine0                     13
     ??Subroutine83_0                 10
     ?Subroutine23                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine5                     24
     ??Subroutine89_0                  6
     LCD_Busy                         69
     LCD                             208
     ?Subroutine73                     9
     ??Subroutine86_0                  5
     ?Subroutine24                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine20                     2
     ?Subroutine14                    10
     ?Subroutine70                     9
     DS18_Read                        74
     ?Subroutine22                    12
     DS18_Reset                       72
     ?Subroutine40                     7
     ?Subroutine64                     7
     temperature                      63
     ?Subroutine63                    15
     ?Subroutine79                     6
     ?Subroutine62                    23
     ?Subroutine4                     21
     Read_DS18                       121
     ?Subroutine65                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     ?Subroutine9                      6
     Display_Line                     49
     ?Subroutine60                    13
     ?Subroutine7                     10
     ?Subroutine69                     4
     DisplayLine2                     53
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine8                     13
     ?Subroutine6                     12
     Clear_Line2                      19
     FirstMenu                       115
     ?Subroutine29                     9
     ProgramMenu                     571
     ?Subroutine59                     9
     ?Subroutine58                    10
     ?Subroutine45                     9
     ?Subroutine33                    13
     ?Subroutine77                     7
     Menu                            363
     ?Subroutine53                     9
     pressKey                         74
     setData                         365
     ?Subroutine28                    10
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant " Off">                5
     ?<Constant " Sun">                5
     ?<Constant " Mon">                5
     ?<Constant " Tues">               6
     ?<Constant " Wednes">             8
     ?<Constant " Thurs">              7
     ?<Constant " Fri">                5
     ?<Constant " Satur">              7
     ?<Constant " Daily">              7
     ?<Constant " Month">              7
     ?<Constant "\nPrgClear">         10
     ?<Constant "\nSetClock">         10
     ?<Constant "\nSetDate">           9
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c%c">   16
     ?<Constant "\n%c%c%c%c">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nMenu +/-">         10
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nP%d%s">             7
     ?<Constant "\n%s">                4
     ?<Constant " On">                 4
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\n  :%02d">           9
     ?<Constant "\n%02d:  ">           9
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 6 252 bytes in section .far_func.text
   127 bytes in section .near.bss
    31 bytes in section .near.data
   382 bytes in section .near.rodata
 
 6 252 bytes of CODE  memory
   382 bytes of CONST memory
   158 bytes of DATA  memory

Errors: none
Warnings: none
