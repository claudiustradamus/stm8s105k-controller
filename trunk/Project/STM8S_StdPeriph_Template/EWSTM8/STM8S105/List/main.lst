###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             06/Dec/2013  20:08:14 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          
     81          
     82          
     83          
     84          #ifdef __GNUC__
     85            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     86               set to 'Yes') calls __io_putchar() */
     87            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     88          #else
     89            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     90          #endif /* __GNUC__ */
     91          
     92          
     93          
     94          
     95          #define SpecialSymbol 0x1b //Esc to start message
     96          //#define data_size 20
     97          #define key_time 8000
     98          #define key_time_ok 15000
     99          #define key_time_press 4000
    100          #define key_time_release 400
    101          #define DS_Control  0x10  // Out 1s
    102          #define time_menu 10  // 5s
    103          #define TIMEOUT_DS18B20 1000
    104          #define LCDLEDON 20
    105          //#define sync_time 30 // 30s
    106          #define power_jitter 3 //3s
    107          
    108          
    109          
    110          
    111          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    112          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    113          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    114          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    115          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    117          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    118          //char data[data_size];
    119          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    120          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    125          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    126          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    127          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    128          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    140          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    141          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    142          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    143          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    144          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    149          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    150          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          char  manu_display,sync_display,program_display,program_number;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_number:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    152          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    153          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    154          u8 button;
   \                     button:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    155          u8 power;
   \                     power:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    156          bool blink_flag;
   \                     blink_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    157          u16 blink_time;
   \                     blink_time:
   \   000000                       DS8 2
    158          //bool  ds_temperature;
    159          
    160          
    161          

   \                                 In section .near.bss, align 1
    162          char line1[10];
   \                     line1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    163          char line2[10];
   \                     line2:
   \   000000                       DS8 10
    164          //char string1[10];
    165          //char string2[10];

   \                                 In section .near.bss, align 1
    166          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    167          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    168          
    169          //u8 index=0;

   \                                 In section .near.bss, align 1
    170          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    171          int volatile k=0;
   \                     k:
   \   000000                       DS8 2

   \                                 In section .near.data, align 1
    172          char *Day_Week[11] = {" Off"," Sun"," Mon"," Tues"," Wednes"," Thurs"," Fri"," Satur"," Daily"," Month"};
   \                     Day_Week:
   \   000000 000000000000          DC16 `?<Constant " Off">`, `?<Constant " Sun">`, `?<Constant " Mon">`
   \   000006 00000000              DC16 `?<Constant " Tues">`, `?<Constant " Wednes">`
   \   00000A 00000000              DC16 `?<Constant " Thurs">`, `?<Constant " Fri">`
   \   00000E 00000000              DC16 `?<Constant " Satur">`, `?<Constant " Daily">`
   \   000012 0000                  DC16 `?<Constant " Month">`
   \   000014 0000                  DC8 0, 0
    173          //char *test[3] ={"18777","2","3"};
    174          
    175           struct   status_reg
    176           {
    177             unsigned manu:1;
    178             unsigned on:1;
    179             unsigned timer_on:1;
    180             unsigned daily:1;
    181             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    182           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    183          
    184          
    185           struct
    186           {
    187             unsigned ds1307:1;
    188             unsigned ds18B20:1;
    189             unsigned buzzer:1;
    190             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    191           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    192          
    193          
    194          
    195           typedef  struct
    196            {
    197              u8 day;
    198              u8 onhour ;
    199              u8 onminute ;
    200              u8 offhour;
    201              u8 offminute;
    202          
    203            }  program ;
    204          
    205                   // = new proram[8];

   \                                 In section .near.bss, align 1
    206             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 40
    207            /*
    208             =
    209           {
    210             {0x00,0x00,0x00,0x00,0x00},
    211             {0x00,0x00,0x00,0x00,0x00},
    212             {0x00,0x00,0x00,0x00,0x00},
    213             {0x00,0x00,0x00,0x00,0x00},
    214             {0x00,0x00,0x00,0x00,0x00},
    215             {0x00,0x00,0x00,0x00,0x00},
    216             {0x00,0x00,0x00,0x00,0x00},
    217             {0x00,0x00,0x00,0x00,0x00},
    218           };
    219              */
    220          
    221          //time_t  ltime;
    222          //struct tm ptim;
    223          
    224          
    225          
    226          
    227          
    228          /* Private function prototypes -----------------------------------------------*/
    229          void InitHardware();
    230          void GpioConfiguration();
    231          void InitClk();
    232          void InitAdc();
    233          void InitI2C();
    234          void EEPROM_INIT();
    235          bool ReadDS1307();
    236          //void InitUart();
    237          void InitLcd();
    238          void InitDelayTimer2();
    239          void InitDelayTimer3();
    240          void Delay1( u16 Delay);
    241          void Delay2( u16 Delay);
    242          void Delay_us(u16 Delay);
    243          void LCDInstrNibble (u8 Instr);
    244          void LCDInstr(u8 Instr);
    245          void LCDDataOut(u8 data);
    246          void LCD_Busy();
    247          void PulseEnable();
    248          //void SendData();
    249          void SendChar(u8 Char);
    250          //void Send_Hello();
    251          bool Set_Clock();
    252          bool key_ok_on();
    253          bool key_plus_on();
    254          bool key_minus_on();
    255          bool key_ok_plus();
    256          bool Init_DS1307(void);
    257          bool Check_DS1307(void);
    258          bool I2C_Start(void);
    259          bool I2C_WA(u8 address);
    260          bool I2C_WD(u8 data);
    261          bool I2C_RA(u8 address);
    262          bool Set_DS1307();
    263          //bool Set_Delay_Allarm();
    264          bool Set_Timer_On();
    265          bool Set_Timer_Off();
    266          bool Read_Allarm();
    267          bool Read_DS18();
    268          bool DS18_Write( u8 data);
    269          bool DS18_Reset();
    270          bool DS18Set();
    271          u8 temperature();
    272          u8 DS18_Read();
    273          u8 convert_tobcd(u8 data);
    274          u8 I2C_RD(void);
    275          u8 adj(u8 min,u8 max,u8 now);
    276          u8 bcd2hex(u8 bcd);
    277          void Power_On(void);
    278          void Power_Off();
    279          void SaveStatus();
    280          void Rotate_Line( char * line);
    281          void Display_Line(char * line);
    282          void Clear_Line1(void);
    283          void Clear_Line2(void);
    284          void Menu(void);
    285          void pressKey(void);
    286          void Display(void);
    287          bool setData(void);
    288          void initBeep(void);
    289          void beep(u16 Interval);
    290          void FirstMenu();
    291          void ProgramMenu();
    292          void SaveProgram();
    293          void ReadProgram();
    294          void ResetProgram();
    295          void CheckProgramPoint();
    296          
    297          
    298          
    299          u16  Average();
    300          
    301          
    302          /* Private functions ---------------------------------------------------------*/
    303          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_207:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000 8D000000              CALLF     ?Subroutine83
   \                     ??CrossCallReturnLabel_229:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    304          void main(void)
    305          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    306              /*High speed internal clock prescaler: 1*/
    307              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    308              InitClk();
   \   000003 8D000000              CALLF     InitClk
    309              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    310              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    311              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    312              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine11
    313              GPIO_WriteLow(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_20:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteLow
    314              hardware.lcdLed=0;
   \   000020 CE0000                LDW       X, L:hardware
   \   000023 01                    RRWA      X, A
   \   000024 A4F7                  AND       A, #0xf7
   \   000026 02                    RLWA      X, A
   \   000027 CF0000                LDW       L:hardware, X
    315              //InitUart();
    316               enableInterrupts();
   \   00002A 9A                    RIM
    317               initBeep();
   \   00002B 8D000000              CALLF     initBeep
    318              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    319               InitLcd();
   \   00002F 8D000000              CALLF     InitLcd
    320              //InitAdc();
    321               InitI2C();
   \   000033 8D000000              CALLF     InitI2C
    322              // Enable Timer3
    323              TIM3_Cmd(ENABLE);
   \   000037 A601                  LD        A, #0x1
   \   000039 8D000000              CALLF     TIM3_Cmd
    324              //year=bcd2hex(13);
    325              //Delay1(10000);
    326               if (!ReadDS1307())
   \   00003D 8D000000              CALLF     ReadDS1307
   \   000041 A100                  CP        A, #0x0
   \   000043 261D                  JRNE      L:??main_0
    327               {
    328                 printf("\n E2:%d",error);
   \   000045 C60000                LD        A, L:error
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004E 8D000000              CALLF     printf
   \   000052 5B02                  ADD       SP, #0x2
    329                 // Reset the CPU: Enable the watchdog and wait until it expires
    330                  hardware.ds1307=0;
   \   000054 CE0000                LDW       X, L:hardware
   \   000057 01                    RRWA      X, A
   \   000058 A4FE                  AND       A, #0xfe
   \   00005A 02                    RLWA      X, A
   \   00005B CF0000                LDW       L:hardware, X
    331                   pressKey();
   \   00005E 8D000000              CALLF     pressKey
    332                //IWDG->KR = IWDG_KEY_ENABLE;
    333                // while ( 1 );    // Wait until reset occurs from IWDG
    334               }
    335               //Send_Hello();
    336              //line_lcd=0;
    337              //printf("\nHello");
    338                hardware.lcdLed=1;
   \                     ??main_0:
   \   000062 8D000000              CALLF     ?Subroutine35
    339                 lcdLedTimer=LCDLEDON;
    340                  //GPIO_WriteLow(GPIOB,lcdLed);
    341          
    342              if (!Check_DS1307())
   \                     ??CrossCallReturnLabel_75:
   \   000066 8D000000              CALLF     Check_DS1307
   \   00006A A100                  CP        A, #0x0
   \   00006C 2624                  JRNE      L:??main_1
    343              {
    344                 if (error!=0)
   \   00006E C60000                LD        A, L:error
   \   000071 2710                  JREQ      L:??main_2
    345                 {
    346                  printf("\n E:%d",error);
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    347                   pressKey();
   \   00007F 8D000000              CALLF     pressKey
    348          
    349                 }
    350               line_lcd=0;
   \                     ??main_2:
   \   000083 725F0000              CLR       L:line_lcd
    351               printf("\nSetClock");
   \   000087 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008A 8D000000              CALLF     printf
    352                Set_Clock();
   \   00008E 8D000000              CALLF     Set_Clock
    353                 // reset program point
    354          
    355              }
    356          
    357          
    358                 //Read Status register from eepom and update it
    359                //size=sizeof(status);
    360               //u16 status
    361               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000092 AE4000                LDW       X, #0x4000
   \   000095 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_162:
   \   000099 B700                  LD        S:?b8, A
   \   00009B AE4001                LDW       X, #0x4001
   \   00009E 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_161:
   \   0000A2 905F                  CLRW      Y
   \   0000A4 9097                  LD        YL, A
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b8
   \   0000AA 41                    EXG       A, XL
   \   0000AB 4F                    CLR       A
   \   0000AC 02                    RLWA      X, A
   \   0000AD 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_237:
   \   0000B1 CF0000                LDW       L:status, X
    362                status_check = *(u16*)(&status);
   \   0000B4 CE0000                LDW       X, L:status
   \   0000B7 CF0000                LDW       L:status_check, X
    363                //ResetProgram();
    364                ReadProgram ();
   \   0000BA 8D000000              CALLF     ReadProgram
    365                //printf("%s",Day_Week[1]);
    366                // pressKey();
    367          
    368                /*
    369              //When Start Check for Allarm and computing Daily_long_on
    370               if ( Read_Allarm() == TRUE)
    371               {
    372                 time_on=daily_hour_on*60+daily_minute_on;
    373                 time_off= daily_hour_off*60+daily_minute_off;
    374               }
    375                  */
    376          
    377                     //Init DS18B20
    378              DS18Set();
   \   0000BE 8D000000              CALLF     DS18Set
    379              line_lcd=0;
   \   0000C2 725F0000              CLR       L:line_lcd
    380              if (!Read_DS18())
   \   0000C6 8D000000              CALLF     Read_DS18
   \   0000CA A100                  CP        A, #0x0
   \   0000CC 2611                  JRNE      L:??main_3
    381              {
    382               printf("\nDS_Err_T");
   \   0000CE AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000D1 8D000000              CALLF     printf
    383                 hardware.ds18B20=0;
   \   0000D5 8D000000              CALLF     ?Subroutine39
    384                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_90:
   \   0000D9 8D000000              CALLF     pressKey
   \   0000DD 2004                  JRA       L:??CrossCallReturnLabel_92
    385              }
    386               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000DF 8D000000              CALLF     ?Subroutine40
    387          
    388              //daily_dispaly=' ';
    389              //month_display=' ';
    390              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_92:
   \   0000E3 35010000              MOV       L:sync_time_ds1307, #0x1
    391          
    392                    //Same delay if  power jitter
    393              if (status.on)
   \   0000E7 CE0000                LDW       X, L:status
   \   0000EA 9F                    LD        A, XL
   \   0000EB A502                  BCP       A, #0x2
   \   0000ED 2713                  JREQ      L:??main_4
    394              {
    395               line_lcd=0;
   \   0000EF 725F0000              CLR       L:line_lcd
    396               printf("\nWait 3s.");
   \   0000F3 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   0000F6 8D000000              CALLF     ?Subroutine45
    397               timer3=0;
    398               while (timer3<=power_jitter);
   \                     ??CrossCallReturnLabel_107:
   \   0000FA CE0000                LDW       X, L:timer3
   \   0000FD A30004                CPW       X, #0x4
   \   000100 25F8                  JRC       L:??CrossCallReturnLabel_107
    399              }
    400          
    401          
    402               /* Main Loop*/
    403          
    404              while(1)
    405              {
    406          
    407          
    408                if(key_ok_on()) FirstMenu();
   \                     ??main_4:
   \   000102 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_125:
   \   000106 2704                  JREQ      L:??main_5
   \   000108 8D000000              CALLF     FirstMenu
    409                if(key_plus_on()) Power_On();
   \                     ??main_5:
   \   00010C 8D000000              CALLF     key_plus_on
   \   000110 A100                  CP        A, #0x0
   \   000112 2704                  JREQ      L:??main_6
   \   000114 8D000000              CALLF     Power_On
    410                if(key_minus_on())Power_Off();
   \                     ??main_6:
   \   000118 8D000000              CALLF     key_minus_on
   \   00011C A100                  CP        A, #0x0
   \   00011E 2704                  JREQ      L:??main_7
   \   000120 8D000000              CALLF     Power_Off
    411                if(Time_Display) Display();  //
   \                     ??main_7:
   \   000124 C60000                LD        A, L:Time_Display
   \   000127 2704                  JREQ      L:??main_8
   \   000129 8D000000              CALLF     Display
    412          
    413                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_8:
   \   00012D C60000                LD        A, L:sync_time_ds1307
   \   000130 2729                  JREQ      L:??main_9
    414                   {
    415                    if (!ReadDS1307())
   \   000132 8D000000              CALLF     ReadDS1307
   \   000136 A100                  CP        A, #0x0
   \   000138 2619                  JRNE      L:??main_10
    416                        {
    417                          GPIO_WriteLow(GPIOD, power_pin );
   \   00013A 8D000000              CALLF     ?Subroutine11
    418                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_19:
   \   00013E C60000                LD        A, L:error
   \   000141 5F                    CLRW      X
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B02                  ADD       SP, #0x2
    419                       //restart i2c
    420                       // Reset the CPU: Enable the watchdog and wait until it expires
    421                       IWDG->KR = IWDG_KEY_ENABLE;
   \   00014D 35CC50E0              MOV       L:0x50e0, #0xcc
    422                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_11:
   \   000151 20FE                  JRA       L:??main_11
    423                        }
    424                   sync_time_ds1307=FALSE;
   \                     ??main_10:
   \   000153 725F0000              CLR       L:sync_time_ds1307
    425                   sync_display='S';
   \   000157 35530000              MOV       L:sync_display, #0x53
    426                   }
    427          
    428                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_9:
   \   00015B CE0000                LDW       X, L:status
   \   00015E 9F                    LD        A, XL
   \   00015F A502                  BCP       A, #0x2
   \   000161 2708                  JREQ      L:??main_12
   \   000163 A608                  LD        A, #0x8
   \   000165 8D000000              CALLF     ??Subroutine92_0
   \                     ??CrossCallReturnLabel_268:
   \   000169 2097                  JRA       L:??main_4
    429                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_12:
   \   00016B 8D000000              CALLF     ?Subroutine11
    430          
    431          
    432          
    433              }
   \                     ??CrossCallReturnLabel_18:
   \   00016F 2091                  JRA       L:??main_4
    434          
    435          
    436          
    437          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine57:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine40:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine39:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine11:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
    438          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine90_0
   \   000004                       ;               // Fall through to label ??Subroutine90_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A501                  BCP       A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    439          void Display(void)
    440          {
   \                     Display:
   \   000000 3B0000                PUSH      S:?b8
    441             //Clear_Line1 ();
    442              char power_display;
    443              result1=temperature();
   \   000003 8D000000              CALLF     temperature
   \   000007 C70000                LD        L:result1, A
    444               result2=0;
   \   00000A 725F0000              CLR       L:result2
    445                if(result1%2!=0) result2=5;
   \   00000E 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000013 35050000              MOV       L:result2, #0x5
    446                 result1/=2;
   \                     ??Display_0:
   \   000017 44                    SRL       A
   \   000018 C70000                LD        L:result1, A
    447          
    448          
    449          
    450             if (status.manu) manu_display='M';
   \   00001B 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_212:
   \   00001F 2706                  JREQ      L:??Display_1
   \   000021 354D0000              MOV       L:manu_display, #0x4d
   \   000025 2004                  JRA       L:??Display_2
    451               else manu_display='A';
   \                     ??Display_1:
   \   000027 35410000              MOV       L:manu_display, #0x41
    452               //Blink D
    453          
    454             if (status.on && !status.manu)
   \                     ??Display_2:
   \   00002B CE0000                LDW       X, L:status
   \   00002E 9F                    LD        A, XL
   \   00002F A502                  BCP       A, #0x2
   \   000031 2722                  JREQ      L:??Display_3
   \   000033 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_213:
   \   000037 261C                  JRNE      L:??Display_3
    455             {
    456               if (program_display==' ')
   \   000039 C60000                LD        A, L:program_display
   \   00003C A120                  CP        A, #0x20
   \   00003E 260D                  JRNE      L:??Display_4
    457                 {
    458                   program_display='P';
   \   000040 35500000              MOV       L:program_display, #0x50
    459                   power_display=0x30 +power;
   \   000044 C60000                LD        A, L:power
   \   000047 AB30                  ADD       A, #0x30
   \   000049 B700                  LD        S:?b8, A
   \   00004B 2008                  JRA       L:??Display_3
    460                 }
    461               else
    462                 {
    463                   program_display=' ';
   \                     ??Display_4:
   \   00004D 35200000              MOV       L:program_display, #0x20
    464                   power_display=' ';
   \   000051 35200000              MOV       S:?b8, #0x20
    465                 }
    466             }
    467          
    468          
    469             // else if (status.on) program_display='P';
    470             //  else program_display=' ';
    471          
    472              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c%c",result1,result2,sync_display,manu_display,program_display,power_display);
   \                     ??Display_3:
   \   000055 C60000                LD        A, L:sync_display
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A BF00                  LDW       S:?w2, X
   \   00005C C60000                LD        A, L:manu_display
   \   00005F 97                    LD        XL, A
   \   000060 BF00                  LDW       S:?w1, X
   \   000062 C60000                LD        A, L:program_display
   \   000065 97                    LD        XL, A
   \   000066 BF00                  LDW       S:?w0, X
   \   000068 B600                  LD        A, S:?b8
   \   00006A 41                    EXG       A, XL
   \   00006B 90CE0000              LDW       Y, L:hardware
   \   00006F 909F                  LD        A, YL
   \   000071 A502                  BCP       A, #0x2
   \   000073 89                    PUSHW     X
   \   000074 2725                  JREQ      L:??Display_5
   \   000076 8D000000              CALLF     L:?push_w0
   \   00007A 8D000000              CALLF     L:?push_w1
   \   00007E 8D000000              CALLF     L:?push_w2
   \   000082 C60000                LD        A, L:result2
   \   000085 97                    LD        XL, A
   \   000086 89                    PUSHW     X
   \   000087 C60000                LD        A, L:result1
   \   00008A 97                    LD        XL, A
   \   00008B 89                    PUSHW     X
   \   00008C 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c%c">`
   \   000090 AE0000                LDW       X, #line1
   \   000093 8D000000              CALLF     sprintf
   \   000097 5B0C                  ADD       SP, #0xc
   \   000099 2019                  JRA       L:??Display_6
    473                else sprintf(line1,"\n%c%c%c%c",sync_display,manu_display,program_display,power_display);
   \                     ??Display_5:
   \   00009B 8D000000              CALLF     L:?push_w0
   \   00009F 8D000000              CALLF     L:?push_w1
   \   0000A3 8D000000              CALLF     L:?push_w2
   \   0000A7 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c%c">`
   \   0000AB AE0000                LDW       X, #line1
   \   0000AE 8D000000              CALLF     sprintf
   \   0000B2 5B08                  ADD       SP, #0x8
    474          
    475             line_lcd=0;
   \                     ??Display_6:
   \   0000B4 725F0000              CLR       L:line_lcd
    476             printf(line1);
   \   0000B8 AE0000                LDW       X, #line1
   \   0000BB 8D000000              CALLF     ?Subroutine24
    477          
    478             line_lcd=1;
    479             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_254:
   \   0000BF 89                    PUSHW     X
   \   0000C0 C60000                LD        A, L:minutes
   \   0000C3 97                    LD        XL, A
   \   0000C4 89                    PUSHW     X
   \   0000C5 C60000                LD        A, L:hours
   \   0000C8 97                    LD        XL, A
   \   0000C9 89                    PUSHW     X
   \   0000CA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CD 8D000000              CALLF     printf
   \   0000D1 5B06                  ADD       SP, #0x6
    480          
    481          
    482             Time_Display=FALSE;
   \   0000D3 725F0000              CLR       L:Time_Display
    483             sync_display=' ';
   \   0000D7 35200000              MOV       L:sync_display, #0x20
    484          
    485          
    486          }
   \   0000DB 320000                POP       S:?b8
   \   0000DE 87                    RETF
    487          

   \                                 In section .far_func.text, align 1
    488          void Power_On()
    489          {
    490            //status.auto=0;
    491            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine42
    492            status.manu=1; //Manu
    493            SaveStatus();
   \                     ??CrossCallReturnLabel_98:
   \   00000A AC000000              JPF       SaveStatus
    494            //hardware.lcdLed=1;
    495          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_210:
   \   000004 AA01                  OR        A, #0x1
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine77:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 87                    RETF
    496          

   \                                 In section .far_func.text, align 1, keep-with-next
    497          void Power_Off()
    498          {
    499            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine42
    500            status.manu=1; //Manu
    501            SaveStatus();
   \                     ??CrossCallReturnLabel_97:
   \   00000A AC000000              JPF       SaveStatus
    502             //hardware.lcdLed=0;
    503          
    504          }
    505          

   \                                 In section .far_func.text, align 1, keep-with-next
    506          void InitI2C(void)
    507          {
    508             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    509             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    510             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    511          }
    512          

   \                                 In section .far_func.text, align 1, keep-with-next
    513          bool I2C_Start(void)
    514          {
    515             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    516                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    517              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_147:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    518                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    519                  {
    520                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    521                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    522                  }
    523                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    524          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    525          

   \                                 In section .far_func.text, align 1, keep-with-next
    526          bool I2C_WA(u8 address)
    527          {
    528            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    529                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    530                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_146:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    531                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    532                   {
    533                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    534                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    535                   }
    536                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    537          }
    538          

   \                                 In section .far_func.text, align 1, keep-with-next
    539          bool I2C_RA(u8 address)
    540          {
    541            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    542                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    543                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_148:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    544                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    545                   {
    546                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    547                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    548                   }
    549                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    550          }
    551          
    552          

   \                                 In section .far_func.text, align 1, keep-with-next
    553          bool I2C_WD(u8 data)
    554          {
    555           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    556             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    557             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_145:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    558              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    559              {
    560                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    561                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    562              }
    563               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    564          }
    565          

   \                                 In section .far_func.text, align 1, keep-with-next
    566          u8 I2C_RD(void)
    567          {
    568           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    569            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    570           //while((!(I2C->SR1 & 0x40))&&timeout);
    571           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    572           {
    573             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    574             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    575           }
    576           u8 data=I2C_ReceiveData();
    577           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    578          }
    579          
    580          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine94_0
   \   000001                       ;               // Fall through to label ??Subroutine94_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    581          bool  ReadDS1307(void)
    582          {        TIM3_Cmd(DISABLE);
   \                     ReadDS1307:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     TIM3_Cmd
    583                 error=0;
   \   000005 8D000000              CALLF     ?Subroutine53
    584                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_150:
   \   000009 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   00000B 4F                    CLR       A
   \   00000C 87                    RETF
    585                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   00000D 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_144:
   \   000011 27F8                  JREQ      L:??ReadDS1307_1
    586                 if(!I2C_WD(0x00)) return FALSE;
   \   000013 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_288:
   \   000017 27F2                  JREQ      L:??ReadDS1307_1
    587                 I2C_GenerateSTOP(ENABLE);
   \   000019 8D000000              CALLF     ?Subroutine28
    588                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_56:
   \   00001D 27EC                  JREQ      L:??ReadDS1307_1
    589                 if(!I2C_RA(0xD0))return FALSE;
   \   00001F A6D0                  LD        A, #0xd0
   \   000021 8D000000              CALLF     I2C_RA
   \   000025 A100                  CP        A, #0x0
   \   000027 27E2                  JREQ      L:??ReadDS1307_1
    590                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000029 8D000000              CALLF     ?Subroutine23
    591                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_44:
   \   00002D C70000                LD        L:seconds, A
    592                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000030 8D000000              CALLF     ?Subroutine23
    593                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_43:
   \   000034 C70000                LD        L:minutes, A
    594                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000037 8D000000              CALLF     ?Subroutine23
    595                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_42:
   \   00003B C70000                LD        L:hours, A
    596                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00003E 8D000000              CALLF     ?Subroutine23
    597                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_41:
   \   000042 C70000                LD        L:days, A
    598                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000045 8D000000              CALLF     ?Subroutine23
    599                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   000049 C70000                LD        L:`date`, A
    600                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004C 8D000000              CALLF     ?Subroutine23
    601                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_39:
   \   000050 C70000                LD        L:month, A
    602                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000053 8D000000              CALLF     ?Subroutine33
    603                   I2C_GenerateSTOP(ENABLE);
    604                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_66:
   \   000057 8D000000              CALLF     I2C_RD
   \   00005B 8D000000              CALLF     bcd2hex
   \   00005F C70000                LD        L:year, A
    605          
    606               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    607               //   u8 data1 = I2C_RD();
    608                //Last read byte by I2C slave
    609               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    610               //  I2C_GenerateSTOP(ENABLE);
    611               //  temp2= I2C_RD();
    612                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   000062 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    613                    {
    614                      seconds &= 0x7f;
   \   000067 721F0000              BRES      L:seconds, #0x7
    615                      Set_DS1307();
   \   00006B 8D000000              CALLF     Set_DS1307
    616                    }
    617                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006F CE0000                LDW       X, L:hardware
   \   000072 01                    RRWA      X, A
   \   000073 AA01                  OR        A, #0x1
   \   000075 02                    RLWA      X, A
   \   000076 CF0000                LDW       L:hardware, X
    618                 TIM3_Cmd(ENABLE);
   \   000079 A601                  LD        A, #0x1
   \   00007B 8D000000              CALLF     TIM3_Cmd
    619                 return TRUE;
   \   00007F A601                  LD        A, #0x1
   \   000081 87                    RETF
    620          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_204:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    621          

   \                                 In section .far_func.text, align 1, keep-with-next
    622          bool Check_DS1307(void)
    623          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    624             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    625                 error=0;
   \   000003 725F0000              CLR       L:error
    626                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    627                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    628                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_143:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    629                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine94_0
   \                     ??CrossCallReturnLabel_291:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    630                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine28
    631                  //Last read byte by I2C slave
    632                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_55:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    633                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    634                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine75
    635                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_205:
   \   00003C B700                  LD        S:?b8, A
    636                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine33
    637                 I2C_GenerateSTOP(ENABLE);
    638                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_67:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    639                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    640          }
    641          

   \                                 In section .far_func.text, align 1, keep-with-next
    642          bool Set_DS1307()
    643          {
    644                 // convert hex or decimal to bcd format
    645          
    646          
    647                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine53
    648                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_149:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    649                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_142:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    650                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_287:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    651                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_135:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    652                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_136:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    653                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_137:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    654                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_138:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    655                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_139:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    656                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_140:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    657                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_141:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    658                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine94_0
   \                     ??CrossCallReturnLabel_289:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    659                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine94_0
   \                     ??CrossCallReturnLabel_290:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    660                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    661          
    662          
    663             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    664          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    665          
    666          

   \                                 In section .far_func.text, align 1, keep-with-next
    667          u8 convert_tobcd(u8 data)
    668          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    669             u8 data_second_decimal=data/10;
    670             u8 data_first_decimal=data - 10*data_second_decimal;
    671             data=16*data_second_decimal + data_first_decimal;
    672            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    673          }
    674          

   \                                 In section .far_func.text, align 1, keep-with-next
    675          u8 bcd2hex(u8 bcd)
    676          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    677            u8 hex=0;
    678            hex=(bcd>>4)*10 +(bcd&0x0f);
    679            bcd=0;
    680            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    681          }
    682          
    683          

   \                                 In section .far_func.text, align 1, keep-with-next
    684          bool Set_Clock()
    685          {
    686              //Clear Display
    687             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine15
    688             Delay1(1000);
    689             line_lcd=0;
    690              printf("\nYear>");
    691                do
    692              {
    693               line_lcd=1;
   \                     ??CrossCallReturnLabel_27:
   \   000004 8D000000              CALLF     ?Subroutine25
    694               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_45:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    695                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine87_0
    696              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_243:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_112:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_27
    697          
    698               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine44
    699              printf("\nMonth>");
    700                do
    701              {
    702               line_lcd=1;
   \                     ??CrossCallReturnLabel_103:
   \   000036 8D000000              CALLF     ?Subroutine25
    703               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_46:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    704                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    705              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_113:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_103
    706          
    707              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine16
    708               Delay1(1000);
    709                line_lcd=0;
    710              printf("\nDate>");
    711                do
    712              {
    713               line_lcd=1;
   \                     ??CrossCallReturnLabel_29:
   \   00006A 8D000000              CALLF     ?Subroutine25
    714               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_47:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    715                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    716              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_114:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_29
    717          
    718          
    719              //Clear Display
    720             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine17
    721             Delay1(1000);
    722             line_lcd=0;
    723              printf("\nDays>");
   \                     ??CrossCallReturnLabel_232:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    724                do
    725              {
    726                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    727               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    728                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    729              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_115:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    730          
    731          
    732          
    733             //Clear Display
    734             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine17
    735             Delay1(1000);
    736             line_lcd=0;
    737              printf("\nHour>");
   \                     ??CrossCallReturnLabel_233:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    738                do
    739              {
    740                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine90_0
    741               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_255:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    742                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 8D000000              CALLF     ?Subroutine47
    743              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_126:
   \   0000FA 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_242:
   \   0000FE C70000                LD        L:hours, A
   \   000101 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_116:
   \   000105 27D4                  JREQ      L:??Set_Clock_1
    744          
    745               line_lcd=0;
   \   000107 725F0000              CLR       L:line_lcd
    746               printf("\nMinute>");
   \   00010B AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   00010E 8D000000              CALLF     printf
    747                do
    748              {
    749                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000112 8D000000              CALLF     ??Subroutine90_0
    750               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_256:
   \   000116 89                    PUSHW     X
   \   000117 C60000                LD        A, L:minutes
   \   00011A 97                    LD        XL, A
   \   00011B 89                    PUSHW     X
   \   00011C C60000                LD        A, L:hours
   \   00011F 97                    LD        XL, A
   \   000120 89                    PUSHW     X
   \   000121 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000124 8D000000              CALLF     printf
   \   000128 5B06                  ADD       SP, #0x6
    751                 minutes=adj(0,59,minutes);
   \   00012A C60000                LD        A, L:minutes
   \   00012D 8D000000              CALLF     ?Subroutine32
    752              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_248:
   \   000131 C70000                LD        L:minutes, A
   \   000134 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_117:
   \   000138 27D8                  JREQ      L:??Set_Clock_2
    753          
    754              line_lcd=0;
   \   00013A 725F0000              CLR       L:line_lcd
    755              printf("\nSeconds>");
   \   00013E AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000141 8D000000              CALLF     printf
    756              do
    757              {
    758                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000145 8D000000              CALLF     ??Subroutine90_0
    759               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_257:
   \   000149 89                    PUSHW     X
   \   00014A C60000                LD        A, L:minutes
   \   00014D 97                    LD        XL, A
   \   00014E 89                    PUSHW     X
   \   00014F C60000                LD        A, L:hours
   \   000152 97                    LD        XL, A
   \   000153 89                    PUSHW     X
   \   000154 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000157 8D000000              CALLF     printf
   \   00015B 5B06                  ADD       SP, #0x6
    760                 seconds=adj(0,59,seconds);
   \   00015D C60000                LD        A, L:seconds
   \   000160 8D000000              CALLF     ?Subroutine32
    761              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_247:
   \   000164 C70000                LD        L:seconds, A
   \   000167 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_118:
   \   00016B 27D8                  JREQ      L:??Set_Clock_3
    762          
    763                // Set parameter to DS1307 + time byte
    764                Set_DS1307();
   \   00016D 8D000000              CALLF     Set_DS1307
    765          
    766                //bool k=Check_DS1307();
    767          
    768            return TRUE;
   \   000171 A601                  LD        A, #0x1
   \   000173 87                    RETF
    769          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     ?Subroutine82
   \                     ??CrossCallReturnLabel_226:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine85_0
   \   000007                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_196:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_197:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 8D000000              CALLF     ?Subroutine82
   \                     ??CrossCallReturnLabel_225:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 B700                  LD        S:?b1, A
   \   000002 35170000              MOV       S:?b0, #0x17
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine87_0
   \   000006                       ;               // Fall through to label ??Subroutine87_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    770          
    771          

   \                                 In section .far_func.text, align 1, keep-with-next
    772          u8 adj(u8 min,u8 max,u8 now)
    773          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    774             u8 adj=now;
    775             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    776             {
    777               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    778               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    779             }
    780             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    781             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    782             {
    783               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    784               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    785             }
    786             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    787             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    788          
    789             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    790          }
    791          
    792          

   \                                 In section .far_func.text, align 1, keep-with-next
    793          bool key_ok_on()
    794          {
    795            //Read Key OK
    796            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_59:
   \   000004 2635                  JRNE      L:??key_ok_on_0
    797             {
    798               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    799                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_60:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    800                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 251B                  JRC       L:??key_ok_on_0
    801                 {
    802                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    803                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000024 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_61:
   \   000028 2711                  JREQ      L:??key_ok_on_0
    804                    {
    805                       beep(2000);
   \   00002A 8D000000              CALLF     ?Subroutine36
    806                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_76:
   \   00002E 2606                  JRNE      L:??key_ok_on_3
    807                        {
    808                         hardware.lcdLed=1;
   \   000030 8D000000              CALLF     ?Subroutine35
    809                         lcdLedTimer=LCDLEDON;
    810                         return FALSE;
   \                     ??CrossCallReturnLabel_71:
   \   000034 2005                  JRA       ??key_ok_on_0
    811                        }
    812                       hardware.lcdLed=1;
   \                     ??key_ok_on_3:
   \   000036 8D000000              CALLF     ?Subroutine34
    813                       lcdLedTimer=LCDLEDON;
    814          
    815                      return TRUE;   //if realease retrun true
    816                    }
    817                 }
    818             }
   \                     ??CrossCallReturnLabel_68:
   \   00003A 87                    RETF
    819          
    820            return FALSE;
   \                     ??key_ok_on_0:
   \   00003B 4F                    CLR       A
   \   00003C 87                    RETF
    821          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_206:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    822          
    823          
    824          

   \                                 In section .far_func.text, align 1, keep-with-next
    825           bool key_plus_on()
    826          {
    827            //Read Key OK
    828              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_94:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
    829               {
    830               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    831                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_86:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_93:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    832                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
    833                  {
    834                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_63:
   \   000026 2711                  JREQ      L:??key_plus_on_0
    835                    {
    836                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine36
    837                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_78:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
    838                        {
    839                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine35
    840                         lcdLedTimer=LCDLEDON;
    841                         return FALSE;
   \                     ??CrossCallReturnLabel_73:
   \   000032 2005                  JRA       ??key_plus_on_0
    842                        }
    843                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine34
    844                        lcdLedTimer=LCDLEDON;
    845          
    846                      return TRUE;
    847                    }
    848                  }
    849               }
   \                     ??CrossCallReturnLabel_70:
   \   000038 87                    RETF
    850          
    851            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    852          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    853          
    854          

   \                                 In section .far_func.text, align 1, keep-with-next
    855            bool key_minus_on()
    856          {
    857            //Read Key OK
    858             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_96:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
    859               {
    860               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    861                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_85:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_95:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    862                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
    863                  {
    864                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_62:
   \   000026 2711                  JREQ      L:??key_minus_on_0
    865                   {
    866                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine36
    867                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_77:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
    868                       {
    869                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine35
    870                        lcdLedTimer=LCDLEDON;
    871                        return FALSE;
   \                     ??CrossCallReturnLabel_72:
   \   000032 2005                  JRA       ??key_minus_on_0
    872                       }
    873                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine34
    874                     lcdLedTimer=LCDLEDON;
    875                     return TRUE;
    876                   }
    877                  }
    878               }
   \                     ??CrossCallReturnLabel_69:
   \   000038 87                    RETF
    879          
    880            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    881          }
    882          
    883          

   \                                 In section .far_func.text, align 1, keep-with-next
    884          bool  key_ok_plus()
    885          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    886            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_23:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
    887            {
    888                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    889                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_87:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_24:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    890                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_88:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_228
    891                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine83
    892                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_228:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
    893                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
    894            }
    895          
    896           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
    897          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    898          
    899           /*
    900          bool Set_Timer_On()
    901          {
    902          
    903             //clr
    904             LCDInstr(0x01);
    905             Delay1(1000);
    906             line_lcd=0;
    907             printf("\nH On>");
    908              timer3=0;
    909            do
    910              {
    911               line_lcd=1;
    912               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
    913                 daily_hour_on=adj(0,23,daily_hour_on);
    914              } while ( timer3<=time_menu && !key_ok_on());
    915          
    916          
    917             LCDInstr(0x01);
    918             Delay1(1000);
    919             line_lcd=0;
    920             printf("\nMin On>");
    921              timer3=0;
    922            do
    923              {
    924               line_lcd=1;
    925               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
    926                 daily_minute_on=adj(0,59,daily_minute_on);
    927              } while ((timer3<=time_menu)&& !key_ok_on());
    928          
    929             //Save data to eeprom
    930               if (!status.monthly) status.daily=1;
    931                 else status.daily=0;
    932               EEPROM_INIT();
    933              //u8 temp =*(u8*)(&status);
    934              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    935               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    936               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    937               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    938               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    939               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    940                time_on=daily_hour_on*60+daily_minute_on;
    941                 change=TRUE;
    942          
    943             return TRUE;
    944          }
    945           */
    946          

   \                                 In section .far_func.text, align 1, keep-with-next
    947          bool Set_Timer_Off()
    948          {
    949          
    950              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine17
    951              Delay1(1000);
    952              line_lcd=0;
    953              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_234:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine45
    954               timer3=0;
    955            do
    956              {
    957               line_lcd=1;
   \                     ??CrossCallReturnLabel_105:
   \   00000B 8D000000              CALLF     ?Subroutine27
    958               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_52:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    959                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 8D000000              CALLF     ?Subroutine47
    960              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_127:
   \   000025 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_241:
   \   000029 C70000                LD        L:daily_hour_off, A
   \   00002C 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_131:
   \   000030 2406                  JRNC      L:??Set_Timer_Off_0
   \   000032 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_119:
   \   000036 27D3                  JREQ      L:??CrossCallReturnLabel_105
    961          
    962            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   000038 8D000000              CALLF     ?Subroutine17
    963             Delay1(1000);
    964             line_lcd=0;
    965             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_235:
   \   00003C AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   00003F 8D000000              CALLF     ?Subroutine45
    966             timer3=0;
    967            do
    968              {
    969               line_lcd=1;
   \                     ??CrossCallReturnLabel_106:
   \   000043 8D000000              CALLF     ?Subroutine27
    970               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_53:
   \   000047 89                    PUSHW     X
   \   000048 C60000                LD        A, L:daily_hour_off
   \   00004B 97                    LD        XL, A
   \   00004C 89                    PUSHW     X
   \   00004D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000050 8D000000              CALLF     printf
   \   000054 5B04                  ADD       SP, #0x4
    971                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000056 C60000                LD        A, L:daily_minute_off
   \   000059 8D000000              CALLF     ?Subroutine32
    972              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_246:
   \   00005D C70000                LD        L:daily_minute_off, A
   \   000060 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_132:
   \   000064 2406                  JRNC      L:??Set_Timer_Off_1
   \   000066 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_120:
   \   00006A 27D7                  JREQ      L:??CrossCallReturnLabel_106
    973          
    974            //Save data to eeprom
    975               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006C CE0000                LDW       X, L:status
   \   00006F 9F                    LD        A, XL
   \   000070 A410                  AND       A, #0x10
   \   000072 2608                  JRNE      L:??Set_Timer_Off_2
   \   000074 CE0000                LDW       X, L:status
   \   000077 01                    RRWA      X, A
   \   000078 AA08                  OR        A, #0x8
   \   00007A 2006                  JRA       ??Set_Timer_Off_3
    976                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007C CE0000                LDW       X, L:status
   \   00007F 01                    RRWA      X, A
   \   000080 A4F7                  AND       A, #0xf7
   \                     ??Set_Timer_Off_3:
   \   000082 8D000000              CALLF     ?Subroutine1
    977               EEPROM_INIT();
    978              //u8 temp =*(u8*)(&status);
    979              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    980               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    981               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    982               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    983               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    984               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    985                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_1:
   \   000086 C60000                LD        A, L:daily_hour_off
   \   000089 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_251:
   \   00008D C60000                LD        A, L:daily_minute_off
   \   000090 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_238:
   \   000094 CF0000                LDW       L:time_off, X
    986                 change=TRUE;
   \   000097 35010000              MOV       L:change, #0x1
    987               return TRUE;
   \   00009B A601                  LD        A, #0x1
   \   00009D 87                    RETF
    988          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine86_0
   \   000002                       ;               // Fall through to label ??Subroutine86_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 905F                  CLRW      Y
   \   000002 9097                  LD        YL, A
   \   000004                       REQUIRE ??Subroutine88_0
   \   000004                       ;               // Fall through to label ??Subroutine88_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000 AE003C                LDW       X, #0x3c
   \   000003                       REQUIRE ??Subroutine89_0
   \   000003                       ;               // Fall through to label ??Subroutine89_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000 BF00                  LDW       S:?w0, X
   \   000002 93                    LDW       X, Y
   \   000003 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_215:
   \   000008 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_193:
   \   00000C CE0000                LDW       X, L:status
   \   00000F 9F                    LD        A, XL
   \   000010 AE4001                LDW       X, #0x4001
   \   000013 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_192:
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    989          
    990          
    991          

   \                                 In section .far_func.text, align 1, keep-with-next
    992          void SaveStatus()
    993          {
    994            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     ?Subroutine79
    995            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \                     ??CrossCallReturnLabel_216:
   \   000004 8D000000              CALLF     ?Subroutine56
    996            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   \                     ??CrossCallReturnLabel_159:
   \   000008 CE0000                LDW       X, L:status
   \   00000B 9F                    LD        A, XL
   \   00000C AE4001                LDW       X, #0x4001
   \   00000F 8D000000              CALLF     ?Subroutine56
    997            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_160:
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 AC000000              JPF       FLASH_Lock
    998          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_191:
   \   000004 87                    RETF
    999          
   1000          

   \                                 In section .far_func.text, align 1, keep-with-next
   1001          void SaveProgram ()
   1002          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
   1003               char *pp = (char*)&programpoint[0];
   1004              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1005             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1006             {
   1007              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 8D000000              CALLF     ?Subroutine55
   1008             }
   \                     ??CrossCallReturnLabel_157:
   \   000015 25F2                  JRC       L:??SaveProgram_0
   1009              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 8D000000              CALLF     FLASH_Lock
   1010          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 1C4002                ADDW      X, #0x4002
   \   000003 8D000000              CALLF     L:?sext32_l0_x
   \   000007 8D000000              CALLF     FLASH_ProgramByte
   \   00000B B600                  LD        A, S:?b8
   \   00000D 4C                    INC       A
   \   00000E B700                  LD        S:?b8, A
   \   000010 A128                  CP        A, #0x28
   \   000012 87                    RETF
   1011          
   1012          

   \                                 In section .far_func.text, align 1, keep-with-next
   1013          void ReadProgram()
   1014          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1015              char *pp = (char*)&programpoint[0];
   1016            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1017             {
   1018               *(pp+i)=FLASH_ReadByte( EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1019             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A128                  CP        A, #0x28
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1020          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1021          
   1022          

   \                                 In section .far_func.text, align 1, keep-with-next
   1023          void ResetProgram()
   1024          {
   \                     ResetProgram:
   \   000000 3B0000                PUSH      S:?b8
   1025          
   1026              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1027             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1028             {
   1029              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,0);
   \                     ??ResetProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A B600                  LD        A, S:?b8
   \   00000C 41                    EXG       A, XL
   \   00000D 8D000000              CALLF     ?Subroutine55
   1030             }
   \                     ??CrossCallReturnLabel_158:
   \   000011 25F6                  JRC       L:??ResetProgram_0
   1031              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 8D000000              CALLF     FLASH_Lock
   1032          
   1033               //Reload ProgrmaPoint
   1034             ReadProgram();
   \   000019 8D000000              CALLF     ReadProgram
   1035          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF
   1036          

   \                                 In section .far_func.text, align 1, keep-with-next
   1037          void CheckProgramPoint()
   1038          {
   \                     CheckProgramPoint:
   \   000000 8D000000              CALLF     L:?push_w4
   1039             if(status.manu) return;
   \   000004 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_211:
   \   000008 2703                  JREQ      ??lb_5
   \   00000A CC0000                JP        L:??CheckProgramPoint_0
   1040             u16 timenow=hours*60+minutes;
   \                     ??lb_5:
   \   00000D C60000                LD        A, L:hours
   \   000010 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_252:
   \   000014 C60000                LD        A, L:minutes
   \   000017 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_239:
   \   00001B BF00                  LDW       S:?w4, X
   1041             status.on=0;
   \   00001D CE0000                LDW       X, L:status
   \   000020 01                    RRWA      X, A
   \   000021 A4FD                  AND       A, #0xfd
   \   000023 02                    RLWA      X, A
   \   000024 CF0000                LDW       L:status, X
   1042              //u8 daytoday;
   1043               for( u8 i=0; i<8;i++)
   \   000027 3F00                  CLR       S:?b6
   1044               {
   1045                  //For Daily Allarm
   1046                 if(programpoint[i].day==8)
   \                     ??CheckProgramPoint_1:
   \   000029 5F                    CLRW      X
   \   00002A 41                    EXG       A, XL
   \   00002B B600                  LD        A, S:?b6
   \   00002D 41                    EXG       A, XL
   \   00002E 9093                  LDW       Y, X
   \   000030 AE0005                LDW       X, #0x5
   \   000033 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_249:
   \   000037 1C0000                ADDW      X, #programpoint
   \   00003A BF00                  LDW       S:?w1, X
   \   00003C 92C600                LD        A, [S:?w1.w]
   \   00003F A108                  CP        A, #0x8
   \   000041 266D                  JRNE      L:??CheckProgramPoint_2
   1047                 {
   1048                  int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   000043 5C                    INCW      X
   \   000044 F6                    LD        A, (X)
   \   000045 5F                    CLRW      X
   \   000046 97                    LD        XL, A
   \   000047 9093                  LDW       Y, X
   \   000049 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_250:
   \   00004D 9093                  LDW       Y, X
   \   00004F BE00                  LDW       X, S:?w1
   \   000051 1C0002                ADDW      X, #0x2
   \   000054 F6                    LD        A, (X)
   \   000055 5F                    CLRW      X
   \   000056 97                    LD        XL, A
   \   000057 BF00                  LDW       S:?w0, X
   \   000059 93                    LDW       X, Y
   \   00005A 72BB0000              ADDW      X, S:?w0
   \   00005E 9093                  LDW       Y, X
   1049                  int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   \   000060 BE00                  LDW       X, S:?w1
   \   000062 1C0003                ADDW      X, #0x3
   \   000065 F6                    LD        A, (X)
   \   000066 5F                    CLRW      X
   \   000067 97                    LD        XL, A
   \   000068 BF00                  LDW       S:?w2, X
   \   00006A AE003C                LDW       X, #0x3c
   \   00006D BF00                  LDW       S:?w0, X
   \   00006F BE00                  LDW       X, S:?w2
   \   000071 8D000000              CALLF     L:?mul16_x_x_w0
   \   000075 BF00                  LDW       S:?w0, X
   \   000077 BE00                  LDW       X, S:?w1
   \   000079 1C0004                ADDW      X, #0x4
   \   00007C F6                    LD        A, (X)
   \   00007D 5F                    CLRW      X
   \   00007E 97                    LD        XL, A
   \   00007F BF00                  LDW       S:?w1, X
   \   000081 BE00                  LDW       X, S:?w0
   \   000083 72BB0000              ADDW      X, S:?w1
   \   000087 BF00                  LDW       S:?w0, X
   1050                      do
   1051                        {
   1052                         if (timeon == timenow)
   \                     ??CheckProgramPoint_3:
   \   000089 90B300                CPW       Y, S:?w4
   \   00008C 2611                  JRNE      L:??CheckProgramPoint_4
   1053                          {
   1054                            power = i;
   \   00008E B600                  LD        A, S:?b6
   \   000090 C70000                LD        L:power, A
   1055                            status.on=1;
   \   000093 CE0000                LDW       X, L:status
   \   000096 01                    RRWA      X, A
   \   000097 AA02                  OR        A, #0x2
   \   000099 02                    RLWA      X, A
   \   00009A CF0000                LDW       L:status, X
   1056                           break;
   \   00009D 2011                  JRA       L:??CheckProgramPoint_2
   1057                          }
   1058                         timeon ++;
   \                     ??CheckProgramPoint_4:
   \   00009F 93                    LDW       X, Y
   \   0000A0 5C                    INCW      X
   \   0000A1 9093                  LDW       Y, X
   1059                        if (timeon == 1441) timeon = 0;
   \   0000A3 90A305A1              CPW       Y, #0x5a1
   \   0000A7 2602                  JRNE      L:??CheckProgramPoint_5
   \   0000A9 905F                  CLRW      Y
   1060                        } while (!(timeon==timeoff));
   \                     ??CheckProgramPoint_5:
   \   0000AB 90B300                CPW       Y, S:?w0
   \   0000AE 26D9                  JRNE      L:??CheckProgramPoint_3
   1061                  }
   1062          
   1063                     // for Day of the Week Allarm
   1064                  else if (programpoint[i].day== days) //Point is Weekly Mode
   1065                  {
   1066          
   1067                  }
   1068                 // for Monthly Allarm
   1069                  else if (programpoint[i].day == 9)//Point is Monthly Mode
   1070                   {
   1071                   }
   1072          
   1073          
   1074               }
   \                     ??CheckProgramPoint_2:
   \   0000B0 B600                  LD        A, S:?b6
   \   0000B2 4C                    INC       A
   \   0000B3 B700                  LD        S:?b6, A
   \   0000B5 A108                  CP        A, #0x8
   \   0000B7 2403                  JRNC      ??lb_6
   \   0000B9 CC0000                JP        L:??CheckProgramPoint_1
   \                     ??lb_6:
   \                     ??CheckProgramPoint_0:
   \   0000BC AC000000              JPF       L:?epilogue_w4
   1075          
   1076          
   1077          
   1078          
   1079          }
   1080          
   1081          

   \                                 In section .far_func.text, align 1, keep-with-next
   1082          bool Read_Allarm()
   1083          {
   1084             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1085              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1086             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1087              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1088             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1089              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1090             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1091              if(daily_hour_off > 59) return FALSE;
   1092             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1093              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1094             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1095              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1096             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1097              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1098            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1099          }
   1100          

   \                                 In section .far_func.text, align 1, keep-with-next
   1101          void EEPROM_INIT()
   1102          {
   1103            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1104            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1105            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1106          
   1107          
   1108          
   1109          }
   1110          
   1111          

   \                                 In section .far_func.text, align 1, keep-with-next
   1112          void GpioConfiguration()
   1113          {
   1114          
   1115            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1116          
   1117            // ADC PE6 NEW PB0
   1118            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1119          
   1120            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1121            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1122          
   1123            //PD0 Led
   1124            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine64
   1125            //I2C
   1126            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_181:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1127            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine67
   1128            // Remap Pins pb4,pb5  sda,scl ;
   1129          
   1130             //Init KEY OK,PLUS,MINUS
   1131            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_188:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine67
   1132            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_189:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine67
   1133            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_190:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1134          
   1135            //Init DS18b20 data pin
   1136            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine64
   1137          
   1138            // Power Pin
   1139             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_180:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine64
   1140          
   1141            // lcdLed Pin
   1142             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_LOW_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_179:
   \   00006B 35800000              MOV       S:?b0, #0x80
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1143          
   1144          
   1145          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1146          

   \                                 In section .far_func.text, align 1, keep-with-next
   1147          void InitClk()
   1148          {
   1149            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1150            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1151            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1152            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1153            CLK_SOURCE_HSI,       // Switch to internal timer.
   1154            DISABLE,              // Disable the clock switch interrupt.
   1155            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1156          
   1157            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine65
   1158            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_182:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine65
   1159            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_183:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine65
   1160            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_184:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine65
   1161            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_185:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1162          
   1163          
   1164          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1165          
   1166          
   1167          /*
   1168          void InitAdc()
   1169          {
   1170               ADC1_DeInit();
   1171               ADC1_StartConversion();
   1172          
   1173               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1174               //           ADC1_CHANNEL_0,
   1175               //           ADC1_PRESSEL_FCPU_D4,
   1176               //            ADC1_EXTTRIG_TIM,
   1177          
   1178          
   1179               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1180               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1181                                      ADC1_CHANNEL_0,
   1182                                      ADC1_ALIGN_RIGHT
   1183                                     );
   1184          
   1185          
   1186               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1187          
   1188          
   1189               //ADC1_Cmd (ENABLE);
   1190               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1191               ADC1_StartConversion();
   1192               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1193          
   1194          }
   1195          */
   1196          
   1197          
   1198          
   1199          /*
   1200          void InitUart()
   1201          {
   1202             UART2_DeInit();
   1203             UART2_Init((u32)9600,
   1204                        UART2_WORDLENGTH_8D,
   1205                        UART2_STOPBITS_1,
   1206                        UART2_PARITY_NO,
   1207                        UART2_SYNCMODE_CLOCK_DISABLE,
   1208                        UART2_MODE_TXRX_ENABLE
   1209                          );
   1210          
   1211             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1212             UART2_Cmd(ENABLE);
   1213          
   1214            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1215          }
   1216            */
   1217          
   1218          
   1219          /*
   1220          void SendChar( u8 Char)
   1221          {
   1222             UART2->DR = Char;
   1223            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1224          }
   1225          
   1226           */
   1227          
   1228           /*
   1229          void Send_Hello()
   1230          {
   1231            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1232             Delay1(10);
   1233             sprintf(data,"Hello");
   1234              u8 i=0;
   1235            do
   1236           {
   1237            SendChar(data[i++]);
   1238           } while (data[i]!=0);
   1239            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1240            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1241          
   1242          
   1243          
   1244          }
   1245          
   1246          
   1247          
   1248          
   1249          
   1250          void SendData()
   1251          {
   1252           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1253            Delay1(10);
   1254            u8 i=0;
   1255            sprintf(data,"%d %c",adcdata,0x0d);
   1256           do
   1257           {
   1258             SendChar(data[i++]);
   1259          
   1260           } while (data[i]!=0);
   1261             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1262            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1263            rx_data=0;
   1264          }
   1265          */
   1266          
   1267          
   1268           /*
   1269          u16 Average()
   1270          {
   1271           //Find average in measure
   1272            u8 i=0;
   1273            u16 Summa=0;
   1274            do
   1275            {
   1276             Summa+=measure[i++];
   1277            } while ( measure[i]!=0);
   1278             if(i!=0) Summa=Summa/i;
   1279             return Summa;
   1280          }
   1281             */
   1282          

   \                                 In section .far_func.text, align 1, keep-with-next
   1283          void LCDDataOut(u8 data)
   1284          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1285            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_15:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_277
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine93_0
   1286            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_277:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_14:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_278
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine93_0
   1287            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_278:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_13:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_279
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine93_0
   1288            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_279:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_12:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_280
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine93_0
   1289          }
   \                     ??CrossCallReturnLabel_280:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_286:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1290          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 8D000000              CALLF     ?Subroutine82
   \                     ??CrossCallReturnLabel_224:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine93_0
   \   000002                       ;               // Fall through to label ??Subroutine93_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1291          void InitLcd()
   1292          {
   1293           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine9
   1294            LCD_RW(0);
   1295            LCD_RS(0);
   \                     ??CrossCallReturnLabel_17:
   \   000006 8D000000              CALLF     ?Subroutine10
   1296            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_275:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine14
   1297          
   1298            LCDInstrNibble(0x03);
   1299             Delay1(10);
   1300            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_26:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1301             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine14
   1302            LCDInstrNibble(0x03);
   1303             Delay1(10);
   1304          
   1305             //Line 4
   1306            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_25:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1307            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1308            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1309            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1310          
   1311            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1312            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1313          
   1314            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine19
   1315            Delay1(250);
   1316          
   1317            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_31:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1318            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1319          
   1320          
   1321          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_203:
   \   000004 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_284:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_283:
   \   00000A 87                    RETF
   1322          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine93_0
   \                     ??CrossCallReturnLabel_281:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_231:
   \   00000D                       REQUIRE ??Subroutine84_0
   \   00000D                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_230:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1323          void LCDInstr(u8 Instr)
   1324          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1325            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine10
   1326            LCD_RW(0);
   \                     ??CrossCallReturnLabel_273:
   \   000009 2000                  JRA       ?Subroutine0
   1327            LCDDataOut(Instr>>4);
   1328            PulseEnable();
   1329            LCDDataOut(Instr & 0x0F);
   1330            PulseEnable();
   1331          }
   1332          

   \                                 In section .far_func.text, align 1, keep-with-next
   1333          void LCDData(u8 Data)
   1334          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1335            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine8
   1336            LCD_RW(0);
   \                     ??CrossCallReturnLabel_11:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1337            LCDDataOut(Data>>4);
   1338            PulseEnable() ;
   1339            LCDDataOut(Data & 0x0F) ;
   1340            PulseEnable();
   1341          }
   1342          

   \                                 In section .far_func.text, align 1, keep-with-next
   1343          void LCDInstrNibble(u8 Instr)
   1344          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1345            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine9
   1346            LCD_RW(0);
   1347            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_16:
   \   00000B AC000000              JPF       ??Subroutine84_0
   1348            PulseEnable();
   1349          }
   1350          

   \                                 In section .far_func.text, align 1, keep-with-next
   1351          void PulseEnable(void)
   1352          {
   1353            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1354             Delay1(1);
   1355            LCD_EN(1);
   1356             Delay1(1);
   1357            LCD_EN(0);
   \                     ??CrossCallReturnLabel_4:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine93_0
   1358             Delay1(1);
   \                     ??CrossCallReturnLabel_276:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1359          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_285:
   \   000006 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_264:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_263:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1360          

   \                                 In section .far_func.text, align 1, keep-with-next
   1361          void LCD_Busy(void)
   1362          {
   1363             //set Port D7 as Input
   1364             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1365             //Set Read
   1366             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine8
   1367             LCD_RS(0);
   \                     ??CrossCallReturnLabel_10:
   \   000013 8D000000              CALLF     ?Subroutine10
   1368             // Read Busy Flag
   1369                timer2=0;
   \                     ??CrossCallReturnLabel_274:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1370             do
   1371             {
   1372             // Enable set
   1373               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1374                Delay1(1);
   1375               LCD_EN(1);
   1376                Delay1(1);
   1377             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_5:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1378                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1379                //Clear read
   1380              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine93_0
   1381             //set Port D7 as Output
   1382             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_282:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1383          
   1384          }
   1385          
   1386          

   \                                 In section .far_func.text, align 1, keep-with-next
   1387          void LCD(u8 data)
   1388           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1389             //  static u8 linet=0;
   1390          
   1391          
   1392               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2674                  JRNE      L:??CrossCallReturnLabel_261
   1393               {
   1394          
   1395                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 272C                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2735                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 273E                  JREQ      L:??LCD_3
   \   000018 2046                  JRA       L:??LCD_4
   1396                   {
   1397                   case 0:
   1398                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1399                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1400                      {
   1401                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1402                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     ?Subroutine7
   1403                         Delay1(1);
   1404                      }
   \                     ??CrossCallReturnLabel_258:
   \   000030 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_36:
   \   000034 25EC                  JRC       L:??LCD_5
   1405                     LCDInstr(0x80 | 0x00);
   \   000036 A680                  LD        A, #0x80
   \   000038 8D000000              CALLF     ?Subroutine73
   1406                     count=0;
   1407                     break;
   \                     ??CrossCallReturnLabel_198:
   \   00003C 2022                  JRA       L:??LCD_4
   1408                   case 1:
   1409                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00003E A6C0                  LD        A, #0xc0
   \   000040 8D000000              CALLF     LCDInstr
   1410                     count=20;
   \   000044 35140000              MOV       L:count, #0x14
   1411                     break;
   \   000048 2016                  JRA       L:??LCD_4
   1412                   case 2:
   1413                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004A A694                  LD        A, #0x94
   \   00004C 8D000000              CALLF     LCDInstr
   1414                     count=40;
   \   000050 35280000              MOV       L:count, #0x28
   1415                     break;
   \   000054 200A                  JRA       L:??LCD_4
   1416                   case 3:
   1417                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000056 A6D4                  LD        A, #0xd4
   \   000058 8D000000              CALLF     LCDInstr
   1418                     count=60;
   \   00005C 353C0000              MOV       L:count, #0x3c
   1419                     break;
   1420                   //default:
   1421                    //  LCDInstr(0x80 |0x40);    //Line 1
   1422                    }
   1423                   line_lcd++;
   \                     ??LCD_4:
   \   000060 C60000                LD        A, L:line_lcd
   \   000063 4C                    INC       A
   \   000064 C70000                LD        L:line_lcd, A
   1424                   if (line_lcd>=5)
   \   000067 A105                  CP        A, #0x5
   \   000069 250F                  JRC       L:??LCD_6
   1425                   {
   1426                    line_lcd=1;   //line >=5
   \   00006B 35010000              MOV       L:line_lcd, #0x1
   1427                    LCDInstr(0x01); //Clear LCD
   \   00006F 8D000000              CALLF     ?Subroutine82
   1428                    Delay1(2500);
   \                     ??CrossCallReturnLabel_227:
   \   000073 AE09C4                LDW       X, #0x9c4
   \   000076 8D000000              CALLF     Delay1
   1429                   }
   1430          
   1431                   Delay1(1);
   \                     ??LCD_6:
   \   00007A 8D000000              CALLF     ??Subroutine91_0
   1432          
   1433          
   1434               }
   1435          
   1436          
   1437               if (count==20)
   \                     ??CrossCallReturnLabel_261:
   \   00007E C60000                LD        A, L:count
   \   000081 A114                  CP        A, #0x14
   \   000083 260A                  JRNE      L:??LCD_7
   1438                {
   1439                  LCDInstr(0x80 | 0x40);
   \   000085 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   000087 8D000000              CALLF     LCDInstr
   1440                  Delay1(1);
   \                     ??LCD_9:
   \   00008B 5F                    CLRW      X
   \   00008C 5C                    INCW      X
   \   00008D 2020                  JRA       ??CrossCallReturnLabel_201
   1441                }
   1442                   else if(count==40)
   \                     ??LCD_7:
   \   00008F A128                  CP        A, #0x28
   \   000091 2604                  JRNE      L:??LCD_10
   1443                  {
   1444                    LCDInstr(0x80 | 0x14);
   \   000093 A694                  LD        A, #0x94
   \   000095 20F0                  JRA       ??LCD_8
   1445                    Delay1(1);
   1446                  }
   1447                    else if(count==60)
   \                     ??LCD_10:
   \   000097 A13C                  CP        A, #0x3c
   \   000099 2608                  JRNE      L:??LCD_11
   1448                    {
   1449                      LCDInstr(0x80 | 0x54);
   \   00009B A6D4                  LD        A, #0xd4
   \   00009D 8D000000              CALLF     ?Subroutine73
   1450                      count=0;
   1451                      Delay1(1);
   \                     ??CrossCallReturnLabel_199:
   \   0000A1 20E8                  JRA       ??LCD_9
   1452                    }
   1453                      else if(count >80)
   \                     ??LCD_11:
   \   0000A3 A151                  CP        A, #0x51
   \   0000A5 250C                  JRC       L:??LCD_12
   1454                        {
   1455                          count=0;
   \   0000A7 725F0000              CLR       L:count
   1456                          LCDInstr(0x01); //Clear LCD
   \   0000AB 8D000000              CALLF     ?Subroutine74
   1457                          Delay1(250);
   1458                        }
   \                     ??CrossCallReturnLabel_201:
   \   0000AF 8D000000              CALLF     Delay1
   1459          
   1460               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B3 B600                  LD        A, S:?b9
   \   0000B5 A11C                  CP        A, #0x1c
   \   0000B7 250B                  JRC       L:??LCD_13
   1461               {
   1462                 LCDData(data);
   \   0000B9 8D000000              CALLF     ?Subroutine7
   1463                  Delay1(1);
   1464                 count++;
   \                     ??CrossCallReturnLabel_259:
   \   0000BD C60000                LD        A, L:count
   \   0000C0 4C                    INC       A
   \   0000C1 C70000                LD        L:count, A
   1465               }
   1466           }
   \                     ??LCD_13:
   \   0000C4 AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine91_0
   \   000004                       ;               // Fall through to label ??Subroutine91_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_265:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1467          

   \                                 In section .far_func.text, align 1, keep-with-next
   1468          void InitDelayTimer2()
   1469          {
   1470             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1471             //Tclock 16/8=2Mhz  /20 10us
   1472                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1473                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1474                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1475                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1476                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1477          
   1478          }
   1479          

   \                                 In section .far_func.text, align 1, keep-with-next
   1480          void InitDelayTimer3()
   1481          {
   1482             //Timer 3 use for 1s Delay
   1483             //Tclock 16000000/1024=15626
   1484                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1485                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1486                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1487                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1488          
   1489               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1490          
   1491          }
   1492          
   1493          
   1494          
   1495          

   \                                 In section .far_func.text, align 1, keep-with-next
   1496          bool DS18_Write(u8 data)
   1497          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1498            disableInterrupts();
   \   000006 9B                    SIM
   1499            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1500            {
   1501             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine12
   1502             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1503             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_22:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_272
   \   00001A 8D000000              CALLF     ?Subroutine18
   1504               //else DS18(0);
   1505             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_272:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1506             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine18
   1507             //Delay1(0);
   1508            }
   \                     ??CrossCallReturnLabel_271:
   \   000029 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_37:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1509            enableInterrupts();
   \   00002F 9A                    RIM
   1510            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1511          
   1512          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine92_0
   \   000002                       ;               // Fall through to label ??Subroutine92_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_194:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1513          
   1514          

   \                                 In section .far_func.text, align 1, keep-with-next
   1515          u8  DS18_Read()
   1516          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1517              //Init DS18b20 data pin as Input
   1518          
   1519            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1520              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1521            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1522            {
   1523              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine12
   1524              Delay_us(1); //Start time slot 4,5 us
   1525              DS18(1);
   \                     ??CrossCallReturnLabel_21:
   \   00000D 8D000000              CALLF     ?Subroutine18
   1526              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_269:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1527              //Delay1(0);
   1528             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_35:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1529              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1530              //  DS18(1);  // Next bit
   1531             // Delay1(0);
   1532          
   1533            }
   \   00003D 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_38:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1534              enableInterrupts();
   \   000043 9A                    RIM
   1535              //Init DS18b20 data pin
   1536             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1537             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1538          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1539          

   \                                 In section .far_func.text, align 1, keep-with-next
   1540          bool DS18_Reset()
   1541          {
   1542             //Init Reset Pulse
   1543              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine70
   1544              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_195:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1545              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine18
   1546              //Delay1(1);
   1547              timer2=0;
   \                     ??CrossCallReturnLabel_270:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1548              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_79:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_33:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1549              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_80:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1550              {
   1551                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine39
   1552                return FALSE;
   \                     ??CrossCallReturnLabel_89:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1553              }
   1554          
   1555              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1556               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_81:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_34:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1557                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_82:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1558                 {
   1559                  hardware.ds18B20=0;
   1560                  return FALSE;
   1561                 }
   1562          
   1563              // Delay1(10);
   1564              //Delay1(20);    //25=524us
   1565               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine40
   1566              return TRUE;
   \                     ??CrossCallReturnLabel_91:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1567          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1568          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1569          u8 temperature ()
   1570          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1571          
   1572             //Init Reset Pulse
   1573               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_177:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1574             //Skip ROM Command 0xCC
   1575              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine62
   1576             //Function command  CONVERT T [44h]
   1577              DS18_Write(0x44);
   1578              //Wait util end convert
   1579              timer2=0;
   1580               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_172:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_84:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_172
   1581                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1582               //u8 temp8=timer2;
   1583              //Init Reset Pulse
   1584              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_178:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1585              // Skip ROM Command 0xCC
   1586              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine61
   1587              //Function command READ SCRATCHPAD [BEh]
   1588              DS18_Write(0xBE);
   1589               u8 temp1=DS18_Read();
   1590               u8 temp2=DS18_Read();
   1591              DS18_Reset();
   \                     ??CrossCallReturnLabel_170:
   \   000033 8D000000              CALLF     DS18_Reset
   1592                u16 result = temp2*256+temp1;
   1593                temp1= (u8)(result>>3);
   1594               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_3:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1595          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     ?Subroutine81
   \                     ??CrossCallReturnLabel_221:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     ?Subroutine81
   \                     ??CrossCallReturnLabel_220:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 90BF00                LDW       S:?w0, Y
   \   00000F 72BB0000              ADDW      X, S:?w0
   \   000013 54                    SRLW      X
   \   000014 54                    SRLW      X
   \   000015 54                    SRLW      X
   \   000016 9F                    LD        A, XL
   \   000017 87                    RETF
   1596          

   \                                 In section .far_func.text, align 1, keep-with-next
   1597          bool Read_DS18()
   1598          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1599          
   1600             //Init Reset Pulse
   1601               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_175:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1602             //Skip ROM Command 0xCC
   1603              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine62
   1604             //Function command  CONVERT T [44h]
   1605              DS18_Write(0x44);
   1606              //Wait util end convert
   1607              timer2=0;
   1608               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_171:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_83:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_171
   1609                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1610               //u8 temp8=timer2;
   1611              //Init Reset Pulse
   1612              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_176:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1613              // Skip ROM Command 0xCC
   1614              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine61
   1615              //Function command READ SCRATCHPAD [BEh]
   1616              DS18_Write(0xBE);
   1617               u8 temp1=DS18_Read();
   1618               u8 temp2=DS18_Read();
   1619               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_169:
   \   000033 8D000000              CALLF     ?Subroutine66
   1620               u8 temp4=DS18_Read();
   1621               u8 temp5=DS18_Read();
   1622               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_187:
   \   000037 8D000000              CALLF     ?Subroutine66
   1623               u8 temp7=DS18_Read();
   1624               u8 temp8=DS18_Read();
   1625               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_186:
   \   00003B 8D000000              CALLF     DS18_Read
   1626          
   1627               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1628          
   1629                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1630                result2=0;
   \   000047 725F0000              CLR       L:result2
   1631                u16 result = temp2*256+temp1;
   1632                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_2:
   \   00004F C70000                LD        L:result1, A
   1633                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1634                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1635          
   1636          
   1637                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1638               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1639               //line_lcd=1;
   1640               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1641               // while (!key_ok_on());
   1642          
   1643               //u8 temp3=DS18_Read();
   1644          
   1645              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1646          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1647          

   \                                 In section .far_func.text, align 1, keep-with-next
   1648          bool DS18Set ()
   1649          {
   1650               //Init Reset Pulse
   1651              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_173:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1652             //Skip ROM Command 0xCC
   1653              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine81
   1654             //Function command  WRITE SCRATCHPAD 0x4E
   1655              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_223:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1656             //Write 3 bytes last is config reg
   1657              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1658              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1659              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1660          
   1661             //Init Reset Pulse
   1662              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_174:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1663              //Skip ROM Command 0xCC
   1664              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine81
   1665              //Function   Store in Conf Reg
   1666              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_222:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1667          
   1668          
   1669          
   1670          
   1671          
   1672          
   1673            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1674          }
   1675          
   1676          
   1677          
   1678          
   1679          
   1680          
   1681          
   1682          

   \                                 In section .far_func.text, align 1, keep-with-next
   1683          void Delay1(u16 Delay)
   1684          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1685              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1686            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1687            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1688          }
   \   00000D 87                    RETF
   1689          

   \                                 In section .far_func.text, align 1, keep-with-next
   1690           void Delay2(u16 Delay)
   1691          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1692            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1693            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1694          }
   \   00000D 87                    RETF
   1695          
   1696          

   \                                 In section .far_func.text, align 1, keep-with-next
   1697          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1698          {
   1699            //disableInterrupts();
   1700            do
   1701              {
   1702                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1703                nop();
   \   000001 9D                    NOP
   1704              }
   1705              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1706            //enableInterrupts();
   1707          }
   \   000005 87                    RETF
   1708          
   1709          

   \                                 In section .far_func.text, align 1, keep-with-next
   1710          void Display_Line(char* line)
   1711          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1712            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1713            u8 count;
   1714              //Set Cursor to First Line
   1715             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1716             count=0;
   \   000010 3F00                  CLR       S:?b10
   1717             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine91_0
   1718            do
   1719            {
   1720          
   1721              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_262:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1722               {
   1723                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine7
   1724                  Delay1(1);
   1725                 count++;
   \                     ??CrossCallReturnLabel_260:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1726               }
   1727               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1728            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_262
   1729          
   1730             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1731          
   1732          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1733          

   \                                 In section .far_func.text, align 1, keep-with-next
   1734          void Rotate_Line( char * line)
   1735          {
   1736          
   1737             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1738             char temp_next;
   1739          
   1740             do
   1741             {
   1742                temp_next=*(line+1);
   1743               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1744                //line++;
   1745                //temp_next=*line;
   1746               //*line=*line++;
   1747             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1748             line--;
   1749             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1750          
   1751          }
   \   000012 87                    RETF
   1752          

   \                                 In section .far_func.text, align 1, keep-with-next
   1753          void Clear_Line1 ()
   1754          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1755               //Set Cursor to First Line
   1756             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine6
   1757             count=0;
   1758             Delay1(1);
   1759              u8 count=0;
   1760             do
   1761             {
   1762               LCDData(' ');
   \                     ??CrossCallReturnLabel_9:
   \   000009 8D000000              CALLF     ?Subroutine5
   1763                  Delay1(1);
   1764                  count++;
   1765             }while (count<8);
   \                     ??CrossCallReturnLabel_7:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_9
   1766          
   1767          
   1768          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_200:
   \   000004 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_267:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_266:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1769          

   \                                 In section .far_func.text, align 1, keep-with-next
   1770          void Clear_Line2 ()
   1771          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1772               //Set Cursor to Second  Line
   1773             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine6
   1774             count=0;
   1775             Delay1(1);
   1776              u8 count=0;
   1777             do
   1778             {
   1779               LCDData(' ');
   \                     ??CrossCallReturnLabel_8:
   \   000009 8D000000              CALLF     ?Subroutine5
   1780                  Delay1(1);
   1781                  count++;
   1782             }while (count<8);
   \                     ??CrossCallReturnLabel_6:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_8
   1783          
   1784          
   1785          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1786          
   1787          
   1788          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1789          void FirstMenu()
   1790          {
   1791                // Clear Display
   1792              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_202:
   \   000004 8D000000              CALLF     ??Subroutine85_0
   1793              Delay1(250);
   1794          
   1795                line_lcd=0;
   1796                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_236:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1797                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine29
   1798                 if (!status.manu)
   \                     ??CrossCallReturnLabel_57:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1799                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1800                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1801          
   1802                 do
   1803                 {
   1804                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     ?Subroutine80
   1805          
   1806                  if(button==2)      // Plus Button
   \                     ??CrossCallReturnLabel_219:
   \   000025 A102                  CP        A, #0x2
   \   000027 262C                  JRNE      L:??FirstMenu_3
   1807                  {
   1808                    if(status.manu) status.manu=0;
   \   000029 CE0000                LDW       X, L:status
   \   00002C 9F                    LD        A, XL
   \   00002D A401                  AND       A, #0x1
   \   00002F 2708                  JREQ      L:??FirstMenu_4
   \   000031 CE0000                LDW       X, L:status
   \   000034 01                    RRWA      X, A
   \   000035 A4FE                  AND       A, #0xfe
   \   000037 2006                  JRA       ??FirstMenu_5
   1809                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   000039 CE0000                LDW       X, L:status
   \   00003C 01                    RRWA      X, A
   \   00003D AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   00003F 02                    RLWA      X, A
   \   000040 CF0000                LDW       L:status, X
   1810                    line_lcd=1;
   \   000043 8D000000              CALLF     ?Subroutine29
   1811                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_58:
   \   000047 2705                  JREQ      L:??FirstMenu_6
   \   000049 AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004C 2003                  JRA       ??FirstMenu_7
   1812                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   00004E AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   000051 8D000000              CALLF     printf
   1813                  }
   1814          
   1815                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000055 C60000                LD        A, L:button
   \   000058 A103                  CP        A, #0x3
   \   00005A 2705                  JREQ      L:??FirstMenu_8
   \   00005C C60000                LD        A, L:button
   \   00005F 2604                  JRNE      L:??FirstMenu_9
   1816                  {
   1817                    SaveStatus();
   \                     ??FirstMenu_8:
   \   000061 AC000000              JPF       SaveStatus
   1818                    return;
   1819                  }
   1820          
   1821          
   1822                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000065 A101                  CP        A, #0x1
   \   000067 26B8                  JRNE      L:??FirstMenu_2
   1823          
   1824                   SaveStatus();
   \   000069 8D000000              CALLF     SaveStatus
   1825                   button=0;
   \   00006D 725F0000              CLR       L:button
   1826                   ProgramMenu();
   \   000071 AC000000              JPF       ProgramMenu
   1827          
   1828          
   1829          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_214:
   \   000008 87                    RETF
   1830          
   1831          
   1832          

   \                                 In section .far_func.text, align 1, keep-with-next
   1833          void ProgramMenu()
   1834          {
   \                     ProgramMenu:
   \   000000 8D000000              CALLF     L:?push_l3
   \   000004 8D000000              CALLF     L:?push_w4
   \   000008 3B0000                PUSH      S:?b10
   1835              u8 program_number=0;
   \   00000B 3F00                  CLR       S:?b10
   1836             do
   1837             {
   1838               sprintf(line1,"\nP%d%s",program_number,Day_Week[programpoint[program_number].day]);
   \                     ??ProgramMenu_0:
   \   00000D 5F                    CLRW      X
   \   00000E 41                    EXG       A, XL
   \   00000F B600                  LD        A, S:?b10
   \   000011 41                    EXG       A, XL
   \   000012 BF00                  LDW       S:?w7, X
   \   000014 AE0005                LDW       X, #0x5
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 BE00                  LDW       X, S:?w7
   \   00001B 8D000000              CALLF     L:?mul16_x_x_w0
   \   00001F 1C0000                ADDW      X, #programpoint
   \   000022 BF00                  LDW       S:?w4, X
   \   000024 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_163:
   \   000028 89                    PUSHW     X
   \   000029 8D000000              CALLF     L:?push_w7
   \   00002D 90AE0000              LDW       Y, #`?<Constant "\\nP%d%s">`
   \   000031 AE0000                LDW       X, #line1
   \   000034 8D000000              CALLF     sprintf
   \   000038 5B04                  ADD       SP, #0x4
   1839               sprintf(line2,"\n%s",Day_Week[programpoint[program_number].day]);
   \   00003A 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_164:
   \   00003E 89                    PUSHW     X
   \   00003F 90AE0000              LDW       Y, #`?<Constant "\\n%s">`
   \   000043 AE0000                LDW       X, #line2
   \   000046 8D000000              CALLF     sprintf
   \   00004A 5B02                  ADD       SP, #0x2
   1840               Clear_Line2();
   \   00004C 8D000000              CALLF     Clear_Line2
   1841               Clear_Line1();
   \   000050 8D000000              CALLF     ?Subroutine60
   1842               line_lcd=0;
   1843               printf(line1);
   \                     ??CrossCallReturnLabel_166:
   \   000054 AE0000                LDW       X, #line1
   \   000057 8D000000              CALLF     ?Subroutine43
   1844               line_lcd=1;
   1845               printf(line2);
   \                     ??CrossCallReturnLabel_102:
   \   00005B AE0000                LDW       X, #line2
   \   00005E 8D000000              CALLF     printf
   1846                 do
   1847                 {
   1848                   pressKey();
   \                     ??ProgramMenu_1:
   \   000062 8D000000              CALLF     ?Subroutine80
   1849          
   1850                    if(button==2)   //Plus
   \                     ??CrossCallReturnLabel_218:
   \   000066 A102                  CP        A, #0x2
   \   000068 2625                  JRNE      L:??ProgramMenu_2
   1851                    {
   1852                       programpoint[program_number].day++;
   \   00006A 92C600                LD        A, [S:?w4.w]
   \   00006D 4C                    INC       A
   \   00006E 92C700                LD        [S:?w4.w], A
   1853                        if( programpoint[program_number].day >=9) programpoint[program_number].day=0;
   \   000071 A109                  CP        A, #0x9
   \   000073 2504                  JRC       L:??ProgramMenu_3
   \   000075 4F                    CLR       A
   \   000076 92C700                LD        [S:?w4.w], A
   1854                          Clear_Line2();
   \                     ??ProgramMenu_3:
   \   000079 8D000000              CALLF     Clear_Line2
   1855                           line_lcd=1;
   \   00007D 35010000              MOV       L:line_lcd, #0x1
   1856                           printf("\n%s",Day_Week[programpoint[program_number].day]);
   \   000081 8D000000              CALLF     ?Subroutine59
   1857                    }
   \                     ??CrossCallReturnLabel_165:
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B02                  ADD       SP, #0x2
   1858          
   1859                    if(button==3 || button==0 ) // Minus
   \                     ??ProgramMenu_2:
   \   00008F C60000                LD        A, L:button
   \   000092 A103                  CP        A, #0x3
   \   000094 2705                  JREQ      L:??ProgramMenu_4
   \   000096 C60000                LD        A, L:button
   \   000099 260B                  JRNE      L:??ProgramMenu_5
   1860                    {
   1861                       SaveProgram();
   \                     ??ProgramMenu_4:
   \   00009B 8D000000              CALLF     SaveProgram
   1862                        button=0;
   \   00009F 725F0000              CLR       L:button
   1863                       return;
   \   0000A3 CC0000                JP        L:??ProgramMenu_6
   1864                    }
   1865          
   1866          
   1867                 } while (button != 1 && button != 0);
   \                     ??ProgramMenu_5:
   \   0000A6 A101                  CP        A, #0x1
   \   0000A8 26B8                  JRNE      L:??ProgramMenu_1
   1868          
   1869                     // Test programm is Active ?
   1870                  if( programpoint[program_number].day !=0)
   \   0000AA 923D00                TNZ       [S:?w4.w]
   \   0000AD 2603                  JRNE      ??lb_3
   \   0000AF CC0000                JP        L:??ProgramMenu_7
   1871                  {
   1872                        //Set On Hour
   1873                     Clear_Line1();
   \                     ??lb_3:
   \   0000B2 8D000000              CALLF     ?Subroutine60
   1874                     line_lcd=0;
   1875                     printf("\nP%d%s",program_number," On");
   \                     ??CrossCallReturnLabel_167:
   \   0000B6 4B00                  PUSH      #BYTE1(`?<Constant " On">`)
   \   0000B8 4B00                  PUSH      #BYTE2(`?<Constant " On">`)
   \   0000BA 8D000000              CALLF     L:?push_w7
   \   0000BE AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   0000C1 8D000000              CALLF     printf
   \   0000C5 5B04                  ADD       SP, #0x4
   1876                     timer3=0;
   \   0000C7 5F                    CLRW      X
   \   0000C8 CF0000                LDW       L:timer3, X
   1877                     Clear_Line2();
   \   0000CB 8D000000              CALLF     Clear_Line2
   \   0000CF BE00                  LDW       X, S:?w4
   \   0000D1 1C0002                ADDW      X, #0x2
   \   0000D4 BF00                  LDW       S:?w6, X
   1878                     do
   1879                      {
   1880                       line_lcd=1;
   \                     ??ProgramMenu_8:
   \   0000D6 35010000              MOV       L:line_lcd, #0x1
   1881                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   0000DA C60000                LD        A, L:blink_flag
   \   0000DD 2718                  JREQ      L:??ProgramMenu_9
   \   0000DF 92C600                LD        A, [S:?w6.w]
   \   0000E2 5F                    CLRW      X
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 BE00                  LDW       X, S:?w4
   \   0000E7 5C                    INCW      X
   \   0000E8 F6                    LD        A, (X)
   \   0000E9 5F                    CLRW      X
   \   0000EA 97                    LD        XL, A
   \   0000EB 89                    PUSHW     X
   \   0000EC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000EF 8D000000              CALLF     printf
   \   0000F3 5B04                  ADD       SP, #0x4
   \   0000F5 200F                  JRA       L:??ProgramMenu_10
   1882                         else printf("\n  :%02d",programpoint[program_number].onminute);
   \                     ??ProgramMenu_9:
   \   0000F7 92C600                LD        A, [S:?w6.w]
   \   0000FA 5F                    CLRW      X
   \   0000FB 97                    LD        XL, A
   \   0000FC 89                    PUSHW     X
   \   0000FD AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   000100 8D000000              CALLF     printf
   \   000104 5B02                  ADD       SP, #0x2
   1883                       programpoint[program_number].onhour =adj(0,23,programpoint[program_number].onhour);
   \                     ??ProgramMenu_10:
   \   000106 BE00                  LDW       X, S:?w4
   \   000108 5C                    INCW      X
   \   000109 F6                    LD        A, (X)
   \   00010A 8D000000              CALLF     ?Subroutine47
   1884                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_128:
   \   00010E 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_240:
   \   000112 BE00                  LDW       X, S:?w4
   \   000114 5C                    INCW      X
   \   000115 F7                    LD        (X), A
   \   000116 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_133:
   \   00011A 2406                  JRNC      L:??ProgramMenu_11
   \   00011C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_121:
   \   000120 27B4                  JREQ      L:??ProgramMenu_8
   1885          
   1886                        //Set On Minute
   1887                      //Clear_Line1();
   1888                      //line_lcd=0;
   1889                      //printf("\nMin On>");
   1890                     // printf("\nP%d%s",program_number," On");
   1891                      timer3=0;
   \                     ??ProgramMenu_11:
   \   000122 5F                    CLRW      X
   \   000123 CF0000                LDW       L:timer3, X
   1892                    do
   1893                      {
   1894                       line_lcd=1;
   \                     ??ProgramMenu_12:
   \   000126 35010000              MOV       L:line_lcd, #0x1
   \   00012A BE00                  LDW       X, S:?w4
   \   00012C 5C                    INCW      X
   \   00012D F6                    LD        A, (X)
   \   00012E 5F                    CLRW      X
   \   00012F 97                    LD        XL, A
   \   000130 9093                  LDW       Y, X
   \   000132 C60000                LD        A, L:blink_flag
   \   000135 2712                  JREQ      L:??ProgramMenu_13
   1895                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   000137 92C600                LD        A, [S:?w6.w]
   \   00013A 97                    LD        XL, A
   \   00013B 89                    PUSHW     X
   \   00013C 9089                  PUSHW     Y
   \   00013E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000141 8D000000              CALLF     printf
   \   000145 5B04                  ADD       SP, #0x4
   \   000147 200B                  JRA       L:??ProgramMenu_14
   1896                         else  printf("\n%02d:  ",programpoint[program_number].onhour);
   \                     ??ProgramMenu_13:
   \   000149 9089                  PUSHW     Y
   \   00014B AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   00014E 8D000000              CALLF     printf
   \   000152 5B02                  ADD       SP, #0x2
   1897                           programpoint[program_number].onminute=adj(0,59,programpoint[program_number].onminute);
   \                     ??ProgramMenu_14:
   \   000154 92C600                LD        A, [S:?w6.w]
   \   000157 B700                  LD        S:?b1, A
   \   000159 353B0000              MOV       S:?b0, #0x3b
   \   00015D 8D000000              CALLF     ?Subroutine31
   1898                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_64:
   \   000161 2406                  JRNC      L:??ProgramMenu_15
   \   000163 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_122:
   \   000167 27BD                  JREQ      L:??ProgramMenu_12
   1899          
   1900          
   1901                     // Set Off Hour
   1902          
   1903                     Clear_Line1();
   \                     ??ProgramMenu_15:
   \   000169 8D000000              CALLF     ?Subroutine60
   1904                     line_lcd=0;
   1905                     printf("\nP%d%s",program_number," Off");
   \                     ??CrossCallReturnLabel_168:
   \   00016D 4B00                  PUSH      #BYTE1(`?<Constant " Off">`)
   \   00016F 4B00                  PUSH      #BYTE2(`?<Constant " Off">`)
   \   000171 8D000000              CALLF     L:?push_w7
   \   000175 AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   000178 8D000000              CALLF     printf
   \   00017C 5B04                  ADD       SP, #0x4
   1906                     timer3=0;
   \   00017E 5F                    CLRW      X
   \   00017F CF0000                LDW       L:timer3, X
   \   000182 BE00                  LDW       X, S:?w4
   \   000184 1C0003                ADDW      X, #0x3
   \   000187 BF00                  LDW       S:?w6, X
   \   000189 BE00                  LDW       X, S:?w4
   \   00018B 1C0004                ADDW      X, #0x4
   \   00018E BF00                  LDW       S:?w4, X
   1907                     do
   1908                      {
   1909                       line_lcd=1;
   \                     ??ProgramMenu_16:
   \   000190 35010000              MOV       L:line_lcd, #0x1
   1910                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   000194 C60000                LD        A, L:blink_flag
   \   000197 2716                  JREQ      L:??ProgramMenu_17
   \   000199 92C600                LD        A, [S:?w4.w]
   \   00019C 5F                    CLRW      X
   \   00019D 97                    LD        XL, A
   \   00019E 89                    PUSHW     X
   \   00019F 92C600                LD        A, [S:?w6.w]
   \   0001A2 97                    LD        XL, A
   \   0001A3 89                    PUSHW     X
   \   0001A4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001A7 8D000000              CALLF     printf
   \   0001AB 5B04                  ADD       SP, #0x4
   \   0001AD 200F                  JRA       L:??ProgramMenu_18
   1911                         else printf("\n  :%02d",programpoint[program_number].offminute);
   \                     ??ProgramMenu_17:
   \   0001AF 92C600                LD        A, [S:?w4.w]
   \   0001B2 5F                    CLRW      X
   \   0001B3 97                    LD        XL, A
   \   0001B4 89                    PUSHW     X
   \   0001B5 AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0001B8 8D000000              CALLF     printf
   \   0001BC 5B02                  ADD       SP, #0x2
   1912                       programpoint[program_number].offhour =adj(0,23,programpoint[program_number].offhour);
   \                     ??ProgramMenu_18:
   \   0001BE 92C600                LD        A, [S:?w6.w]
   \   0001C1 8D000000              CALLF     ?Subroutine47
   1913                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_129:
   \   0001C5 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_65:
   \   0001C9 2406                  JRNC      L:??ProgramMenu_19
   \   0001CB 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_123:
   \   0001CF 27BF                  JREQ      L:??ProgramMenu_16
   1914          
   1915                    //Set Off Minute
   1916          
   1917                    timer3=0;
   \                     ??ProgramMenu_19:
   \   0001D1 5F                    CLRW      X
   \   0001D2 CF0000                LDW       L:timer3, X
   1918                    do
   1919                      {
   1920                       line_lcd=1;
   \                     ??ProgramMenu_20:
   \   0001D5 35010000              MOV       L:line_lcd, #0x1
   \   0001D9 92C600                LD        A, [S:?w6.w]
   \   0001DC 5F                    CLRW      X
   \   0001DD 97                    LD        XL, A
   \   0001DE 9093                  LDW       Y, X
   \   0001E0 C60000                LD        A, L:blink_flag
   \   0001E3 2712                  JREQ      L:??ProgramMenu_21
   1921                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   0001E5 92C600                LD        A, [S:?w4.w]
   \   0001E8 97                    LD        XL, A
   \   0001E9 89                    PUSHW     X
   \   0001EA 9089                  PUSHW     Y
   \   0001EC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001EF 8D000000              CALLF     printf
   \   0001F3 5B04                  ADD       SP, #0x4
   \   0001F5 200B                  JRA       L:??ProgramMenu_22
   1922                         else  printf("\n%02d:  ",programpoint[program_number].offhour);
   \                     ??ProgramMenu_21:
   \   0001F7 9089                  PUSHW     Y
   \   0001F9 AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   0001FC 8D000000              CALLF     printf
   \   000200 5B02                  ADD       SP, #0x2
   1923                           programpoint[program_number].offminute=adj(0,59,programpoint[program_number].offminute);
   \                     ??ProgramMenu_22:
   \   000202 92C600                LD        A, [S:?w4.w]
   \   000205 8D000000              CALLF     ?Subroutine32
   1924                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_245:
   \   000209 92C700                LD        [S:?w4.w], A
   \   00020C 8D000000              CALLF     ?Subroutine48
   1925          
   1926                  }
   \                     ??CrossCallReturnLabel_134:
   \   000210 2406                  JRNC      L:??ProgramMenu_7
   \   000212 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_124:
   \   000216 27BD                  JREQ      L:??ProgramMenu_20
   1927          
   1928          
   1929                   program_number++;
   \                     ??ProgramMenu_7:
   \   000218 B600                  LD        A, S:?b10
   \   00021A 4C                    INC       A
   \   00021B B700                  LD        S:?b10, A
   1930          
   1931          
   1932          
   1933          
   1934          
   1935          
   1936          
   1937          
   1938                 } while ( (program_number < 8) && (button!=0));
   \   00021D A108                  CP        A, #0x8
   \   00021F 2408                  JRNC      L:??ProgramMenu_23
   \   000221 C60000                LD        A, L:button
   \   000224 2703                  JREQ      ??lb_4
   \   000226 CC0000                JP        L:??ProgramMenu_0
   1939          
   1940                   SaveProgram();
   \                     ??lb_4:
   \                     ??ProgramMenu_23:
   \   000229 8D000000              CALLF     SaveProgram
   1941          
   1942          
   1943          }
   \                     ??ProgramMenu_6:
   \   00022D 320000                POP       S:?b10
   \   000230 8D000000              CALLF     L:?pop_w4
   \   000234 8D000000              CALLF     L:?pop_l3
   \   000238 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     Clear_Line1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 5F                    CLRW      X
   \   000004 97                    LD        XL, A
   \   000005 58                    SLLW      X
   \   000006 DE0000                LDW       X, (L:Day_Week,X)
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 8D000000              CALLF     printf
   \   000004 35010000              MOV       L:line_lcd, #0x1
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     adj
   \   000005 92C700                LD        [S:?w6.w], A
   \   000008 CE0000                LDW       X, L:timer3
   \   00000B A3000B                CPW       X, #0xb
   \   00000E 87                    RETF
   1944          
   1945          
   1946          

   \                                 In section .far_func.text, align 1, keep-with-next
   1947          void Menu (void)
   1948          {
   1949           // Clear Display
   1950              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine19
   1951              Delay1(250);
   1952              //u8 key;
   1953           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1954              Wait for Plus,Minius or OK
   1955              If plus next option from Menu on the end EXIT
   1956              If minus previous option from Menu  on the end EXIT
   1957              If OK enter to menu option
   1958              If time out about 10s exit from Menu
   1959           */
   1960          
   1961          
   1962          
   1963          
   1964          
   1965          
   1966              do {
   1967          
   1968          First_Menu:
   1969              line_lcd=0;
   \                     ??CrossCallReturnLabel_32:
   \   000004 725F0000              CLR       L:line_lcd
   1970              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     ?Subroutine43
   1971              line_lcd=1;
   1972              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_99:
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
   1973               pressKey();
   \   000023 8D000000              CALLF     ?Subroutine54
   1974              switch (button)
   \                     ??CrossCallReturnLabel_151:
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   1975                  {
   1976                  case 1: goto Second_Menu ;
   1977                   break;
   1978                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   1979                   break;
   \   000039 CC0000                JP        L:??Menu_3
   1980                  case 3: goto Exit_Menu;
   1981                   break;
   1982                  }
   1983                  break; //Exit Menu
   1984          
   1985          
   1986          Second_Menu:
   1987              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   1988              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     printf
   1989              line_lcd=1;
   \   000047 8D000000              CALLF     ?Subroutine27
   1990              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_54:
   \   00004B 89                    PUSHW     X
   \   00004C C60000                LD        A, L:daily_hour_off
   \   00004F 97                    LD        XL, A
   \   000050 89                    PUSHW     X
   \   000051 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000054 8D000000              CALLF     printf
   \   000058 5B04                  ADD       SP, #0x4
   1991                pressKey();
   \   00005A 8D000000              CALLF     ?Subroutine54
   1992                switch (button)
   \                     ??CrossCallReturnLabel_152:
   \   00005E 2710                  JREQ      L:??Menu_4
   \   000060 4A                    DEC       A
   \   000061 2706                  JREQ      L:??Menu_5
   \   000063 4A                    DEC       A
   \   000064 279E                  JREQ      L:??CrossCallReturnLabel_32
   \   000066 CC0000                JP        L:??Menu_3
   1993                  {
   1994                  case 1: goto Third_Menu ;
   1995                   break;
   1996                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   000069 8D000000              CALLF     Set_Timer_Off
   1997                   break;
   \   00006D CC0000                JP        L:??Menu_3
   1998                  case 3: goto First_Menu;
   1999                   break;
   2000                  }
   2001               break; //Exit Menu
   2002          
   2003          Third_Menu:
   2004                line_lcd=0;
   \                     ??Menu_4:
   \   000070 725F0000              CLR       L:line_lcd
   2005              printf("\nMonthly ");
   \   000074 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000077 8D000000              CALLF     ?Subroutine43
   2006              line_lcd=1;
   2007              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \                     ??CrossCallReturnLabel_100:
   \   00007B C60000                LD        A, L:monthly_date
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:monthly_month
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:monthly_year
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00008E 8D000000              CALLF     printf
   \   000092 5B06                  ADD       SP, #0x6
   2008                pressKey();
   \   000094 8D000000              CALLF     ?Subroutine54
   2009                switch (button)
   \                     ??CrossCallReturnLabel_153:
   \   000098 2738                  JREQ      L:??Menu_6
   \   00009A 4A                    DEC       A
   \   00009B 2706                  JREQ      L:??Menu_7
   \   00009D 4A                    DEC       A
   \   00009E 279C                  JREQ      L:??Menu_0
   \   0000A0 CC0000                JP        L:??Menu_3
   2010                  {
   2011                  case 1: goto Fourth_Menu;
   2012                   break;
   2013                  case 2:
   2014                    {
   2015                     setData();
   \                     ??Menu_7:
   \   0000A3 8D000000              CALLF     setData
   2016                     monthly_year=y;
   \   0000A7 C60000                LD        A, L:`y`
   \   0000AA C70000                LD        L:monthly_year, A
   2017                     monthly_month=m;
   \   0000AD C60000                LD        A, L:m
   \   0000B0 C70000                LD        L:monthly_month, A
   2018                     monthly_date=d;
   \   0000B3 C60000                LD        A, L:d
   \   0000B6 C70000                LD        L:monthly_date, A
   2019                     status.monthly=1;
   \   0000B9 CE0000                LDW       X, L:status
   \   0000BC 01                    RRWA      X, A
   \   0000BD AA10                  OR        A, #0x10
   \   0000BF 8D000000              CALLF     ?Subroutine77
   2020                     status.daily=0;  // Disable Daily Alarm On date enable it
   \                     ??CrossCallReturnLabel_208:
   \   0000C3 A4F7                  AND       A, #0xf7
   \   0000C5 8D000000              CALLF     ?Subroutine77
   2021                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_209:
   \   0000C9 A4FD                  AND       A, #0xfd
   \   0000CB 8D000000              CALLF     ?Subroutine1
   2022                     // Save Status and Date in EEPROM
   2023                     EEPROM_INIT();
   2024                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2025                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2026                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   2027                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   2028                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   2029                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2030                     break;
   \                     ??CrossCallReturnLabel_0:
   \   0000CF CC0000                JP        L:??Menu_3
   2031                    }
   2032                  case 3: goto Second_Menu ;
   2033                   break;
   2034                  }
   2035               break; //Exit Menu
   2036          
   2037          
   2038          Fourth_Menu:
   2039              line_lcd=0;
   \                     ??Menu_6:
   \   0000D2 725F0000              CLR       L:line_lcd
   2040              printf("\nClock   ");
   \   0000D6 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000D9 8D000000              CALLF     ?Subroutine24
   2041              line_lcd=1;
   2042              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_253:
   \   0000DD 89                    PUSHW     X
   \   0000DE C60000                LD        A, L:minutes
   \   0000E1 97                    LD        XL, A
   \   0000E2 89                    PUSHW     X
   \   0000E3 C60000                LD        A, L:hours
   \   0000E6 97                    LD        XL, A
   \   0000E7 89                    PUSHW     X
   \   0000E8 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EB 8D000000              CALLF     printf
   \   0000EF 5B06                  ADD       SP, #0x6
   2043                pressKey();
   \   0000F1 8D000000              CALLF     ?Subroutine54
   2044                switch (button)
   \                     ??CrossCallReturnLabel_154:
   \   0000F5 2711                  JREQ      L:??Menu_8
   \   0000F7 4A                    DEC       A
   \   0000F8 2708                  JREQ      L:??Menu_9
   \   0000FA 4A                    DEC       A
   \   0000FB 2603                  JRNE      ??lb_1
   \   0000FD CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   000100 2056                  JRA       L:??Menu_3
   2045                  {
   2046                  case 1: goto Fifth_Menu ;
   2047                   break;
   2048                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000102 8D000000              CALLF     Set_Clock
   2049                   break;
   \   000106 2050                  JRA       L:??Menu_3
   2050                  case 3: goto Third_Menu;
   2051                   break;
   2052                  }
   2053               break; //Exit Menu
   2054          
   2055          
   2056          Fifth_Menu:
   2057              line_lcd=0;
   \                     ??Menu_8:
   \   000108 725F0000              CLR       L:line_lcd
   2058              printf("\nDate    ");
   \   00010C AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   00010F 8D000000              CALLF     printf
   2059              line_lcd=1;
   \   000113 8D000000              CALLF     ?Subroutine25
   2060              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_48:
   \   000117 89                    PUSHW     X
   \   000118 C60000                LD        A, L:month
   \   00011B 97                    LD        XL, A
   \   00011C 89                    PUSHW     X
   \   00011D C60000                LD        A, L:year
   \   000120 97                    LD        XL, A
   \   000121 89                    PUSHW     X
   \   000122 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000125 8D000000              CALLF     printf
   \   000129 5B06                  ADD       SP, #0x6
   2061                pressKey();
   \   00012B 8D000000              CALLF     ?Subroutine54
   2062                switch (button)
   \                     ??CrossCallReturnLabel_155:
   \   00012F 2708                  JREQ      L:??Menu_2
   \   000131 4A                    DEC       A
   \   000132 27CE                  JREQ      L:??Menu_9
   \   000134 4A                    DEC       A
   \   000135 279B                  JREQ      L:??Menu_6
   \   000137 201F                  JRA       L:??Menu_3
   2063                  {
   2064                  case 1: goto Exit_Menu ;
   2065                   break;
   2066                  case 2: Set_Clock();
   2067                   break;
   2068                  case 3: goto Fourth_Menu;
   2069                   break;
   2070                  }
   2071               break; //Exit Menu
   2072          
   2073          
   2074          Exit_Menu:
   2075              line_lcd=0;
   \                     ??Menu_2:
   \   000139 725F0000              CLR       L:line_lcd
   2076              printf("\nExit OK ");
   \   00013D AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000140 8D000000              CALLF     ?Subroutine43
   2077              line_lcd=1;
   2078              printf("\n+/-     ");
   \                     ??CrossCallReturnLabel_101:
   \   000144 AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   000147 8D000000              CALLF     printf
   2079                 pressKey();
   \   00014B 8D000000              CALLF     ?Subroutine54
   2080                switch (button)
   2081                  {
   2082                  case 1: goto First_Menu;
   2083                   break;
   2084                  case 2:
   2085                   break;
   2086                  case 3: goto Fifth_Menu;
   2087                   break;
   2088                  }
   2089                 break; //Exit Menu
   2090              }    while (1);
   \                     ??CrossCallReturnLabel_156:
   \   00014F 2603                  JRNE      ??lb_2
   \   000151 CC0000                JP        L:??CrossCallReturnLabel_32
   \                     ??lb_2:
   \   000154 A002                  SUB       A, #0x2
   \   000156 27B0                  JREQ      L:??Menu_8
   2091              //exit:
   2092             Clear_Line1();
   \                     ??Menu_3:
   \   000158 8D000000              CALLF     Clear_Line1
   2093             Clear_Line2();
   \   00015C AC000000              JPF       Clear_Line2
   2094          
   2095          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     ?Subroutine80
   \                     ??CrossCallReturnLabel_217:
   \   000004 4A                    DEC       A
   \   000005 87                    RETF
   2096          
   2097          

   \                                 In section .far_func.text, align 1, keep-with-next
   2098          void pressKey(void)
   2099          {
   2100             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2101             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2102             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine35
   2103             lcdLedTimer=LCDLEDON;
   2104             do
   2105             {
   2106                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_74:
   \   00000C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_111:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2107                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2108                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2109             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_130:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_74
   2110          
   2111              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2112          
   2113             //return button;
   2114          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2115          
   2116          
   2117          
   2118          

   \                                 In section .far_func.text, align 1, keep-with-next
   2119          bool setData(void)
   2120          {
   \                     setData:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   2121             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000007 3F00                  CLR       S:?b8
   \   000009 35010000              MOV       S:?b10, #0x1
   \   00000D 35010000              MOV       S:?b9, #0x1
   2122             int yy;
   2123          
   2124                   //Clear Display
   2125             LCDInstr(0x01);
   \   000011 8D000000              CALLF     ?Subroutine15
   2126             Delay1(1000);
   2127             line_lcd=0;
   2128             printf("\nYear>");
   2129             y=year;
   \                     ??CrossCallReturnLabel_28:
   \   000015 C60000                LD        A, L:year
   \   000018 C70000                LD        L:`y`, A
   2130             m=month;
   \   00001B C60000                LD        A, L:month
   \   00001E C70000                LD        L:m, A
   2131             d=date;
   \   000021 C60000                LD        A, L:`date`
   \   000024 C70000                LD        L:d, A
   2132                do
   2133              {
   2134               line_lcd=1;
   \                     ??setData_0:
   \   000027 8D000000              CALLF     ?Subroutine26
   2135               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_49:
   \   00002B 89                    PUSHW     X
   \   00002C C60000                LD        A, L:m
   \   00002F 97                    LD        XL, A
   \   000030 89                    PUSHW     X
   \   000031 C60000                LD        A, L:`y`
   \   000034 97                    LD        XL, A
   \   000035 89                    PUSHW     X
   \   000036 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000039 8D000000              CALLF     printf
   \   00003D 5B06                  ADD       SP, #0x6
   2136                 y=adj(0,99,y);
   \   00003F C60000                LD        A, L:`y`
   \   000042 B700                  LD        S:?b1, A
   \   000044 35630000              MOV       S:?b0, #0x63
   \   000048 8D000000              CALLF     ??Subroutine87_0
   2137              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_244:
   \   00004C C70000                LD        L:`y`, A
   \   00004F 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_108:
   \   000053 27D2                  JREQ      L:??setData_0
   2138                  yy=y+2000;
   \   000055 C60000                LD        A, L:`y`
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A 1C07D0                ADDW      X, #0x7d0
   \   00005D BF00                  LDW       S:?w0, X
   2139              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00005F 90AE0190              LDW       Y, #0x190
   \   000063 8D000000              CALLF     L:?smod16_y_x_y
   \   000067 905D                  TNZW      Y
   \   000069 271C                  JREQ      L:??setData_1
   \   00006B 90AE0064              LDW       Y, #0x64
   \   00006F BE00                  LDW       X, S:?w0
   \   000071 8D000000              CALLF     L:?smod16_y_x_y
   \   000075 905D                  TNZW      Y
   \   000077 2712                  JREQ      L:??setData_2
   \   000079 90AE0004              LDW       Y, #0x4
   \   00007D BE00                  LDW       X, S:?w0
   \   00007F 8D000000              CALLF     L:?smod16_y_x_y
   \   000083 905D                  TNZW      Y
   \   000085 2604                  JRNE      L:??setData_2
   \                     ??setData_1:
   \   000087 35010000              MOV       S:?b8, #0x1
   2140                  y=yy-2000;
   \                     ??setData_2:
   \   00008B B600                  LD        A, S:?b1
   \   00008D AB30                  ADD       A, #0x30
   \   00008F C70000                LD        L:`y`, A
   2141                   if(y==year) month_start=month;
   \   000092 C60000                LD        A, L:year
   \   000095 C10000                CP        A, L:`y`
   \   000098 2605                  JRNE      L:??setData_3
   \   00009A C60000                LD        A, L:month
   \   00009D B700                  LD        S:?b10, A
   2142               line_lcd=0;
   \                     ??setData_3:
   \   00009F 8D000000              CALLF     ?Subroutine44
   2143              printf("\nMonth>");
   2144                do
   2145              {
   2146               line_lcd=1;
   \                     ??CrossCallReturnLabel_104:
   \   0000A3 8D000000              CALLF     ?Subroutine26
   2147               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_50:
   \   0000A7 89                    PUSHW     X
   \   0000A8 C60000                LD        A, L:m
   \   0000AB 97                    LD        XL, A
   \   0000AC 89                    PUSHW     X
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 97                    LD        XL, A
   \   0000B1 89                    PUSHW     X
   \   0000B2 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B5 8D000000              CALLF     printf
   \   0000B9 5B06                  ADD       SP, #0x6
   2148                m=adj(month_start,12,m);
   \   0000BB C60000                LD        A, L:m
   \   0000BE B700                  LD        S:?b1, A
   \   0000C0 350C0000              MOV       S:?b0, #0xc
   \   0000C4 B600                  LD        A, S:?b10
   \   0000C6 8D000000              CALLF     adj
   \   0000CA C70000                LD        L:m, A
   2149              } while (!key_ok_on());
   \   0000CD 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_109:
   \   0000D1 27D0                  JREQ      L:??CrossCallReturnLabel_104
   2150          
   2151              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000D3 C60000                LD        A, L:m
   \   0000D6 A101                  CP        A, #0x1
   \   0000D8 2718                  JREQ      L:??setData_4
   \   0000DA A103                  CP        A, #0x3
   \   0000DC 2714                  JREQ      L:??setData_4
   \   0000DE A105                  CP        A, #0x5
   \   0000E0 2710                  JREQ      L:??setData_4
   \   0000E2 A107                  CP        A, #0x7
   \   0000E4 270C                  JREQ      L:??setData_4
   \   0000E6 A108                  CP        A, #0x8
   \   0000E8 2708                  JREQ      L:??setData_4
   \   0000EA A10A                  CP        A, #0xa
   \   0000EC 2704                  JREQ      L:??setData_4
   \   0000EE A10C                  CP        A, #0xc
   \   0000F0 2606                  JRNE      L:??setData_5
   \                     ??setData_4:
   \   0000F2 351F0000              MOV       S:?b8, #0x1f
   \   0000F6 2024                  JRA       L:??setData_6
   2152               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??setData_5:
   \   0000F8 A104                  CP        A, #0x4
   \   0000FA 270C                  JREQ      L:??setData_7
   \   0000FC A106                  CP        A, #0x6
   \   0000FE 2708                  JREQ      L:??setData_7
   \   000100 A109                  CP        A, #0x9
   \   000102 2704                  JREQ      L:??setData_7
   \   000104 A10B                  CP        A, #0xb
   \   000106 2606                  JRNE      L:??setData_8
   \                     ??setData_7:
   \   000108 351E0000              MOV       S:?b8, #0x1e
   \   00010C 200E                  JRA       L:??setData_6
   2153                else
   2154                 {
   2155                   if(leap) date_end=29;
   \                     ??setData_8:
   \   00010E 3D00                  TNZ       S:?b8
   \   000110 2706                  JREQ      L:??setData_9
   \   000112 351D0000              MOV       S:?b8, #0x1d
   \   000116 2004                  JRA       L:??setData_6
   2156                    else date_end=28;
   \                     ??setData_9:
   \   000118 351C0000              MOV       S:?b8, #0x1c
   2157                 }
   2158               if( y==year && m==month) date_start=d;
   \                     ??setData_6:
   \   00011C C60000                LD        A, L:year
   \   00011F C10000                CP        A, L:`y`
   \   000122 260D                  JRNE      L:??setData_10
   \   000124 C60000                LD        A, L:month
   \   000127 C10000                CP        A, L:m
   \   00012A 2605                  JRNE      L:??setData_10
   \   00012C C60000                LD        A, L:d
   \   00012F B700                  LD        S:?b9, A
   2159              LCDInstr(0x01);
   \                     ??setData_10:
   \   000131 8D000000              CALLF     ?Subroutine16
   2160               Delay1(1000);
   2161                line_lcd=0;
   2162              printf("\nDate>");
   2163                do
   2164              {
   2165               line_lcd=1;
   \                     ??CrossCallReturnLabel_30:
   \   000135 8D000000              CALLF     ?Subroutine26
   2166               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_51:
   \   000139 89                    PUSHW     X
   \   00013A C60000                LD        A, L:m
   \   00013D 97                    LD        XL, A
   \   00013E 89                    PUSHW     X
   \   00013F C60000                LD        A, L:`y`
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B06                  ADD       SP, #0x6
   2167                 d=adj(date_start,date_end,d);
   \   00014D C60000                LD        A, L:d
   \   000150 B700                  LD        S:?b1, A
   \   000152 450000                MOV       S:?b0, S:?b8
   \   000155 B600                  LD        A, S:?b9
   \   000157 8D000000              CALLF     adj
   \   00015B C70000                LD        L:d, A
   2168              } while (!key_ok_on());
   \   00015E 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_110:
   \   000162 27D1                  JREQ      L:??CrossCallReturnLabel_30
   2169          
   2170                //Set clock keeper
   2171               //year=y;
   2172               //month=m;
   2173               //date=d;
   2174               //Set_DS1307();
   2175          
   2176            return TRUE;
   \   000164 A601                  LD        A, #0x1
   \   000166 320000                POP       S:?b10
   \   000169 AC000000              JPF       L:?epilogue_w4
   2177          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   2178          
   2179          

   \                                 In section .far_func.text, align 1, keep-with-next
   2180          void initBeep(void)
   2181          {
   2182            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2183            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2184             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2185               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2186             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2187          
   2188          }
   2189          

   \                                 In section .far_func.text, align 1, keep-with-next
   2190          void beep(u16 Interval)
   2191          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2192          
   2193           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2194               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2195            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2196          
   2197          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2198          

   \                                 In section .far_func.text, align 1, keep-with-next
   2199           PUTCHAR_PROTOTYPE
   2200          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2201            /* Place your implementation of fputc here */
   2202            /* e.g. write a character to the USART */
   2203                //USART_SendData(USART3, (u8) ch);
   2204               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2205             /* Loop until the end of transmission */
   2206              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2207            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2208          }
   2209          
   2210           #ifdef USE_FULL_ASSERT
   2211          
   2212          /**
   2213            * @brief  Reports the name of the source file and the source line number
   2214            *   where the assert_param error has occurred.
   2215            * @param file: pointer to the source file name
   2216            * @param line: assert_param error line source number
   2217            * @retval : None
   2218            */

   \                                 In section .far_func.text, align 1
   2219          void assert_failed(u8* file, u32 line)
   2220          {
   2221            /* User can add his own implementation to report the file name and line number,
   2222               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2223          
   2224            /* Infinite loop */
   2225            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2226            {
   2227          
   2228            }
   2229          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Off">`:
   \   000000 204F666600            DC8 " Off"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Sun">`:
   \   000000 2053756E00            DC8 " Sun"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Mon">`:
   \   000000 204D6F6E00            DC8 " Mon"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Tues">`:
   \   000000 205475657300          DC8 " Tues"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Wednes">`:
   \   000000 205765646E65          DC8 " Wednes"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Thurs">`:
   \   000000 205468757273          DC8 " Thurs"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Fri">`:
   \   000000 2046726900            DC8 " Fri"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Satur">`:
   \   000000 205361747572          DC8 " Satur"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Daily">`:
   \   000000 204461696C79          DC8 " Daily"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Month">`:
   \   000000 204D6F6E7468          DC8 " Month"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nP%d%s">`:
   \   000000 0A5025642573          DC8 "\012P%d%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%s">`:
   \   000000 0A257300              DC8 "\012%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " On">`:
   \   000000 204F6E00              DC8 " On"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   2230          #endif
   2231          
   2232          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     program_number                    1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     power                             1
     blink_flag                        1
     blink_time                        2
     line1                            10
     line2                            10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     Day_Week                         22
     status                            2
     hardware                          2
     programpoint                     40
     ?Subroutine35                     5
     ?Subroutine76                     9
     ??Subroutine86_0                  8
     ?Subroutine46                     7
     ??Subroutine92_0                  7
     ?Subroutine83                    11
     main                            369
     ?Subroutine57                     9
     ?Subroutine45                     9
     ?Subroutine40                    11
     ?Subroutine39                    11
     ?Subroutine11                     9
     ?Subroutine24                     4
     ??Subroutine90_0                 10
     ?Subroutine78                     7
     Display                         223
     Power_On                         14
     ?Subroutine42                    11
     ?Subroutine77                     9
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine52                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine51                     1
     ??Subroutine94_0                  7
     ?Subroutine50                     9
     ReadDS1307                      130
     ?Subroutine53                    11
     ?Subroutine33                    11
     ?Subroutine28                    13
     ?Subroutine23                     8
     ?Subroutine75                    10
     Check_DS1307                     78
     Set_DS1307                      108
     ?Subroutine49                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       372
     ?Subroutine44                    11
     ?Subroutine17                     7
     ??Subroutine85_0                  9
     ?Subroutine16                    11
     ?Subroutine15                    11
     ?Subroutine71                    16
     ?Subroutine82                     6
     ?Subroutine47                     7
     ?Subroutine32                     6
     ??Subroutine87_0                  5
     ?Subroutine25                    10
     adj                              85
     key_ok_on                        61
     ?Subroutine36                    14
     ?Subroutine34                     7
     ?Subroutine30                    10
     key_plus_on                      59
     ?Subroutine41                     7
     ?Subroutine38                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine13                    29
     Set_Timer_Off                   158
     ?Subroutine58                     2
     ?Subroutine48                     7
     ?Subroutine2                      4
     ??Subroutine88_0                  3
     ??Subroutine89_0                  7
     ?Subroutine27                    10
     ?Subroutine1                     29
     ?Subroutine79                    14
     ?Subroutine69                     9
     SaveStatus                       25
     ?Subroutine56                     5
     SaveProgram                      33
     ?Subroutine55                    19
     ReadProgram                      48
     ResetProgram                     33
     CheckProgramPoint               192
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine67                     9
     ?Subroutine64                     7
     InitClk                          62
     ?Subroutine65                     9
     LCDDataOut                       87
     ?Subroutine8                      7
     ??Subroutine93_0                  5
     ?Subroutine72                     7
     ?Subroutine74                     8
     ?Subroutine10                     2
     InitLcd                          85
     ?Subroutine19                     8
     ?Subroutine14                    17
     ?Subroutine9                     11
     ?Subroutine0                     13
     ??Subroutine84_0                 10
     ?Subroutine21                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine4                     24
     ?Subroutine68                     6
     LCD_Busy                         69
     LCD                             200
     ?Subroutine73                     9
     ?Subroutine7                      4
     ??Subroutine91_0                  5
     ?Subroutine22                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine18                     2
     ?Subroutine12                    10
     ?Subroutine70                     9
     DS18_Read                        74
     ?Subroutine20                    12
     DS18_Reset                       72
     ?Subroutine37                     7
     ?Subroutine63                     7
     temperature                      63
     ?Subroutine62                    15
     ?Subroutine81                     6
     ?Subroutine61                    23
     ?Subroutine3                     24
     Read_DS18                       121
     ?Subroutine66                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine6                     13
     ?Subroutine5                     16
     Clear_Line2                      19
     ?Subroutine80                     8
     FirstMenu                       117
     ?Subroutine29                     9
     ProgramMenu                     569
     ?Subroutine60                     9
     ?Subroutine59                    10
     ?Subroutine43                     9
     ?Subroutine31                    15
     Menu                            352
     ?Subroutine54                     6
     pressKey                         74
     setData                         365
     ?Subroutine26                    10
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant " Off">                5
     ?<Constant " Sun">                5
     ?<Constant " Mon">                5
     ?<Constant " Tues">               6
     ?<Constant " Wednes">             8
     ?<Constant " Thurs">              7
     ?<Constant " Fri">                5
     ?<Constant " Satur">              7
     ?<Constant " Daily">              7
     ?<Constant " Month">              7
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c%c">   16
     ?<Constant "\n%c%c%c%c">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH Off>">            8
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nP%d%s">             7
     ?<Constant "\n%s">                4
     ?<Constant " On">                 4
     ?<Constant "\n  :%02d">           9
     ?<Constant "\n%02d:  ">           9
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 6 238 bytes in section .far_func.text
   125 bytes in section .near.bss
    25 bytes in section .near.data
   371 bytes in section .near.rodata
 
 6 238 bytes of CODE  memory
   371 bytes of CONST memory
   150 bytes of DATA  memory

Errors: none
Warnings: none
