###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             19/Jan/2014  18:00:59 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include  "time.h"
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          
     81          
     82          
     83          
     84          #ifdef __GNUC__
     85            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     86               set to 'Yes') calls __io_putchar() */
     87            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     88          #else
     89            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     90          #endif /* __GNUC__ */
     91          
     92          
     93          
     94          
     95          #define SpecialSymbol 0x1b //Esc to start message
     96          //#define data_size 20
     97          #define key_time 8000
     98          #define KEY_TIME_ON 8000
     99          #define KEY_TIME_HOLD 65000
    100          #define key_time_press 4000
    101          #define key_time_release 400
    102          #define DS_Control  0x10  // Out 1s
    103          #define time_menu 10  // 5s
    104          #define TIMEOUT_DS18B20 8000
    105          #define LCDLEDON 20
    106          //#define sync_time 30 // 30s
    107          #define power_jitter 3 //3s
    108          
    109          
    110          
    111          
    112          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    113          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    114          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    115          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    116          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    118          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    119          //char data[data_size];
    120          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    121          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    126          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    127          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    128          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    129          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    141          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    142          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    143          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    144          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    150          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    152          char  manu_display,sync_display,program_display,program_number;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_number:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    153          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    154          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    155          u8 button;
   \                     button:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    156          u8 power;
   \                     power:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    157          bool blink_flag;
   \                     blink_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    158          u16 blink_time;
   \                     blink_time:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    159          bool key_ok_hold;
   \                     key_ok_hold:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    160          bool rotate_line2=FALSE;
   \                     rotate_line2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    161          u8 size_status;
   \                     size_status:
   \   000000                       DS8 1
    162          //bool Daily;
    163          

   \                                 In section .near.bss, align 1
    164          struct tm ptim;
   \                     ptim:
   \   000000                       DS8 22

   \                                 In section .near.bss, align 1
    165          time_t  ltime;
   \                     ltime:
   \   000000                       DS8 4
    166          //bool  ds_temperature;
    167          
    168          
    169          

   \                                 In section .near.bss, align 1
    170          char line1[10];
   \                     line1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    171          char line2[10];
   \                     line2:
   \   000000                       DS8 10
    172          //char string1[10];
    173          //char string2[10];

   \                                 In section .near.bss, align 1
    174          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    175          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    176          
    177          //u8 index=0;

   \                                 In section .near.bss, align 1
    178          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    179          int volatile k=0;
   \                     k:
   \   000000                       DS8 2

   \                                 In section .near.data, align 1
    180          char *day_week[11] = {" Off"," Sun"," Mon"," Tues"," Wednes"," Thurs"," Fri"," Satur"," Daily"," Month"};
   \                     day_week:
   \   000000 000000000000          DC16 `?<Constant " Off">`, `?<Constant " Sun">`, `?<Constant " Mon">`
   \   000006 00000000              DC16 `?<Constant " Tues">`, `?<Constant " Wednes">`
   \   00000A 00000000              DC16 `?<Constant " Thurs">`, `?<Constant " Fri">`
   \   00000E 00000000              DC16 `?<Constant " Satur">`, `?<Constant " Daily">`
   \   000012 0000                  DC16 `?<Constant " Month">`
   \   000014 0000                  DC8 0, 0

   \                                 In section .near.data, align 1
    181          char *setup_menu[5] ={"\nPrgClear","\nSetClock","\nSetDate","\nSh Date","\nExit"};
   \                     setup_menu:
   \   000000 00000000              DC16 `?<Constant "\\nPrgClear">`, `?<Constant "\\nSetClock">`
   \   000004 00000000              DC16 `?<Constant "\\nSetDate">`, `?<Constant "\\nSh Date">`
   \   000008 0000                  DC16 `?<Constant "\\nExit">`
    182          //char *test[3] ={"18777","2","3"};
    183          
    184           struct   status_reg
    185           {
    186             unsigned manu:1;
    187             unsigned on:1;
    188             unsigned timer_on:1;
    189             unsigned daily:4;
    190             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    191           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    192          
    193          
    194           struct
    195           {
    196             unsigned ds1307:1;
    197             unsigned ds18B20:1;
    198             unsigned buzzer:1;
    199             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    200           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    201          
    202          
    203          
    204           typedef  struct
    205            {
    206              u8 day;
    207              u8 onhour ;
    208              u8 onminute ;
    209              u8 offhour;
    210              u8 offminute;
    211              u8 dayoff;
    212          
    213            }  program ;
    214          
    215                   // = new proram[8];

   \                                 In section .near.bss, align 1
    216             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 48
    217            /*
    218             =
    219           {
    220             {0x00,0x00,0x00,0x00,0x00},
    221             {0x00,0x00,0x00,0x00,0x00},
    222             {0x00,0x00,0x00,0x00,0x00},
    223             {0x00,0x00,0x00,0x00,0x00},
    224             {0x00,0x00,0x00,0x00,0x00},
    225             {0x00,0x00,0x00,0x00,0x00},
    226             {0x00,0x00,0x00,0x00,0x00},
    227             {0x00,0x00,0x00,0x00,0x00},
    228           };
    229              */
    230          
    231          
    232          
    233          
    234          
    235          
    236          
    237          
    238          /* Private function prototypes -----------------------------------------------*/
    239          void InitHardware();
    240          void GpioConfiguration();
    241          void InitClk();
    242          void InitAdc();
    243          void InitI2C();
    244          void EEPROM_INIT();
    245          bool ReadDS1307();
    246          //void InitUart();
    247          void InitLcd();
    248          void InitDelayTimer2();
    249          void InitDelayTimer3();
    250          void Delay1( u16 Delay);
    251          void Delay2( u16 Delay);
    252          void Delay_us(u16 Delay);
    253          void LCDInstrNibble (u8 Instr);
    254          void LCDInstr(u8 Instr);
    255          void LCDDataOut(u8 data);
    256          void LCD_Busy();
    257          void PulseEnable();
    258          //void SendData();
    259          void SendChar(u8 Char);
    260          //void Send_Hello();
    261          bool SetClock();
    262          bool SetData();
    263          bool InputDataProgram(bool smart);
    264          //bool key_ok_hold();
    265          bool key_ok_on();
    266          bool key_plus_on();
    267          bool key_minus_on();
    268          bool key_ok_plus();
    269          bool Init_DS1307(void);
    270          bool Check_DS1307(void);
    271          bool I2C_Start(void);
    272          bool I2C_WA(u8 address);
    273          bool I2C_WD(u8 data);
    274          bool I2C_RA(u8 address);
    275          bool Set_DS1307();
    276          //bool Set_Delay_Allarm();
    277          //bool Set_Timer_On();
    278          //bool Set_Timer_Off();
    279          //bool Read_Allarm();
    280          bool Read_DS18();
    281          bool DS18_Write( u8 data);
    282          bool DS18_Reset();
    283          bool DS18Set();
    284          u8 temperature();
    285          u8 DS18_Read();
    286          u8 convert_tobcd(u8 data);
    287          u8 I2C_RD(void);
    288          u8 adj(u8 min,u8 max,u8 now);
    289          u8 bcd2hex(u8 bcd);
    290          void Power_On(void);
    291          void Power_Off();
    292          void SaveStatus();
    293          void ReadStatus();
    294          void Rotate_Line( char * line);
    295          void Display_Line(char * line);
    296          void DisplayLine2(void);
    297          void ClearLine1(void);
    298          void ClearLine2(void);
    299          void Menu(void);
    300          void pressKey(void);
    301          void Display(void);
    302          void initBeep(void);
    303          void beep(u16 Interval);
    304          void FirstMenu();
    305          void ProgramMenu();
    306          void SaveProgram();
    307          void ReadProgram();
    308          void ResetProgram();
    309          void CheckProgramPoint();
    310          void SetupMenu();
    311          void SelectMenu(u8 si);
    312          long local_time(u8 hour,u8 minute);
    313          
    314          
    315          
    316          
    317          u16  Average();
    318          
    319          
    320          /* Private functions ---------------------------------------------------------*/
    321          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_195:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_211:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    322          void main(void)
    323          {
    324              /*High speed internal clock prescaler: 1*/
    325              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    326              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    327              InitDelayTimer2();
   \   000004 8D000000              CALLF     InitDelayTimer2
    328              InitDelayTimer3();
   \   000008 8D000000              CALLF     InitDelayTimer3
    329              GpioConfiguration();
   \   00000C 8D000000              CALLF     GpioConfiguration
    330              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000010 8D000000              CALLF     ?Subroutine15
    331              GPIO_WriteHigh(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_24:
   \   000014 A601                  LD        A, #0x1
   \   000016 AE5005                LDW       X, #0x5005
   \   000019 8D000000              CALLF     GPIO_WriteHigh
    332              hardware.lcdLed=1;
   \   00001D 8D000000              CALLF     ?Subroutine35
    333              lcdLedTimer=LCDLEDON;
    334              //Daily=FALSE;
    335              //InitUart();
    336               enableInterrupts();
   \                     ??CrossCallReturnLabel_84:
   \   000021 9A                    RIM
    337               initBeep();
   \   000022 8D000000              CALLF     initBeep
    338              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    339               InitLcd();
   \   000026 8D000000              CALLF     InitLcd
    340              //InitAdc();
    341               InitI2C();
   \   00002A 8D000000              CALLF     InitI2C
    342              // Enable Timer3
    343              TIM3_Cmd(ENABLE);
   \   00002E A601                  LD        A, #0x1
   \   000030 8D000000              CALLF     TIM3_Cmd
    344              //year=bcd2hex(13);
    345              //Delay1(10000);
    346               if (!ReadDS1307())
   \   000034 8D000000              CALLF     ReadDS1307
   \   000038 A100                  CP        A, #0x0
   \   00003A 261D                  JRNE      L:??main_0
    347               {
    348                 printf("\n E2:%d",error);
   \   00003C C60000                LD        A, L:error
   \   00003F 5F                    CLRW      X
   \   000040 97                    LD        XL, A
   \   000041 89                    PUSHW     X
   \   000042 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000045 8D000000              CALLF     printf
   \   000049 5B02                  ADD       SP, #0x2
    349                 // Reset the CPU: Enable the watchdog and wait until it expires
    350                  hardware.ds1307=0;
   \   00004B CE0000                LDW       X, L:hardware
   \   00004E 01                    RRWA      X, A
   \   00004F A4FE                  AND       A, #0xfe
   \   000051 02                    RLWA      X, A
   \   000052 CF0000                LDW       L:hardware, X
    351                   pressKey();
   \   000055 8D000000              CALLF     pressKey
    352                //IWDG->KR = IWDG_KEY_ENABLE;
    353                // while ( 1 );    // Wait until reset occurs from IWDG
    354               }
    355          
    356          
    357                  // lcdLedTimer=LCDLEDON;
    358                  //GPIO_WriteHigh(GPIOB,lcdLed);
    359          
    360              if (!Check_DS1307())
   \                     ??main_0:
   \   000059 8D000000              CALLF     Check_DS1307
   \   00005D A100                  CP        A, #0x0
   \   00005F 2624                  JRNE      L:??main_1
    361              {
    362                 if (error!=0)
   \   000061 C60000                LD        A, L:error
   \   000064 2710                  JREQ      L:??main_2
    363                 {
    364                  printf("\n E:%d",error);
   \   000066 5F                    CLRW      X
   \   000067 97                    LD        XL, A
   \   000068 89                    PUSHW     X
   \   000069 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00006C 8D000000              CALLF     printf
   \   000070 5B02                  ADD       SP, #0x2
    365                   pressKey();
   \   000072 8D000000              CALLF     pressKey
    366          
    367                 }
    368               line_lcd=0;
   \                     ??main_2:
   \   000076 725F0000              CLR       L:line_lcd
    369               printf("\nSetClock");
   \   00007A AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00007D 8D000000              CALLF     printf
    370                SetClock();
   \   000081 8D000000              CALLF     SetClock
    371                 // reset program point
    372          
    373              }
    374          
    375          
    376                 //Read Status register from eepom and update it
    377                //size=sizeof(status);
    378               //u16 status
    379              ReadStatus();
   \                     ??main_1:
   \   000085 8D000000              CALLF     ReadStatus
    380              ReadProgram ();
   \   000089 8D000000              CALLF     ReadProgram
    381          
    382              DS18Set();
   \   00008D 8D000000              CALLF     DS18Set
    383              line_lcd=0;
   \   000091 725F0000              CLR       L:line_lcd
    384              if (!Read_DS18())
   \   000095 8D000000              CALLF     Read_DS18
   \   000099 A100                  CP        A, #0x0
   \   00009B 2611                  JRNE      L:??main_3
    385              {
    386               printf("\nDS_Err_T");
   \   00009D AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000A0 8D000000              CALLF     printf
    387                 hardware.ds18B20=0;
   \   0000A4 8D000000              CALLF     ?Subroutine36
    388                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_86:
   \   0000A8 8D000000              CALLF     pressKey
   \   0000AC 2004                  JRA       L:??CrossCallReturnLabel_88
    389              }
    390               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000AE 8D000000              CALLF     ?Subroutine37
    391          
    392              //daily_dispaly=' ';
    393              //month_display=' ';
    394              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_88:
   \   0000B2 35010000              MOV       L:sync_time_ds1307, #0x1
    395          
    396                    //Same delay if  power jitter
    397              if (status.on)
   \   0000B6 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_141:
   \   0000BA 2717                  JREQ      L:??main_4
    398              {
    399               line_lcd=0;
   \   0000BC 725F0000              CLR       L:line_lcd
    400               printf("\nWait 3s.");
   \   0000C0 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   0000C3 8D000000              CALLF     printf
    401               timer3=0;
   \   0000C7 5F                    CLRW      X
   \   0000C8 CF0000                LDW       L:timer3, X
    402               while (timer3<=power_jitter);
   \                     ??main_5:
   \   0000CB CE0000                LDW       X, L:timer3
   \   0000CE A30004                CPW       X, #0x4
   \   0000D1 25F8                  JRC       L:??main_5
    403              }
    404          
    405          
    406               /* Main Loop*/
    407          
    408              while(1)
    409              {
    410          
    411          
    412                if(key_ok_on())
   \                     ??main_4:
   \   0000D3 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_110:
   \   0000D7 270F                  JREQ      L:??main_6
    413                {
    414                   if( key_ok_hold) SetupMenu();
   \   0000D9 C60000                LD        A, L:key_ok_hold
   \   0000DC 2706                  JREQ      L:??main_7
   \   0000DE 8D000000              CALLF     SetupMenu
   \   0000E2 2004                  JRA       L:??main_6
    415                    else FirstMenu();
   \                     ??main_7:
   \   0000E4 8D000000              CALLF     FirstMenu
    416                }
    417                if(key_plus_on()) Power_On();
   \                     ??main_6:
   \   0000E8 8D000000              CALLF     key_plus_on
   \   0000EC A100                  CP        A, #0x0
   \   0000EE 2704                  JREQ      L:??main_8
   \   0000F0 8D000000              CALLF     Power_On
    418                if(key_minus_on())Power_Off();
   \                     ??main_8:
   \   0000F4 8D000000              CALLF     key_minus_on
   \   0000F8 A100                  CP        A, #0x0
   \   0000FA 2704                  JREQ      L:??main_9
   \   0000FC 8D000000              CALLF     Power_Off
    419                if(Time_Display) Display();  //
   \                     ??main_9:
   \   000100 C60000                LD        A, L:Time_Display
   \   000103 2704                  JREQ      L:??main_10
   \   000105 8D000000              CALLF     Display
    420          
    421                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_10:
   \   000109 C60000                LD        A, L:sync_time_ds1307
   \   00010C 2725                  JREQ      L:??main_11
    422                   {
    423                    if (!ReadDS1307())
   \   00010E 8D000000              CALLF     ReadDS1307
   \   000112 A100                  CP        A, #0x0
   \   000114 2619                  JRNE      L:??main_12
    424                        {
    425                          GPIO_WriteLow(GPIOD, power_pin );
   \   000116 8D000000              CALLF     ?Subroutine15
    426                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_23:
   \   00011A C60000                LD        A, L:error
   \   00011D 5F                    CLRW      X
   \   00011E 97                    LD        XL, A
   \   00011F 89                    PUSHW     X
   \   000120 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000123 8D000000              CALLF     printf
   \   000127 5B02                  ADD       SP, #0x2
    427                       //restart i2c
    428                       // Reset the CPU: Enable the watchdog and wait until it expires
    429                       IWDG->KR = IWDG_KEY_ENABLE;
   \   000129 35CC50E0              MOV       L:0x50e0, #0xcc
    430                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_13:
   \   00012D 20FE                  JRA       L:??main_13
    431                        }
    432                   sync_time_ds1307=FALSE;
   \                     ??main_12:
   \   00012F 725F0000              CLR       L:sync_time_ds1307
    433                   //sync_display='S';
    434                   }
    435          
    436          
    437          
    438                       if(status.on) GPIO_WriteHigh(GPIOD, power_pin ) ;
   \                     ??main_11:
   \   000133 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_142:
   \   000137 2708                  JREQ      L:??main_14
   \   000139 A608                  LD        A, #0x8
   \   00013B 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_240:
   \   00013F 2092                  JRA       L:??main_4
    439                         else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_14:
   \   000141 8D000000              CALLF     ?Subroutine15
    440          
    441          
    442          
    443          
    444              }
   \                     ??CrossCallReturnLabel_22:
   \   000145 208C                  JRA       L:??main_4
    445          
    446          
    447          
    448          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine54:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A502                  BCP       A, #0x2
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine37:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine36:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine15:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
    449          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A501                  BCP       A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    450          void Display(void)
    451          {
    452             //ClearLine1 ();
    453              char power_display;
    454              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    455               result2=0;
   \   000007 725F0000              CLR       L:result2
    456                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    457                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    458          
    459          
    460          
    461             if (status.manu)
   \   000018 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_200:
   \   00001C 271D                  JREQ      L:??Display_1
    462             {
    463               program_display=' ';
   \   00001E 35200000              MOV       L:program_display, #0x20
    464               power_display=' ';
    465               if(status.on)
   \   000022 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_139:
   \   000026 270D                  JREQ      L:??Display_2
    466               {
    467                if(manu_display=='M') manu_display=' ';
   \   000028 C60000                LD        A, L:manu_display
   \   00002B A14D                  CP        A, #0x4d
   \   00002D 2606                  JRNE      L:??Display_2
   \   00002F 35200000              MOV       L:manu_display, #0x20
   \   000033 200A                  JRA       L:??Display_3
    468                 else manu_display='M';
   \                     ??Display_2:
   \   000035 354D0000              MOV       L:manu_display, #0x4d
   \   000039 2004                  JRA       L:??Display_3
    469               }
    470                else manu_display='M';
    471             }
    472               else manu_display='A';
   \                     ??Display_1:
   \   00003B 35410000              MOV       L:manu_display, #0x41
    473          
    474          
    475          
    476          
    477               //Blink D
    478          
    479             if (status.on && !status.manu)
   \                     ??Display_3:
   \   00003F 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_140:
   \   000043 271A                  JREQ      L:??Display_4
   \   000045 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_201:
   \   000049 2614                  JRNE      L:??Display_4
    480             {
    481               if (program_display==' ')
   \   00004B C60000                LD        A, L:program_display
   \   00004E A120                  CP        A, #0x20
   \   000050 260D                  JRNE      L:??Display_4
    482                 {
    483                   program_display='P';
   \   000052 35500000              MOV       L:program_display, #0x50
    484                   power_display=0x30 +power;
   \   000056 C60000                LD        A, L:power
   \   000059 AB30                  ADD       A, #0x30
   \   00005B B700                  LD        S:?b4, A
   \   00005D 2008                  JRA       L:??Display_5
    485                 }
    486               else
    487                 {
    488                   program_display=' ';
   \                     ??Display_4:
   \   00005F 35200000              MOV       L:program_display, #0x20
    489                   power_display=' ';
   \   000063 35200000              MOV       S:?b4, #0x20
    490                 }
    491             }
    492               else
    493                 {
    494                   program_display=' ';
    495                   power_display=' ';
    496                 }
    497          
    498          
    499             // else if (status.on) program_display='P';
    500             //  else program_display=' ';
    501          
    502              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,manu_display,program_display,power_display);
   \                     ??Display_5:
   \   000067 C60000                LD        A, L:manu_display
   \   00006A 5F                    CLRW      X
   \   00006B 97                    LD        XL, A
   \   00006C BF00                  LDW       S:?w1, X
   \   00006E C60000                LD        A, L:program_display
   \   000071 97                    LD        XL, A
   \   000072 BF00                  LDW       S:?w0, X
   \   000074 B600                  LD        A, S:?b4
   \   000076 41                    EXG       A, XL
   \   000077 90CE0000              LDW       Y, L:hardware
   \   00007B 909F                  LD        A, YL
   \   00007D A502                  BCP       A, #0x2
   \   00007F 89                    PUSHW     X
   \   000080 2721                  JREQ      L:??Display_6
   \   000082 8D000000              CALLF     L:?push_w0
   \   000086 8D000000              CALLF     L:?push_w1
   \   00008A C60000                LD        A, L:result2
   \   00008D 97                    LD        XL, A
   \   00008E 89                    PUSHW     X
   \   00008F C60000                LD        A, L:result1
   \   000092 97                    LD        XL, A
   \   000093 89                    PUSHW     X
   \   000094 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000098 AE0000                LDW       X, #line1
   \   00009B 8D000000              CALLF     sprintf
   \   00009F 5B0A                  ADD       SP, #0xa
   \   0000A1 2015                  JRA       L:??Display_7
    503                else sprintf(line1,"\n%c%c%c",manu_display,program_display,power_display);
   \                     ??Display_6:
   \   0000A3 8D000000              CALLF     L:?push_w0
   \   0000A7 8D000000              CALLF     L:?push_w1
   \   0000AB 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   0000AF AE0000                LDW       X, #line1
   \   0000B2 8D000000              CALLF     sprintf
   \   0000B6 5B06                  ADD       SP, #0x6
    504          
    505             line_lcd=0;
   \                     ??Display_7:
   \   0000B8 8D000000              CALLF     ?Subroutine40
    506             printf(line1);
    507          
    508             line_lcd=1;
    509             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_96:
   \   0000BC C60000                LD        A, L:seconds
   \   0000BF 5F                    CLRW      X
   \   0000C0 97                    LD        XL, A
   \   0000C1 89                    PUSHW     X
   \   0000C2 C60000                LD        A, L:minutes
   \   0000C5 97                    LD        XL, A
   \   0000C6 89                    PUSHW     X
   \   0000C7 C60000                LD        A, L:hours
   \   0000CA 97                    LD        XL, A
   \   0000CB 89                    PUSHW     X
   \   0000CC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CF 8D000000              CALLF     printf
   \   0000D3 5B06                  ADD       SP, #0x6
    510          
    511          
    512             Time_Display=FALSE;
   \   0000D5 725F0000              CLR       L:Time_Display
    513             //sync_display=' ';
    514          
    515          
    516          }
   \   0000D9 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine40:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #line1
   \   000007 8D000000              CALLF     printf
   \   00000B 35010000              MOV       L:line_lcd, #0x1
   \   00000F 87                    RETF
    517          

   \                                 In section .far_func.text, align 1
    518          void Power_On()
    519          {
    520            //status.auto=0;
    521            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine39
    522            status.manu=1; //Manu
    523            SaveStatus();
   \                     ??CrossCallReturnLabel_94:
   \   00000A AC000000              JPF       SaveStatus
    524            //hardware.lcdLed=1;
    525          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine39:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 AA01                  OR        A, #0x1
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    526          

   \                                 In section .far_func.text, align 1, keep-with-next
    527          void Power_Off()
    528          {
    529            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine39
    530            status.manu=1; //Manu
    531            SaveStatus();
   \                     ??CrossCallReturnLabel_93:
   \   00000A AC000000              JPF       SaveStatus
    532             //hardware.lcdLed=0;
    533          
    534          }
    535          

   \                                 In section .far_func.text, align 1, keep-with-next
    536          void InitI2C(void)
    537          {
    538             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    539             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    540             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    541          }
    542          

   \                                 In section .far_func.text, align 1, keep-with-next
    543          bool I2C_Start(void)
    544          {
    545             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    546                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    547              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_167:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    548                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    549                  {
    550                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    551                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    552                  }
    553                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    554          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    555          

   \                                 In section .far_func.text, align 1, keep-with-next
    556          bool I2C_WA(u8 address)
    557          {
    558            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    559                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    560                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_166:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    561                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    562                   {
    563                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    564                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    565                   }
    566                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    567          }
    568          

   \                                 In section .far_func.text, align 1, keep-with-next
    569          bool I2C_RA(u8 address)
    570          {
    571            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    572                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    573                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_168:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    574                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    575                   {
    576                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    577                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    578                   }
    579                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    580          }
    581          
    582          

   \                                 In section .far_func.text, align 1, keep-with-next
    583          bool I2C_WD(u8 data)
    584          {
    585           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    586             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    587             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_165:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    588              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    589              {
    590                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    591                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    592              }
    593               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    594          }
    595          

   \                                 In section .far_func.text, align 1, keep-with-next
    596          u8 I2C_RD(void)
    597          {
    598           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    599            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    600           //while((!(I2C->SR1 & 0x40))&&timeout);
    601           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    602           {
    603             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    604             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    605           }
    606           u8 data=I2C_ReceiveData();
    607           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    608          }
    609          
    610          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine92_0
   \   000001                       ;               // Fall through to label ??Subroutine92_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    611          bool  ReadDS1307(void)
    612          {        //TIM3_Cmd(DISABLE);
    613                   disableInterrupts();
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine52
    614                 error=0;
    615                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_136:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    616                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_178:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    617                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_275:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    618                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine26
    619                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_49:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    620                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    621                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine25
    622                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_47:
   \   000028 C70000                LD        L:seconds, A
    623                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine25
    624                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_46:
   \   00002F C70000                LD        L:minutes, A
    625                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine25
    626                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_45:
   \   000036 C70000                LD        L:hours, A
    627                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine25
    628                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_44:
   \   00003D C70000                LD        L:days, A
    629                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine25
    630                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_43:
   \   000044 C70000                LD        L:`date`, A
    631                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine25
    632                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_42:
   \   00004B C70000                LD        L:month, A
    633                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine31
    634                   I2C_GenerateSTOP(ENABLE);
    635                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_61:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    636          
    637               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    638               //   u8 data1 = I2C_RD();
    639                //Last read byte by I2C slave
    640               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    641               //  I2C_GenerateSTOP(ENABLE);
    642               //  temp2= I2C_RD();
    643                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    644                    {
    645                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    646                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    647                    }
    648                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006A CE0000                LDW       X, L:hardware
   \   00006D 01                    RRWA      X, A
   \   00006E AA01                  OR        A, #0x1
   \   000070 02                    RLWA      X, A
   \   000071 CF0000                LDW       L:hardware, X
    649                 //TIM3_Cmd(ENABLE);
    650                  enableInterrupts();
   \   000074 9A                    RIM
    651                 return TRUE;
   \   000075 A601                  LD        A, #0x1
   \   000077 87                    RETF
    652          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 9B                    SIM
   \   000001 725F0000              CLR       L:error
   \   000005 8D000000              CALLF     I2C_Start
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_192:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    653          

   \                                 In section .far_func.text, align 1, keep-with-next
    654          bool Check_DS1307(void)
    655          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    656             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    657                 error=0;
   \   000003 725F0000              CLR       L:error
    658                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    659                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    660                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_177:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    661                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine92_0
   \                     ??CrossCallReturnLabel_278:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    662                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine26
    663                  //Last read byte by I2C slave
    664                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_48:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    665                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    666                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine73
    667                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_193:
   \   00003C B700                  LD        S:?b8, A
    668                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine31
    669                 I2C_GenerateSTOP(ENABLE);
    670                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_62:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    671                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    672          }
    673          

   \                                 In section .far_func.text, align 1, keep-with-next
    674          bool Set_DS1307()
    675          {
    676                 // convert hex or decimal to bcd format
    677          
    678                 disableInterrupts();
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine52
    679                 error=0;
    680                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_135:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    681                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_176:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    682                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_274:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    683                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_169:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    684                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_170:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    685                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_171:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    686                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_172:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    687                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_173:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    688                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_174:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    689                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_175:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    690                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine92_0
   \                     ??CrossCallReturnLabel_276:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    691                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine92_0
   \                     ??CrossCallReturnLabel_277:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    692                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    693                 enableInterrupts();
   \   000069 9A                    RIM
    694          
    695             return TRUE;
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    696          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    697          
    698          

   \                                 In section .far_func.text, align 1, keep-with-next
    699          u8 convert_tobcd(u8 data)
    700          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    701             u8 data_second_decimal=data/10;
    702             u8 data_first_decimal=data - 10*data_second_decimal;
    703             data=16*data_second_decimal + data_first_decimal;
    704            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    705          }
    706          

   \                                 In section .far_func.text, align 1, keep-with-next
    707          u8 bcd2hex(u8 bcd)
    708          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    709            u8 hex=0;
    710            hex=(bcd>>4)*10 +(bcd&0x0f);
    711            bcd=0;
    712            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    713          }
    714          
    715          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 A102                  CP        A, #0x2
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_189:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    716          void  SetupMenu()
    717          {
   \                     SetupMenu:
   \   000000 8D000000              CALLF     L:?push_w4
    718               // Clear Display
    719              LCDInstr(0x01); //Clear LCD
   \   000004 8D000000              CALLF     ?Subroutine24
    720              Delay1(250);
   \                     ??CrossCallReturnLabel_41:
   \   000008 8D000000              CALLF     ??Subroutine81_0
    721          
    722              line_lcd=0;
    723              printf("\nMenu +/-");
   \                     ??CrossCallReturnLabel_218:
   \   00000C AE0000                LDW       X, #`?<Constant "\\nMenu +/-">`
   \   00000F 8D000000              CALLF     printf
    724              u8 mi=0;
   \   000013 3F00                  CLR       S:?b8
    725              u8 size_setup_menu = (sizeof(setup_menu)/2) -1;
    726              line_lcd=1;
   \   000015 35010000              MOV       L:line_lcd, #0x1
    727              printf(setup_menu[mi]);
   \   000019 CE0000                LDW       X, L:setup_menu
   \   00001C 8D000000              CALLF     printf
    728              bool key_menu=TRUE;
   \   000020 35010000              MOV       S:?b9, #0x1
   \   000024 2019                  JRA       L:??SetupMenu_0
    729          
    730              do
    731              {
    732                pressKey();
    733                 if(button==2)    // Plus Key  Enter Menu
    734                  {
    735                    mi++;
    736                    if(mi > size_setup_menu) mi=0;
    737                    ClearLine2();
    738                    line_lcd=1;
    739                    printf(setup_menu[mi]);
    740                  }
    741          
    742                 if (button==3)  // Minus Key  down Menu
    743                    {
    744                      mi--;
    745                      if(mi==255) mi=size_setup_menu;
    746                      ClearLine2();
    747                      line_lcd=1;
    748                      printf(setup_menu[mi]);
    749                    }
    750          
    751                  if(button==1 && key_menu)
    752                  {
    753                    key_menu=FALSE;
   \                     ??SetupMenu_1:
   \   000026 3F00                  CLR       S:?b9
    754                    button=4;
   \   000028 35040000              MOV       L:button, #0x4
    755                  }
    756          
    757                  if(button==1) SelectMenu(mi);
    758          
    759                  if(button==4)
    760                  {
    761                    ClearLine1();
   \                     ??SetupMenu_2:
   \   00002C 8D000000              CALLF     ?Subroutine45
    762                    ClearLine2();
    763                    line_lcd=0;
    764                    printf("\nMenu +/-");
   \                     ??CrossCallReturnLabel_118:
   \   000030 AE0000                LDW       X, #`?<Constant "\\nMenu +/-">`
   \   000033 8D000000              CALLF     printf
    765                    line_lcd=1;
   \   000037 8D000000              CALLF     ??Subroutine90_0
    766                    printf(setup_menu[mi]);
    767                    button=5;
   \                     ??CrossCallReturnLabel_271:
   \   00003B 35050000              MOV       L:button, #0x5
    768                  }
   \                     ??SetupMenu_0:
   \   00003F 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_130:
   \   000043 260F                  JRNE      L:??CrossCallReturnLabel_273
   \   000045 B600                  LD        A, S:?b8
   \   000047 4C                    INC       A
   \   000048 B700                  LD        S:?b8, A
   \   00004A A105                  CP        A, #0x5
   \   00004C 2502                  JRC       L:??SetupMenu_3
   \   00004E 3F00                  CLR       S:?b8
   \                     ??SetupMenu_3:
   \   000050 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_273:
   \   000054 C60000                LD        A, L:button
   \   000057 A103                  CP        A, #0x3
   \   000059 2611                  JRNE      L:??CrossCallReturnLabel_272
   \   00005B B600                  LD        A, S:?b8
   \   00005D 4A                    DEC       A
   \   00005E B700                  LD        S:?b8, A
   \   000060 A1FF                  CP        A, #0xff
   \   000062 2604                  JRNE      L:??SetupMenu_4
   \   000064 35040000              MOV       S:?b8, #0x4
   \                     ??SetupMenu_4:
   \   000068 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_272:
   \   00006C C60000                LD        A, L:button
   \   00006F A101                  CP        A, #0x1
   \   000071 260A                  JRNE      L:??SetupMenu_5
   \   000073 3D00                  TNZ       S:?b9
   \   000075 26AF                  JRNE      L:??SetupMenu_1
   \   000077 B600                  LD        A, S:?b8
   \   000079 8D000000              CALLF     SelectMenu
   \                     ??SetupMenu_5:
   \   00007D C60000                LD        A, L:button
   \   000080 A104                  CP        A, #0x4
   \   000082 27A8                  JREQ      L:??SetupMenu_2
    769          
    770              } while ( button != 0 );   //Ok Next Menu   button != 1 &&
   \   000084 C60000                LD        A, L:button
   \   000087 26B6                  JRNE      L:??SetupMenu_0
   \   000089 AC000000              JPF       L:?epilogue_w4
    771          
    772                   if(button==0) return;  // No key press
    773          
    774          
    775          
    776          
    777          
    778          
    779          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_196:
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 8D000000              CALLF     ClearLine1
   \   000004 AC000000              JPF       ClearLine2

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ClearLine2
   \   000004                       REQUIRE ??Subroutine90_0
   \   000004                       ;               // Fall through to label ??Subroutine90_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004                       REQUIRE ??Subroutine91_0
   \   000004                       ;               // Fall through to label ??Subroutine91_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 58                    SLLW      X
   \   000006 DE0000                LDW       X, (L:setup_menu,X)
   \   000009 AC000000              JPF       printf
    780          
    781          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 8D000000              CALLF     ClearLine2
   \   000004 35010000              MOV       L:line_lcd, #0x1
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     ClearLine1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    782          void SelectMenu(u8 si)
    783          {
   \                     SelectMenu:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    784              if(si==4)
   \   000005 A104                  CP        A, #0x4
   \   000007 2607                  JRNE      L:??SelectMenu_0
    785              {
    786                button=0;
   \                     ??SelectMenu_1:
   \   000009 725F0000              CLR       L:button
    787                 return;
   \   00000D CC0000                JP        L:??SelectMenu_2
    788              }
    789          
    790              if(si==3)
   \                     ??SelectMenu_0:
   \   000010 A103                  CP        A, #0x3
   \   000012 2646                  JRNE      L:??SelectMenu_3
    791              {
    792                 ClearLine1();
   \   000014 8D000000              CALLF     ?Subroutine45
    793                 ClearLine2();
    794                 line_lcd=0;
    795                 printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_116:
   \   000018 C60000                LD        A, L:`date`
   \   00001B 5F                    CLRW      X
   \   00001C 97                    LD        XL, A
   \   00001D 89                    PUSHW     X
   \   00001E C60000                LD        A, L:month
   \   000021 97                    LD        XL, A
   \   000022 89                    PUSHW     X
   \   000023 C60000                LD        A, L:year
   \   000026 97                    LD        XL, A
   \   000027 89                    PUSHW     X
   \   000028 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00002B 8D000000              CALLF     printf
   \   00002F 5B06                  ADD       SP, #0x6
    796                 line_lcd=1;
   \   000031 35010000              MOV       L:line_lcd, #0x1
    797                 printf("\n%s",day_week[days]);
   \   000035 C60000                LD        A, L:days
   \   000038 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_266:
   \   00003C 89                    PUSHW     X
   \   00003D AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000040 8D000000              CALLF     printf
   \   000044 5B02                  ADD       SP, #0x2
    798                 pressKey();
   \   000046 8D000000              CALLF     ?Subroutine51
    799                 while(button !=0 && button !=1 && button !=2 && button !=3);;
    800                  button=0;
    801                 return;
    802              }
   \                     ??CrossCallReturnLabel_132:
   \   00004A 27BD                  JREQ      L:??SelectMenu_1
   \   00004C A101                  CP        A, #0x1
   \   00004E 27B9                  JREQ      L:??SelectMenu_1
   \   000050 A102                  CP        A, #0x2
   \   000052 27B5                  JREQ      L:??SelectMenu_1
   \                     ??SelectMenu_4:
   \   000054 A103                  CP        A, #0x3
   \   000056 26FC                  JRNE      L:??SelectMenu_4
   \   000058 20AF                  JRA       L:??SelectMenu_1
    803          
    804             ClearLine1();
   \                     ??SelectMenu_3:
   \   00005A 8D000000              CALLF     ?Subroutine44
    805              line_lcd=0;
    806             printf(setup_menu[si]);
   \                     ??CrossCallReturnLabel_115:
   \   00005E 8D000000              CALLF     ??Subroutine91_0
    807             ClearLine2();
   \                     ??CrossCallReturnLabel_270:
   \   000062 8D000000              CALLF     ?Subroutine48
    808              line_lcd=1;
    809             printf("\n+/-");
   \                     ??CrossCallReturnLabel_125:
   \   000066 AE0000                LDW       X, #`?<Constant "\\n+/-">`
   \   000069 8D000000              CALLF     printf
    810              do
    811              {
    812                pressKey();
   \                     ??SelectMenu_5:
   \   00006D 8D000000              CALLF     ?Subroutine51
    813          
    814                if(button==3) //Minus
   \                     ??CrossCallReturnLabel_133:
   \   000071 A103                  CP        A, #0x3
   \   000073 2606                  JRNE      L:??SelectMenu_6
    815                {
    816                   button=4;
   \   000075 35040000              MOV       L:button, #0x4
    817                   return;
   \   000079 2063                  JRA       L:??SelectMenu_2
    818                }
    819          
    820                if(button==1 || button==3)
   \                     ??SelectMenu_6:
   \   00007B A101                  CP        A, #0x1
   \   00007D 265A                  JRNE      L:??SelectMenu_7
    821                {
    822                   switch (si)
   \   00007F B600                  LD        A, S:?b8
   \   000081 2708                  JREQ      L:??SelectMenu_8
   \   000083 4A                    DEC       A
   \   000084 273D                  JREQ      L:??SelectMenu_9
   \   000086 4A                    DEC       A
   \   000087 2745                  JREQ      L:??SelectMenu_10
   \   000089 204E                  JRA       L:??SelectMenu_7
    823                   {
    824                   case 0:
    825                      ClearLine1();
   \                     ??SelectMenu_8:
   \   00008B 8D000000              CALLF     ?Subroutine45
    826                      ClearLine2();
    827                      line_lcd=0;
    828                      printf("\nClear");
   \                     ??CrossCallReturnLabel_117:
   \   00008F AE0000                LDW       X, #`?<Constant "\\nClear">`
   \   000092 8D000000              CALLF     printf
    829                      line_lcd=1;
   \   000096 35010000              MOV       L:line_lcd, #0x1
    830                      printf("\nall prog");
   \   00009A AE0000                LDW       X, #`?<Constant "\\nall prog">`
   \   00009D 8D000000              CALLF     printf
    831                      ResetProgram();
   \   0000A1 8D000000              CALLF     ResetProgram
    832                      pressKey();
   \   0000A5 8D000000              CALLF     ?Subroutine51
    833                       while(button !=0 && button !=1 && button !=2 && button !=3);;
   \                     ??CrossCallReturnLabel_134:
   \   0000A9 2603                  JRNE      ??lb_4
   \   0000AB CC0000                JP        L:??SelectMenu_1
   \                     ??lb_4:
   \   0000AE A101                  CP        A, #0x1
   \   0000B0 2603                  JRNE      ??lb_5
   \   0000B2 CC0000                JP        L:??SelectMenu_1
   \                     ??lb_5:
   \   0000B5 A102                  CP        A, #0x2
   \   0000B7 2603                  JRNE      ??lb_6
   \   0000B9 CC0000                JP        L:??SelectMenu_1
   \                     ??lb_6:
   \                     ??SelectMenu_11:
   \   0000BC A103                  CP        A, #0x3
   \   0000BE 26FC                  JRNE      L:??SelectMenu_11
   \   0000C0 CC0000                JP        L:??SelectMenu_1
    834                        button=0;
    835                      return;
    836                    break;
    837                   case 1:
    838                      ClearLine1();
   \                     ??SelectMenu_9:
   \   0000C3 8D000000              CALLF     ?Subroutine75
    839                      ClearLine2();
    840                      SetClock();
   \                     ??CrossCallReturnLabel_198:
   \   0000C7 8D000000              CALLF     SetClock
   \   0000CB CC0000                JP        L:??SelectMenu_1
    841                      button=0;
    842                      return;
    843                    break;
    844                   case 2:
    845                      ClearLine1();
   \                     ??SelectMenu_10:
   \   0000CE 8D000000              CALLF     ?Subroutine75
    846                      ClearLine2();
    847                      SetData();
   \                     ??CrossCallReturnLabel_197:
   \   0000D2 8D000000              CALLF     SetData
   \   0000D6 CC0000                JP        L:??SelectMenu_1
    848                      button=0;
    849                      return;
    850                    break;
    851                  }
    852                }
    853              } while (button !=0);
   \                     ??SelectMenu_7:
   \   0000D9 C60000                LD        A, L:button
   \   0000DC 268F                  JRNE      L:??SelectMenu_5
   \                     ??SelectMenu_2:
   \   0000DE 320000                POP       S:?b8
   \   0000E1 87                    RETF
    854          
    855          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000 5F                    CLRW      X
   \   000001 97                    LD        XL, A
   \   000002 58                    SLLW      X
   \   000003 DE0000                LDW       X, (L:day_week,X)
   \   000006 87                    RETF
    856          
    857          

   \                                 In section .far_func.text, align 1, keep-with-next
    858          long local_time(u8 hour,u8 minute)
    859          {
   \                     local_time:
   \   000000 B700                  LD        S:?b1, A
    860              ptim.tm_year=year+100;
   \   000002 8D000000              CALLF     ?Subroutine3
    861              ptim.tm_mon=month-1;
    862              ptim.tm_mday=date;
    863              ptim.tm_sec=seconds;
    864              ptim.tm_min=minute;
   \                     ??CrossCallReturnLabel_3:
   \   000006 B600                  LD        A, S:?b0
   \   000008 41                    EXG       A, XL
   \   000009 CF0000                LDW       L:ptim + 2, X
    865              ptim.tm_hour=hour;
   \   00000C 41                    EXG       A, XL
   \   00000D B600                  LD        A, S:?b1
   \   00000F 41                    EXG       A, XL
   \   000010 8D000000              CALLF     ?Subroutine66
    866              ptim.tm_isdst=-1;
    867              long local_time=mktime(&ptim);
    868          
    869               return local_time;
   \                     ??CrossCallReturnLabel_180:
   \   000014 AC000000              JPF       __mktime32
    870          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 CF0000                LDW       L:ptim + 4, X
   \   000003 5F                    CLRW      X
   \   000004 5A                    DECW      X
   \   000005 CF0000                LDW       L:ptim + 16, X
   \   000008 AE0000                LDW       X, #ptim
   \   00000B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 C60000                LD        A, L:year
   \   000003 5F                    CLRW      X
   \   000004 97                    LD        XL, A
   \   000005 1C0064                ADDW      X, #0x64
   \   000008 CF0000                LDW       L:ptim + 10, X
   \   00000B C60000                LD        A, L:month
   \   00000E 5F                    CLRW      X
   \   00000F 97                    LD        XL, A
   \   000010 5A                    DECW      X
   \   000011 CF0000                LDW       L:ptim + 8, X
   \   000014 C60000                LD        A, L:`date`
   \   000017 5F                    CLRW      X
   \   000018 97                    LD        XL, A
   \   000019 CF0000                LDW       L:ptim + 6, X
   \   00001C C60000                LD        A, L:seconds
   \   00001F 97                    LD        XL, A
   \   000020 CF0000                LDW       L:ptim, X
   \   000023 87                    RETF
    871          
    872          
    873          

   \                                 In section .far_func.text, align 1, keep-with-next
    874          bool SetData()
    875          {
    876              //Clear Display
    877             LCDInstr(0x01);
   \                     SetData:
   \   000000 8D000000              CALLF     ?Subroutine72
    878             Delay1(1000);
   \                     ??CrossCallReturnLabel_188:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
    879             if(InputDataProgram(FALSE))
   \   00000B 4F                    CLR       A
   \   00000C 8D000000              CALLF     InputDataProgram
   \   000010 A100                  CP        A, #0x0
   \   000012 2744                  JREQ      L:??SetData_0
    880              {
    881                year=y;
   \   000014 C60000                LD        A, L:`y`
   \   000017 C70000                LD        L:year, A
    882                month=m;
   \   00001A C60000                LD        A, L:m
   \   00001D C70000                LD        L:month, A
    883                date=d;
   \   000020 C60000                LD        A, L:d
   \   000023 C70000                LD        L:`date`, A
    884              }
    885              else return FALSE;
    886          
    887              //Find day of week
    888              ptim.tm_year=year+100;
   \   000026 8D000000              CALLF     ?Subroutine3
    889              ptim.tm_mon=month-1;
    890              ptim.tm_mday=date;
    891              ptim.tm_sec=seconds;
    892              ptim.tm_min=minutes;
   \                     ??CrossCallReturnLabel_2:
   \   00002A C60000                LD        A, L:minutes
   \   00002D 97                    LD        XL, A
   \   00002E CF0000                LDW       L:ptim + 2, X
    893              ptim.tm_hour=hours;
   \   000031 C60000                LD        A, L:hours
   \   000034 97                    LD        XL, A
   \   000035 8D000000              CALLF     ?Subroutine66
    894              ptim.tm_isdst=-1;
    895               if(mktime(&ptim)==-1)
   \                     ??CrossCallReturnLabel_179:
   \   000039 8D000000              CALLF     __mktime32
   \   00003D BE00                  LDW       X, S:?w0
   \   00003F A3FFFF                CPW       X, #0xffffffffffffffff
   \   000042 2605                  JRNE      L:??SetData_1
   \   000044 BE00                  LDW       X, S:?w1
   \   000046 A3FFFF                CPW       X, #0xffff
   \                     ??SetData_1:
   \   000049 260F                  JRNE      L:??SetData_2
    896               {
    897                 ClearLine1();
   \   00004B 8D000000              CALLF     ?Subroutine44
    898                  line_lcd=0;
    899                 printf("\nError");
   \                     ??CrossCallReturnLabel_113:
   \   00004F AE0000                LDW       X, #`?<Constant "\\nError">`
   \   000052 8D000000              CALLF     printf
   \   000056 2027                  JRA       L:??SetData_3
    900              }
   \                     ??SetData_0:
   \   000058 4F                    CLR       A
   \   000059 87                    RETF
    901                else
    902                {
    903                   ClearLine1();
   \                     ??SetData_2:
   \   00005A 8D000000              CALLF     ?Subroutine44
    904                   line_lcd=0;
    905                   printf("\nDay is");
   \                     ??CrossCallReturnLabel_114:
   \   00005E AE0000                LDW       X, #`?<Constant "\\nDay is">`
   \   000061 8D000000              CALLF     printf
    906                   ClearLine2();
   \   000065 8D000000              CALLF     ?Subroutine48
    907                   line_lcd=1;
    908                   days= ptim.tm_wday+1;   //int    tm_wday  day of week [0,6] (Sunday = 0)
   \                     ??CrossCallReturnLabel_124:
   \   000069 CE0000                LDW       X, L:ptim + 12
   \   00006C 9F                    LD        A, XL
   \   00006D 4C                    INC       A
   \   00006E C70000                LD        L:days, A
    909                   printf("\n%s",day_week[days]);
   \   000071 8D000000              CALLF     ??Subroutine89_0
    910          
    911                }
   \                     ??CrossCallReturnLabel_265:
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    912          
    913               // Wait for key or time out
    914                do
    915              {
    916                pressKey();
   \                     ??SetData_3:
   \   00007F 8D000000              CALLF     ?Subroutine51
    917              } while ( button !=0 && button !=1 && button !=2 && button !=3);
   \                     ??CrossCallReturnLabel_131:
   \   000083 270C                  JREQ      L:??SetData_4
   \   000085 A101                  CP        A, #0x1
   \   000087 2708                  JREQ      L:??SetData_4
   \   000089 A102                  CP        A, #0x2
   \   00008B 2704                  JREQ      L:??SetData_4
   \   00008D A103                  CP        A, #0x3
   \   00008F 26EE                  JRNE      L:??SetData_3
    918          
    919          
    920              // Set parameter to DS1307 + time byte
    921                if(!Set_DS1307())
   \                     ??SetData_4:
   \   000091 8D000000              CALLF     Set_DS1307
   \   000095 A100                  CP        A, #0x0
   \   000097 2603                  JRNE      L:??SetData_5
    922                {
    923                  enableInterrupts();
   \   000099 9A                    RIM
    924                  return FALSE;
   \   00009A 20BC                  JRA       ??SetData_0
    925                }
    926          
    927            return TRUE;
   \                     ??SetData_5:
   \   00009C A601                  LD        A, #0x1
   \   00009E 87                    RETF
    928          }
    929          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_190:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine81_0
   \   000007                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine83_0
   \   000006                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
    930          bool SetClock()
    931           {
    932             //Clear Display
    933             LCDInstr(0x01);
   \                     SetClock:
   \   000000 8D000000              CALLF     ?Subroutine18
    934             Delay1(1000);
    935             line_lcd=0;
    936              printf("\nHour>");
   \                     ??CrossCallReturnLabel_216:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   000007 8D000000              CALLF     printf
    937                do
    938              {
    939                line_lcd=1;
   \                     ??SetClock_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    940                 if(blink_flag)printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   00000F C60000                LD        A, L:minutes
   \   000012 905F                  CLRW      Y
   \   000014 9097                  LD        YL, A
   \   000016 C60000                LD        A, L:seconds
   \   000019 5F                    CLRW      X
   \   00001A 97                    LD        XL, A
   \   00001B C60000                LD        A, L:blink_flag
   \   00001E 89                    PUSHW     X
   \   00001F 9089                  PUSHW     Y
   \   000021 2710                  JREQ      L:??SetClock_1
   \   000023 C60000                LD        A, L:hours
   \   000026 97                    LD        XL, A
   \   000027 89                    PUSHW     X
   \   000028 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00002B 8D000000              CALLF     printf
   \   00002F 5B06                  ADD       SP, #0x6
   \   000031 2009                  JRA       L:??SetClock_2
    941                  else printf("\n  :%02d:%02d",minutes,seconds);
   \                     ??SetClock_1:
   \   000033 AE0000                LDW       X, #`?<Constant "\\n  :%02d:%02d">`
   \   000036 8D000000              CALLF     printf
   \   00003A 5B04                  ADD       SP, #0x4
    942                 hours=adj(0,23,hours);
   \                     ??SetClock_2:
   \   00003C C60000                LD        A, L:hours
   \   00003F B700                  LD        S:?b1, A
   \   000041 35170000              MOV       S:?b0, #0x17
   \   000045 8D000000              CALLF     ??Subroutine83_0
    943              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_224:
   \   000049 C70000                LD        L:hours, A
   \   00004C 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_107:
   \   000050 27B9                  JREQ      L:??SetClock_0
    944          
    945               line_lcd=0;
   \   000052 725F0000              CLR       L:line_lcd
    946               printf("\nMinute>");
   \   000056 AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000059 8D000000              CALLF     printf
    947                do
    948              {
    949                line_lcd=1;
   \                     ??SetClock_3:
   \   00005D 35010000              MOV       L:line_lcd, #0x1
    950                if(blink_flag) printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   000061 C60000                LD        A, L:hours
   \   000064 5F                    CLRW      X
   \   000065 97                    LD        XL, A
   \   000066 C60000                LD        A, L:seconds
   \   000069 905F                  CLRW      Y
   \   00006B 9097                  LD        YL, A
   \   00006D C60000                LD        A, L:blink_flag
   \   000070 9089                  PUSHW     Y
   \   000072 2713                  JREQ      L:??SetClock_4
   \   000074 C60000                LD        A, L:minutes
   \   000077 9097                  LD        YL, A
   \   000079 9089                  PUSHW     Y
   \   00007B 89                    PUSHW     X
   \   00007C AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007F 8D000000              CALLF     printf
   \   000083 5B06                  ADD       SP, #0x6
   \   000085 200A                  JRA       L:??SetClock_5
    951                 else printf("\n%02d:  :%02d",hours,seconds);
   \                     ??SetClock_4:
   \   000087 89                    PUSHW     X
   \   000088 AE0000                LDW       X, #`?<Constant "\\n%02d:  :%02d">`
   \   00008B 8D000000              CALLF     printf
   \   00008F 5B04                  ADD       SP, #0x4
    952                 minutes=adj(0,59,minutes);
   \                     ??SetClock_5:
   \   000091 C60000                LD        A, L:minutes
   \   000094 8D000000              CALLF     ?Subroutine30
    953              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_229:
   \   000098 C70000                LD        L:minutes, A
   \   00009B 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_108:
   \   00009F 27BC                  JREQ      L:??SetClock_3
    954          
    955              line_lcd=0;
   \   0000A1 725F0000              CLR       L:line_lcd
    956              printf("\nSeconds>");
   \   0000A5 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   0000A8 8D000000              CALLF     printf
    957              do
    958              {
    959                line_lcd=1;
   \                     ??SetClock_6:
   \   0000AC 35010000              MOV       L:line_lcd, #0x1
    960               if(blink_flag)printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   0000B0 C60000                LD        A, L:hours
   \   0000B3 5F                    CLRW      X
   \   0000B4 97                    LD        XL, A
   \   0000B5 C60000                LD        A, L:minutes
   \   0000B8 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_98:
   \   0000BC 2717                  JREQ      L:??SetClock_7
   \   0000BE C60000                LD        A, L:seconds
   \   0000C1 9097                  LD        YL, A
   \   0000C3 9089                  PUSHW     Y
   \   0000C5 8D000000              CALLF     L:?push_w0
   \   0000C9 89                    PUSHW     X
   \   0000CA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CD 8D000000              CALLF     printf
   \   0000D1 5B06                  ADD       SP, #0x6
   \   0000D3 200E                  JRA       L:??SetClock_8
    961                else printf("\n%02d:%02d:  ",hours,minutes);
   \                     ??SetClock_7:
   \   0000D5 8D000000              CALLF     L:?push_w0
   \   0000D9 89                    PUSHW     X
   \   0000DA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:  ">`
   \   0000DD 8D000000              CALLF     printf
   \   0000E1 5B04                  ADD       SP, #0x4
    962                 seconds=adj(0,59,seconds);
   \                     ??SetClock_8:
   \   0000E3 C60000                LD        A, L:seconds
   \   0000E6 8D000000              CALLF     ?Subroutine30
    963              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_228:
   \   0000EA C70000                LD        L:seconds, A
   \   0000ED 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_109:
   \   0000F1 27B9                  JREQ      L:??SetClock_6
    964          
    965                // Set parameter to DS1307 + time byte
    966                if(!Set_DS1307()) enableInterrupts();
   \   0000F3 8D000000              CALLF     Set_DS1307
   \   0000F7 A100                  CP        A, #0x0
   \   0000F9 2601                  JRNE      L:??SetClock_9
   \   0000FB 9A                    RIM
    967          
    968            return TRUE;
   \                     ??SetClock_9:
   \   0000FC A601                  LD        A, #0x1
   \   0000FE 87                    RETF
    969          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 905F                  CLRW      Y
   \   000002 9097                  LD        YL, A
   \   000004 90BF00                LDW       S:?w0, Y
   \   000007 C60000                LD        A, L:blink_flag
   \   00000A 87                    RETF
    970          
    971          

   \                                 In section .far_func.text, align 1, keep-with-next
    972          u8 adj(u8 min,u8 max,u8 now)
    973          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    974             u8 adj=now;
    975             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    976             {
    977               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    978               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    979             }
    980             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    981             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    982             {
    983               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    984               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    985             }
    986             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    987             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    988          
    989             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    990          }
    991          
    992          

   \                                 In section .far_func.text, align 1, keep-with-next
    993          bool key_ok_on()
    994          {
    995            //Read Key OK
    996            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_52:
   \   000004 2649                  JRNE      L:??key_ok_on_0
    997             {
    998               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    999                key_ok_hold=FALSE;
   \   00000A 725F0000              CLR       L:key_ok_hold
   1000                while((timer2 < KEY_TIME_HOLD) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000E CE0000                LDW       X, L:timer2
   \   000011 A3FDE8                CPW       X, #0xfde8
   \   000014 2406                  JRNC      L:??key_ok_on_2
   \   000016 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_53:
   \   00001A 27F2                  JREQ      L:??key_ok_on_1
   1001                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A30FA0                CPW       X, #0xfa0
   \   000022 252B                  JRC       L:??key_ok_on_0
   1002                 {
   1003                      if(timer2>=KEY_TIME_HOLD)
   \   000024 CE0000                LDW       X, L:timer2
   \   000027 A3FDE8                CPW       X, #0xfde8
   \   00002A 2507                  JRC       L:??key_ok_on_3
   1004                      {
   1005                        key_ok_hold=TRUE;
   \   00002C 35010000              MOV       L:key_ok_hold, #0x1
   1006                         return TRUE;
   \                     ??key_ok_on_4:
   \   000030 A601                  LD        A, #0x1
   \   000032 87                    RETF
   1007                      }
   1008                   timer2=0; // and next must be release
   \                     ??key_ok_on_3:
   \   000033 5F                    CLRW      X
   \   000034 CF0000                LDW       L:timer2, X
   1009                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000037 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_54:
   \   00003B 2712                  JREQ      L:??key_ok_on_0
   1010                    {
   1011                       beep(2000);
   \   00003D 8D000000              CALLF     ?Subroutine33
   1012                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_73:
   \   000041 2606                  JRNE      L:??key_ok_on_5
   1013                        {
   1014                         hardware.lcdLed=1;
   \   000043 8D000000              CALLF     ?Subroutine35
   1015                         lcdLedTimer=LCDLEDON;
   1016                         return FALSE;
   \                     ??CrossCallReturnLabel_78:
   \   000047 2006                  JRA       ??key_ok_on_0
   1017                        }
   1018                       hardware.lcdLed=1;
   \                     ??key_ok_on_5:
   \   000049 8D000000              CALLF     ?Subroutine35
   1019                       lcdLedTimer=LCDLEDON;
   1020          
   1021                      return TRUE;   //if realease retrun true
   \                     ??CrossCallReturnLabel_79:
   \   00004D 20E1                  JRA       ??key_ok_on_4
   1022                    }
   1023                 }
   1024             }
   1025          
   1026            return FALSE;
   \                     ??key_ok_on_0:
   \   00004F 4F                    CLR       A
   \   000050 87                    RETF
   1027          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
   1028          
   1029          
   1030          

   \                                 In section .far_func.text, align 1, keep-with-next
   1031           bool key_plus_on()
   1032          {
   1033            //Read Key OK
   1034              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_90:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
   1035               {
   1036               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
   1037                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_64:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_89:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
   1038                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
   1039                  {
   1040                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_56:
   \   000026 2711                  JREQ      L:??key_plus_on_0
   1041                    {
   1042                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine33
   1043                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_75:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
   1044                        {
   1045                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine35
   1046                         lcdLedTimer=LCDLEDON;
   1047                         return FALSE;
   \                     ??CrossCallReturnLabel_81:
   \   000032 2005                  JRA       ??key_plus_on_0
   1048                        }
   1049                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine34
   1050                        lcdLedTimer=LCDLEDON;
   1051          
   1052                      return TRUE;
   1053                    }
   1054                  }
   1055               }
   \                     ??CrossCallReturnLabel_77:
   \   000038 87                    RETF
   1056          
   1057            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
   1058          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_194:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
   1059          
   1060          

   \                                 In section .far_func.text, align 1, keep-with-next
   1061            bool key_minus_on()
   1062          {
   1063            //Read Key OK
   1064             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_92:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
   1065               {
   1066               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
   1067                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_63:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_91:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
   1068                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
   1069                  {
   1070                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_55:
   \   000026 2711                  JREQ      L:??key_minus_on_0
   1071                   {
   1072                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine33
   1073                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_74:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
   1074                       {
   1075                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine35
   1076                        lcdLedTimer=LCDLEDON;
   1077                        return FALSE;
   \                     ??CrossCallReturnLabel_80:
   \   000032 2005                  JRA       ??key_minus_on_0
   1078                       }
   1079                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine34
   1080                     lcdLedTimer=LCDLEDON;
   1081                     return TRUE;
   1082                   }
   1083                  }
   1084               }
   \                     ??CrossCallReturnLabel_76:
   \   000038 87                    RETF
   1085          
   1086            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
   1087          }
   1088          
   1089          

   \                                 In section .far_func.text, align 1, keep-with-next
   1090          bool  key_ok_plus()
   1091          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
   1092            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_27:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
   1093            {
   1094                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
   1095                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_71:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_28:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
   1096                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_72:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_210
   1097                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine79
   1098                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_210:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
   1099                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
   1100            }
   1101          
   1102           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
   1103          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
   1104          
   1105          

   \                                 In section .far_func.text, align 1, keep-with-next
   1106          void SaveStatus()
   1107          {
   1108            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     EEPROM_INIT
   1109            size_status=sizeof(status);
   \   000004 35020000              MOV       L:size_status, #0x2
   1110            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \   000008 CE0000                LDW       X, L:status
   \   00000B 4F                    CLR       A
   \   00000C 01                    RRWA      X, A
   \   00000D 9F                    LD        A, XL
   \   00000E AE4000                LDW       X, #0x4000
   \   000011 8D000000              CALLF     ?Subroutine49
   1111            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   \                     ??CrossCallReturnLabel_127:
   \   000015 CE0000                LDW       X, L:status
   \   000018 9F                    LD        A, XL
   \   000019 AE4001                LDW       X, #0x4001
   \   00001C 8D000000              CALLF     ?Subroutine49
   1112            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_126:
   \   000020 A6F7                  LD        A, #0xf7
   \   000022 8D000000              CALLF     FLASH_Lock
   1113            hardware.lcdLed=1;
   \   000026 8D000000              CALLF     ?Subroutine35
   1114            lcdLedTimer=LCDLEDON;
   1115          }
   \                     ??CrossCallReturnLabel_83:
   \   00002A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
   1116          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1117          void ReadStatus()
   1118          {
   \                     ReadStatus:
   \   000000 3B0000                PUSH      S:?b8
   1119             *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \   000003 AE4000                LDW       X, #0x4000
   \   000006 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_138:
   \   00000A B700                  LD        S:?b8, A
   \   00000C AE4001                LDW       X, #0x4001
   \   00000F 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_137:
   \   000013 905F                  CLRW      Y
   \   000015 9097                  LD        YL, A
   \   000017 5F                    CLRW      X
   \   000018 41                    EXG       A, XL
   \   000019 B600                  LD        A, S:?b8
   \   00001B 41                    EXG       A, XL
   \   00001C 4F                    CLR       A
   \   00001D 02                    RLWA      X, A
   \   00001E 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_208:
   \   000022 CF0000                LDW       L:status, X
   1120              status_check = *(u16*)(&status);
   \   000025 CE0000                LDW       X, L:status
   \   000028 CF0000                LDW       L:status_check, X
   1121          }
   \   00002B 320000                POP       S:?b8
   \   00002E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte
   1122          
   1123          

   \                                 In section .far_func.text, align 1, keep-with-next
   1124          void SaveProgram ()
   1125          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
   1126               char *pp = (char*)&programpoint[0];
   1127              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1128             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1129             {
   1130              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 8D000000              CALLF     ?Subroutine46
   1131             }
   \                     ??CrossCallReturnLabel_119:
   \   000015 25F2                  JRC       L:??SaveProgram_0
   1132              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 8D000000              CALLF     FLASH_Lock
   1133          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 1C4002                ADDW      X, #0x4002
   \   000003 8D000000              CALLF     L:?sext32_l0_x
   \   000007 8D000000              CALLF     FLASH_ProgramByte
   \   00000B B600                  LD        A, S:?b8
   \   00000D 4C                    INC       A
   \   00000E B700                  LD        S:?b8, A
   \   000010 A130                  CP        A, #0x30
   \   000012 87                    RETF
   1134          
   1135          

   \                                 In section .far_func.text, align 1, keep-with-next
   1136          void ReadProgram()
   1137          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1138              char *pp = (char*)&programpoint[0];
   1139            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1140             {
   1141               *(pp+i)=FLASH_ReadByte(EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1142             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A130                  CP        A, #0x30
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1143          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1144          
   1145          

   \                                 In section .far_func.text, align 1, keep-with-next
   1146          void ResetProgram()
   1147          {
   \                     ResetProgram:
   \   000000 3B0000                PUSH      S:?b8
   1148          
   1149              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1150             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1151             {
   1152              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,0);
   \                     ??ResetProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A B600                  LD        A, S:?b8
   \   00000C 41                    EXG       A, XL
   \   00000D 8D000000              CALLF     ?Subroutine46
   1153             }
   \                     ??CrossCallReturnLabel_120:
   \   000011 25F6                  JRC       L:??ResetProgram_0
   1154              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 8D000000              CALLF     FLASH_Lock
   1155          
   1156               //Reload ProgrmaPoint
   1157              status.daily=0;
   \   000019 CE0000                LDW       X, L:status
   \   00001C 01                    RRWA      X, A
   \   00001D A487                  AND       A, #0x87
   \   00001F 02                    RLWA      X, A
   \   000020 CF0000                LDW       L:status, X
   1158              SaveStatus();
   \   000023 8D000000              CALLF     SaveStatus
   1159              ReadStatus();
   \   000027 8D000000              CALLF     ReadStatus
   1160             ReadProgram();
   \   00002B 8D000000              CALLF     ReadProgram
   1161          }
   \   00002F 320000                POP       S:?b8
   \   000032 87                    RETF
   1162          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 AE003C                LDW       X, #0x3c
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 93                    LDW       X, Y
   \   000006 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1163          void CheckProgramPoint()
   1164          {
   \                     CheckProgramPoint:
   \   000000 8D000000              CALLF     L:?push_l2
   1165             if(status.manu) return;
   \   000004 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_199:
   \   000008 2703                  JREQ      ??lb_2
   \   00000A CC0000                JP        L:??CheckProgramPoint_0
   1166             u16 timenow=hours*60+minutes;
   \                     ??lb_2:
   \   00000D C60000                LD        A, L:hours
   \   000010 905F                  CLRW      Y
   \   000012 9097                  LD        YL, A
   \   000014 8D000000              CALLF     ??Subroutine84_0
   \                     ??CrossCallReturnLabel_232:
   \   000018 C60000                LD        A, L:minutes
   \   00001B 9097                  LD        YL, A
   \   00001D 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_207:
   \   000021 9093                  LDW       Y, X
   1167             power=8; //power off
   \   000023 35080000              MOV       L:power, #0x8
   1168             //status.on=0;
   1169              //u8 daytoday;
   1170               for( u8 i=0; i<8;i++)
   \   000027 3F00                  CLR       S:?b8
   1171               {
   1172          
   1173                 if (programpoint[i].day == 0) continue;  // Point is off goto next point
   \                     ??CheckProgramPoint_1:
   \   000029 5F                    CLRW      X
   \   00002A 41                    EXG       A, XL
   \   00002B B600                  LD        A, S:?b8
   \   00002D 41                    EXG       A, XL
   \   00002E BF00                  LDW       S:?w1, X
   \   000030 AE0006                LDW       X, #0x6
   \   000033 BF00                  LDW       S:?w0, X
   \   000035 BE00                  LDW       X, S:?w1
   \   000037 8D000000              CALLF     L:?mul16_x_x_w0
   \   00003B 1C0000                ADDW      X, #programpoint
   \   00003E BF00                  LDW       S:?w0, X
   \   000040 92C600                LD        A, [S:?w0.w]
   \   000043 B700                  LD        S:?b9, A
   \   000045 276B                  JREQ      L:??CheckProgramPoint_2
   1174          
   1175                  //For Daily Allarm
   1176                 if(programpoint[i].day==8)
   \   000047 1C0004                ADDW      X, #0x4
   \   00004A BF00                  LDW       S:?w3, X
   \   00004C BE00                  LDW       X, S:?w0
   \   00004E 1C0003                ADDW      X, #0x3
   \   000051 BF00                  LDW       S:?w1, X
   \   000053 BE00                  LDW       X, S:?w0
   \   000055 1C0002                ADDW      X, #0x2
   \   000058 BF00                  LDW       S:?w2, X
   \   00005A BE00                  LDW       X, S:?w0
   \   00005C 5C                    INCW      X
   \   00005D A108                  CP        A, #0x8
   \   00005F 2620                  JRNE      L:??CheckProgramPoint_3
   1177                 {
   1178                  int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   000061 8D000000              CALLF     ?Subroutine1
   1179                  int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   1180                      if (timeoff > timeon)  // Time off is today
   \                     ??CrossCallReturnLabel_0:
   \   000065 2E13                  JRSGE     L:??CheckProgramPoint_4
   1181                      {
   1182                        if ((timenow >= timeon) && (timenow < timeoff))
   \   000067 90B300                CPW       Y, S:?w2
   \   00006A 2546                  JRC       L:??CheckProgramPoint_2
   \                     ??CheckProgramPoint_5:
   \   00006C 90B300                CPW       Y, S:?w0
   \   00006F 2441                  JRNC      L:??CheckProgramPoint_2
   1183                        {
   1184                          power = i;
   \                     ??CheckProgramPoint_6:
   \   000071 B600                  LD        A, S:?b8
   \   000073 C70000                LD        L:power, A
   1185                           //goto exit_sub;
   1186                          return;
   \   000076 AC000000              JPF       L:?epilogue_l2
   1187                        }
   1188          
   1189                       }
   1190                       else // Time off is next day
   1191                       {
   1192                        if (timenow >= timeon || timenow < timeoff)
   \                     ??CheckProgramPoint_4:
   \   00007A 90B300                CPW       Y, S:?w2
   \   00007D 24F2                  JRNC      L:??CheckProgramPoint_6
   \   00007F 20EB                  JRA       L:??CheckProgramPoint_5
   1193                        {
   1194                         power = i;
   1195                          //goto  exit_sub;
   1196                         return;
   1197                        }
   1198                      }
   1199                      continue;
   1200                 }
   1201          
   1202                     // for Day of the Week Allarm or Next Day
   1203                    if (programpoint[i].day != 8) //Point is Weekly Mode
   1204                    {
   1205                      if (programpoint[i].day == days)   // Check for On
   \                     ??CheckProgramPoint_3:
   \   000081 C60000                LD        A, L:days
   \   000084 B100                  CP        A, S:?b9
   \   000086 2619                  JRNE      L:??CheckProgramPoint_7
   1206                       {
   1207                        int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   000088 8D000000              CALLF     ?Subroutine1
   1208                        int timeoff = programpoint[i].offhour * 60 + programpoint[i].offminute;
   1209                         if (timeoff > timeon)  // Time off is today
   \                     ??CrossCallReturnLabel_1:
   \   00008C 2E0C                  JRSGE     L:??CheckProgramPoint_8
   1210                            {
   1211                              if ((timenow >= timeon) && (timenow < timeoff))
   \   00008E 90B300                CPW       Y, S:?w2
   \   000091 251F                  JRC       L:??CheckProgramPoint_2
   \                     ??CheckProgramPoint_9:
   \   000093 90B300                CPW       Y, S:?w0
   \   000096 241A                  JRNC      L:??CheckProgramPoint_2
   \   000098 20D7                  JRA       L:??CheckProgramPoint_6
   1212                               {
   1213                                power = i;
   1214                                 //goto exit_sub;
   1215                                return;
   1216                               }
   1217                            }
   1218                          else                 // Time off is next day
   1219                            {
   1220          
   1221                              if (timenow >= timeon || timenow < timeoff)
   \                     ??CheckProgramPoint_8:
   \   00009A 90B300                CPW       Y, S:?w2
   \   00009D 24D2                  JRNC      L:??CheckProgramPoint_6
   \   00009F 20F2                  JRA       L:??CheckProgramPoint_9
   1222                               {
   1223                               power = i;
   1224                               //goto exit_sub;
   1225                               return;
   1226                               }
   1227                            }
   1228                         continue;
   1229                       }
   1230          
   1231          
   1232                     if (programpoint[i].dayoff == days) //Check for off
   \                     ??CheckProgramPoint_7:
   \   0000A1 BE00                  LDW       X, S:?w0
   \   0000A3 1C0005                ADDW      X, #0x5
   \   0000A6 F1                    CP        A, (X)
   \   0000A7 2609                  JRNE      L:??CheckProgramPoint_2
   1233                      {
   1234                       int timeoff = programpoint[i].offhour * 60 + programpoint[i].offminute;
   1235                       if (timenow < timeoff)
   \   0000A9 8D000000              CALLF     ?Subroutine67
   1236                        {
   1237                          power = i; //On
   1238                           //goto exit_sub;
   1239                          return;
   1240                        }
   1241                        continue;
   1242                      }
   1243                   }
   1244          
   1245          
   1246          
   1247                 // for Monthly Allarm
   1248                  else if (programpoint[i].day == 10)//Point is Monthly Mode
   1249                   {
   1250          
   1251          
   1252          
   1253          
   1254          
   1255                   }
   1256               }
   \                     ??CrossCallReturnLabel_181:
   \   0000AD 90B300                CPW       Y, S:?w0
   \   0000B0 25BF                  JRC       L:??CheckProgramPoint_6
   \                     ??CheckProgramPoint_2:
   \   0000B2 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_37:
   \   0000B6 2403                  JRNC      ??lb_3
   \   0000B8 CC0000                JP        L:??CheckProgramPoint_1
   \                     ??lb_3:
   \                     ??CheckProgramPoint_0:
   \   0000BB AC000000              JPF       L:?epilogue_l2
   1257          
   1258          
   1259          
   1260          
   1261          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 F6                    LD        A, (X)
   \   000001 5F                    CLRW      X
   \   000002 97                    LD        XL, A
   \   000003 BF00                  LDW       S:?w5, X
   \   000005 AE003C                LDW       X, #0x3c
   \   000008 BF00                  LDW       S:?w0, X
   \   00000A BE00                  LDW       X, S:?w5
   \   00000C 8D000000              CALLF     L:?mul16_x_x_w0
   \   000010 BF00                  LDW       S:?w0, X
   \   000012 92C600                LD        A, [S:?w2.w]
   \   000015 5F                    CLRW      X
   \   000016 97                    LD        XL, A
   \   000017 BF00                  LDW       S:?w2, X
   \   000019 BE00                  LDW       X, S:?w0
   \   00001B 72BB0000              ADDW      X, S:?w2
   \   00001F BF00                  LDW       S:?w2, X
   \   000021 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_182:
   \   000025 BE00                  LDW       X, S:?w2
   \   000027 B300                  CPW       X, S:?w0
   \   000029 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 92C600                LD        A, [S:?w1.w]
   \   000003 5F                    CLRW      X
   \   000004 97                    LD        XL, A
   \   000005 BF00                  LDW       S:?w1, X
   \   000007 AE003C                LDW       X, #0x3c
   \   00000A BF00                  LDW       S:?w0, X
   \   00000C BE00                  LDW       X, S:?w1
   \   00000E 8D000000              CALLF     L:?mul16_x_x_w0
   \   000012 BF00                  LDW       S:?w0, X
   \   000014 92C600                LD        A, [S:?w3.w]
   \   000017 5F                    CLRW      X
   \   000018 97                    LD        XL, A
   \   000019 BF00                  LDW       S:?w1, X
   \   00001B BE00                  LDW       X, S:?w0
   \   00001D 72BB0000              ADDW      X, S:?w1
   \   000021 BF00                  LDW       S:?w0, X
   \   000023 87                    RETF
   1262          
   1263          

   \                                 In section .far_func.text, align 1, keep-with-next
   1264          bool Read_Allarm()
   1265          {
   1266             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1267              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1268             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1269              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1270             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1271              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1272             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1273              if(daily_hour_off > 59) return FALSE;
   1274             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1275              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1276             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1277              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1278             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1279              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1280            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1281          }
   1282          

   \                                 In section .far_func.text, align 1, keep-with-next
   1283          void EEPROM_INIT()
   1284          {
   1285            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1286            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1287            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1288          
   1289          }
   1290          
   1291          

   \                                 In section .far_func.text, align 1, keep-with-next
   1292          void GpioConfiguration()
   1293          {
   1294          
   1295            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1296          
   1297            // ADC PE6 NEW PB0
   1298            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1299          
   1300            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1301            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1302          
   1303            //PD0 Led
   1304            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine58
   1305            //I2C
   1306            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_155:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1307            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine61
   1308            // Remap Pins pb4,pb5  sda,scl ;
   1309          
   1310             //Init KEY OK,PLUS,MINUS
   1311            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_162:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine61
   1312            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_163:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine61
   1313            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_164:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1314          
   1315            //Init DS18b20 data pin
   1316            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine58
   1317          
   1318            // Power Pin
   1319             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_154:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine58
   1320          
   1321            // lcdLed Pin
   1322             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_HIZ_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_153:
   \   00006B 35900000              MOV       S:?b0, #0x90
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1323          
   1324          
   1325          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1326          

   \                                 In section .far_func.text, align 1, keep-with-next
   1327          void InitClk()
   1328          {
   1329            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1330            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1331            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1332            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1333            CLK_SOURCE_HSI,       // Switch to internal timer.
   1334            DISABLE,              // Disable the clock switch interrupt.
   1335            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1336          
   1337            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine59
   1338            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_156:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine59
   1339            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_157:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine59
   1340            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_158:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine59
   1341            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_159:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1342          
   1343          
   1344          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1345          
   1346          
   1347          

   \                                 In section .far_func.text, align 1, keep-with-next
   1348          void LCDDataOut(u8 data)
   1349          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1350            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_19:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_249
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine87_0
   1351            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_249:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_18:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_250
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine87_0
   1352            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_250:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_17:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_251
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine87_0
   1353            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_251:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_16:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_252
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine87_0
   1354          }
   \                     ??CrossCallReturnLabel_252:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_258:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1355          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine87_0
   \   000002                       ;               // Fall through to label ??Subroutine87_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1356          void InitLcd()
   1357          {
   1358           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine13
   1359            LCD_RW(0);
   1360            LCD_RS(0);
   \                     ??CrossCallReturnLabel_21:
   \   000006 8D000000              CALLF     ?Subroutine14
   1361            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_247:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine19
   1362          
   1363            LCDInstrNibble(0x03);
   1364             Delay1(10);
   1365            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_30:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1366             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine19
   1367            LCDInstrNibble(0x03);
   1368             Delay1(10);
   1369          
   1370             //Line 4
   1371            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_29:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1372            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1373            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1374            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1375          
   1376            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1377            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1378          
   1379            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_40:
   \   000048 8D000000              CALLF     Delay1
   1380            Delay1(250);
   1381          
   1382            LCDInstr(0x06);
   \   00004C A606                  LD        A, #0x6
   \   00004E 8D000000              CALLF     LCDInstr
   1383            Delay1(10);
   \   000052 AE000A                LDW       X, #0xa
   \   000055 AC000000              JPF       Delay1
   1384          
   1385          
   1386          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_256:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_255:
   \   00000A 87                    RETF
   1387          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_253:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_213:
   \   00000D                       REQUIRE ??Subroutine80_0
   \   00000D                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_212:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1388          void LCDInstr(u8 Instr)
   1389          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1390            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine14
   1391            LCD_RW(0);
   \                     ??CrossCallReturnLabel_245:
   \   000009 2000                  JRA       ?Subroutine0
   1392            LCDDataOut(Instr>>4);
   1393            PulseEnable();
   1394            LCDDataOut(Instr & 0x0F);
   1395            PulseEnable();
   1396          }
   1397          

   \                                 In section .far_func.text, align 1, keep-with-next
   1398          void LCDData(u8 Data)
   1399          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1400            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1401            LCD_RW(0);
   \                     ??CrossCallReturnLabel_15:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1402            LCDDataOut(Data>>4);
   1403            PulseEnable() ;
   1404            LCDDataOut(Data & 0x0F) ;
   1405            PulseEnable();
   1406          }
   1407          

   \                                 In section .far_func.text, align 1, keep-with-next
   1408          void LCDInstrNibble(u8 Instr)
   1409          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1410            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine13
   1411            LCD_RW(0);
   1412            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_20:
   \   00000B AC000000              JPF       ??Subroutine80_0
   1413            PulseEnable();
   1414          }
   1415          

   \                                 In section .far_func.text, align 1, keep-with-next
   1416          void PulseEnable(void)
   1417          {
   1418            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine6
   1419             Delay1(1);
   1420            LCD_EN(1);
   1421             Delay1(1);
   1422            LCD_EN(0);
   \                     ??CrossCallReturnLabel_6:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine87_0
   1423             Delay1(1);
   \                     ??CrossCallReturnLabel_248:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1424          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_257:
   \   000006 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_260:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_259:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1425          

   \                                 In section .far_func.text, align 1, keep-with-next
   1426          void LCD_Busy(void)
   1427          {
   1428             //set Port D7 as Input
   1429             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1430             //Set Read
   1431             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1432             LCD_RS(0);
   \                     ??CrossCallReturnLabel_14:
   \   000013 8D000000              CALLF     ?Subroutine14
   1433             // Read Busy Flag
   1434                timer2=0;
   \                     ??CrossCallReturnLabel_246:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1435             do
   1436             {
   1437             // Enable set
   1438               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine6
   1439                Delay1(1);
   1440               LCD_EN(1);
   1441                Delay1(1);
   1442             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_7:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1443                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1444                //Clear read
   1445              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine87_0
   1446             //set Port D7 as Output
   1447             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_254:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1448          
   1449          }
   1450          
   1451          

   \                                 In section .far_func.text, align 1, keep-with-next
   1452          void LCD(u8 data)
   1453           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1454             //  static u8 linet=0;
   1455          
   1456          
   1457               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2678                  JRNE      L:??CrossCallReturnLabel_238
   1458               {
   1459          
   1460                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 2730                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2739                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 2742                  JREQ      L:??LCD_3
   \   000018 204A                  JRA       L:??LCD_4
   1461                   {
   1462                   case 0:
   1463                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1464                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1465                      {
   1466                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1467                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     LCDData
   1468                         Delay1(1);
   \   000030 8D000000              CALLF     ??Subroutine85_0
   1469                      }
   \                     ??CrossCallReturnLabel_237:
   \   000034 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_34:
   \   000038 25E8                  JRC       L:??LCD_5
   1470                     LCDInstr(0x80 | 0x00);
   \   00003A A680                  LD        A, #0x80
   \   00003C 8D000000              CALLF     ?Subroutine70
   1471                     count=0;
   1472                     break;
   \                     ??CrossCallReturnLabel_183:
   \   000040 2022                  JRA       L:??LCD_4
   1473                   case 1:
   1474                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000042 A6C0                  LD        A, #0xc0
   \   000044 8D000000              CALLF     LCDInstr
   1475                     count=20;
   \   000048 35140000              MOV       L:count, #0x14
   1476                     break;
   \   00004C 2016                  JRA       L:??LCD_4
   1477                   case 2:
   1478                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004E A694                  LD        A, #0x94
   \   000050 8D000000              CALLF     LCDInstr
   1479                     count=40;
   \   000054 35280000              MOV       L:count, #0x28
   1480                     break;
   \   000058 200A                  JRA       L:??LCD_4
   1481                   case 3:
   1482                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00005A A6D4                  LD        A, #0xd4
   \   00005C 8D000000              CALLF     LCDInstr
   1483                     count=60;
   \   000060 353C0000              MOV       L:count, #0x3c
   1484                     break;
   1485                   //default:
   1486                    //  LCDInstr(0x80 |0x40);    //Line 1
   1487                    }
   1488                   line_lcd++;
   \                     ??LCD_4:
   \   000064 C60000                LD        A, L:line_lcd
   \   000067 4C                    INC       A
   \   000068 C70000                LD        L:line_lcd, A
   1489                   if (line_lcd>=5)
   \   00006B A105                  CP        A, #0x5
   \   00006D 250F                  JRC       L:??LCD_6
   1490                   {
   1491                    line_lcd=1;   //line >=5
   \   00006F 35010000              MOV       L:line_lcd, #0x1
   1492                    LCDInstr(0x01); //Clear LCD
   \   000073 8D000000              CALLF     ?Subroutine72
   1493                    Delay1(2500);
   \                     ??CrossCallReturnLabel_191:
   \   000077 AE09C4                LDW       X, #0x9c4
   \   00007A 8D000000              CALLF     Delay1
   1494                   }
   1495          
   1496                   Delay1(1);
   \                     ??LCD_6:
   \   00007E 8D000000              CALLF     ??Subroutine85_0
   1497          
   1498          
   1499               }
   1500          
   1501          
   1502               if (count==20)
   \                     ??CrossCallReturnLabel_238:
   \   000082 C60000                LD        A, L:count
   \   000085 A114                  CP        A, #0x14
   \   000087 260A                  JRNE      L:??LCD_7
   1503                {
   1504                  LCDInstr(0x80 | 0x40);
   \   000089 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   00008B 8D000000              CALLF     LCDInstr
   1505                  Delay1(1);
   \                     ??LCD_9:
   \   00008F 5F                    CLRW      X
   \   000090 5C                    INCW      X
   \   000091 2020                  JRA       ??CrossCallReturnLabel_38
   1506                }
   1507                   else if(count==40)
   \                     ??LCD_7:
   \   000093 A128                  CP        A, #0x28
   \   000095 2604                  JRNE      L:??LCD_10
   1508                  {
   1509                    LCDInstr(0x80 | 0x14);
   \   000097 A694                  LD        A, #0x94
   \   000099 20F0                  JRA       ??LCD_8
   1510                    Delay1(1);
   1511                  }
   1512                    else if(count==60)
   \                     ??LCD_10:
   \   00009B A13C                  CP        A, #0x3c
   \   00009D 2608                  JRNE      L:??LCD_11
   1513                    {
   1514                      LCDInstr(0x80 | 0x54);
   \   00009F A6D4                  LD        A, #0xd4
   \   0000A1 8D000000              CALLF     ?Subroutine70
   1515                      count=0;
   1516                      Delay1(1);
   \                     ??CrossCallReturnLabel_184:
   \   0000A5 20E8                  JRA       ??LCD_9
   1517                    }
   1518                      else if(count >80)
   \                     ??LCD_11:
   \   0000A7 A151                  CP        A, #0x51
   \   0000A9 250C                  JRC       L:??LCD_12
   1519                        {
   1520                          count=0;
   \   0000AB 725F0000              CLR       L:count
   1521                          LCDInstr(0x01); //Clear LCD
   \   0000AF 8D000000              CALLF     ?Subroutine24
   1522                          Delay1(250);
   1523                        }
   \                     ??CrossCallReturnLabel_38:
   \   0000B3 8D000000              CALLF     Delay1
   1524          
   1525               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B7 B600                  LD        A, S:?b9
   \   0000B9 A11C                  CP        A, #0x1c
   \   0000BB 250F                  JRC       L:??LCD_13
   1526               {
   1527                 LCDData(data);
   \   0000BD 8D000000              CALLF     LCDData
   1528                  Delay1(1);
   \   0000C1 8D000000              CALLF     ??Subroutine85_0
   1529                 count++;
   \                     ??CrossCallReturnLabel_239:
   \   0000C5 C60000                LD        A, L:count
   \   0000C8 4C                    INC       A
   \   0000C9 C70000                LD        L:count, A
   1530               }
   1531           }
   \                     ??LCD_13:
   \   0000CC AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_261:
   \   000004 87                    RETF
   1532          

   \                                 In section .far_func.text, align 1, keep-with-next
   1533          void InitDelayTimer2()
   1534          {
   1535             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1536             //Tclock 16/8=2Mhz  /20 10us
   1537                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1538                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1539                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1540                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1541                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1542          
   1543          }
   1544          

   \                                 In section .far_func.text, align 1, keep-with-next
   1545          void InitDelayTimer3()
   1546          {
   1547             //Timer 3 use for 1s Delay
   1548             //Tclock 16000000/1024=15626
   1549                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1550                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1551                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1552                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1553          
   1554               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1555          
   1556          }
   1557          
   1558          
   1559          
   1560          

   \                                 In section .far_func.text, align 1, keep-with-next
   1561          bool DS18_Write(u8 data)
   1562          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1563            disableInterrupts();
   \   000006 9B                    SIM
   1564            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1565            {
   1566             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1567             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1568             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_26:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_244
   \   00001A 8D000000              CALLF     ?Subroutine20
   1569               //else DS18(0);
   1570             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_244:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1571             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine20
   1572             //Delay1(0);
   1573            }
   \                     ??CrossCallReturnLabel_243:
   \   000029 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_35:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1574            enableInterrupts();
   \   00002F 9A                    RIM
   1575            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1576          
   1577          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine86_0
   \   000002                       ;               // Fall through to label ??Subroutine86_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_186:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1578          
   1579          

   \                                 In section .far_func.text, align 1, keep-with-next
   1580          u8  DS18_Read()
   1581          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1582              //Init DS18b20 data pin as Input
   1583          
   1584            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1585              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1586            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1587            {
   1588              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1589              Delay_us(1); //Start time slot 4,5 us
   1590              DS18(1);
   \                     ??CrossCallReturnLabel_25:
   \   00000D 8D000000              CALLF     ?Subroutine20
   1591              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_241:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1592              //Delay1(0);
   1593             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_33:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1594              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1595              //  DS18(1);  // Next bit
   1596             // Delay1(0);
   1597          
   1598            }
   \   00003D 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_36:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1599              enableInterrupts();
   \   000043 9A                    RIM
   1600              //Init DS18b20 data pin
   1601             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1602             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1603          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1604          

   \                                 In section .far_func.text, align 1, keep-with-next
   1605          bool DS18_Reset()
   1606          {
   1607             //Init Reset Pulse
   1608          
   1609              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine71
   1610              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_187:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1611              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine20
   1612              //Delay1(1);
   1613              timer2=0;
   \                     ??CrossCallReturnLabel_242:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1614              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_65:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_31:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1615              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_66:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1616              {
   1617                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine36
   1618                return FALSE;
   \                     ??CrossCallReturnLabel_85:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1619              }
   1620          
   1621              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1622               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_67:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_32:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1623                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_68:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1624                 {
   1625                  hardware.ds18B20=0;
   1626                  return FALSE;
   1627                 }
   1628          
   1629              // Delay1(10);
   1630              //Delay1(20);    //25=524us
   1631               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine37
   1632              return TRUE;
   \                     ??CrossCallReturnLabel_87:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1633          }
   1634          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1635          u8 temperature ()
   1636          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1637          
   1638             //Init Reset Pulse
   1639              if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_151:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1640             //Skip ROM Command 0xCC
   1641              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine56
   1642             //Function command  CONVERT T [44h]
   1643              DS18_Write(0x44);
   1644              //Wait util end convert
   1645              timer2=0;
   1646               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_146:
   \   000013 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_70:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_146
   1647                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A31F41                CPW       X, #0x1f41
   \   000027 24E1                  JRNC      L:??temperature_1
   1648               //u8 temp8=timer2;
   1649              //Init Reset Pulse
   1650              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_152:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1651              // Skip ROM Command 0xCC
   1652              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine55
   1653              //Function command READ SCRATCHPAD [BEh]
   1654              DS18_Write(0xBE);
   1655               u8 temp1=DS18_Read();
   1656               u8 temp2=DS18_Read();
   1657              DS18_Reset();
   \                     ??CrossCallReturnLabel_144:
   \   000033 8D000000              CALLF     DS18_Reset
   1658                u16 result = temp2*256+temp1;
   1659                temp1= (u8)(result>>3);
   1660               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_5:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1661          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_204:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_203:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_209:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1662          

   \                                 In section .far_func.text, align 1, keep-with-next
   1663          bool Read_DS18()
   1664          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1665          
   1666             //Init Reset Pulse
   1667               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_149:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1668             //Skip ROM Command 0xCC
   1669              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine56
   1670             //Function command  CONVERT T [44h]
   1671              DS18_Write(0x44);
   1672              //Wait util end convert
   1673              timer2=0;
   1674               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_145:
   \   000013 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_69:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_145
   1675                           if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A31F41                CPW       X, #0x1f41
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1676               //u8 temp8=timer2;
   1677              //Init Reset Pulse
   1678              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_150:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1679              // Skip ROM Command 0xCC
   1680              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine55
   1681              //Function command READ SCRATCHPAD [BEh]
   1682              DS18_Write(0xBE);
   1683               u8 temp1=DS18_Read();
   1684               u8 temp2=DS18_Read();
   1685               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_143:
   \   000033 8D000000              CALLF     ?Subroutine60
   1686               u8 temp4=DS18_Read();
   1687               u8 temp5=DS18_Read();
   1688               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_161:
   \   000037 8D000000              CALLF     ?Subroutine60
   1689               u8 temp7=DS18_Read();
   1690               u8 temp8=DS18_Read();
   1691               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_160:
   \   00003B 8D000000              CALLF     DS18_Read
   1692          
   1693               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1694          
   1695                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1696                result2=0;
   \   000047 725F0000              CLR       L:result2
   1697                u16 result = temp2*256+temp1;
   1698                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_4:
   \   00004F C70000                LD        L:result1, A
   1699                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1700                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1701          
   1702          
   1703                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1704               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1705               //line_lcd=1;
   1706               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1707               // while (!key_ok_on());
   1708          
   1709               //u8 temp3=DS18_Read();
   1710          
   1711              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1712          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1713          

   \                                 In section .far_func.text, align 1, keep-with-next
   1714          bool DS18Set ()
   1715          {
   1716               //Init Reset Pulse
   1717              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_147:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1718             //Skip ROM Command 0xCC
   1719              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine77
   1720             //Function command  WRITE SCRATCHPAD 0x4E
   1721              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_206:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1722             //Write 3 bytes last is config reg
   1723              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1724              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1725              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1726          
   1727             //Init Reset Pulse
   1728              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_148:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1729              //Skip ROM Command 0xCC
   1730              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine77
   1731              //Function   Store in Conf Reg
   1732              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_205:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1733            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1734          }
   1735          
   1736          
   1737          
   1738          
   1739          
   1740          
   1741          
   1742          

   \                                 In section .far_func.text, align 1, keep-with-next
   1743          void Delay1(u16 Delay)
   1744          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1745              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1746            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1747            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1748          }
   \   00000D 87                    RETF
   1749          

   \                                 In section .far_func.text, align 1, keep-with-next
   1750           void Delay2(u16 Delay)
   1751          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1752            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1753            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1754          }
   \   00000D 87                    RETF
   1755          
   1756          

   \                                 In section .far_func.text, align 1, keep-with-next
   1757          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1758          {
   1759            //disableInterrupts();
   1760            do
   1761              {
   1762                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1763                nop();
   \   000001 9D                    NOP
   1764              }
   1765              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1766            //enableInterrupts();
   1767          }
   \   000005 87                    RETF
   1768          
   1769          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 3F00                  CLR       S:?b10
   \   000006                       REQUIRE ??Subroutine85_0
   \   000006                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1770          void Display_Line(char* line)
   1771          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1772            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1773            u8 count;
   1774              //Set Cursor to First Line
   1775             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     ?Subroutine11
   1776             count=0;
   1777             Delay1(1);
   1778            do
   1779            {
   1780          
   1781              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_236:
   \   000010 B600                  LD        A, S:?b11
   \   000012 A11C                  CP        A, #0x1c
   \   000014 2504                  JRC       L:??CrossCallReturnLabel_11
   1782               {
   1783                 LCDData(current_char);
   \   000016 8D000000              CALLF     ?Subroutine9
   1784                  Delay1(1);
   1785                 count++;
   1786               }
   1787               current_char=*line++;
   \                     ??CrossCallReturnLabel_11:
   \   00001A 8D000000              CALLF     ?Subroutine47
   1788            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_122:
   \   00001E 2706                  JREQ      L:??Display_Line_0
   \   000020 B600                  LD        A, S:?b10
   \   000022 A107                  CP        A, #0x7
   \   000024 25EA                  JRC       L:??CrossCallReturnLabel_236
   1789          
   1790             Rotate_Line(line1);
   \                     ??Display_Line_0:
   \   000026 AE0000                LDW       X, #line1
   \   000029 8D000000              CALLF     Rotate_Line
   1791          
   1792          }
   \   00002D AC000000              JPF       L:?epilogue_l2

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 B700                  LD        S:?b11, A
   \   000005 BE00                  LDW       X, S:?w4
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   \   00000A 3D00                  TNZ       S:?b11
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_263:
   \   000004 B600                  LD        A, S:?b10
   \   000006 4C                    INC       A
   \   000007 B700                  LD        S:?b10, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine88_0
   \   000004                       ;               // Fall through to label ??Subroutine88_0
   1793          
   1794          

   \                                 In section .far_func.text, align 1, keep-with-next
   1795          void DisplayLine2(void)
   1796          {
   \                     DisplayLine2:
   \   000000 8D000000              CALLF     L:?push_l2
   1797            char * line=line2;
   1798            char current_char=  *line++;
   \   000004 C60000                LD        A, L:line2
   \   000007 B700                  LD        S:?b11, A
   \   000009 AE0000                LDW       X, #line2 + 1
   \   00000C BF00                  LDW       S:?w4, X
   1799            u8 count;
   1800              //Set Cursor to Second  Line
   1801             LCDInstr(0x80 | 0x40);
   \   00000E A6C0                  LD        A, #0xc0
   \   000010 8D000000              CALLF     ?Subroutine11
   1802             count=0;
   1803             Delay1(1);
   1804            do
   1805            {
   1806          
   1807              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_235:
   \   000014 B600                  LD        A, S:?b11
   \   000016 A11C                  CP        A, #0x1c
   \   000018 2504                  JRC       L:??CrossCallReturnLabel_10
   1808               {
   1809                 LCDData(current_char);
   \   00001A 8D000000              CALLF     ?Subroutine9
   1810                  Delay1(1);
   1811                 count++;
   1812               }
   1813               current_char=*line++;
   \                     ??CrossCallReturnLabel_10:
   \   00001E 8D000000              CALLF     ?Subroutine47
   1814            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_121:
   \   000022 2706                  JREQ      L:??DisplayLine2_0
   \   000024 B600                  LD        A, S:?b10
   \   000026 A107                  CP        A, #0x7
   \   000028 25EA                  JRC       L:??CrossCallReturnLabel_235
   1815          
   1816             Rotate_Line(line2);
   \                     ??DisplayLine2_0:
   \   00002A AE0000                LDW       X, #line2
   \   00002D 8D000000              CALLF     Rotate_Line
   1817          
   1818          }
   \   000031 AC000000              JPF       L:?epilogue_l2
   1819          
   1820          
   1821          
   1822          

   \                                 In section .far_func.text, align 1, keep-with-next
   1823          void Rotate_Line( char * line)
   1824          {
   1825          
   1826             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1827             char temp_next;
   1828          
   1829             do
   1830             {
   1831                temp_next=*(line+1);
   1832               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1833                //line++;
   1834                //temp_next=*line;
   1835               //*line=*line++;
   1836             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1837             line--;
   1838             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1839          
   1840          }
   \   000012 87                    RETF
   1841          

   \                                 In section .far_func.text, align 1, keep-with-next
   1842          void ClearLine1 ()
   1843          {
   \                     ClearLine1:
   \   000000 3B0000                PUSH      S:?b8
   1844               //Set Cursor to First Line
   1845             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine10
   1846             count=0;
   1847             Delay1(1);
   1848              u8 count=0;
   1849             do
   1850             {
   1851               LCDData(' ');
   \                     ??CrossCallReturnLabel_12:
   \   000009 8D000000              CALLF     ?Subroutine8
   1852                  Delay1(1);
   1853                  count++;
   1854             }while (count<8);
   \                     ??CrossCallReturnLabel_8:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_12
   1855          
   1856          
   1857          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_185:
   \   000004 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_262:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_264:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4A                    DEC       A
   \   000009 B700                  LD        S:?b8, A
   \   00000B 87                    RETF
   1858          

   \                                 In section .far_func.text, align 1, keep-with-next
   1859          void ClearLine2 ()
   1860          {
   \                     ClearLine2:
   \   000000 3B0000                PUSH      S:?b8
   1861               //Set Cursor to Second  Line
   1862             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine10
   1863             count=0;
   1864             Delay1(1);
   1865              u8 count=0;
   1866             do
   1867             {
   1868               LCDData(' ');
   \                     ??CrossCallReturnLabel_13:
   \   000009 8D000000              CALLF     ?Subroutine8
   1869                  Delay1(1);
   1870                  count++;
   1871             }while (count<8);
   \                     ??CrossCallReturnLabel_9:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_13
   1872          
   1873          
   1874          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1875          
   1876          
   1877          

   \                                 In section .far_func.text, align 1, keep-with-next
   1878          void FirstMenu()
   1879          {
   1880                // Clear Display
   1881              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_39:
   \   000004 8D000000              CALLF     ??Subroutine81_0
   1882              Delay1(250);
   1883          
   1884                line_lcd=0;
   1885                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_217:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1886                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine27
   1887                 if (!status.manu)
   \                     ??CrossCallReturnLabel_50:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1888                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1889                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1890          
   1891                 do
   1892                 {
   1893                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     ?Subroutine50
   1894          
   1895                  if(button==2)      // Plus Button
   \                     ??CrossCallReturnLabel_129:
   \   000025 262C                  JRNE      L:??FirstMenu_3
   1896                  {
   1897                    if(status.manu) status.manu=0;
   \   000027 CE0000                LDW       X, L:status
   \   00002A 9F                    LD        A, XL
   \   00002B A401                  AND       A, #0x1
   \   00002D 2708                  JREQ      L:??FirstMenu_4
   \   00002F CE0000                LDW       X, L:status
   \   000032 01                    RRWA      X, A
   \   000033 A4FE                  AND       A, #0xfe
   \   000035 2006                  JRA       ??FirstMenu_5
   1898                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   000037 CE0000                LDW       X, L:status
   \   00003A 01                    RRWA      X, A
   \   00003B AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   00003D 02                    RLWA      X, A
   \   00003E CF0000                LDW       L:status, X
   1899                    line_lcd=1;
   \   000041 8D000000              CALLF     ?Subroutine27
   1900                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_51:
   \   000045 2705                  JREQ      L:??FirstMenu_6
   \   000047 AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004A 2003                  JRA       ??FirstMenu_7
   1901                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   00004C AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   00004F 8D000000              CALLF     printf
   1902                  }
   1903          
   1904                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000053 C60000                LD        A, L:button
   \   000056 A103                  CP        A, #0x3
   \   000058 2705                  JREQ      L:??FirstMenu_8
   \   00005A C60000                LD        A, L:button
   \   00005D 2604                  JRNE      L:??FirstMenu_9
   1905                  {
   1906                    SaveStatus();
   \                     ??FirstMenu_8:
   \   00005F AC000000              JPF       SaveStatus
   1907                    return;
   1908                  }
   1909          
   1910          
   1911                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000063 A101                  CP        A, #0x1
   \   000065 26BA                  JRNE      L:??FirstMenu_2
   1912          
   1913                   SaveStatus();
   \   000067 8D000000              CALLF     SaveStatus
   1914                   button=0;
   \   00006B 725F0000              CLR       L:button
   1915                   ProgramMenu();
   \   00006F AC000000              JPF       ProgramMenu
   1916          
   1917          
   1918          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_202:
   \   000008 87                    RETF
   1919          
   1920          
   1921          

   \                                 In section .far_func.text, align 1, keep-with-next
   1922          void ProgramMenu()
   1923          {
   \                     ProgramMenu:
   \   000000 8D000000              CALLF     L:?push_l3
   \   000004 8D000000              CALLF     L:?push_w4
   \   000008 3B0000                PUSH      S:?b10
   1924              u8 program_number=0;
   \   00000B 3F00                  CLR       S:?b10
   1925             do
   1926             {
   1927               sprintf(line1,"\nP%d%s",program_number,day_week[programpoint[program_number].day]);
   \                     ??ProgramMenu_0:
   \   00000D 5F                    CLRW      X
   \   00000E 41                    EXG       A, XL
   \   00000F B600                  LD        A, S:?b10
   \   000011 41                    EXG       A, XL
   \   000012 BF00                  LDW       S:?w6, X
   \   000014 AE0006                LDW       X, #0x6
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 BE00                  LDW       X, S:?w6
   \   00001B 8D000000              CALLF     L:?mul16_x_x_w0
   \   00001F 1C0000                ADDW      X, #programpoint
   \   000022 BF00                  LDW       S:?w4, X
   \   000024 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_267:
   \   000028 89                    PUSHW     X
   \   000029 8D000000              CALLF     L:?push_w6
   \   00002D 90AE0000              LDW       Y, #`?<Constant "\\nP%d%s">`
   \   000031 AE0000                LDW       X, #line1
   \   000034 8D000000              CALLF     sprintf
   \   000038 5B04                  ADD       SP, #0x4
   1928               sprintf(line2,"\n%s",day_week[programpoint[program_number].day]);
   \   00003A 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_268:
   \   00003E 89                    PUSHW     X
   \   00003F 90AE0000              LDW       Y, #`?<Constant "\\n%s">`
   \   000043 AE0000                LDW       X, #line2
   \   000046 8D000000              CALLF     sprintf
   \   00004A 5B02                  ADD       SP, #0x2
   1929               ClearLine2();
   \   00004C 8D000000              CALLF     ClearLine2
   1930               ClearLine1();
   \   000050 8D000000              CALLF     ClearLine1
   1931               line_lcd=0;
   \   000054 8D000000              CALLF     ?Subroutine40
   1932               printf(line1);
   1933               line_lcd=1;
   1934               printf(line2);
   \                     ??CrossCallReturnLabel_95:
   \   000058 AE0000                LDW       X, #line2
   \   00005B 8D000000              CALLF     printf
   1935                 do
   1936                 {
   1937                   pressKey();
   \                     ??ProgramMenu_1:
   \   00005F 8D000000              CALLF     ?Subroutine50
   1938          
   1939                    if(button==2)   //Plus
   \                     ??CrossCallReturnLabel_128:
   \   000063 2621                  JRNE      L:??ProgramMenu_2
   1940                    {
   1941                       programpoint[program_number].day++;
   \   000065 92C600                LD        A, [S:?w4.w]
   \   000068 4C                    INC       A
   \   000069 92C700                LD        [S:?w4.w], A
   1942                        if( programpoint[program_number].day >=9) programpoint[program_number].day=0;
   \   00006C A109                  CP        A, #0x9
   \   00006E 2504                  JRC       L:??ProgramMenu_3
   \   000070 4F                    CLR       A
   \   000071 92C700                LD        [S:?w4.w], A
   1943                          ClearLine2();
   \                     ??ProgramMenu_3:
   \   000074 8D000000              CALLF     ?Subroutine48
   1944                           line_lcd=1;
   1945                           printf("\n%s",day_week[programpoint[program_number].day]);
   \                     ??CrossCallReturnLabel_123:
   \   000078 8D000000              CALLF     ?Subroutine7
   1946                    }
   \                     ??CrossCallReturnLabel_269:
   \   00007C 89                    PUSHW     X
   \   00007D AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000080 8D000000              CALLF     printf
   \   000084 5B02                  ADD       SP, #0x2
   1947          
   1948                    if(button==3 || button==0 ) // Minus
   \                     ??ProgramMenu_2:
   \   000086 C60000                LD        A, L:button
   \   000089 A103                  CP        A, #0x3
   \   00008B 2705                  JREQ      L:??ProgramMenu_4
   \   00008D C60000                LD        A, L:button
   \   000090 260B                  JRNE      L:??ProgramMenu_5
   1949                    {
   1950                       SaveProgram();
   \                     ??ProgramMenu_4:
   \   000092 8D000000              CALLF     SaveProgram
   1951                        button=0;
   \   000096 725F0000              CLR       L:button
   1952                       return;
   \   00009A CC0000                JP        L:??ProgramMenu_6
   1953                    }
   1954          
   1955          
   1956                 } while (button != 1 && button != 0);
   \                     ??ProgramMenu_5:
   \   00009D A101                  CP        A, #0x1
   \   00009F 26BE                  JRNE      L:??ProgramMenu_1
   1957          
   1958                     // Test programm is Active ?
   1959                  if( programpoint[program_number].day !=0)
   \   0000A1 923D00                TNZ       [S:?w4.w]
   \   0000A4 2603                  JRNE      ??lb_0
   \   0000A6 CC0000                JP        L:??ProgramMenu_7
   1960                  {
   1961                        //Set On Hour
   1962                     ClearLine1();
   \                     ??lb_0:
   \   0000A9 8D000000              CALLF     ?Subroutine44
   1963                     line_lcd=0;
   1964                     printf("\nP%d%s",program_number," On");
   \                     ??CrossCallReturnLabel_111:
   \   0000AD 4B00                  PUSH      #BYTE1(`?<Constant " On">`)
   \   0000AF 4B00                  PUSH      #BYTE2(`?<Constant " On">`)
   \   0000B1 8D000000              CALLF     L:?push_w6
   \   0000B5 AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   0000B8 8D000000              CALLF     printf
   \   0000BC 5B04                  ADD       SP, #0x4
   1965                     timer3=0;
   \   0000BE 5F                    CLRW      X
   \   0000BF CF0000                LDW       L:timer3, X
   1966                     ClearLine2();
   \   0000C2 8D000000              CALLF     ClearLine2
   1967                     do
   1968                      {
   1969                       line_lcd=1;
   \                     ??ProgramMenu_8:
   \   0000C6 35010000              MOV       L:line_lcd, #0x1
   1970                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   0000CA C60000                LD        A, L:blink_flag
   \   0000CD 2717                  JREQ      L:??ProgramMenu_9
   \   0000CF 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_57:
   \   0000D3 89                    PUSHW     X
   \   0000D4 BE00                  LDW       X, S:?w4
   \   0000D6 5C                    INCW      X
   \   0000D7 F6                    LD        A, (X)
   \   0000D8 5F                    CLRW      X
   \   0000D9 97                    LD        XL, A
   \   0000DA 89                    PUSHW     X
   \   0000DB AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000DE 8D000000              CALLF     printf
   \   0000E2 5B04                  ADD       SP, #0x4
   \   0000E4 200E                  JRA       L:??ProgramMenu_10
   1971                         else printf("\n  :%02d",programpoint[program_number].onminute);
   \                     ??ProgramMenu_9:
   \   0000E6 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_58:
   \   0000EA 89                    PUSHW     X
   \   0000EB AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0000EE 8D000000              CALLF     printf
   \   0000F2 5B02                  ADD       SP, #0x2
   1972                       programpoint[program_number].onhour =adj(0,23,programpoint[program_number].onhour);
   \                     ??ProgramMenu_10:
   \   0000F4 BE00                  LDW       X, S:?w4
   \   0000F6 5C                    INCW      X
   \   0000F7 F6                    LD        A, (X)
   \   0000F8 B700                  LD        S:?b1, A
   \   0000FA 35170000              MOV       S:?b0, #0x17
   \   0000FE 8D000000              CALLF     ??Subroutine83_0
   1973                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_226:
   \   000102 BE00                  LDW       X, S:?w4
   \   000104 5C                    INCW      X
   \   000105 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_219:
   \   000109 2406                  JRNC      L:??ProgramMenu_11
   \   00010B 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_103:
   \   00010F 27B5                  JREQ      L:??ProgramMenu_8
   1974          
   1975                        //Set On Minute
   1976                      //ClearLine1();
   1977                      //line_lcd=0;
   1978                      //printf("\nMin On>");
   1979                     // printf("\nP%d%s",program_number," On");
   1980                      timer3=0;
   \                     ??ProgramMenu_11:
   \   000111 5F                    CLRW      X
   \   000112 CF0000                LDW       L:timer3, X
   1981                    do
   1982                      {
   1983                       line_lcd=1;
   \                     ??ProgramMenu_12:
   \   000115 35010000              MOV       L:line_lcd, #0x1
   \   000119 BE00                  LDW       X, S:?w4
   \   00011B 5C                    INCW      X
   \   00011C F6                    LD        A, (X)
   \   00011D 5F                    CLRW      X
   \   00011E 97                    LD        XL, A
   \   00011F 9093                  LDW       Y, X
   \   000121 C60000                LD        A, L:blink_flag
   \   000124 2712                  JREQ      L:??ProgramMenu_13
   1984                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   000126 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_59:
   \   00012A 89                    PUSHW     X
   \   00012B 9089                  PUSHW     Y
   \   00012D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000130 8D000000              CALLF     printf
   \   000134 5B04                  ADD       SP, #0x4
   \   000136 200B                  JRA       L:??ProgramMenu_14
   1985                         else  printf("\n%02d:  ",programpoint[program_number].onhour);
   \                     ??ProgramMenu_13:
   \   000138 9089                  PUSHW     Y
   \   00013A AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   00013D 8D000000              CALLF     printf
   \   000141 5B02                  ADD       SP, #0x2
   1986                           programpoint[program_number].onminute=adj(0,59,programpoint[program_number].onminute);
   \                     ??ProgramMenu_14:
   \   000143 BE00                  LDW       X, S:?w4
   \   000145 1C0002                ADDW      X, #0x2
   \   000148 F6                    LD        A, (X)
   \   000149 8D000000              CALLF     ?Subroutine30
   1987                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_231:
   \   00014D BE00                  LDW       X, S:?w4
   \   00014F 1C0002                ADDW      X, #0x2
   \   000152 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_220:
   \   000156 2406                  JRNC      L:??ProgramMenu_15
   \   000158 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_104:
   \   00015C 27B7                  JREQ      L:??ProgramMenu_12
   1988          
   1989          
   1990                     // Set Off Hour
   1991                       u8 time_off_min_hour=0;
   1992                       u8 time_off_min_min=0;
   1993          
   1994                       /*
   1995                           if( programpoint[program_number].day !=8)    //If not Daily.You can't set toff to next day
   1996                           {
   1997                               time_off_min_hour = programpoint[program_number].onhour;
   1998          
   1999                           }
   2000                       */
   2001                     ClearLine1();
   \                     ??ProgramMenu_15:
   \   00015E 8D000000              CALLF     ?Subroutine44
   2002                     line_lcd=0;
   2003                     printf("\nP%d%s",program_number," Off");
   \                     ??CrossCallReturnLabel_112:
   \   000162 4B00                  PUSH      #BYTE1(`?<Constant " Off">`)
   \   000164 4B00                  PUSH      #BYTE2(`?<Constant " Off">`)
   \   000166 8D000000              CALLF     L:?push_w6
   \   00016A AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   00016D 8D000000              CALLF     printf
   \   000171 5B04                  ADD       SP, #0x4
   2004                     timer3=0;
   \   000173 5F                    CLRW      X
   \   000174 CF0000                LDW       L:timer3, X
   \   000177 BE00                  LDW       X, S:?w4
   \   000179 1C0003                ADDW      X, #0x3
   \   00017C BF00                  LDW       S:?w7, X
   \   00017E BE00                  LDW       X, S:?w4
   \   000180 1C0004                ADDW      X, #0x4
   \   000183 BF00                  LDW       S:?w6, X
   2005                     do
   2006                      {
   2007                       line_lcd=1;
   \                     ??ProgramMenu_16:
   \   000185 35010000              MOV       L:line_lcd, #0x1
   2008                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   000189 C60000                LD        A, L:blink_flag
   \   00018C 2716                  JREQ      L:??ProgramMenu_17
   \   00018E 92C600                LD        A, [S:?w6.w]
   \   000191 5F                    CLRW      X
   \   000192 97                    LD        XL, A
   \   000193 89                    PUSHW     X
   \   000194 92C600                LD        A, [S:?w7.w]
   \   000197 97                    LD        XL, A
   \   000198 89                    PUSHW     X
   \   000199 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00019C 8D000000              CALLF     printf
   \   0001A0 5B04                  ADD       SP, #0x4
   \   0001A2 200F                  JRA       L:??ProgramMenu_18
   2009                         else printf("\n  :%02d",programpoint[program_number].offminute);
   \                     ??ProgramMenu_17:
   \   0001A4 92C600                LD        A, [S:?w6.w]
   \   0001A7 5F                    CLRW      X
   \   0001A8 97                    LD        XL, A
   \   0001A9 89                    PUSHW     X
   \   0001AA AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0001AD 8D000000              CALLF     printf
   \   0001B1 5B02                  ADD       SP, #0x2
   2010                       programpoint[program_number].offhour =adj(time_off_min_hour,23,programpoint[program_number].offhour);
   \                     ??ProgramMenu_18:
   \   0001B3 92C600                LD        A, [S:?w7.w]
   \   0001B6 B700                  LD        S:?b1, A
   \   0001B8 35170000              MOV       S:?b0, #0x17
   \   0001BC 8D000000              CALLF     ??Subroutine83_0
   2011                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_225:
   \   0001C0 92C700                LD        [S:?w7.w], A
   \   0001C3 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_222:
   \   0001C7 2406                  JRNC      L:??ProgramMenu_19
   \   0001C9 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_105:
   \   0001CD 27B6                  JREQ      L:??ProgramMenu_16
   2012          
   2013                    //Set Off Minute
   2014                      /*
   2015                       if( programpoint[program_number].day !=8)    //If not Daily.You can't set toff to next day
   2016                       {
   2017                           if(programpoint[program_number].offhour=programpoint[program_number].onhour)
   2018                           {
   2019                             time_off_min_min  = programpoint[program_number].onminute;
   2020                           }
   2021                       }
   2022                     */
   2023                    timer3=0;
   \                     ??ProgramMenu_19:
   \   0001CF 5F                    CLRW      X
   \   0001D0 CF0000                LDW       L:timer3, X
   2024                    do
   2025                      {
   2026                       line_lcd=1;
   \                     ??ProgramMenu_20:
   \   0001D3 35010000              MOV       L:line_lcd, #0x1
   \   0001D7 92C600                LD        A, [S:?w7.w]
   \   0001DA 5F                    CLRW      X
   \   0001DB 97                    LD        XL, A
   \   0001DC 9093                  LDW       Y, X
   \   0001DE C60000                LD        A, L:blink_flag
   \   0001E1 2712                  JREQ      L:??ProgramMenu_21
   2027                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   0001E3 92C600                LD        A, [S:?w6.w]
   \   0001E6 97                    LD        XL, A
   \   0001E7 89                    PUSHW     X
   \   0001E8 9089                  PUSHW     Y
   \   0001EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001ED 8D000000              CALLF     printf
   \   0001F1 5B04                  ADD       SP, #0x4
   \   0001F3 200B                  JRA       L:??ProgramMenu_22
   2028                         else  printf("\n%02d:  ",programpoint[program_number].offhour);
   \                     ??ProgramMenu_21:
   \   0001F5 9089                  PUSHW     Y
   \   0001F7 AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   0001FA 8D000000              CALLF     printf
   \   0001FE 5B02                  ADD       SP, #0x2
   2029                           programpoint[program_number].offminute=adj(time_off_min_min,59,programpoint[program_number].offminute);
   \                     ??ProgramMenu_22:
   \   000200 92C600                LD        A, [S:?w6.w]
   \   000203 8D000000              CALLF     ?Subroutine30
   2030                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_230:
   \   000207 92C700                LD        [S:?w6.w], A
   \   00020A 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_223:
   \   00020E 2406                  JRNC      L:??ProgramMenu_23
   \   000210 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_106:
   \   000214 27BD                  JREQ      L:??ProgramMenu_20
   2031          
   2032          
   2033                         //Set Dayoff
   2034                          int timeon = programpoint[program_number].onhour * 60 + programpoint[program_number].onminute;
   \                     ??ProgramMenu_23:
   \   000216 BE00                  LDW       X, S:?w4
   \   000218 5C                    INCW      X
   \   000219 F6                    LD        A, (X)
   \   00021A 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_233:
   \   00021E 9093                  LDW       Y, X
   \   000220 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_60:
   \   000224 BF00                  LDW       S:?w0, X
   \   000226 93                    LDW       X, Y
   \   000227 72BB0000              ADDW      X, S:?w0
   \   00022B BF00                  LDW       S:?w1, X
   2035                          int timeoff = programpoint[program_number].offhour * 60 + programpoint[program_number].offminute;
   \   00022D 92C600                LD        A, [S:?w7.w]
   \   000230 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_234:
   \   000234 9093                  LDW       Y, X
   \   000236 92C600                LD        A, [S:?w6.w]
   \   000239 5F                    CLRW      X
   \   00023A 97                    LD        XL, A
   \   00023B BF00                  LDW       S:?w0, X
   \   00023D 93                    LDW       X, Y
   \   00023E 72BB0000              ADDW      X, S:?w0
   \   000242 9093                  LDW       Y, X
   2036                          programpoint[program_number].dayoff = programpoint[program_number].day;
   \   000244 92C600                LD        A, [S:?w4.w]
   \   000247 BE00                  LDW       X, S:?w4
   \   000249 1C0005                ADDW      X, #0x5
   \   00024C F7                    LD        (X), A
   2037                           if (timeoff < timeon)
   \   00024D 90B300                CPW       Y, S:?w1
   \   000250 2E09                  JRSGE     L:??ProgramMenu_7
   2038                            {
   2039                              programpoint[program_number].dayoff++;
   \   000252 4C                    INC       A
   \   000253 F7                    LD        (X), A
   2040                              if (programpoint[program_number].dayoff >= 8) programpoint[program_number].dayoff =1;
   \   000254 A108                  CP        A, #0x8
   \   000256 2503                  JRC       L:??ProgramMenu_7
   \   000258 A601                  LD        A, #0x1
   \   00025A F7                    LD        (X), A
   2041                            }
   2042          
   2043          
   2044                  }
   2045          
   2046          
   2047                   program_number++;
   \                     ??ProgramMenu_7:
   \   00025B B600                  LD        A, S:?b10
   \   00025D 4C                    INC       A
   \   00025E B700                  LD        S:?b10, A
   2048          
   2049          
   2050          
   2051          
   2052          
   2053          
   2054          
   2055          
   2056                 } while ( (program_number < 8) && (button!=0));
   \   000260 A108                  CP        A, #0x8
   \   000262 2408                  JRNC      L:??ProgramMenu_24
   \   000264 C60000                LD        A, L:button
   \   000267 2703                  JREQ      ??lb_1
   \   000269 CC0000                JP        L:??ProgramMenu_0
   2057          
   2058                SaveProgram();
   \                     ??lb_1:
   \                     ??ProgramMenu_24:
   \   00026C 8D000000              CALLF     SaveProgram
   2059          
   2060          
   2061          }
   \                     ??ProgramMenu_6:
   \   000270 320000                POP       S:?b10
   \   000273 8D000000              CALLF     L:?pop_w4
   \   000277 8D000000              CALLF     L:?pop_l3
   \   00027B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 F7                    LD        (X), A
   \   000001                       REQUIRE ??Subroutine82_0
   \   000001                       ;               // Fall through to label ??Subroutine82_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 BE00                  LDW       X, S:?w4
   \   000002 1C0002                ADDW      X, #0x2
   \   000005 F6                    LD        A, (X)
   \   000006 5F                    CLRW      X
   \   000007 97                    LD        XL, A
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 5F                    CLRW      X
   \   000001 97                    LD        XL, A
   \   000002 9093                  LDW       Y, X
   \   000004                       REQUIRE ??Subroutine84_0
   \   000004                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003                       REQUIRE ??Subroutine89_0
   \   000003                       ;               // Fall through to label ??Subroutine89_0
   2062          
   2063          
   2064          

   \                                 In section .far_func.text, align 1, keep-with-next
   2065          void pressKey(void)
   2066          {
   2067             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2068             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2069             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine35
   2070             lcdLedTimer=LCDLEDON;
   2071             do
   2072             {
   2073                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_82:
   \   00000C 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_102:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2074                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2075                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2076             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_221:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_82
   2077          
   2078              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2079          
   2080             //return button;
   2081          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2082          
   2083          
   2084          
   2085          

   \                                 In section .far_func.text, align 1, keep-with-next
   2086          bool InputDataProgram(bool smart )
   2087          {
   \                     InputDataProgram:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 B700                  LD        S:?b11, A
   2088             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000006 3F00                  CLR       S:?b8
   \   000008 35010000              MOV       S:?b10, #0x1
   \   00000C 35010000              MOV       S:?b9, #0x1
   2089             int yy;
   2090          
   2091                   //Clear Display
   2092             LCDInstr(0x01);
   \   000010 8D000000              CALLF     ?Subroutine18
   2093             Delay1(1000);
   2094             line_lcd=0;
   2095             printf("\nYear>");
   \                     ??CrossCallReturnLabel_214:
   \   000014 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000017 8D000000              CALLF     printf
   2096             y=year;
   \   00001B C60000                LD        A, L:year
   \   00001E C70000                LD        L:`y`, A
   2097             m=month;
   \   000021 C60000                LD        A, L:month
   \   000024 C70000                LD        L:m, A
   2098             d=date;
   \   000027 C60000                LD        A, L:`date`
   \   00002A C70000                LD        L:d, A
   2099                do
   2100              {
   2101               line_lcd=1;
   \                     ??InputDataProgram_0:
   \   00002D 35010000              MOV       L:line_lcd, #0x1
   2102               if(blink_flag)printf("\n%02d:%02d:%02d",y,m,d);
   \   000031 C60000                LD        A, L:m
   \   000034 905F                  CLRW      Y
   \   000036 9097                  LD        YL, A
   \   000038 C60000                LD        A, L:d
   \   00003B 5F                    CLRW      X
   \   00003C 97                    LD        XL, A
   \   00003D C60000                LD        A, L:blink_flag
   \   000040 89                    PUSHW     X
   \   000041 9089                  PUSHW     Y
   \   000043 2710                  JREQ      L:??InputDataProgram_1
   \   000045 C60000                LD        A, L:`y`
   \   000048 97                    LD        XL, A
   \   000049 89                    PUSHW     X
   \   00004A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00004D 8D000000              CALLF     printf
   \   000051 5B06                  ADD       SP, #0x6
   \   000053 2009                  JRA       L:??InputDataProgram_2
   2103                else printf("\n  :%02d:%02d",m,d);
   \                     ??InputDataProgram_1:
   \   000055 AE0000                LDW       X, #`?<Constant "\\n  :%02d:%02d">`
   \   000058 8D000000              CALLF     printf
   \   00005C 5B04                  ADD       SP, #0x4
   2104                 y=adj(0,99,y);
   \                     ??InputDataProgram_2:
   \   00005E C60000                LD        A, L:`y`
   \   000061 B700                  LD        S:?b1, A
   \   000063 35630000              MOV       S:?b0, #0x63
   \   000067 8D000000              CALLF     ??Subroutine83_0
   2105              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_227:
   \   00006B C70000                LD        L:`y`, A
   \   00006E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_99:
   \   000072 27B9                  JREQ      L:??InputDataProgram_0
   2106                  yy=y+2000;
   \   000074 C60000                LD        A, L:`y`
   \   000077 5F                    CLRW      X
   \   000078 97                    LD        XL, A
   \   000079 1C07D0                ADDW      X, #0x7d0
   \   00007C BF00                  LDW       S:?w0, X
   2107              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00007E 90AE0190              LDW       Y, #0x190
   \   000082 8D000000              CALLF     L:?smod16_y_x_y
   \   000086 905D                  TNZW      Y
   \   000088 271C                  JREQ      L:??InputDataProgram_3
   \   00008A 90AE0064              LDW       Y, #0x64
   \   00008E BE00                  LDW       X, S:?w0
   \   000090 8D000000              CALLF     L:?smod16_y_x_y
   \   000094 905D                  TNZW      Y
   \   000096 2712                  JREQ      L:??InputDataProgram_4
   \   000098 90AE0004              LDW       Y, #0x4
   \   00009C BE00                  LDW       X, S:?w0
   \   00009E 8D000000              CALLF     L:?smod16_y_x_y
   \   0000A2 905D                  TNZW      Y
   \   0000A4 2604                  JRNE      L:??InputDataProgram_4
   \                     ??InputDataProgram_3:
   \   0000A6 35010000              MOV       S:?b8, #0x1
   2108                  y=yy-2000;
   \                     ??InputDataProgram_4:
   \   0000AA B600                  LD        A, S:?b1
   \   0000AC AB30                  ADD       A, #0x30
   \   0000AE C70000                LD        L:`y`, A
   2109                  if(smart)if(y==year) month_start=month;
   \   0000B1 3D00                  TNZ       S:?b11
   \   0000B3 270D                  JREQ      L:??InputDataProgram_5
   \   0000B5 C60000                LD        A, L:year
   \   0000B8 C10000                CP        A, L:`y`
   \   0000BB 2605                  JRNE      L:??InputDataProgram_5
   \   0000BD C60000                LD        A, L:month
   \   0000C0 B700                  LD        S:?b10, A
   2110               line_lcd=0;
   \                     ??InputDataProgram_5:
   \   0000C2 725F0000              CLR       L:line_lcd
   2111              printf("\nMonth>");
   \   0000C6 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   0000C9 8D000000              CALLF     printf
   2112                do
   2113              {
   2114               line_lcd=1;
   \                     ??InputDataProgram_6:
   \   0000CD 35010000              MOV       L:line_lcd, #0x1
   2115               if(blink_flag) printf("\n%02d:%02d:%02d",y,m,d);
   \   0000D1 C60000                LD        A, L:`y`
   \   0000D4 5F                    CLRW      X
   \   0000D5 97                    LD        XL, A
   \   0000D6 C60000                LD        A, L:d
   \   0000D9 905F                  CLRW      Y
   \   0000DB 9097                  LD        YL, A
   \   0000DD C60000                LD        A, L:blink_flag
   \   0000E0 9089                  PUSHW     Y
   \   0000E2 2713                  JREQ      L:??InputDataProgram_7
   \   0000E4 C60000                LD        A, L:m
   \   0000E7 9097                  LD        YL, A
   \   0000E9 9089                  PUSHW     Y
   \   0000EB 89                    PUSHW     X
   \   0000EC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EF 8D000000              CALLF     printf
   \   0000F3 5B06                  ADD       SP, #0x6
   \   0000F5 200A                  JRA       L:??InputDataProgram_8
   2116                else printf("\n%02d:  :%02d",y,d);
   \                     ??InputDataProgram_7:
   \   0000F7 89                    PUSHW     X
   \   0000F8 AE0000                LDW       X, #`?<Constant "\\n%02d:  :%02d">`
   \   0000FB 8D000000              CALLF     printf
   \   0000FF 5B04                  ADD       SP, #0x4
   2117                m=adj(month_start,12,m);
   \                     ??InputDataProgram_8:
   \   000101 C60000                LD        A, L:m
   \   000104 B700                  LD        S:?b1, A
   \   000106 350C0000              MOV       S:?b0, #0xc
   \   00010A B600                  LD        A, S:?b10
   \   00010C 8D000000              CALLF     adj
   \   000110 C70000                LD        L:m, A
   2118              } while (!key_ok_on());
   \   000113 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_100:
   \   000117 27B4                  JREQ      L:??InputDataProgram_6
   2119          
   2120              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   000119 C60000                LD        A, L:m
   \   00011C A101                  CP        A, #0x1
   \   00011E 2718                  JREQ      L:??InputDataProgram_9
   \   000120 A103                  CP        A, #0x3
   \   000122 2714                  JREQ      L:??InputDataProgram_9
   \   000124 A105                  CP        A, #0x5
   \   000126 2710                  JREQ      L:??InputDataProgram_9
   \   000128 A107                  CP        A, #0x7
   \   00012A 270C                  JREQ      L:??InputDataProgram_9
   \   00012C A108                  CP        A, #0x8
   \   00012E 2708                  JREQ      L:??InputDataProgram_9
   \   000130 A10A                  CP        A, #0xa
   \   000132 2704                  JREQ      L:??InputDataProgram_9
   \   000134 A10C                  CP        A, #0xc
   \   000136 2606                  JRNE      L:??InputDataProgram_10
   \                     ??InputDataProgram_9:
   \   000138 351F0000              MOV       S:?b8, #0x1f
   \   00013C 2024                  JRA       L:??InputDataProgram_11
   2121               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??InputDataProgram_10:
   \   00013E A104                  CP        A, #0x4
   \   000140 270C                  JREQ      L:??InputDataProgram_12
   \   000142 A106                  CP        A, #0x6
   \   000144 2708                  JREQ      L:??InputDataProgram_12
   \   000146 A109                  CP        A, #0x9
   \   000148 2704                  JREQ      L:??InputDataProgram_12
   \   00014A A10B                  CP        A, #0xb
   \   00014C 2606                  JRNE      L:??InputDataProgram_13
   \                     ??InputDataProgram_12:
   \   00014E 351E0000              MOV       S:?b8, #0x1e
   \   000152 200E                  JRA       L:??InputDataProgram_11
   2122                else
   2123                 {
   2124                   if(leap) date_end=29;
   \                     ??InputDataProgram_13:
   \   000154 3D00                  TNZ       S:?b8
   \   000156 2706                  JREQ      L:??InputDataProgram_14
   \   000158 351D0000              MOV       S:?b8, #0x1d
   \   00015C 2004                  JRA       L:??InputDataProgram_11
   2125                    else date_end=28;
   \                     ??InputDataProgram_14:
   \   00015E 351C0000              MOV       S:?b8, #0x1c
   2126                 }
   2127                if(smart)if( y==year && m==month) date_start=d;
   \                     ??InputDataProgram_11:
   \   000162 3D00                  TNZ       S:?b11
   \   000164 2715                  JREQ      L:??InputDataProgram_15
   \   000166 C60000                LD        A, L:year
   \   000169 C10000                CP        A, L:`y`
   \   00016C 260D                  JRNE      L:??InputDataProgram_15
   \   00016E C60000                LD        A, L:month
   \   000171 C10000                CP        A, L:m
   \   000174 2605                  JRNE      L:??InputDataProgram_15
   \   000176 C60000                LD        A, L:d
   \   000179 B700                  LD        S:?b9, A
   2128              LCDInstr(0x01);
   \                     ??InputDataProgram_15:
   \   00017B 8D000000              CALLF     ?Subroutine18
   2129               Delay1(1000);
   2130                line_lcd=0;
   2131              printf("\nDate>");
   \                     ??CrossCallReturnLabel_215:
   \   00017F AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000182 8D000000              CALLF     printf
   2132                do
   2133              {
   2134               line_lcd=1;
   \                     ??InputDataProgram_16:
   \   000186 35010000              MOV       L:line_lcd, #0x1
   2135               if(blink_flag) printf("\n%02d:%02d:%02d",y,m,d);
   \   00018A C60000                LD        A, L:`y`
   \   00018D 5F                    CLRW      X
   \   00018E 97                    LD        XL, A
   \   00018F C60000                LD        A, L:m
   \   000192 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_97:
   \   000196 2717                  JREQ      L:??InputDataProgram_17
   \   000198 C60000                LD        A, L:d
   \   00019B 9097                  LD        YL, A
   \   00019D 9089                  PUSHW     Y
   \   00019F 8D000000              CALLF     L:?push_w0
   \   0001A3 89                    PUSHW     X
   \   0001A4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0001A7 8D000000              CALLF     printf
   \   0001AB 5B06                  ADD       SP, #0x6
   \   0001AD 200E                  JRA       L:??InputDataProgram_18
   2136                else printf("\n%02d:%02d:  ",y,m);
   \                     ??InputDataProgram_17:
   \   0001AF 8D000000              CALLF     L:?push_w0
   \   0001B3 89                    PUSHW     X
   \   0001B4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:  ">`
   \   0001B7 8D000000              CALLF     printf
   \   0001BB 5B04                  ADD       SP, #0x4
   2137                 d=adj(date_start,date_end,d);
   \                     ??InputDataProgram_18:
   \   0001BD C60000                LD        A, L:d
   \   0001C0 B700                  LD        S:?b1, A
   \   0001C2 450000                MOV       S:?b0, S:?b8
   \   0001C5 B600                  LD        A, S:?b9
   \   0001C7 8D000000              CALLF     adj
   \   0001CB C70000                LD        L:d, A
   2138              } while (!key_ok_on());
   \   0001CE 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_101:
   \   0001D2 27B2                  JREQ      L:??InputDataProgram_16
   2139          
   2140            return TRUE;
   \   0001D4 A601                  LD        A, #0x1
   \   0001D6 AC000000              JPF       L:?epilogue_l2
   2141          }
   2142          
   2143          

   \                                 In section .far_func.text, align 1, keep-with-next
   2144          void initBeep(void)
   2145          {
   2146            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2147            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2148             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2149               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2150             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2151          
   2152          }
   2153          

   \                                 In section .far_func.text, align 1, keep-with-next
   2154          void beep(u16 Interval)
   2155          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2156          
   2157           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2158               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2159            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2160          
   2161          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2162          

   \                                 In section .far_func.text, align 1, keep-with-next
   2163           PUTCHAR_PROTOTYPE
   2164          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2165            /* Place your implementation of fputc here */
   2166            /* e.g. write a character to the USART */
   2167                //USART_SendData(USART3, (u8) ch);
   2168               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2169             /* Loop until the end of transmission */
   2170              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2171            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2172          }
   2173          
   2174           #ifdef USE_FULL_ASSERT
   2175          
   2176          /**
   2177            * @brief  Reports the name of the source file and the source line number
   2178            *   where the assert_param error has occurred.
   2179            * @param file: pointer to the source file name
   2180            * @param line: assert_param error line source number
   2181            * @retval : None
   2182            */

   \                                 In section .far_func.text, align 1
   2183          void assert_failed(u8* file, u32 line)
   2184          {
   2185            /* User can add his own implementation to report the file name and line number,
   2186               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2187          
   2188            /* Infinite loop */
   2189            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2190            {
   2191          
   2192            }
   2193          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Off">`:
   \   000000 204F666600            DC8 " Off"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Sun">`:
   \   000000 2053756E00            DC8 " Sun"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Mon">`:
   \   000000 204D6F6E00            DC8 " Mon"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Tues">`:
   \   000000 205475657300          DC8 " Tues"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Wednes">`:
   \   000000 205765646E65          DC8 " Wednes"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Thurs">`:
   \   000000 205468757273          DC8 " Thurs"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Fri">`:
   \   000000 2046726900            DC8 " Fri"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Satur">`:
   \   000000 205361747572          DC8 " Satur"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Daily">`:
   \   000000 204461696C79          DC8 " Daily"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Month">`:
   \   000000 204D6F6E7468          DC8 " Month"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nPrgClear">`:
   \   000000 0A507267436C          DC8 "\012PrgClear"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetDate">`:
   \   000000 0A5365744461          DC8 "\012SetDate"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSh Date">`:
   \   000000 0A5368204461          DC8 "\012Sh Date"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit">`:
   \   000000 0A4578697400          DC8 "\012Exit"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMenu +/-">`:
   \   000000 0A4D656E7520          DC8 "\012Menu +/-"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%s">`:
   \   000000 0A257300              DC8 "\012%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-">`:
   \   000000 0A2B2F2D00            DC8 "\012+/-"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClear">`:
   \   000000 0A436C656172          DC8 "\012Clear"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nall prog">`:
   \   000000 0A616C6C2070          DC8 "\012all prog"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nError">`:
   \   000000 0A4572726F72          DC8 "\012Error"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDay is">`:
   \   000000 0A4461792069          DC8 "\012Day is"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d:%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  :%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nP%d%s">`:
   \   000000 0A5025642573          DC8 "\012P%d%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " On">`:
   \   000000 204F6E00              DC8 " On"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"
   2194          #endif
   2195          
   2196          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
   2197          
   2198          
   2199             /*
   2200          
   2201          void Menu (void)
   2202          {
   2203           // Clear Display
   2204              LCDInstr(0x01); //Clear LCD
   2205              Delay1(250);
   2206              //u8 key;
   2207           // First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   2208              Wait for Plus,Minius or OK
   2209              If plus next option from Menu on the end EXIT
   2210              If minus previous option from Menu  on the end EXIT
   2211              If OK enter to menu option
   2212              If time out about 10s exit from Menu
   2213           //
   2214          
   2215          
   2216          
   2217          
   2218          
   2219          
   2220              do {
   2221          
   2222          First_Menu:
   2223              line_lcd=0;
   2224              printf("\nON      ");
   2225              line_lcd=1;
   2226              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   2227               pressKey();
   2228              switch (button)
   2229                  {
   2230                  case 1: goto Second_Menu ;
   2231                   break;
   2232                  case 2: Set_Timer_On();
   2233                   break;
   2234                  case 3: goto Exit_Menu;
   2235                   break;
   2236                  }
   2237                  break; //Exit Menu
   2238          
   2239          
   2240          Second_Menu:
   2241              line_lcd=0;
   2242              printf("\nOFF     ");
   2243              line_lcd=1;
   2244              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   2245                pressKey();
   2246                switch (button)
   2247                  {
   2248                  case 1: goto Third_Menu ;
   2249                   break;
   2250                  case 2: Set_Timer_Off();
   2251                   break;
   2252                  case 3: goto First_Menu;
   2253                   break;
   2254                  }
   2255               break; //Exit Menu
   2256          
   2257          Third_Menu:
   2258                line_lcd=0;
   2259              printf("\nMonthly ");
   2260              line_lcd=1;
   2261              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   2262                pressKey();
   2263                switch (button)
   2264                  {
   2265                  case 1: goto Fourth_Menu;
   2266                   break;
   2267                  case 2:
   2268                    {
   2269                     setData();
   2270                     monthly_year=y;
   2271                     monthly_month=m;
   2272                     monthly_date=d;
   2273                     status.monthly=1;
   2274                     status.daily=0;  // Disable Daily Alarm On date enable it
   2275                     status.on=0;     // Power off
   2276                     // Save Status and Date in EEPROM
   2277                     EEPROM_INIT();
   2278                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2279                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2280                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   2281                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   2282                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   2283                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2284                     break;
   2285                    }
   2286                  case 3: goto Second_Menu ;
   2287                   break;
   2288                  }
   2289               break; //Exit Menu
   2290          
   2291          
   2292          Fourth_Menu:
   2293              line_lcd=0;
   2294              printf("\nClock   ");
   2295              line_lcd=1;
   2296              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   2297                pressKey();
   2298                switch (button)
   2299                  {
   2300                  case 1: goto Fifth_Menu ;
   2301                   break;
   2302                  case 2: SetClock();
   2303                   break;
   2304                  case 3: goto Third_Menu;
   2305                   break;
   2306                  }
   2307               break; //Exit Menu
   2308          
   2309          
   2310          Fifth_Menu:
   2311              line_lcd=0;
   2312              printf("\nDate    ");
   2313              line_lcd=1;
   2314              printf("\n%02d:%02d:%02d",year,month,date);
   2315                pressKey();
   2316                switch (button)
   2317                  {
   2318                  case 1: goto Exit_Menu ;
   2319                   break;
   2320                  case 2: SetClock();
   2321                   break;
   2322                  case 3: goto Fourth_Menu;
   2323                   break;
   2324                  }
   2325               break; //Exit Menu
   2326          
   2327          
   2328          Exit_Menu:
   2329              line_lcd=0;
   2330              printf("\nExit OK ");
   2331              line_lcd=1;
   2332              printf("\n+/-     ");
   2333                 pressKey();
   2334                switch (button)
   2335                  {
   2336                  case 1: goto First_Menu;
   2337                   break;
   2338                  case 2:
   2339                   break;
   2340                  case 3: goto Fifth_Menu;
   2341                   break;
   2342                  }
   2343                 break; //Exit Menu
   2344              }    while (1);
   2345              //exit:
   2346             ClearLine1();
   2347             ClearLine2();
   2348          
   2349          }
   2350          
   2351          */
   2352          
   2353          
   2354          /*
   2355          void InitAdc()
   2356          {
   2357               ADC1_DeInit();
   2358               ADC1_StartConversion();
   2359          
   2360               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   2361               //           ADC1_CHANNEL_0,
   2362               //           ADC1_PRESSEL_FCPU_D4,
   2363               //            ADC1_EXTTRIG_TIM,
   2364          
   2365          
   2366               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   2367               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   2368                                      ADC1_CHANNEL_0,
   2369                                      ADC1_ALIGN_RIGHT
   2370                                     );
   2371          
   2372          
   2373               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   2374          
   2375          
   2376               //ADC1_Cmd (ENABLE);
   2377               //ADC1->CR1 |= ADC1_CR1_ADON ;
   2378               ADC1_StartConversion();
   2379               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   2380          
   2381          }
   2382          */
   2383          
   2384          
   2385          
   2386          /*
   2387          void InitUart()
   2388          {
   2389             UART2_DeInit();
   2390             UART2_Init((u32)9600,
   2391                        UART2_WORDLENGTH_8D,
   2392                        UART2_STOPBITS_1,
   2393                        UART2_PARITY_NO,
   2394                        UART2_SYNCMODE_CLOCK_DISABLE,
   2395                        UART2_MODE_TXRX_ENABLE
   2396                          );
   2397          
   2398             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   2399             UART2_Cmd(ENABLE);
   2400          
   2401            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   2402          }
   2403            */
   2404          
   2405          
   2406          /*
   2407          void SendChar( u8 Char)
   2408          {
   2409             UART2->DR = Char;
   2410            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   2411          }
   2412          
   2413           */
   2414          
   2415           /*
   2416          void Send_Hello()
   2417          {
   2418            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   2419             Delay1(10);
   2420             sprintf(data,"Hello");
   2421              u8 i=0;
   2422            do
   2423           {
   2424            SendChar(data[i++]);
   2425           } while (data[i]!=0);
   2426            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   2427            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   2428          
   2429          
   2430          
   2431          }
   2432          
   2433          
   2434          
   2435          
   2436          
   2437          void SendData()
   2438          {
   2439           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   2440            Delay1(10);
   2441            u8 i=0;
   2442            sprintf(data,"%d %c",adcdata,0x0d);
   2443           do
   2444           {
   2445             SendChar(data[i++]);
   2446          
   2447           } while (data[i]!=0);
   2448             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   2449            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   2450            rx_data=0;
   2451          }
   2452          */
   2453          
   2454          
   2455           /*
   2456          u16 Average()
   2457          {
   2458           //Find average in measure
   2459            u8 i=0;
   2460            u16 Summa=0;
   2461            do
   2462            {
   2463             Summa+=measure[i++];
   2464            } while ( measure[i]!=0);
   2465             if(i!=0) Summa=Summa/i;
   2466             return Summa;
   2467          }
   2468             */
   2469          
   2470                 /*
   2471          bool Set_Timer_On()
   2472          {
   2473          
   2474             //clr
   2475             LCDInstr(0x01);
   2476             Delay1(1000);
   2477             line_lcd=0;
   2478             printf("\nH On>");
   2479              timer3=0;
   2480            do
   2481              {
   2482               line_lcd=1;
   2483               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   2484                 daily_hour_on=adj(0,23,daily_hour_on);
   2485              } while ( timer3<=time_menu && !key_ok_on());
   2486          
   2487          
   2488             LCDInstr(0x01);
   2489             Delay1(1000);
   2490             line_lcd=0;
   2491             printf("\nMin On>");
   2492              timer3=0;
   2493            do
   2494              {
   2495               line_lcd=1;
   2496               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   2497                 daily_minute_on=adj(0,59,daily_minute_on);
   2498              } while ((timer3<=time_menu)&& !key_ok_on());
   2499          
   2500             //Save data to eeprom
   2501               if (!status.monthly) status.daily=1;
   2502                 else status.daily=0;
   2503               EEPROM_INIT();
   2504              //u8 temp =*(u8*)(&status);
   2505              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   2506               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2507               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2508               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   2509               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   2510               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2511                time_on=daily_hour_on*60+daily_minute_on;
   2512                 change=TRUE;
   2513          
   2514             return TRUE;
   2515          }
   2516           */
   2517          
   2518          /*
   2519          bool Set_Timer_Off()
   2520          {
   2521          
   2522              LCDInstr(0x01);
   2523              Delay1(1000);
   2524              line_lcd=0;
   2525              printf("\nH Off>");
   2526               timer3=0;
   2527            do
   2528              {
   2529               line_lcd=1;
   2530               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   2531                 daily_hour_off=adj(0,23,daily_hour_off);
   2532              } while (timer3<=time_menu && !key_ok_on());
   2533          
   2534            LCDInstr(0x01);
   2535             Delay1(1000);
   2536             line_lcd=0;
   2537             printf("\nMin Off>");
   2538             timer3=0;
   2539            do
   2540              {
   2541               line_lcd=1;
   2542               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   2543                 daily_minute_off=adj(0,59,daily_minute_off);
   2544              } while (timer3<=time_menu && !key_ok_on());
   2545          
   2546            //Save data to eeprom
   2547               if (!status.monthly) status.daily=1;
   2548                 else status.daily=0;
   2549               EEPROM_INIT();
   2550              //u8 temp =*(u8*)(&status);
   2551              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   2552               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2553               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2554               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   2555               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   2556               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2557                time_off= daily_hour_off*60+daily_minute_off;
   2558                 change=TRUE;
   2559               return TRUE;
   2560          }
   2561          
   2562            */
   2563          

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     program_number                    1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     power                             1
     blink_flag                        1
     blink_time                        2
     key_ok_hold                       1
     rotate_line2                      1
     size_status                       1
     ptim                             22
     ltime                             4
     line1                            10
     line2                            10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     day_week                         22
     setup_menu                       10
     status                            2
     hardware                          2
     programpoint                     48
     ?Subroutine42                     7
     ?Subroutine35                     5
     ?Subroutine74                     9
     ??Subroutine86_0                  7
     ?Subroutine79                    11
     main                            327
     ?Subroutine54                     7
     ?Subroutine37                    11
     ?Subroutine36                    11
     ?Subroutine15                     9
     ?Subroutine76                     7
     Display                         218
     ?Subroutine40                    16
     Power_On                         14
     ?Subroutine39                    15
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine62                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine65                     1
     ??Subroutine92_0                  7
     ?Subroutine64                     9
     ReadDS1307                      120
     ?Subroutine52                    12
     ?Subroutine31                    11
     ?Subroutine26                    13
     ?Subroutine25                     8
     ?Subroutine73                    10
     Check_DS1307                     78
     Set_DS1307                      109
     ?Subroutine63                    11
     convert_tobcd                    23
     bcd2hex                          23
     ??Subroutine81_0                  9
     ?Subroutine50                    10
     ?Subroutine24                     8
     ?Subroutine72                     6
     SetupMenu                       141
     ?Subroutine45                     9
     ?Subroutine75                     8
     ?Subroutine4                      4
     ??Subroutine90_0                  4
     ??Subroutine91_0                 13
     ?Subroutine48                     9
     ?Subroutine44                     9
     SelectMenu                      226
     ?Subroutine51                     8
     ??Subroutine89_0                  7
     local_time                       24
     ?Subroutine66                    12
     ?Subroutine3                     36
     SetData                         159
     ?Subroutine18                     7
     ?Subroutine30                     6
     ??Subroutine83_0                  5
     SetClock                        255
     ?Subroutine41                    11
     adj                              85
     key_ok_on                        81
     ?Subroutine33                    14
     ?Subroutine28                    10
     key_plus_on                      59
     ?Subroutine38                     7
     ?Subroutine34                     7
     ?Subroutine32                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine17                    29
     SaveStatus                       43
     ?Subroutine49                     9
     ?Subroutine78                     8
     ReadStatus                       47
     ?Subroutine53                     9
     SaveProgram                      33
     ?Subroutine46                    19
     ReadProgram                      48
     ResetProgram                     51
     ??Subroutine84_0                 10
     ?Subroutine22                     8
     CheckProgramPoint               191
     ?Subroutine1                     42
     ?Subroutine67                    36
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine61                     9
     ?Subroutine58                     7
     InitClk                          62
     ?Subroutine59                     9
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine87_0                  5
     ?Subroutine69                     7
     ?Subroutine14                     2
     InitLcd                          89
     ?Subroutine19                    17
     ?Subroutine13                    11
     ?Subroutine0                     13
     ??Subroutine80_0                 10
     ?Subroutine23                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine6                     24
     ??Subroutine88_0                  6
     LCD_Busy                         69
     LCD                             208
     ?Subroutine70                     9
     ??Subroutine85_0                  5
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine20                     2
     ?Subroutine16                    10
     ?Subroutine71                     9
     DS18_Read                        74
     ?Subroutine21                    12
     DS18_Reset                       72
     ?Subroutine57                     7
     temperature                      63
     ?Subroutine56                    15
     ?Subroutine77                     6
     ?Subroutine55                    23
     ?Subroutine5                     21
     Read_DS18                       121
     ?Subroutine60                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     ?Subroutine11                     6
     Display_Line                     49
     ?Subroutine47                    13
     ?Subroutine9                     10
     ?Subroutine68                     4
     DisplayLine2                     53
     Rotate_Line                      19
     ClearLine1                       19
     ?Subroutine10                    13
     ?Subroutine8                     12
     ClearLine2                       19
     FirstMenu                       115
     ?Subroutine27                     9
     ProgramMenu                     636
     ?Subroutine43                     1
     ??Subroutine82_0                  7
     ?Subroutine29                     9
     ?Subroutine2                      4
     ?Subroutine7                      3
     pressKey                         74
     InputDataProgram                474
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant " Off">                5
     ?<Constant " Sun">                5
     ?<Constant " Mon">                5
     ?<Constant " Tues">               6
     ?<Constant " Wednes">             8
     ?<Constant " Thurs">              7
     ?<Constant " Fri">                5
     ?<Constant " Satur">              7
     ?<Constant " Daily">              7
     ?<Constant " Month">              7
     ?<Constant "\nPrgClear">         10
     ?<Constant "\nSetClock">         10
     ?<Constant "\nSetDate">           9
     ?<Constant "\nSh Date">           9
     ?<Constant "\nExit">              6
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nMenu +/-">         10
     ?<Constant "\n%s">                4
     ?<Constant "\n+/-">               5
     ?<Constant "\nClear">             7
     ?<Constant "\nall prog">         10
     ?<Constant "\nError">             7
     ?<Constant "\nDay is">            8
     ?<Constant "\nHour>">             7
     ?<Constant "\n  :%02d:%02d">     14
     ?<Constant "\nMinute>">           9
     ?<Constant "\n%02d:  :%02d">     14
     ?<Constant "\nSeconds>">         10
     ?<Constant "\n%02d:%02d:  ">     14
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nP%d%s">             7
     ?<Constant " On">                 4
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\n  :%02d">           9
     ?<Constant "\n%02d:  ">           9
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7

 
 6 468 bytes in section .far_func.text
   162 bytes in section .near.bss
    35 bytes in section .near.data
   389 bytes in section .near.rodata
 
 6 468 bytes of CODE  memory
   389 bytes of CONST memory
   197 bytes of DATA  memory

Errors: none
Warnings: none
