###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             01/Nov/2013  19:16:49 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\stm8s_it. #
#                    c" -e -Ohz --debug --code_model medium --data_model      #
#                    medium -o "C:\Documents and                              #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\"       #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D STM8S105 -lC      #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -lA "C:\Documents and                      #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -I   #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \" -I "C:\Documents and Settings\Administrator\Desktop\s #
#                    tm8s105k-controller\Project\STM8S_StdPeriph_Template\EWS #
#                    TM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\"      #
#                    --vregs 16                                               #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\stm8s_it.lst                                  #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\stm8s_it.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file     stm8s_it.c
      4            * @author   MCD Application Team
      5            * @version  V2.1.0
      6            * @date     18-November-2011
      7            * @brief    Main Interrupt Service Routines.
      8            *           This file provides template for all peripherals interrupt service
      9            *           routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm8s_it.h"
     26          
     27          /** @addtogroup Template_Project
     28            * @{
     29            */
     30          
     31          /* Private typedef -----------------------------------------------------------*/
     32          /* Private define ------------------------------------------------------------*/
     33          #define data_size 10
     34          #define sync_time  30 //30s
     35          #define lcdLed GPIO_PIN_0
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          extern  volatile u16 timer1;
     39          extern  volatile u16 timer2;
     40          extern  volatile u16 timer3;
     41          extern  volatile u16 adcdata;
     42          extern  volatile u8 timeout;
     43          extern  volatile u8 rx_data;

   \                                 In section .near.bss, align 1
     44          extern  volatile u8 index=0;
   \                     index:
   \   000000                       DS8 1
     45          extern   u8 seconds;
     46          extern   u8 minutes;
     47          extern   u8 hours;
     48          extern   u8 year;
     49          extern   u8 month;
     50          extern   u8 date;
     51          extern  bool volatile  Time_Display;
     52          

   \                                 In section .near.bss, align 1
     53          volatile u8 sync=0;
   \                     sync:
   \   000000                       DS8 1
     54          extern  bool volatile sync_time_ds1307;
     55          
     56          extern struct   status_reg
     57           {
     58             unsigned on:1;
     59             unsigned timer_on:1;
     60             unsigned daily:1;
     61             unsigned monthly:1;
     62           }  volatile   status  ;
     63          
     64          
     65          
     66          extern struct
     67           {
     68             unsigned ds1307:1;
     69             unsigned ds18B20:1;
     70             unsigned buzzer:1;
     71             unsigned lcdLed:1;
     72           }  volatile hardware ;
     73          
     74          extern u16 time_on;
     75          extern u16 time_off;
     76          extern u8 monthly_year;
     77          extern u8 monthly_month;
     78          extern u8 monthly_date;
     79          extern volatile u8 lcdLedTimer;
     80          
     81          
     82          
     83          
     84          //extern   u16  measure[data_size];
     85          
     86          /* Private function prototypes -----------------------------------------------*/
     87          /* Private functions ---------------------------------------------------------*/
     88          extern void Save_Status();
     89          /* Public functions ----------------------------------------------------------*/
     90          
     91          #ifdef _COSMIC_
     92          /**
     93            * @brief Dummy Interrupt routine
     94            * @par Parameters:
     95            * None
     96            * @retval
     97            * None
     98          */
     99          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
    100          {
    101            /* In order to detect unexpected events during development,
    102               it is recommended to set a breakpoint on the following instruction.
    103            */
    104          }
    105          #endif /*_COSMIC_*/
    106          
    107          /**
    108            * @brief TRAP Interrupt routine
    109            * @param  None
    110            * @retval None
    111            */

   \                                 In section .far_func.text, align 1
    112          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
    113          {
    114            /* In order to detect unexpected events during development,
    115               it is recommended to set a breakpoint on the following instruction.
    116            */
    117          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80                    IRET
    118          
    119          /**
    120            * @brief Top Level Interrupt routine.
    121            * @param  None
    122            * @retval None
    123            */

   \                                 In section .far_func.text, align 1
    124          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
    125          
    126          {
    127            /* In order to detect unexpected events during development,
    128               it is recommended to set a breakpoint on the following instruction.
    129            */
    130          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80                    IRET
    131          
    132          /**
    133            * @brief Auto Wake Up Interrupt routine.
    134            * @param  None
    135            * @retval None
    136            */

   \                                 In section .far_func.text, align 1
    137          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
    138          {
    139            /* In order to detect unexpected events during development,
    140               it is recommended to set a breakpoint on the following instruction.
    141            */
    142          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80                    IRET
    143          
    144          /**
    145            * @brief Clock Controller Interrupt routine.
    146            * @param  None
    147            * @retval None
    148            */

   \                                 In section .far_func.text, align 1
    149          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    150          {
    151            /* In order to detect unexpected events during development,
    152               it is recommended to set a breakpoint on the following instruction.
    153            */
    154          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80                    IRET
    155          
    156          /**
    157            * @brief External Interrupt PORTA Interrupt routine.
    158            * @param  None
    159            * @retval None
    160            */

   \                                 In section .far_func.text, align 1
    161          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    162          {
    163            /* In order to detect unexpected events during development,
    164               it is recommended to set a breakpoint on the following instruction.
    165            */
    166          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80                    IRET
    167          
    168          /**
    169            * @brief External Interrupt PORTB Interrupt routine.
    170            * @param  None
    171            * @retval None
    172            */

   \                                 In section .far_func.text, align 1
    173          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    174          {
    175            /* In order to detect unexpected events during development,
    176               it is recommended to set a breakpoint on the following instruction.
    177            */
    178          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80                    IRET
    179          
    180          /**
    181            * @brief External Interrupt PORTC Interrupt routine.
    182            * @param  None
    183            * @retval None
    184            */

   \                                 In section .far_func.text, align 1
    185          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    186          {
    187            /* In order to detect unexpected events during development,
    188               it is recommended to set a breakpoint on the following instruction.
    189            */
    190          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80                    IRET
    191          
    192          /**
    193            * @brief External Interrupt PORTD Interrupt routine.
    194            * @param  None
    195            * @retval None
    196            */

   \                                 In section .far_func.text, align 1
    197          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    198          {
    199            /* In order to detect unexpected events during development,
    200               it is recommended to set a breakpoint on the following instruction.
    201            */
    202          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80                    IRET
    203          
    204          /**
    205            * @brief External Interrupt PORTE Interrupt routine.
    206            * @param  None
    207            * @retval None
    208            */

   \                                 In section .far_func.text, align 1
    209          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    210          {
    211            /* In order to detect unexpected events during development,
    212               it is recommended to set a breakpoint on the following instruction.
    213            */
    214          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80                    IRET
    215          
    216          #ifdef STM8S903
    217          /**
    218            * @brief External Interrupt PORTF Interrupt routine.
    219            * @param  None
    220            * @retval None
    221            */
    222           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    223           {
    224            /* In order to detect unexpected events during development,
    225               it is recommended to set a breakpoint on the following instruction.
    226            */
    227           }
    228          #endif /*STM8S903*/
    229          
    230          #if defined (STM8S208) || defined (STM8AF52Ax)
    231          /**
    232            * @brief CAN RX Interrupt routine.
    233            * @param  None
    234            * @retval None
    235            */
    236           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    237           {
    238            /* In order to detect unexpected events during development,
    239               it is recommended to set a breakpoint on the following instruction.
    240            */
    241           }
    242          
    243          /**
    244            * @brief CAN TX Interrupt routine.
    245            * @param  None
    246            * @retval None
    247            */
    248           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    249           {
    250            /* In order to detect unexpected events during development,
    251               it is recommended to set a breakpoint on the following instruction.
    252            */
    253           }
    254          #endif /*STM8S208 || STM8AF52Ax */
    255          
    256          /**
    257            * @brief SPI Interrupt routine.
    258            * @param  None
    259            * @retval None
    260            */

   \                                 In section .far_func.text, align 1
    261          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    262          {
    263            /* In order to detect unexpected events during development,
    264               it is recommended to set a breakpoint on the following instruction.
    265            */
    266          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80                    IRET
    267          
    268          /**
    269            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    270            * @param  None
    271            * @retval None
    272            */

   \                                 In section .far_func.text, align 1
    273          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    274          {
    275            /* In order to detect unexpected events during development,
    276               it is recommended to set a breakpoint on the following instruction.
    277            */
    278          }
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 80                    IRET
    279          
    280          /**
    281            * @brief Timer1 Capture/Compare Interrupt routine.
    282            * @param  None
    283            * @retval None
    284            */

   \                                 In section .far_func.text, align 1
    285          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    286          {
    287            /* In order to detect unexpected events during development,
    288               it is recommended to set a breakpoint on the following instruction.
    289            */
    290          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80                    IRET
    291          
    292          #ifdef STM8S903
    293          /**
    294            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    295            * @param  None
    296            * @retval None
    297            */
    298           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    299           {
    300            /* In order to detect unexpected events during development,
    301               it is recommended to set a breakpoint on the following instruction.
    302            */
    303           }
    304          
    305          /**
    306            * @brief Timer5 Capture/Compare Interrupt routine.
    307            * @param  None
    308            * @retval None
    309            */
    310           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    311           {
    312            /* In order to detect unexpected events during development,
    313               it is recommended to set a breakpoint on the following instruction.
    314            */
    315           }
    316          
    317          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    318          /**
    319            * @brief Timer2 Update/Overflow/Break Interrupt routine.
    320            * @param  None
    321            * @retval None
    322            */

   \                                 In section .far_func.text, align 1
    323           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    324           {
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    325            /* In order to detect unexpected events during development,
    326               it is recommended to set a breakpoint on the following instruction.
    327            */
    328             if(hardware.lcdLed) GPIO_WriteLow(GPIOB,lcdLed);
   \   00000E CE0000                LDW       X, L:hardware
   \   000011 9F                    LD        A, XL
   \   000012 A508                  BCP       A, #0x8
   \   000014 270B                  JREQ      L:??TIM2_UPD_OVF_BRK_IRQHandler_0
   \   000016 A601                  LD        A, #0x1
   \   000018 AE5005                LDW       X, #0x5005
   \   00001B 8D000000              CALLF     GPIO_WriteLow
   \   00001F 2009                  JRA       L:??TIM2_UPD_OVF_BRK_IRQHandler_1
    329               else   GPIO_WriteHigh(GPIOB,lcdLed);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_0:
   \   000021 A601                  LD        A, #0x1
   \   000023 AE5005                LDW       X, #0x5005
   \   000026 8D000000              CALLF     GPIO_WriteHigh
    330           timer2++;
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_1:
   \   00002A CE0000                LDW       X, L:timer2
   \   00002D 5C                    INCW      X
   \   00002E CF0000                LDW       L:timer2, X
    331           timer1++;
   \   000031 CE0000                LDW       X, L:timer1
   \   000034 5C                    INCW      X
   \   000035 CF0000                LDW       L:timer1, X
    332           timeout--;
   \   000038 C60000                LD        A, L:timeout
   \   00003B 4A                    DEC       A
   \   00003C C70000                LD        L:timeout, A
    333            if (timeout<=0) timeout=0;
   \   00003F C60000                LD        A, L:timeout
   \   000042 2604                  JRNE      L:??TIM2_UPD_OVF_BRK_IRQHandler_2
   \   000044 725F0000              CLR       L:timeout
    334          
    335           //ADC1_Cmd (ENABLE); //Start convert
    336           TIM2_ClearITPendingBit(TIM2_IT_UPDATE);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_2:
   \   000048 A601                  LD        A, #0x1
   \   00004A 8D000000              CALLF     TIM2_ClearITPendingBit
    337          
    338           }
   \   00004E 8D000000              CALLF     L:?pop_l1
   \   000052 8D000000              CALLF     L:?pop_l0
   \   000056 80                    IRET
    339          
    340          /**
    341            * @brief Timer2 Capture/Compare Interrupt routine.
    342            * @param  None
    343            * @retval None
    344            */

   \                                 In section .far_func.text, align 1
    345           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    346           {
    347            /* In order to detect unexpected events during development,
    348               it is recommended to set a breakpoint on the following instruction.
    349            */
    350           }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80                    IRET
    351          #endif /*STM8S903*/
    352          
    353          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    354              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    355          /**
    356            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    357            * @param  None
    358            * @retval None
    359            */

   \                                 In section .far_func.text, align 1
    360           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    361           {
   \                     TIM3_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_17:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    362            /* In order to detect unexpected events during development,
    363               it is recommended to set a breakpoint on the following instruction.
    364            */
    365          
    366          
    367             GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \   00000E A601                  LD        A, #0x1
   \   000010 AE500F                LDW       X, #0x500f
   \   000013 8D000000              CALLF     GPIO_WriteReverse
    368             timer3++;
   \   000017 CE0000                LDW       X, L:timer3
   \   00001A 5C                    INCW      X
   \   00001B CF0000                LDW       L:timer3, X
    369             seconds++;
   \   00001E C60000                LD        A, L:seconds
   \   000021 4C                    INC       A
   \   000022 C70000                LD        L:seconds, A
    370              if (seconds >59)
   \   000025 A13C                  CP        A, #0x3c
   \   000027 250B                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_0
    371              {
    372                seconds=0;
   \   000029 725F0000              CLR       L:seconds
    373                minutes++;
   \   00002D C60000                LD        A, L:minutes
   \   000030 4C                    INC       A
   \   000031 C70000                LD        L:minutes, A
    374              }
    375              if (minutes > 59)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_0:
   \   000034 C60000                LD        A, L:minutes
   \   000037 A13C                  CP        A, #0x3c
   \   000039 2513                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
    376              {
    377                minutes=0;
   \   00003B 725F0000              CLR       L:minutes
    378                hours++;
   \   00003F C60000                LD        A, L:hours
   \   000042 4C                    INC       A
   \   000043 C70000                LD        L:hours, A
    379                if(hours > 23) hours=0;
   \   000046 A118                  CP        A, #0x18
   \   000048 2504                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
   \   00004A 725F0000              CLR       L:hours
    380              }
    381          
    382              Time_Display=TRUE;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_1:
   \   00004E 35010000              MOV       L:Time_Display, #0x1
    383          
    384                 // Check for Monthly Alarm      |------- time_now
    385                //                               |----timer_on
    386                    if ( status.monthly)
   \   000052 CE0000                LDW       X, L:status
   \   000055 9F                    LD        A, XL
   \   000056 A508                  BCP       A, #0x8
   \   000058 2739                  JREQ      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    387                    {
    388                      if( monthly_year==year && monthly_date==date && monthly_month==month)
   \   00005A C60000                LD        A, L:year
   \   00005D C10000                CP        A, L:monthly_year
   \   000060 2631                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
   \   000062 C60000                LD        A, L:`date`
   \   000065 C10000                CP        A, L:monthly_date
   \   000068 2629                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
   \   00006A C60000                LD        A, L:month
   \   00006D C10000                CP        A, L:monthly_month
   \   000070 2621                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    389                      {
    390                        u16 time_now=hours*60+minutes;
    391                        if(time_now >= time_on)
   \   000072 8D000000              CALLF     ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   000076 C30000                CPW       X, L:time_on
   \   000079 2518                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    392                        {
    393                        status.daily=1;
   \   00007B CE0000                LDW       X, L:status
   \   00007E 01                    RRWA      X, A
   \   00007F AA04                  OR        A, #0x4
   \   000081 02                    RLWA      X, A
   \   000082 CF0000                LDW       L:status, X
    394                        status.monthly=0;
   \   000085 CE0000                LDW       X, L:status
   \   000088 01                    RRWA      X, A
   \   000089 A4F7                  AND       A, #0xf7
   \   00008B 02                    RLWA      X, A
   \   00008C CF0000                LDW       L:status, X
    395                        Save_Status();
   \   00008F 8D000000              CALLF     Save_Status
    396                        }
    397                      }
    398                    }
    399          
    400          
    401          
    402          
    403                //Check for Daily Alarm
    404                  if (status.daily)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_2:
   \   000093 CE0000                LDW       X, L:status
   \   000096 9F                    LD        A, XL
   \   000097 A504                  BCP       A, #0x4
   \   000099 272F                  JREQ      L:??TIM3_UPD_OVF_BRK_IRQHandler_3
    405                  {
    406                 u16 time_now=hours*60+minutes;
   \   00009B 8D000000              CALLF     ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00009F BF00                  LDW       S:?w0, X
    407                status.on=0;
   \   0000A1 CE0000                LDW       X, L:status
   \   0000A4 01                    RRWA      X, A
   \   0000A5 A4FE                  AND       A, #0xfe
   \   0000A7 02                    RLWA      X, A
   \   0000A8 CF0000                LDW       L:status, X
    408                     u16 time=time_on;
   \   0000AB CE0000                LDW       X, L:time_on
    409                     do
    410                    {
    411                       if(time==time_now)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_4:
   \   0000AE B300                  CPW       X, S:?w0
   \   0000B0 260C                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_5
    412                       {
    413                         status.on=1;
   \   0000B2 CE0000                LDW       X, L:status
   \   0000B5 01                    RRWA      X, A
   \   0000B6 AA01                  OR        A, #0x1
   \   0000B8 02                    RLWA      X, A
   \   0000B9 CF0000                LDW       L:status, X
    414                          break ;
   \   0000BC 200C                  JRA       L:??TIM3_UPD_OVF_BRK_IRQHandler_3
    415                       }
    416                        time++;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_5:
   \   0000BE 5C                    INCW      X
    417                         if( time==1441) time=0;
   \   0000BF A305A1                CPW       X, #0x5a1
   \   0000C2 2601                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_6
   \   0000C4 5F                    CLRW      X
    418                    } while(!(time==time_off));
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_6:
   \   0000C5 C30000                CPW       X, L:time_off
   \   0000C8 26E4                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_4
    419                   };
    420          
    421                 sync++;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_3:
   \   0000CA C60000                LD        A, L:sync
   \   0000CD 4C                    INC       A
   \   0000CE C70000                LD        L:sync, A
    422                 if (sync > sync_time)
   \   0000D1 C60000                LD        A, L:sync
   \   0000D4 A11F                  CP        A, #0x1f
   \   0000D6 2508                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_7
    423                 {
    424                   sync_time_ds1307=TRUE;
   \   0000D8 35010000              MOV       L:sync_time_ds1307, #0x1
    425                   sync=0;
   \   0000DC 725F0000              CLR       L:sync
    426                 }
    427          
    428          
    429                lcdLedTimer--;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_7:
   \   0000E0 C60000                LD        A, L:lcdLedTimer
   \   0000E3 4A                    DEC       A
   \   0000E4 C70000                LD        L:lcdLedTimer, A
    430                if(lcdLedTimer <= 0) hardware.lcdLed=0;
   \   0000E7 C60000                LD        A, L:lcdLedTimer
   \   0000EA 260A                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_8
   \   0000EC CE0000                LDW       X, L:hardware
   \   0000EF 01                    RRWA      X, A
   \   0000F0 A4F7                  AND       A, #0xf7
   \   0000F2 02                    RLWA      X, A
   \   0000F3 CF0000                LDW       L:hardware, X
    431                // else hardware.lcdLed=1;
    432          
    433          
    434          
    435             TIM3_ClearITPendingBit(TIM3_IT_UPDATE);
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_8:
   \   0000F6 A601                  LD        A, #0x1
   \   0000F8 8D000000              CALLF     TIM3_ClearITPendingBit
    436           }
   \   0000FC 8D000000              CALLF     L:?pop_l1
   \   000100 8D000000              CALLF     L:?pop_l0
   \   000104 80                    IRET

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine0:
   \   000000 C60000                LD        A, L:hours
   \   000003 905F                  CLRW      Y
   \   000005 9097                  LD        YL, A
   \   000007 AE003C                LDW       X, #0x3c
   \   00000A BF00                  LDW       S:?w0, X
   \   00000C 93                    LDW       X, Y
   \   00000D 8D000000              CALLF     L:?mul16_x_x_w0
   \   000011 C60000                LD        A, L:minutes
   \   000014 9097                  LD        YL, A
   \   000016 90BF00                LDW       S:?w0, Y
   \   000019 72BB0000              ADDW      X, S:?w0
   \   00001D 87                    RETF
    437          
    438          /**
    439            * @brief Timer3 Capture/Compare Interrupt routine.
    440            * @param  None
    441            * @retval None
    442            */

   \                                 In section .far_func.text, align 1
    443           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    444           {
    445            /* In order to detect unexpected events during development,
    446               it is recommended to set a breakpoint on the following instruction.
    447            */
    448           }
   \                     TIM3_CAP_COM_IRQHandler:
   \                     _interrupt_18:
   \   000000 80                    IRET
    449          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    450          
    451          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    452              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    453          /**
    454            * @brief UART1 TX Interrupt routine.
    455            * @param  None
    456            * @retval None
    457            */
    458           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    459           {
    460              /* In order to detect unexpected events during development,
    461                 it is recommended to set a breakpoint on the following instruction.
    462              */
    463           }
    464          
    465          /**
    466            * @brief UART1 RX Interrupt routine.
    467            * @param  None
    468            * @retval None
    469            */
    470           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    471           {
    472              /* In order to detect unexpected events during development,
    473                 it is recommended to set a breakpoint on the following instruction.
    474              */
    475           }
    476          #endif /*STM8S208 or STM8S207 or STM8S103 or STM8S903 or STM8AF62Ax or STM8AF52Ax */
    477          
    478          /**
    479            * @brief I2C Interrupt routine.
    480            * @param  None
    481            * @retval None
    482            */

   \                                 In section .far_func.text, align 1
    483          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    484          {
    485            /* In order to detect unexpected events during development,
    486               it is recommended to set a breakpoint on the following instruction.
    487            */
    488          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80                    IRET
    489          
    490          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    491          /**
    492            * @brief    TX interrupt routine.
    493            * @param  None
    494            * @retval None
    495            */

   \                                 In section .far_func.text, align 1
    496           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    497           {
    498              /* In order to detect unexpected events during development,
    499                 it is recommended to set a breakpoint on the following instruction.
    500              */
    501           }
   \                     UART2_TX_IRQHandler:
   \                     _interrupt_22:
   \   000000 80                    IRET
    502          
    503          /**
    504            * @brief UART2 RX interrupt routine.
    505            * @param  None
    506            * @retval None
    507            */

   \                                 In section .far_func.text, align 1
    508           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    509           {
   \                     UART2_RX_IRQHandler:
   \                     _interrupt_23:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    510              /* In order to detect unexpected events during development,
    511                 it is recommended to set a breakpoint on the following instruction.
    512              */
    513             rx_data=UART2_ReceiveData8();
   \   00000E 8D000000              CALLF     UART2_ReceiveData8
   \   000012 C70000                LD        L:rx_data, A
    514             UART2_ClearITPendingBit(UART2_IT_RXNE);
   \   000015 AE0255                LDW       X, #0x255
   \   000018 8D000000              CALLF     UART2_ClearITPendingBit
    515          
    516           }
   \   00001C 8D000000              CALLF     L:?pop_l1
   \   000020 8D000000              CALLF     L:?pop_l0
   \   000024 80                    IRET
    517          #endif /* STM8S105 or STM8AF626x */
    518          
    519          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    520          /**
    521            * @brief UART3 TX interrupt routine.
    522            * @param  None
    523            * @retval None
    524            */
    525           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    526           {
    527              /* In order to detect unexpected events during development,
    528                 it is recommended to set a breakpoint on the following instruction.
    529              */
    530           }
    531          
    532          /**
    533            * @brief UART3 RX interrupt routine.
    534            * @param  None
    535            * @retval None
    536            */
    537           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    538           {
    539              /* In order to detect unexpected events during development,
    540                 it is recommended to set a breakpoint on the following instruction.
    541              */
    542           }
    543          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    544          
    545          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    546          /**
    547            * @brief ADC2 interrupt routine.
    548            * @param  None
    549            * @retval None
    550            */
    551           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    552           {
    553              /* In order to detect unexpected events during development,
    554                 it is recommended to set a breakpoint on the following instruction.
    555              */
    556           }
    557          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    558          /**
    559            * @brief ADC1 interrupt routine.
    560            * @par Parameters:
    561            * None
    562            * @retval
    563            * None
    564            */

   \                                 In section .far_func.text, align 1
    565           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    566           {
    567              /* In order to detect unexpected events during development,
    568                 it is recommended to set a breakpoint on the following instruction.
    569              */
    570             //ADC1_Cmd (DISABLE);
    571              /*
    572             ADC1_ClearFlag(ADC1_FLAG_EOC);
    573             adcdata = ADC1_GetConversionValue();
    574             measure[index++]=adcdata;
    575                if (index==data_size)
    576                {
    577                  measure[index]=0;
    578                  index=0;
    579                }
    580             ADC1_ClearITPendingBit(ADC1_IT_EOC);
    581               */
    582              //ADC1_Cmd (ENABLE);
    583              //ADC1_Cmd (ENABLE);  //Second Start conversion
    584           }
   \                     ADC1_IRQHandler:
   \                     _interrupt_24:
   \   000000 80                    IRET
    585          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    586          
    587          #ifdef STM8S903
    588          /**
    589            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    590            * @param  None
    591            * @retval None
    592            */
    593          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    594           {
    595            /* In order to detect unexpected events during development,
    596               it is recommended to set a breakpoint on the following instruction.
    597            */
    598           }
    599          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    600          /**
    601            * @brief Timer4 Update/Overflow Interrupt routine.
    602            * @param  None
    603            * @retval None
    604            */

   \                                 In section .far_func.text, align 1
    605           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    606           {
    607            /* In order to detect unexpected events during development,
    608               it is recommended to set a breakpoint on the following instruction.
    609            */
    610           }
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 80                    IRET
    611          #endif /*STM8S903*/
    612          
    613          /**
    614            * @brief Eeprom EEC Interrupt routine.
    615            * @param  None
    616            * @retval None
    617            */

   \                                 In section .far_func.text, align 1
    618          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    619          {
    620            /* In order to detect unexpected events during development,
    621               it is recommended to set a breakpoint on the following instruction.
    622            */
    623          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80                    IRET
    624          
    625          /**
    626            * @}
    627            */
    628          
    629          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     index                             1
     sync                              1
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       1
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler      87
     TIM2_CAP_COM_IRQHandler           1
     TIM3_UPD_OVF_BRK_IRQHandler     261
     ?Subroutine0                     30
     TIM3_CAP_COM_IRQHandler           1
     I2C_IRQHandler                    1
     UART2_TX_IRQHandler               1
     UART2_RX_IRQHandler              37
     ADC1_IRQHandler                   1
     TIM4_UPD_OVF_IRQHandler           1
     EEPROM_EEC_IRQHandler             1

 
 434 bytes in section .far_func.text
   2 bytes in section .near.bss
 
 434 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
