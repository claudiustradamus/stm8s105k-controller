###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             05/Dec/2013  21:20:24 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\stm8s_it. #
#                    c" -e -Ohz --debug --code_model medium --data_model      #
#                    medium -o "C:\Documents and                              #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\"       #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D STM8S105 -lC      #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -lA "C:\Documents and                      #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -I   #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \" -I "C:\Documents and Settings\Administrator\Desktop\s #
#                    tm8s105k-controller\Project\STM8S_StdPeriph_Template\EWS #
#                    TM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\"      #
#                    --vregs 16                                               #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\stm8s_it.lst                                  #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\stm8s_it.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file     stm8s_it.c
      4            * @author   MCD Application Team
      5            * @version  V2.1.0
      6            * @date     18-November-2011
      7            * @brief    Main Interrupt Service Routines.
      8            *           This file provides template for all peripherals interrupt service
      9            *           routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm8s_it.h"
     26          
     27          /** @addtogroup Template_Project
     28            * @{
     29            */
     30          
     31          /* Private typedef -----------------------------------------------------------*/
     32          /* Private define ------------------------------------------------------------*/
     33          #define data_size 10
     34          #define sync_time  30 //30s
     35          #define lcdLed GPIO_PIN_0
     36          /* Private macro -------------------------------------------------------------*/
     37          /* Private variables ---------------------------------------------------------*/
     38          extern  volatile u16 timer1;
     39          extern  volatile u16 timer2;
     40          extern  volatile u16 timer3;
     41          extern  volatile u16 adcdata;
     42          extern  volatile u8 timeout;
     43          extern  volatile u8 rx_data;

   \                                 In section .near.bss, align 1
     44          extern  volatile u8 index=0;
   \                     index:
   \   000000                       DS8 1
     45          extern    u8 seconds;
     46          extern    u8 minutes;
     47          extern    u8 hours;
     48          extern    u8 year;
     49          extern    u8 month;
     50          extern    u8 date;
     51          extern  bool volatile  Time_Display;
     52          extern   bool blink_flag;
     53          

   \                                 In section .near.bss, align 1
     54          volatile u8 sync=0;
   \                     sync:
   \   000000                       DS8 1
     55          extern  bool volatile sync_time_ds1307;
     56          
     57          extern struct   status_reg
     58           {
     59             unsigned manu: 1;
     60             unsigned on:1;
     61             unsigned timer_on:1;
     62             unsigned daily:1;
     63             unsigned monthly:1;
     64           }  volatile   status  ;
     65          
     66          
     67          
     68          extern struct
     69           {
     70             unsigned ds1307:1;
     71             unsigned ds18B20:1;
     72             unsigned buzzer:1;
     73             unsigned lcdLed:1;
     74           }  volatile hardware ;
     75          
     76          extern u16 time_on;
     77          extern u16 time_off;
     78          extern u8 monthly_year;
     79          extern u8 monthly_month;
     80          extern u8 monthly_date;
     81          extern volatile u8 lcdLedTimer;
     82          
     83          
     84          
     85          
     86          //extern   u16  measure[data_size];
     87          
     88          /* Private function prototypes -----------------------------------------------*/
     89          /* Private functions ---------------------------------------------------------*/
     90          extern void Save_Status();
     91          extern void CheckProgramPoint();
     92          /* Public functions ----------------------------------------------------------*/
     93          
     94          #ifdef _COSMIC_
     95          /**
     96            * @brief Dummy Interrupt routine
     97            * @par Parameters:
     98            * None
     99            * @retval
    100            * None
    101          */
    102          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
    103          {
    104            /* In order to detect unexpected events during development,
    105               it is recommended to set a breakpoint on the following instruction.
    106            */
    107          }
    108          #endif /*_COSMIC_*/
    109          
    110          /**
    111            * @brief TRAP Interrupt routine
    112            * @param  None
    113            * @retval None
    114            */

   \                                 In section .far_func.text, align 1
    115          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
    116          {
    117            /* In order to detect unexpected events during development,
    118               it is recommended to set a breakpoint on the following instruction.
    119            */
    120          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80                    IRET
    121          
    122          /**
    123            * @brief Top Level Interrupt routine.
    124            * @param  None
    125            * @retval None
    126            */

   \                                 In section .far_func.text, align 1
    127          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
    128          
    129          {
    130            /* In order to detect unexpected events during development,
    131               it is recommended to set a breakpoint on the following instruction.
    132            */
    133          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80                    IRET
    134          
    135          /**
    136            * @brief Auto Wake Up Interrupt routine.
    137            * @param  None
    138            * @retval None
    139            */

   \                                 In section .far_func.text, align 1
    140          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
    141          {
    142            /* In order to detect unexpected events during development,
    143               it is recommended to set a breakpoint on the following instruction.
    144            */
    145          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80                    IRET
    146          
    147          /**
    148            * @brief Clock Controller Interrupt routine.
    149            * @param  None
    150            * @retval None
    151            */

   \                                 In section .far_func.text, align 1
    152          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    153          {
    154            /* In order to detect unexpected events during development,
    155               it is recommended to set a breakpoint on the following instruction.
    156            */
    157          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80                    IRET
    158          
    159          /**
    160            * @brief External Interrupt PORTA Interrupt routine.
    161            * @param  None
    162            * @retval None
    163            */

   \                                 In section .far_func.text, align 1
    164          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    165          {
    166            /* In order to detect unexpected events during development,
    167               it is recommended to set a breakpoint on the following instruction.
    168            */
    169          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80                    IRET
    170          
    171          /**
    172            * @brief External Interrupt PORTB Interrupt routine.
    173            * @param  None
    174            * @retval None
    175            */

   \                                 In section .far_func.text, align 1
    176          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    177          {
    178            /* In order to detect unexpected events during development,
    179               it is recommended to set a breakpoint on the following instruction.
    180            */
    181          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80                    IRET
    182          
    183          /**
    184            * @brief External Interrupt PORTC Interrupt routine.
    185            * @param  None
    186            * @retval None
    187            */

   \                                 In section .far_func.text, align 1
    188          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    189          {
    190            /* In order to detect unexpected events during development,
    191               it is recommended to set a breakpoint on the following instruction.
    192            */
    193          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80                    IRET
    194          
    195          /**
    196            * @brief External Interrupt PORTD Interrupt routine.
    197            * @param  None
    198            * @retval None
    199            */

   \                                 In section .far_func.text, align 1
    200          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    201          {
    202            /* In order to detect unexpected events during development,
    203               it is recommended to set a breakpoint on the following instruction.
    204            */
    205          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80                    IRET
    206          
    207          /**
    208            * @brief External Interrupt PORTE Interrupt routine.
    209            * @param  None
    210            * @retval None
    211            */

   \                                 In section .far_func.text, align 1
    212          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    213          {
    214            /* In order to detect unexpected events during development,
    215               it is recommended to set a breakpoint on the following instruction.
    216            */
    217          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80                    IRET
    218          
    219          #ifdef STM8S903
    220          /**
    221            * @brief External Interrupt PORTF Interrupt routine.
    222            * @param  None
    223            * @retval None
    224            */
    225           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    226           {
    227            /* In order to detect unexpected events during development,
    228               it is recommended to set a breakpoint on the following instruction.
    229            */
    230           }
    231          #endif /*STM8S903*/
    232          
    233          #if defined (STM8S208) || defined (STM8AF52Ax)
    234          /**
    235            * @brief CAN RX Interrupt routine.
    236            * @param  None
    237            * @retval None
    238            */
    239           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    240           {
    241            /* In order to detect unexpected events during development,
    242               it is recommended to set a breakpoint on the following instruction.
    243            */
    244           }
    245          
    246          /**
    247            * @brief CAN TX Interrupt routine.
    248            * @param  None
    249            * @retval None
    250            */
    251           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    252           {
    253            /* In order to detect unexpected events during development,
    254               it is recommended to set a breakpoint on the following instruction.
    255            */
    256           }
    257          #endif /*STM8S208 || STM8AF52Ax */
    258          
    259          /**
    260            * @brief SPI Interrupt routine.
    261            * @param  None
    262            * @retval None
    263            */

   \                                 In section .far_func.text, align 1
    264          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    265          {
    266            /* In order to detect unexpected events during development,
    267               it is recommended to set a breakpoint on the following instruction.
    268            */
    269          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80                    IRET
    270          
    271          /**
    272            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    273            * @param  None
    274            * @retval None
    275            */

   \                                 In section .far_func.text, align 1
    276          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    277          {
    278            /* In order to detect unexpected events during development,
    279               it is recommended to set a breakpoint on the following instruction.
    280            */
    281          }
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 80                    IRET
    282          
    283          /**
    284            * @brief Timer1 Capture/Compare Interrupt routine.
    285            * @param  None
    286            * @retval None
    287            */

   \                                 In section .far_func.text, align 1
    288          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    289          {
    290            /* In order to detect unexpected events during development,
    291               it is recommended to set a breakpoint on the following instruction.
    292            */
    293          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80                    IRET
    294          
    295          #ifdef STM8S903
    296          /**
    297            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    298            * @param  None
    299            * @retval None
    300            */
    301           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    302           {
    303            /* In order to detect unexpected events during development,
    304               it is recommended to set a breakpoint on the following instruction.
    305            */
    306           }
    307          
    308          /**
    309            * @brief Timer5 Capture/Compare Interrupt routine.
    310            * @param  None
    311            * @retval None
    312            */
    313           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    314           {
    315            /* In order to detect unexpected events during development,
    316               it is recommended to set a breakpoint on the following instruction.
    317            */
    318           }
    319          
    320          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    321          /**
    322            * @brief Timer2 Update/Overflow/Break Interrupt routine.
    323            * @param  None
    324            * @retval None
    325            */

   \                                 In section .far_func.text, align 1
    326           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    327           {
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    328            /* In order to detect unexpected events during development,
    329               it is recommended to set a breakpoint on the following instruction.
    330            */
    331             if(hardware.lcdLed) GPIO_WriteLow(GPIOB,lcdLed);
   \   00000E CE0000                LDW       X, L:hardware
   \   000011 9F                    LD        A, XL
   \   000012 A508                  BCP       A, #0x8
   \   000014 270B                  JREQ      L:??TIM2_UPD_OVF_BRK_IRQHandler_0
   \   000016 A601                  LD        A, #0x1
   \   000018 AE5005                LDW       X, #0x5005
   \   00001B 8D000000              CALLF     GPIO_WriteLow
   \   00001F 2009                  JRA       L:??TIM2_UPD_OVF_BRK_IRQHandler_1
    332               else   GPIO_WriteHigh(GPIOB,lcdLed);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_0:
   \   000021 A601                  LD        A, #0x1
   \   000023 AE5005                LDW       X, #0x5005
   \   000026 8D000000              CALLF     GPIO_WriteHigh
    333           timer2++;
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_1:
   \   00002A CE0000                LDW       X, L:timer2
   \   00002D 5C                    INCW      X
   \   00002E CF0000                LDW       L:timer2, X
    334           timer1++;
   \   000031 CE0000                LDW       X, L:timer1
   \   000034 5C                    INCW      X
   \   000035 CF0000                LDW       L:timer1, X
    335           timeout--;
   \   000038 C60000                LD        A, L:timeout
   \   00003B 4A                    DEC       A
   \   00003C C70000                LD        L:timeout, A
    336            if (timeout<=0) timeout=0;
   \   00003F C60000                LD        A, L:timeout
   \   000042 2604                  JRNE      L:??TIM2_UPD_OVF_BRK_IRQHandler_2
   \   000044 725F0000              CLR       L:timeout
    337          
    338           //ADC1_Cmd (ENABLE); //Start convert
    339           TIM2_ClearITPendingBit(TIM2_IT_UPDATE);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_2:
   \   000048 A601                  LD        A, #0x1
   \   00004A 8D000000              CALLF     TIM2_ClearITPendingBit
    340          
    341           }
   \   00004E 8D000000              CALLF     L:?pop_l1
   \   000052 8D000000              CALLF     L:?pop_l0
   \   000056 80                    IRET
    342          
    343          /**
    344            * @brief Timer2 Capture/Compare Interrupt routine.
    345            * @param  None
    346            * @retval None
    347            */

   \                                 In section .far_func.text, align 1
    348           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    349           {
    350            /* In order to detect unexpected events during development,
    351               it is recommended to set a breakpoint on the following instruction.
    352            */
    353           }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80                    IRET
    354          #endif /*STM8S903*/
    355          
    356          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    357              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    358          /**
    359            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    360            * @param  None
    361            * @retval None
    362            */

   \                                 In section .far_func.text, align 1
    363           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    364           {
   \                     TIM3_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_17:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    365            /* In order to detect unexpected events during development,
    366               it is recommended to set a breakpoint on the following instruction.
    367            */
    368          
    369          
    370             GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \   00000E A601                  LD        A, #0x1
   \   000010 AE500F                LDW       X, #0x500f
   \   000013 8D000000              CALLF     GPIO_WriteReverse
    371             timer3++;
   \   000017 CE0000                LDW       X, L:timer3
   \   00001A 5C                    INCW      X
   \   00001B CF0000                LDW       L:timer3, X
    372             seconds++;
   \   00001E C60000                LD        A, L:seconds
   \   000021 4C                    INC       A
   \   000022 C70000                LD        L:seconds, A
    373              if (seconds >59)
   \   000025 A13C                  CP        A, #0x3c
   \   000027 250B                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_0
    374              {
    375                seconds=0;
   \   000029 725F0000              CLR       L:seconds
    376                minutes++;
   \   00002D C60000                LD        A, L:minutes
   \   000030 4C                    INC       A
   \   000031 C70000                LD        L:minutes, A
    377              }
    378              if (minutes > 59)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_0:
   \   000034 C60000                LD        A, L:minutes
   \   000037 A13C                  CP        A, #0x3c
   \   000039 2513                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
    379              {
    380                minutes=0;
   \   00003B 725F0000              CLR       L:minutes
    381                hours++;
   \   00003F C60000                LD        A, L:hours
   \   000042 4C                    INC       A
   \   000043 C70000                LD        L:hours, A
    382                if(hours > 23) hours=0;
   \   000046 A118                  CP        A, #0x18
   \   000048 2504                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
   \   00004A 725F0000              CLR       L:hours
    383              }
    384          
    385              Time_Display=TRUE;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_1:
   \   00004E 35010000              MOV       L:Time_Display, #0x1
    386               if(blink_flag) blink_flag=FALSE;
   \   000052 C60000                LD        A, L:blink_flag
   \   000055 2706                  JREQ      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
   \   000057 725F0000              CLR       L:blink_flag
   \   00005B 2004                  JRA       L:??TIM3_UPD_OVF_BRK_IRQHandler_3
    387                else blink_flag=TRUE;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_2:
   \   00005D 35010000              MOV       L:blink_flag, #0x1
    388          
    389                 // Check for Monthly Alarm      |------- time_now
    390                //                               |----timer_on
    391              /*
    392                    if (!status.manu)
    393                    {
    394                      if( monthly_year==year && monthly_date==date && monthly_month==month)
    395                      {
    396                        u16 time_now=hours*60+minutes;
    397                        if(time_now >= time_on)
    398                        {
    399                        status.daily=1;
    400                        status.monthly=0;
    401                        Save_Status();
    402                        }
    403                      }
    404                    }
    405          
    406                 */
    407          
    408          
    409          
    410                /*
    411                //Check for Daily Alarm
    412                  if (!status.manu)
    413                  {
    414                 u16 time_now=hours*60+minutes;
    415                  status.on=0;
    416                     u16 time=time_on;
    417                     do
    418                    {
    419                       if(time==time_now)
    420                       {
    421                         status.on=1;
    422                          break ;
    423                       }
    424                        time++;
    425                         if( time==1441) time=0;
    426                    } while(!(time==time_off));
    427                   };
    428              */
    429          
    430                 CheckProgramPoint();
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_3:
   \   000061 8D000000              CALLF     CheckProgramPoint
    431          
    432                 sync++;
   \   000065 C60000                LD        A, L:sync
   \   000068 4C                    INC       A
   \   000069 C70000                LD        L:sync, A
    433                 if (sync > sync_time)
   \   00006C C60000                LD        A, L:sync
   \   00006F A11F                  CP        A, #0x1f
   \   000071 2508                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_4
    434                 {
    435                   sync_time_ds1307=TRUE;
   \   000073 35010000              MOV       L:sync_time_ds1307, #0x1
    436                   sync=0;
   \   000077 725F0000              CLR       L:sync
    437                 }
    438          
    439          
    440                lcdLedTimer--;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_4:
   \   00007B C60000                LD        A, L:lcdLedTimer
   \   00007E 4A                    DEC       A
   \   00007F C70000                LD        L:lcdLedTimer, A
    441                if(lcdLedTimer <= 0) hardware.lcdLed=0;
   \   000082 C60000                LD        A, L:lcdLedTimer
   \   000085 260A                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_5
   \   000087 CE0000                LDW       X, L:hardware
   \   00008A 01                    RRWA      X, A
   \   00008B A4F7                  AND       A, #0xf7
   \   00008D 02                    RLWA      X, A
   \   00008E CF0000                LDW       L:hardware, X
    442                // else hardware.lcdLed=1;
    443          
    444          
    445          
    446             TIM3_ClearITPendingBit(TIM3_IT_UPDATE);
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_5:
   \   000091 A601                  LD        A, #0x1
   \   000093 8D000000              CALLF     TIM3_ClearITPendingBit
    447           }
   \   000097 8D000000              CALLF     L:?pop_l1
   \   00009B 8D000000              CALLF     L:?pop_l0
   \   00009F 80                    IRET
    448          
    449          /**
    450            * @brief Timer3 Capture/Compare Interrupt routine.
    451            * @param  None
    452            * @retval None
    453            */

   \                                 In section .far_func.text, align 1
    454           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    455           {
    456            /* In order to detect unexpected events during development,
    457               it is recommended to set a breakpoint on the following instruction.
    458            */
    459           }
   \                     TIM3_CAP_COM_IRQHandler:
   \                     _interrupt_18:
   \   000000 80                    IRET
    460          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    461          
    462          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    463              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    464          /**
    465            * @brief UART1 TX Interrupt routine.
    466            * @param  None
    467            * @retval None
    468            */
    469           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    470           {
    471              /* In order to detect unexpected events during development,
    472                 it is recommended to set a breakpoint on the following instruction.
    473              */
    474           }
    475          
    476          /**
    477            * @brief UART1 RX Interrupt routine.
    478            * @param  None
    479            * @retval None
    480            */
    481           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    482           {
    483              /* In order to detect unexpected events during development,
    484                 it is recommended to set a breakpoint on the following instruction.
    485              */
    486           }
    487          #endif /*STM8S208 or STM8S207 or STM8S103 or STM8S903 or STM8AF62Ax or STM8AF52Ax */
    488          
    489          /**
    490            * @brief I2C Interrupt routine.
    491            * @param  None
    492            * @retval None
    493            */

   \                                 In section .far_func.text, align 1
    494          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    495          {
    496            /* In order to detect unexpected events during development,
    497               it is recommended to set a breakpoint on the following instruction.
    498            */
    499          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80                    IRET
    500          
    501          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    502          /**
    503            * @brief    TX interrupt routine.
    504            * @param  None
    505            * @retval None
    506            */

   \                                 In section .far_func.text, align 1
    507           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    508           {
    509              /* In order to detect unexpected events during development,
    510                 it is recommended to set a breakpoint on the following instruction.
    511              */
    512           }
   \                     UART2_TX_IRQHandler:
   \                     _interrupt_22:
   \   000000 80                    IRET
    513          
    514          /**
    515            * @brief UART2 RX interrupt routine.
    516            * @param  None
    517            * @retval None
    518            */

   \                                 In section .far_func.text, align 1
    519           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    520           {
   \                     UART2_RX_IRQHandler:
   \                     _interrupt_23:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    521              /* In order to detect unexpected events during development,
    522                 it is recommended to set a breakpoint on the following instruction.
    523              */
    524             rx_data=UART2_ReceiveData8();
   \   00000E 8D000000              CALLF     UART2_ReceiveData8
   \   000012 C70000                LD        L:rx_data, A
    525             UART2_ClearITPendingBit(UART2_IT_RXNE);
   \   000015 AE0255                LDW       X, #0x255
   \   000018 8D000000              CALLF     UART2_ClearITPendingBit
    526          
    527           }
   \   00001C 8D000000              CALLF     L:?pop_l1
   \   000020 8D000000              CALLF     L:?pop_l0
   \   000024 80                    IRET
    528          #endif /* STM8S105 or STM8AF626x */
    529          
    530          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    531          /**
    532            * @brief UART3 TX interrupt routine.
    533            * @param  None
    534            * @retval None
    535            */
    536           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    537           {
    538              /* In order to detect unexpected events during development,
    539                 it is recommended to set a breakpoint on the following instruction.
    540              */
    541           }
    542          
    543          /**
    544            * @brief UART3 RX interrupt routine.
    545            * @param  None
    546            * @retval None
    547            */
    548           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    549           {
    550              /* In order to detect unexpected events during development,
    551                 it is recommended to set a breakpoint on the following instruction.
    552              */
    553           }
    554          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    555          
    556          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    557          /**
    558            * @brief ADC2 interrupt routine.
    559            * @param  None
    560            * @retval None
    561            */
    562           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    563           {
    564              /* In order to detect unexpected events during development,
    565                 it is recommended to set a breakpoint on the following instruction.
    566              */
    567           }
    568          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    569          /**
    570            * @brief ADC1 interrupt routine.
    571            * @par Parameters:
    572            * None
    573            * @retval
    574            * None
    575            */

   \                                 In section .far_func.text, align 1
    576           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    577           {
    578              /* In order to detect unexpected events during development,
    579                 it is recommended to set a breakpoint on the following instruction.
    580              */
    581             //ADC1_Cmd (DISABLE);
    582              /*
    583             ADC1_ClearFlag(ADC1_FLAG_EOC);
    584             adcdata = ADC1_GetConversionValue();
    585             measure[index++]=adcdata;
    586                if (index==data_size)
    587                {
    588                  measure[index]=0;
    589                  index=0;
    590                }
    591             ADC1_ClearITPendingBit(ADC1_IT_EOC);
    592               */
    593              //ADC1_Cmd (ENABLE);
    594              //ADC1_Cmd (ENABLE);  //Second Start conversion
    595           }
   \                     ADC1_IRQHandler:
   \                     _interrupt_24:
   \   000000 80                    IRET
    596          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    597          
    598          #ifdef STM8S903
    599          /**
    600            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    601            * @param  None
    602            * @retval None
    603            */
    604          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    605           {
    606            /* In order to detect unexpected events during development,
    607               it is recommended to set a breakpoint on the following instruction.
    608            */
    609           }
    610          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    611          /**
    612            * @brief Timer4 Update/Overflow Interrupt routine.
    613            * @param  None
    614            * @retval None
    615            */

   \                                 In section .far_func.text, align 1
    616           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    617           {
    618            /* In order to detect unexpected events during development,
    619               it is recommended to set a breakpoint on the following instruction.
    620            */
    621           }
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 80                    IRET
    622          #endif /*STM8S903*/
    623          
    624          /**
    625            * @brief Eeprom EEC Interrupt routine.
    626            * @param  None
    627            * @retval None
    628            */

   \                                 In section .far_func.text, align 1
    629          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    630          {
    631            /* In order to detect unexpected events during development,
    632               it is recommended to set a breakpoint on the following instruction.
    633            */
    634          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80                    IRET
    635          
    636          /**
    637            * @}
    638            */
    639          
    640          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     index                             1
     sync                              1
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       1
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler      87
     TIM2_CAP_COM_IRQHandler           1
     TIM3_UPD_OVF_BRK_IRQHandler     160
     TIM3_CAP_COM_IRQHandler           1
     I2C_IRQHandler                    1
     UART2_TX_IRQHandler               1
     UART2_RX_IRQHandler              37
     ADC1_IRQHandler                   1
     TIM4_UPD_OVF_IRQHandler           1
     EEPROM_EEC_IRQHandler             1

 
 303 bytes in section .far_func.text
   2 bytes in section .near.bss
 
 303 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
