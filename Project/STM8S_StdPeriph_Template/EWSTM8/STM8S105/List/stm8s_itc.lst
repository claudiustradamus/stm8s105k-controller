###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             08/Aug/2013  20:14:37 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Libr #
#                    aries\STM8S_StdPeriph_Driver\src\stm8s_itc.c             #
#    Command line =  C:\Users\Administrator\Desktop\stm8s105k-controller\Libr #
#                    aries\STM8S_StdPeriph_Driver\src\stm8s_itc.c -e -Ohz     #
#                    --debug --code_model medium --data_model medium -o       #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC C:\Users\Administrator\Desktop\stm8s105k-co #
#                    ntroller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S10 #
#                    5\List\ -lA C:\Users\Administrator\Desktop\stm8s105k-con #
#                    troller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S105 #
#                    \List\ -I C:\Users\Administrator\Desktop\stm8s105k-contr #
#                    oller\Project\STM8S_StdPeriph_Template\EWSTM8\..\ -I     #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Libraries\S #
#                    TM8S_StdPeriph_Driver\inc\ --vregs 16                    #
#    List file    =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\stm8s_ #
#                    itc.lst                                                  #
#    Object file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\stm8s_i #
#                    tc.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\stm8s105k-controller\Libraries\STM8S_StdPeriph_Driver\src\stm8s_itc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8s_itc.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    18-November-2011
      7            * @brief   This file contains all the functions for the ITC peripheral.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8s_itc.h"
     24          
     25          /** @addtogroup STM8S_StdPeriph_Driver
     26            * @{
     27            */
     28          /* Private typedef -----------------------------------------------------------*/
     29          /* Private define ------------------------------------------------------------*/
     30          /* Private macro -------------------------------------------------------------*/
     31          /* Private variables ---------------------------------------------------------*/
     32          /* Private function prototypes -----------------------------------------------*/
     33          /* Private functions ---------------------------------------------------------*/
     34          
     35          /** @addtogroup ITC_Private_Functions
     36            * @{
     37            */
     38          
     39          /**
     40            * @brief  Utility function used to read CC register.
     41            * @param  None
     42            * @retval CPU CC register value
     43            */

   \                                 In section .far_func.text, align 1
     44          uint8_t ITC_GetCPUCC(void)
     45          {
     46          #ifdef _COSMIC_
     47            _asm("push cc");
     48            _asm("pop a");
     49            return; /* Ignore compiler warning, the returned value is in A register */
     50          #elif defined _RAISONANCE_ /* _RAISONANCE_ */
     51            return _getCC_();
     52          #else /* _IAR_ */
     53            asm("push cc");
   \                     ITC_GetCPUCC:
   \   000000 8A                    push cc
     54            asm("pop a"); /* Ignore compiler warning, the returned value is in A register */
   \   000001 84                    pop a
     55          #endif /* _COSMIC_*/
     56          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "ITC_GetCPUCC"
   \   000002 87                    RETF
     57          
     58          
     59          /**
     60            * @}
     61            */
     62          
     63          /* Public functions ----------------------------------------------------------*/
     64          
     65          /** @addtogroup ITC_Public_Functions
     66            * @{
     67            */
     68          
     69          /**
     70            * @brief  Deinitializes the ITC registers to their default reset value.
     71            * @param  None
     72            * @retval None
     73            */

   \                                 In section .far_func.text, align 1
     74          void ITC_DeInit(void)
     75          {
     76              ITC->ISPR1 = ITC_SPRX_RESET_VALUE;
   \                     ITC_DeInit:
   \   000000 35FF7F70              MOV       L:0x7f70, #0xff
     77              ITC->ISPR2 = ITC_SPRX_RESET_VALUE;
   \   000004 35FF7F71              MOV       L:0x7f71, #0xff
     78              ITC->ISPR3 = ITC_SPRX_RESET_VALUE;
   \   000008 35FF7F72              MOV       L:0x7f72, #0xff
     79              ITC->ISPR4 = ITC_SPRX_RESET_VALUE;
   \   00000C 35FF7F73              MOV       L:0x7f73, #0xff
     80              ITC->ISPR5 = ITC_SPRX_RESET_VALUE;
   \   000010 35FF7F74              MOV       L:0x7f74, #0xff
     81              ITC->ISPR6 = ITC_SPRX_RESET_VALUE;
   \   000014 35FF7F75              MOV       L:0x7f75, #0xff
     82              ITC->ISPR7 = ITC_SPRX_RESET_VALUE;
   \   000018 35FF7F76              MOV       L:0x7f76, #0xff
     83              ITC->ISPR8 = ITC_SPRX_RESET_VALUE;
   \   00001C 35FF7F77              MOV       L:0x7f77, #0xff
     84          }
   \   000020 87                    RETF
     85          
     86          /**
     87            * @brief  Gets the interrupt software priority bits (I1, I0) value from CPU CC register.
     88            * @param  None
     89            * @retval The interrupt software priority bits value.
     90            */

   \                                 In section .far_func.text, align 1
     91          uint8_t ITC_GetSoftIntStatus(void)
     92          {
     93              return (uint8_t)(ITC_GetCPUCC() & CPU_CC_I1I0);
   \                     ITC_GetSoftIntStatus:
   \   000000 8D000000              CALLF     ITC_GetCPUCC
   \   000004 A428                  AND       A, #0x28
   \   000006 87                    RETF
     94          }
     95          
     96          /**
     97            * @brief  Gets the software priority of the specified interrupt source.
     98            * @param  IrqNum : Specifies the peripheral interrupt source.
     99            * @retval ITC_PriorityLevel_TypeDef : Specifies the software priority of the interrupt source.
    100            */

   \                                 In section .far_func.text, align 1
    101          ITC_PriorityLevel_TypeDef ITC_GetSoftwarePriority(ITC_Irq_TypeDef IrqNum)
    102          {
   \                     ITC_GetSoftwarePriority:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
    103          
    104              uint8_t Value = 0;
   \   000006 3F00                  CLR       S:?b8
    105              uint8_t Mask = 0;
    106          
    107              /* Check function parameters */
    108              assert_param(IS_ITC_IRQ_OK((uint8_t)IrqNum));
   \   000008 A119                  CP        A, #0x19
   \   00000A 2507                  JRC       L:??CrossCallReturnLabel_0
   \   00000C AE006C                LDW       X, #0x6c
   \   00000F 8D000000              CALLF     ?Subroutine0
    109          
    110              /* Define the mask corresponding to the bits position in the SPR register */
    111              Mask = (uint8_t)(0x03U << (((uint8_t)IrqNum % 4U) * 2U));
   \                     ??CrossCallReturnLabel_0:
   \   000013 B600                  LD        A, S:?b9
   \   000015 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_5:
   \   000019 B700                  LD        S:?b0, A
    112          
    113              switch (IrqNum)
   \   00001B B600                  LD        A, S:?b9
   \   00001D 2745                  JREQ      L:??ITC_GetSoftwarePriority_0
   \   00001F 4A                    DEC       A
   \   000020 2742                  JREQ      L:??ITC_GetSoftwarePriority_0
   \   000022 4A                    DEC       A
   \   000023 273F                  JREQ      L:??ITC_GetSoftwarePriority_0
   \   000025 4A                    DEC       A
   \   000026 273C                  JREQ      L:??ITC_GetSoftwarePriority_0
   \   000028 4A                    DEC       A
   \   000029 2740                  JREQ      L:??ITC_GetSoftwarePriority_1
   \   00002B 4A                    DEC       A
   \   00002C 273D                  JREQ      L:??ITC_GetSoftwarePriority_1
   \   00002E 4A                    DEC       A
   \   00002F 273A                  JREQ      L:??ITC_GetSoftwarePriority_1
   \   000031 4A                    DEC       A
   \   000032 2737                  JREQ      L:??ITC_GetSoftwarePriority_1
   \   000034 A003                  SUB       A, #0x3
   \   000036 273A                  JREQ      L:??ITC_GetSoftwarePriority_2
   \   000038 4A                    DEC       A
   \   000039 2737                  JREQ      L:??ITC_GetSoftwarePriority_2
   \   00003B 4A                    DEC       A
   \   00003C 273B                  JREQ      L:??ITC_GetSoftwarePriority_3
   \   00003E 4A                    DEC       A
   \   00003F 2738                  JREQ      L:??ITC_GetSoftwarePriority_3
   \   000041 4A                    DEC       A
   \   000042 2735                  JREQ      L:??ITC_GetSoftwarePriority_3
   \   000044 4A                    DEC       A
   \   000045 2732                  JREQ      L:??ITC_GetSoftwarePriority_3
   \   000047 4A                    DEC       A
   \   000048 2736                  JREQ      L:??ITC_GetSoftwarePriority_4
   \   00004A 4A                    DEC       A
   \   00004B 2733                  JREQ      L:??ITC_GetSoftwarePriority_4
   \   00004D 4A                    DEC       A
   \   00004E 2730                  JREQ      L:??ITC_GetSoftwarePriority_4
   \   000050 4A                    DEC       A
   \   000051 272D                  JREQ      L:??ITC_GetSoftwarePriority_4
   \   000053 4A                    DEC       A
   \   000054 2731                  JREQ      L:??ITC_GetSoftwarePriority_5
   \   000056 4A                    DEC       A
   \   000057 272E                  JREQ      L:??ITC_GetSoftwarePriority_5
   \   000059 4A                    DEC       A
   \   00005A 272B                  JREQ      L:??ITC_GetSoftwarePriority_5
   \   00005C 4A                    DEC       A
   \   00005D 2728                  JREQ      L:??ITC_GetSoftwarePriority_5
   \   00005F 4A                    DEC       A
   \   000060 272C                  JREQ      L:??ITC_GetSoftwarePriority_6
   \   000062 2031                  JRA       L:??ITC_GetSoftwarePriority_7
    114              {
    115              case ITC_IRQ_TLI: /* TLI software priority can be read but has no meaning */
    116              case ITC_IRQ_AWU:
    117              case ITC_IRQ_CLK:
    118              case ITC_IRQ_PORTA:
    119                  Value = (uint8_t)(ITC->ISPR1 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_0:
   \   000064 B600                  LD        A, S:?b0
   \   000066 C47F70                AND       A, L:0x7f70
   \   000069 2028                  JRA       ??ITC_GetSoftwarePriority_8
    120                  break;
    121              case ITC_IRQ_PORTB:
    122              case ITC_IRQ_PORTC:
    123              case ITC_IRQ_PORTD:
    124              case ITC_IRQ_PORTE:
    125                  Value = (uint8_t)(ITC->ISPR2 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_1:
   \   00006B B600                  LD        A, S:?b0
   \   00006D C47F71                AND       A, L:0x7f71
   \   000070 2021                  JRA       ??ITC_GetSoftwarePriority_8
    126                  break;
    127          #if defined(STM8S208) || defined(STM8AF52Ax)
    128              case ITC_IRQ_CAN_RX:
    129              case ITC_IRQ_CAN_TX:
    130          #endif /*STM8S208 or STM8AF52Ax */
    131          
    132          #ifdef STM8S903
    133              case ITC_IRQ_PORTF:
    134          #endif /*STM8S903*/
    135          
    136              case ITC_IRQ_SPI:
    137              case ITC_IRQ_TIM1_OVF:
    138                  Value = (uint8_t)(ITC->ISPR3 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_2:
   \   000072 B600                  LD        A, S:?b0
   \   000074 C47F72                AND       A, L:0x7f72
   \   000077 201A                  JRA       ??ITC_GetSoftwarePriority_8
    139                  break;
    140              case ITC_IRQ_TIM1_CAPCOM:
    141          #ifdef STM8S903
    142              case ITC_IRQ_TIM5_OVFTRI:
    143              case ITC_IRQ_TIM5_CAPCOM:
    144          #else
    145              case ITC_IRQ_TIM2_OVF:
    146              case ITC_IRQ_TIM2_CAPCOM:
    147          #endif /*STM8S903*/
    148          
    149              case ITC_IRQ_TIM3_OVF:
    150                  Value = (uint8_t)(ITC->ISPR4 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_3:
   \   000079 B600                  LD        A, S:?b0
   \   00007B C47F73                AND       A, L:0x7f73
   \   00007E 2013                  JRA       ??ITC_GetSoftwarePriority_8
    151                  break;
    152              case ITC_IRQ_TIM3_CAPCOM:
    153              case ITC_IRQ_UART1_TX:
    154              case ITC_IRQ_UART1_RX:
    155              case ITC_IRQ_I2C:
    156                  Value = (uint8_t)(ITC->ISPR5 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_4:
   \   000080 B600                  LD        A, S:?b0
   \   000082 C47F74                AND       A, L:0x7f74
   \   000085 200C                  JRA       ??ITC_GetSoftwarePriority_8
    157                  break;
    158          #if defined(STM8S105) || defined(STM8S005) || defined(STM8AF626x)
    159              case ITC_IRQ_UART2_TX:
    160              case ITC_IRQ_UART2_RX:
    161          #endif /*STM8S105 or STM8AF626x*/
    162          
    163          #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
    164              defined(STM8AF62Ax)
    165              case ITC_IRQ_UART3_TX:
    166              case ITC_IRQ_UART3_RX:
    167              case ITC_IRQ_ADC2:
    168          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    169          
    170          #if defined(STM8S105) || defined(STM8S005) || defined(STM8S103) || defined(STM8S003) || \
    171              defined(STM8S903) || defined(STM8AF626x)
    172              case ITC_IRQ_ADC1:
    173          #endif /*STM8S105, STM8S103 or STM8S905 or STM8AF626x */
    174          
    175          #ifdef STM8S903
    176              case ITC_IRQ_TIM6_OVFTRI:
    177          #else
    178              case ITC_IRQ_TIM4_OVF:
    179          #endif /*STM8S903*/
    180                  Value = (uint8_t)(ITC->ISPR6 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_5:
   \   000087 B600                  LD        A, S:?b0
   \   000089 C47F75                AND       A, L:0x7f75
   \   00008C 2005                  JRA       ??ITC_GetSoftwarePriority_8
    181                  break;
    182              case ITC_IRQ_EEPROM_EEC:
    183                  Value = (uint8_t)(ITC->ISPR7 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_6:
   \   00008E B600                  LD        A, S:?b0
   \   000090 C47F76                AND       A, L:0x7f76
   \                     ??ITC_GetSoftwarePriority_8:
   \   000093 B700                  LD        S:?b8, A
    184                  break;
    185              default:
    186                  break;
    187              }
    188          
    189              Value >>= (uint8_t)(((uint8_t)IrqNum % 4u) * 2u);
    190          
    191              return((ITC_PriorityLevel_TypeDef)Value);
   \                     ??ITC_GetSoftwarePriority_7:
   \   000095 450000                MOV       S:?b0, S:?b1
   \   000098 B600                  LD        A, S:?b8
   \   00009A 8D000000              CALLF     L:?srl8_a_a_b0
   \   00009E AC000000              JPF       L:?epilogue_w4
    192          
    193          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 A403                  AND       A, #0x3
   \   000002 48                    SLL       A
   \   000003 B700                  LD        S:?b1, A
   \   000005 A603                  LD        A, #0x3
   \   000007 450000                MOV       S:?b0, S:?b1
   \   00000A AC000000              JPF       L:?sll8_a_a_b0

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine0:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AE0000                LDW       X, #`?<Constant "C:\\\\Users\\\\Administrato...">`
   \   000008 AC000000              JPF       assert_failed
    194          
    195          /**
    196            * @brief  Sets the software priority of the specified interrupt source.
    197            * @note   - The modification of the software priority is only possible when
    198            *         the interrupts are disabled.
    199            *         - The normal behavior is to disable the interrupt before calling
    200            *         this function, and re-enable it after.
    201            *         - The priority level 0 cannot be set (see product specification
    202            *         for more details).
    203            * @param  IrqNum : Specifies the peripheral interrupt source.
    204            * @param  PriorityValue : Specifies the software priority value to set,
    205            *         can be a value of @ref  ITC_PriorityLevel_TypeDef .
    206            * @retval None
    207          */

   \                                 In section .far_func.text, align 1
    208          void ITC_SetSoftwarePriority(ITC_Irq_TypeDef IrqNum, ITC_PriorityLevel_TypeDef PriorityValue)
    209          {
   \                     ITC_SetSoftwarePriority:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b8, A
   \   000006 450000                MOV       S:?b9, S:?b0
    210          
    211              uint8_t Mask = 0;
    212              uint8_t NewPriority = 0;
    213          
    214              /* Check function parameters */
    215              assert_param(IS_ITC_IRQ_OK((uint8_t)IrqNum));
   \   000009 A119                  CP        A, #0x19
   \   00000B 2507                  JRC       L:??CrossCallReturnLabel_3
   \   00000D AE00D7                LDW       X, #0xd7
   \   000010 8D000000              CALLF     ?Subroutine0
    216              assert_param(IS_ITC_PRIORITY_OK(PriorityValue));
   \                     ??CrossCallReturnLabel_3:
   \   000014 B600                  LD        A, S:?b9
   \   000016 A102                  CP        A, #0x2
   \   000018 2713                  JREQ      L:??CrossCallReturnLabel_2
   \   00001A A101                  CP        A, #0x1
   \   00001C 270F                  JREQ      L:??CrossCallReturnLabel_2
   \   00001E 3D00                  TNZ       S:?b9
   \   000020 270B                  JREQ      L:??CrossCallReturnLabel_2
   \   000022 A103                  CP        A, #0x3
   \   000024 2707                  JREQ      L:??CrossCallReturnLabel_2
   \   000026 AE00D8                LDW       X, #0xd8
   \   000029 8D000000              CALLF     ?Subroutine0
    217          
    218              /* Check if interrupts are disabled */
    219              assert_param(IS_ITC_INTERRUPTS_DISABLED);
   \                     ??CrossCallReturnLabel_2:
   \   00002D 8D000000              CALLF     ITC_GetCPUCC
   \   000031 A428                  AND       A, #0x28
   \   000033 A128                  CP        A, #0x28
   \   000035 2707                  JREQ      L:??CrossCallReturnLabel_1
   \   000037 AE00DB                LDW       X, #0xdb
   \   00003A 8D000000              CALLF     ?Subroutine0
    220          
    221              /* Define the mask corresponding to the bits position in the SPR register */
    222              /* The mask is reversed in order to clear the 2 bits after more easily */
    223              Mask = (uint8_t)(~(uint8_t)(0x03U << (((uint8_t)IrqNum % 4U) * 2U)));
   \                     ??CrossCallReturnLabel_1:
   \   00003E B600                  LD        A, S:?b8
   \   000040 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_4:
   \   000044 B700                  LD        S:?b2, A
   \   000046 3300                  CPL       S:?b2
    224          
    225              /* Define the new priority to write */
    226              NewPriority = (uint8_t)((uint8_t)(PriorityValue) << (((uint8_t)IrqNum % 4U) * 2U));
   \   000048 450000                MOV       S:?b0, S:?b1
   \   00004B B600                  LD        A, S:?b9
   \   00004D 8D000000              CALLF     L:?sll8_a_a_b0
   \   000051 B700                  LD        S:?b0, A
    227          
    228              switch (IrqNum)
   \   000053 B600                  LD        A, S:?b8
   \   000055 2747                  JREQ      L:??ITC_SetSoftwarePriority_0
   \   000057 4A                    DEC       A
   \   000058 2744                  JREQ      L:??ITC_SetSoftwarePriority_0
   \   00005A 4A                    DEC       A
   \   00005B 2741                  JREQ      L:??ITC_SetSoftwarePriority_0
   \   00005D 4A                    DEC       A
   \   00005E 273E                  JREQ      L:??ITC_SetSoftwarePriority_0
   \   000060 4A                    DEC       A
   \   000061 274F                  JREQ      L:??ITC_SetSoftwarePriority_1
   \   000063 4A                    DEC       A
   \   000064 274C                  JREQ      L:??ITC_SetSoftwarePriority_1
   \   000066 4A                    DEC       A
   \   000067 2749                  JREQ      L:??ITC_SetSoftwarePriority_1
   \   000069 4A                    DEC       A
   \   00006A 2746                  JREQ      L:??ITC_SetSoftwarePriority_1
   \   00006C A003                  SUB       A, #0x3
   \   00006E 2756                  JREQ      L:??ITC_SetSoftwarePriority_2
   \   000070 4A                    DEC       A
   \   000071 2753                  JREQ      L:??ITC_SetSoftwarePriority_2
   \   000073 4A                    DEC       A
   \   000074 2764                  JREQ      L:??ITC_SetSoftwarePriority_3
   \   000076 4A                    DEC       A
   \   000077 2761                  JREQ      L:??ITC_SetSoftwarePriority_3
   \   000079 4A                    DEC       A
   \   00007A 275E                  JREQ      L:??ITC_SetSoftwarePriority_3
   \   00007C 4A                    DEC       A
   \   00007D 275B                  JREQ      L:??ITC_SetSoftwarePriority_3
   \   00007F 4A                    DEC       A
   \   000080 276C                  JREQ      L:??ITC_SetSoftwarePriority_4
   \   000082 4A                    DEC       A
   \   000083 2769                  JREQ      L:??ITC_SetSoftwarePriority_4
   \   000085 4A                    DEC       A
   \   000086 2766                  JREQ      L:??ITC_SetSoftwarePriority_4
   \   000088 4A                    DEC       A
   \   000089 2763                  JREQ      L:??ITC_SetSoftwarePriority_4
   \   00008B 4A                    DEC       A
   \   00008C 2774                  JREQ      L:??ITC_SetSoftwarePriority_5
   \   00008E 4A                    DEC       A
   \   00008F 2771                  JREQ      L:??ITC_SetSoftwarePriority_5
   \   000091 4A                    DEC       A
   \   000092 276E                  JREQ      L:??ITC_SetSoftwarePriority_5
   \   000094 4A                    DEC       A
   \   000095 276B                  JREQ      L:??ITC_SetSoftwarePriority_5
   \   000097 4A                    DEC       A
   \   000098 277C                  JREQ      L:??ITC_SetSoftwarePriority_6
   \   00009A AC000000              JPF       L:?epilogue_w4
    229              {
    230          
    231              case ITC_IRQ_TLI: /* TLI software priority can be written but has no meaning */
    232              case ITC_IRQ_AWU:
    233              case ITC_IRQ_CLK:
    234              case ITC_IRQ_PORTA:
    235                  ITC->ISPR1 &= Mask;
   \                     ??ITC_SetSoftwarePriority_0:
   \   00009E B600                  LD        A, S:?b2
   \   0000A0 C47F70                AND       A, L:0x7f70
   \   0000A3 C77F70                LD        L:0x7f70, A
    236                  ITC->ISPR1 |= NewPriority;
   \   0000A6 B600                  LD        A, S:?b0
   \   0000A8 CA7F70                OR        A, L:0x7f70
   \   0000AB C77F70                LD        L:0x7f70, A
    237                  break;
   \   0000AE AC000000              JPF       L:?epilogue_w4
    238          
    239              case ITC_IRQ_PORTB:
    240              case ITC_IRQ_PORTC:
    241              case ITC_IRQ_PORTD:
    242              case ITC_IRQ_PORTE:
    243                  ITC->ISPR2 &= Mask;
   \                     ??ITC_SetSoftwarePriority_1:
   \   0000B2 B600                  LD        A, S:?b2
   \   0000B4 C47F71                AND       A, L:0x7f71
   \   0000B7 C77F71                LD        L:0x7f71, A
    244                  ITC->ISPR2 |= NewPriority;
   \   0000BA B600                  LD        A, S:?b0
   \   0000BC CA7F71                OR        A, L:0x7f71
   \   0000BF C77F71                LD        L:0x7f71, A
    245                  break;
   \   0000C2 AC000000              JPF       L:?epilogue_w4
    246          
    247          #if defined(STM8S208) || defined(STM8AF52Ax)
    248              case ITC_IRQ_CAN_RX:
    249              case ITC_IRQ_CAN_TX:
    250          #endif /*STM8S208 or STM8AF52Ax */
    251          
    252          #ifdef STM8S903
    253              case ITC_IRQ_PORTF:
    254          #endif /*STM8S903*/
    255              case ITC_IRQ_SPI:
    256              case ITC_IRQ_TIM1_OVF:
    257                  ITC->ISPR3 &= Mask;
   \                     ??ITC_SetSoftwarePriority_2:
   \   0000C6 B600                  LD        A, S:?b2
   \   0000C8 C47F72                AND       A, L:0x7f72
   \   0000CB C77F72                LD        L:0x7f72, A
    258                  ITC->ISPR3 |= NewPriority;
   \   0000CE B600                  LD        A, S:?b0
   \   0000D0 CA7F72                OR        A, L:0x7f72
   \   0000D3 C77F72                LD        L:0x7f72, A
    259                  break;
   \   0000D6 AC000000              JPF       L:?epilogue_w4
    260          
    261              case ITC_IRQ_TIM1_CAPCOM:
    262          #ifdef STM8S903
    263              case ITC_IRQ_TIM5_OVFTRI:
    264              case ITC_IRQ_TIM5_CAPCOM:
    265          #else
    266              case ITC_IRQ_TIM2_OVF:
    267              case ITC_IRQ_TIM2_CAPCOM:
    268          #endif /*STM8S903*/
    269          
    270              case ITC_IRQ_TIM3_OVF:
    271                  ITC->ISPR4 &= Mask;
   \                     ??ITC_SetSoftwarePriority_3:
   \   0000DA B600                  LD        A, S:?b2
   \   0000DC C47F73                AND       A, L:0x7f73
   \   0000DF C77F73                LD        L:0x7f73, A
    272                  ITC->ISPR4 |= NewPriority;
   \   0000E2 B600                  LD        A, S:?b0
   \   0000E4 CA7F73                OR        A, L:0x7f73
   \   0000E7 C77F73                LD        L:0x7f73, A
    273                  break;
   \   0000EA AC000000              JPF       L:?epilogue_w4
    274          
    275              case ITC_IRQ_TIM3_CAPCOM:
    276              case ITC_IRQ_UART1_TX:
    277              case ITC_IRQ_UART1_RX:
    278              case ITC_IRQ_I2C:
    279                  ITC->ISPR5 &= Mask;
   \                     ??ITC_SetSoftwarePriority_4:
   \   0000EE B600                  LD        A, S:?b2
   \   0000F0 C47F74                AND       A, L:0x7f74
   \   0000F3 C77F74                LD        L:0x7f74, A
    280                  ITC->ISPR5 |= NewPriority;
   \   0000F6 B600                  LD        A, S:?b0
   \   0000F8 CA7F74                OR        A, L:0x7f74
   \   0000FB C77F74                LD        L:0x7f74, A
    281                  break;
   \   0000FE AC000000              JPF       L:?epilogue_w4
    282          
    283          #if defined(STM8S105) || defined(STM8S005) || defined(STM8AF626x)
    284              case ITC_IRQ_UART2_TX:
    285              case ITC_IRQ_UART2_RX:
    286          #endif /*STM8S105 or STM8AF626x */
    287          
    288          #if defined(STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8AF52Ax) || \
    289              defined(STM8AF62Ax)
    290              case ITC_IRQ_UART3_TX:
    291              case ITC_IRQ_UART3_RX:
    292              case ITC_IRQ_ADC2:
    293          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    294          
    295          #if defined(STM8S105) || defined(STM8S005) || defined(STM8S103) || defined(STM8S003) || \
    296              defined(STM8S903) || defined(STM8AF626x)
    297              case ITC_IRQ_ADC1:
    298          #endif /*STM8S105, STM8S103 or STM8S905 or STM8AF626x */
    299          
    300          #ifdef STM8S903
    301              case ITC_IRQ_TIM6_OVFTRI:
    302          #else
    303              case ITC_IRQ_TIM4_OVF:
    304          #endif /*STM8S903*/
    305                  ITC->ISPR6 &= Mask;
   \                     ??ITC_SetSoftwarePriority_5:
   \   000102 B600                  LD        A, S:?b2
   \   000104 C47F75                AND       A, L:0x7f75
   \   000107 C77F75                LD        L:0x7f75, A
    306                  ITC->ISPR6 |= NewPriority;
   \   00010A B600                  LD        A, S:?b0
   \   00010C CA7F75                OR        A, L:0x7f75
   \   00010F C77F75                LD        L:0x7f75, A
    307                  break;
   \   000112 AC000000              JPF       L:?epilogue_w4
    308          
    309              case ITC_IRQ_EEPROM_EEC:
    310                  ITC->ISPR7 &= Mask;
   \                     ??ITC_SetSoftwarePriority_6:
   \   000116 B600                  LD        A, S:?b2
   \   000118 C47F76                AND       A, L:0x7f76
   \   00011B C77F76                LD        L:0x7f76, A
    311                  ITC->ISPR7 |= NewPriority;
   \   00011E B600                  LD        A, S:?b0
   \   000120 CA7F76                OR        A, L:0x7f76
   \   000123 C77F76                LD        L:0x7f76, A
    312                  break;
    313          
    314              default:
    315                  break;
    316          
    317              }
    318          
    319          }
   \   000126 AC000000              JPF       L:?epilogue_w4

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "C:\\\\Users\\\\Administrato...">`:
   \   000000 433A5C557365          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \   000008 5C41646D696E          DC8 5CH, 41H, 64H, 6DH, 69H, 6EH, 69H, 73H
   \   000010 747261746F72          DC8 74H, 72H, 61H, 74H, 6FH, 72H, 5CH, 44H
   \   000018 65736B746F70          DC8 65H, 73H, 6BH, 74H, 6FH, 70H, 5CH, 73H
   \   000020 746D38733130          DC8 74H, 6DH, 38H, 73H, 31H, 30H, 35H, 6BH
   \   000028 2D636F6E7472          DC8 2DH, 63H, 6FH, 6EH, 74H, 72H, 6FH, 6CH
   \   000030 6C65725C4C69          DC8 6CH, 65H, 72H, 5CH, 4CH, 69H, 62H, 72H
   \   000038 61726965735C          DC8 61H, 72H, 69H, 65H, 73H, 5CH, 53H, 54H
   \   000040 4D38535F5374          DC8 4DH, 38H, 53H, 5FH, 53H, 74H, 64H, 50H
   \   000048 65726970685F          DC8 65H, 72H, 69H, 70H, 68H, 5FH, 44H, 72H
   \   000050 697665725C73          DC8 69H, 76H, 65H, 72H, 5CH, 73H, 72H, 63H
   \   000058 5C73746D3873          DC8 5CH, 73H, 74H, 6DH, 38H, 73H, 5FH, 69H
   \   000060 74632E6300            DC8 74H, 63H, 2EH, 63H, 0
    320          
    321          /**
    322            * @}
    323            */
    324            
    325          /**
    326            * @}
    327            */
    328            
    329          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                           Bytes
     --------------                           -----
     ITC_GetCPUCC                                3
     ITC_DeInit                                 33
     ITC_GetSoftIntStatus                        7
     ITC_GetSoftwarePriority                   162
     ?Subroutine1                               14
     ?Subroutine0                               12
     ITC_SetSoftwarePriority                   298
     ?<Constant "C:\\Users\\Administrato...">  101

 
 529 bytes in section .far_func.text
 101 bytes in section .near.rodata
 
 529 bytes of CODE  memory
 101 bytes of CONST memory

Errors: none
Warnings: 1
