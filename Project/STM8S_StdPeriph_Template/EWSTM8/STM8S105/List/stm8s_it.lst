###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             01/Oct/2013  18:36:18 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\stm8s_it. #
#                    c" -e -Ohz --debug --code_model medium --data_model      #
#                    medium -o "C:\Documents and                              #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\"       #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D STM8S105 -lC      #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -lA "C:\Documents and                      #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -I   #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \" -I "C:\Documents and Settings\Administrator\Desktop\s #
#                    tm8s105k-controller\Project\STM8S_StdPeriph_Template\EWS #
#                    TM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\"      #
#                    --vregs 16                                               #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\stm8s_it.lst                                  #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\stm8s_it.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file     stm8s_it.c
      4            * @author   MCD Application Team
      5            * @version  V2.1.0
      6            * @date     18-November-2011
      7            * @brief    Main Interrupt Service Routines.
      8            *           This file provides template for all peripherals interrupt service
      9            *           routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm8s_it.h"
     26          
     27          /** @addtogroup Template_Project
     28            * @{
     29            */
     30          
     31          /* Private typedef -----------------------------------------------------------*/
     32          /* Private define ------------------------------------------------------------*/
     33          #define data_size 10
     34          #define sync_time  30 //30s
     35          /* Private macro -------------------------------------------------------------*/
     36          /* Private variables ---------------------------------------------------------*/
     37          extern  volatile u16 timer1;
     38          extern  volatile u16 timer2;
     39          extern  volatile u16 timer3;
     40          extern  volatile u16 adcdata;
     41          extern  volatile u8 timeout;
     42          extern  volatile u8 rx_data;

   \                                 In section .near.bss, align 1
     43          extern  volatile u8 index=0;
   \                     index:
   \   000000                       DS8 1
     44          extern   u8 seconds;
     45          extern   u8 minutes;
     46          extern   u8 hours;
     47          extern   u8 year;
     48          extern   u8 month;
     49          extern   u8 date;
     50          extern  bool volatile  Time_Display;

   \                                 In section .near.bss, align 1
     51          volatile u8 sync=0;
   \                     sync:
   \   000000                       DS8 1
     52          extern  bool volatile sync_time_ds1307;
     53          
     54          extern struct   status_reg
     55           {
     56             unsigned on:1;
     57             unsigned timer_on:1;
     58             unsigned daily:1;
     59             unsigned monthly:1;
     60           }  volatile   status  ;
     61          
     62          extern u16 time_on;
     63          extern u16 time_off;
     64          extern u8 monthly_year;
     65          extern u8 monthly_month;
     66          extern u8 monthly_date;
     67          
     68          
     69          
     70          
     71          //extern   u16  measure[data_size];
     72          
     73          /* Private function prototypes -----------------------------------------------*/
     74          /* Private functions ---------------------------------------------------------*/
     75          extern void Save_Status();
     76          /* Public functions ----------------------------------------------------------*/
     77          
     78          #ifdef _COSMIC_
     79          /**
     80            * @brief Dummy Interrupt routine
     81            * @par Parameters:
     82            * None
     83            * @retval
     84            * None
     85          */
     86          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     87          {
     88            /* In order to detect unexpected events during development,
     89               it is recommended to set a breakpoint on the following instruction.
     90            */
     91          }
     92          #endif /*_COSMIC_*/
     93          
     94          /**
     95            * @brief TRAP Interrupt routine
     96            * @param  None
     97            * @retval None
     98            */

   \                                 In section .far_func.text, align 1
     99          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
    100          {
    101            /* In order to detect unexpected events during development,
    102               it is recommended to set a breakpoint on the following instruction.
    103            */
    104          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80                    IRET
    105          
    106          /**
    107            * @brief Top Level Interrupt routine.
    108            * @param  None
    109            * @retval None
    110            */

   \                                 In section .far_func.text, align 1
    111          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
    112          
    113          {
    114            /* In order to detect unexpected events during development,
    115               it is recommended to set a breakpoint on the following instruction.
    116            */
    117          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80                    IRET
    118          
    119          /**
    120            * @brief Auto Wake Up Interrupt routine.
    121            * @param  None
    122            * @retval None
    123            */

   \                                 In section .far_func.text, align 1
    124          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
    125          {
    126            /* In order to detect unexpected events during development,
    127               it is recommended to set a breakpoint on the following instruction.
    128            */
    129          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80                    IRET
    130          
    131          /**
    132            * @brief Clock Controller Interrupt routine.
    133            * @param  None
    134            * @retval None
    135            */

   \                                 In section .far_func.text, align 1
    136          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    137          {
    138            /* In order to detect unexpected events during development,
    139               it is recommended to set a breakpoint on the following instruction.
    140            */
    141          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80                    IRET
    142          
    143          /**
    144            * @brief External Interrupt PORTA Interrupt routine.
    145            * @param  None
    146            * @retval None
    147            */

   \                                 In section .far_func.text, align 1
    148          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    149          {
    150            /* In order to detect unexpected events during development,
    151               it is recommended to set a breakpoint on the following instruction.
    152            */
    153          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80                    IRET
    154          
    155          /**
    156            * @brief External Interrupt PORTB Interrupt routine.
    157            * @param  None
    158            * @retval None
    159            */

   \                                 In section .far_func.text, align 1
    160          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    161          {
    162            /* In order to detect unexpected events during development,
    163               it is recommended to set a breakpoint on the following instruction.
    164            */
    165          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80                    IRET
    166          
    167          /**
    168            * @brief External Interrupt PORTC Interrupt routine.
    169            * @param  None
    170            * @retval None
    171            */

   \                                 In section .far_func.text, align 1
    172          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    173          {
    174            /* In order to detect unexpected events during development,
    175               it is recommended to set a breakpoint on the following instruction.
    176            */
    177          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80                    IRET
    178          
    179          /**
    180            * @brief External Interrupt PORTD Interrupt routine.
    181            * @param  None
    182            * @retval None
    183            */

   \                                 In section .far_func.text, align 1
    184          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    185          {
    186            /* In order to detect unexpected events during development,
    187               it is recommended to set a breakpoint on the following instruction.
    188            */
    189          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80                    IRET
    190          
    191          /**
    192            * @brief External Interrupt PORTE Interrupt routine.
    193            * @param  None
    194            * @retval None
    195            */

   \                                 In section .far_func.text, align 1
    196          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    197          {
    198            /* In order to detect unexpected events during development,
    199               it is recommended to set a breakpoint on the following instruction.
    200            */
    201          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80                    IRET
    202          
    203          #ifdef STM8S903
    204          /**
    205            * @brief External Interrupt PORTF Interrupt routine.
    206            * @param  None
    207            * @retval None
    208            */
    209           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    210           {
    211            /* In order to detect unexpected events during development,
    212               it is recommended to set a breakpoint on the following instruction.
    213            */
    214           }
    215          #endif /*STM8S903*/
    216          
    217          #if defined (STM8S208) || defined (STM8AF52Ax)
    218          /**
    219            * @brief CAN RX Interrupt routine.
    220            * @param  None
    221            * @retval None
    222            */
    223           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    224           {
    225            /* In order to detect unexpected events during development,
    226               it is recommended to set a breakpoint on the following instruction.
    227            */
    228           }
    229          
    230          /**
    231            * @brief CAN TX Interrupt routine.
    232            * @param  None
    233            * @retval None
    234            */
    235           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    236           {
    237            /* In order to detect unexpected events during development,
    238               it is recommended to set a breakpoint on the following instruction.
    239            */
    240           }
    241          #endif /*STM8S208 || STM8AF52Ax */
    242          
    243          /**
    244            * @brief SPI Interrupt routine.
    245            * @param  None
    246            * @retval None
    247            */

   \                                 In section .far_func.text, align 1
    248          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    249          {
    250            /* In order to detect unexpected events during development,
    251               it is recommended to set a breakpoint on the following instruction.
    252            */
    253          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80                    IRET
    254          
    255          /**
    256            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    257            * @param  None
    258            * @retval None
    259            */

   \                                 In section .far_func.text, align 1
    260          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    261          {
    262            /* In order to detect unexpected events during development,
    263               it is recommended to set a breakpoint on the following instruction.
    264            */
    265          }
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 80                    IRET
    266          
    267          /**
    268            * @brief Timer1 Capture/Compare Interrupt routine.
    269            * @param  None
    270            * @retval None
    271            */

   \                                 In section .far_func.text, align 1
    272          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    273          {
    274            /* In order to detect unexpected events during development,
    275               it is recommended to set a breakpoint on the following instruction.
    276            */
    277          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80                    IRET
    278          
    279          #ifdef STM8S903
    280          /**
    281            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    282            * @param  None
    283            * @retval None
    284            */
    285           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    286           {
    287            /* In order to detect unexpected events during development,
    288               it is recommended to set a breakpoint on the following instruction.
    289            */
    290           }
    291          
    292          /**
    293            * @brief Timer5 Capture/Compare Interrupt routine.
    294            * @param  None
    295            * @retval None
    296            */
    297           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    298           {
    299            /* In order to detect unexpected events during development,
    300               it is recommended to set a breakpoint on the following instruction.
    301            */
    302           }
    303          
    304          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    305          /**
    306            * @brief Timer2 Update/Overflow/Break Interrupt routine.
    307            * @param  None
    308            * @retval None
    309            */

   \                                 In section .far_func.text, align 1
    310           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    311           {
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    312            /* In order to detect unexpected events during development,
    313               it is recommended to set a breakpoint on the following instruction.
    314            */
    315           timer2++;
   \   00000E CE0000                LDW       X, L:timer2
   \   000011 5C                    INCW      X
   \   000012 CF0000                LDW       L:timer2, X
    316           timer1++;
   \   000015 CE0000                LDW       X, L:timer1
   \   000018 5C                    INCW      X
   \   000019 CF0000                LDW       L:timer1, X
    317           timeout--;
   \   00001C C60000                LD        A, L:timeout
   \   00001F 4A                    DEC       A
   \   000020 C70000                LD        L:timeout, A
    318            if (timeout<=0) timeout=0;
   \   000023 C60000                LD        A, L:timeout
   \   000026 2604                  JRNE      L:??TIM2_UPD_OVF_BRK_IRQHandler_0
   \   000028 725F0000              CLR       L:timeout
    319          
    320           //ADC1_Cmd (ENABLE); //Start convert
    321           TIM2_ClearITPendingBit(TIM2_IT_UPDATE);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_0:
   \   00002C A601                  LD        A, #0x1
   \   00002E 8D000000              CALLF     TIM2_ClearITPendingBit
    322          
    323           }
   \   000032 8D000000              CALLF     L:?pop_l1
   \   000036 8D000000              CALLF     L:?pop_l0
   \   00003A 80                    IRET
    324          
    325          /**
    326            * @brief Timer2 Capture/Compare Interrupt routine.
    327            * @param  None
    328            * @retval None
    329            */

   \                                 In section .far_func.text, align 1
    330           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    331           {
    332            /* In order to detect unexpected events during development,
    333               it is recommended to set a breakpoint on the following instruction.
    334            */
    335           }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80                    IRET
    336          #endif /*STM8S903*/
    337          
    338          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    339              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    340          /**
    341            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    342            * @param  None
    343            * @retval None
    344            */

   \                                 In section .far_func.text, align 1
    345           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    346           {
   \                     TIM3_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_17:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    347            /* In order to detect unexpected events during development,
    348               it is recommended to set a breakpoint on the following instruction.
    349            */
    350          
    351          
    352             GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \   00000E A601                  LD        A, #0x1
   \   000010 AE500F                LDW       X, #0x500f
   \   000013 8D000000              CALLF     GPIO_WriteReverse
    353             timer3++;
   \   000017 CE0000                LDW       X, L:timer3
   \   00001A 5C                    INCW      X
   \   00001B CF0000                LDW       L:timer3, X
    354             seconds++;
   \   00001E C60000                LD        A, L:seconds
   \   000021 4C                    INC       A
   \   000022 C70000                LD        L:seconds, A
    355              if (seconds >59)
   \   000025 A13C                  CP        A, #0x3c
   \   000027 250B                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_0
    356              {
    357                seconds=0;
   \   000029 725F0000              CLR       L:seconds
    358                minutes++;
   \   00002D C60000                LD        A, L:minutes
   \   000030 4C                    INC       A
   \   000031 C70000                LD        L:minutes, A
    359              }
    360              if (minutes > 59)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_0:
   \   000034 C60000                LD        A, L:minutes
   \   000037 A13C                  CP        A, #0x3c
   \   000039 2513                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
    361              {
    362                minutes=0;
   \   00003B 725F0000              CLR       L:minutes
    363                hours++;
   \   00003F C60000                LD        A, L:hours
   \   000042 4C                    INC       A
   \   000043 C70000                LD        L:hours, A
    364                if(hours > 23) hours=0;
   \   000046 A118                  CP        A, #0x18
   \   000048 2504                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
   \   00004A 725F0000              CLR       L:hours
    365              }
    366          
    367              Time_Display=TRUE;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_1:
   \   00004E 35010000              MOV       L:Time_Display, #0x1
    368          
    369                 // Check for Monthly Alarm      |------- time_now
    370                //                               |----timer_on
    371                    if ( status.monthly)
   \   000052 CE0000                LDW       X, L:status
   \   000055 9F                    LD        A, XL
   \   000056 A508                  BCP       A, #0x8
   \   000058 273F                  JREQ      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    372                    {
    373                      if( monthly_year==year && monthly_date==date && monthly_month==month)
   \   00005A C60000                LD        A, L:year
   \   00005D C10000                CP        A, L:monthly_year
   \   000060 2637                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
   \   000062 C60000                LD        A, L:`date`
   \   000065 C10000                CP        A, L:monthly_date
   \   000068 262F                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
   \   00006A C60000                LD        A, L:month
   \   00006D C10000                CP        A, L:monthly_month
   \   000070 2627                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    374                      {
    375                        u16 time_now=hours*60+minutes;
    376                        if(time_now > time_on)
   \   000072 8D000000              CALLF     ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   000076 90CE0000              LDW       Y, L:time_on
   \   00007A BF00                  LDW       S:?w0, X
   \   00007C 90B300                CPW       Y, S:?w0
   \   00007F 2418                  JRNC      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    377                        {
    378                        status.daily=1;
   \   000081 CE0000                LDW       X, L:status
   \   000084 01                    RRWA      X, A
   \   000085 AA04                  OR        A, #0x4
   \   000087 02                    RLWA      X, A
   \   000088 CF0000                LDW       L:status, X
    379                        status.monthly=0;
   \   00008B CE0000                LDW       X, L:status
   \   00008E 01                    RRWA      X, A
   \   00008F A4F7                  AND       A, #0xf7
   \   000091 02                    RLWA      X, A
   \   000092 CF0000                LDW       L:status, X
    380                        Save_Status();
   \   000095 8D000000              CALLF     Save_Status
    381                        }
    382                      }
    383                    }
    384          
    385          
    386          
    387          
    388                //Check for Daily Alarm
    389                  if (status.daily)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_2:
   \   000099 CE0000                LDW       X, L:status
   \   00009C 9F                    LD        A, XL
   \   00009D A504                  BCP       A, #0x4
   \   00009F 272F                  JREQ      L:??TIM3_UPD_OVF_BRK_IRQHandler_3
    390                  {
    391                 u16 time_now=hours*60+minutes;
   \   0000A1 8D000000              CALLF     ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   0000A5 BF00                  LDW       S:?w0, X
    392                status.on=0;
   \   0000A7 CE0000                LDW       X, L:status
   \   0000AA 01                    RRWA      X, A
   \   0000AB A4FE                  AND       A, #0xfe
   \   0000AD 02                    RLWA      X, A
   \   0000AE CF0000                LDW       L:status, X
    393                     u16 time=time_on;
   \   0000B1 CE0000                LDW       X, L:time_on
    394                     do
    395                    {
    396                       if(time==time_now)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_4:
   \   0000B4 B300                  CPW       X, S:?w0
   \   0000B6 260C                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_5
    397                       {
    398                         status.on=1;
   \   0000B8 CE0000                LDW       X, L:status
   \   0000BB 01                    RRWA      X, A
   \   0000BC AA01                  OR        A, #0x1
   \   0000BE 02                    RLWA      X, A
   \   0000BF CF0000                LDW       L:status, X
    399                          break ;
   \   0000C2 200C                  JRA       L:??TIM3_UPD_OVF_BRK_IRQHandler_3
    400                       }
    401                        time++;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_5:
   \   0000C4 5C                    INCW      X
    402                         if( time==1441) time=0;
   \   0000C5 A305A1                CPW       X, #0x5a1
   \   0000C8 2601                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_6
   \   0000CA 5F                    CLRW      X
    403                    } while(!(time==time_off));
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_6:
   \   0000CB C30000                CPW       X, L:time_off
   \   0000CE 26E4                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_4
    404                   };
    405          
    406                 sync++;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_3:
   \   0000D0 C60000                LD        A, L:sync
   \   0000D3 4C                    INC       A
   \   0000D4 C70000                LD        L:sync, A
    407                 if (sync > sync_time)
   \   0000D7 C60000                LD        A, L:sync
   \   0000DA A11F                  CP        A, #0x1f
   \   0000DC 2508                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_7
    408                 {
    409                   sync_time_ds1307=TRUE;
   \   0000DE 35010000              MOV       L:sync_time_ds1307, #0x1
    410                   sync=0;
   \   0000E2 725F0000              CLR       L:sync
    411                 }
    412          
    413          
    414          
    415          
    416             TIM3_ClearITPendingBit(TIM3_IT_UPDATE);
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_7:
   \   0000E6 A601                  LD        A, #0x1
   \   0000E8 8D000000              CALLF     TIM3_ClearITPendingBit
    417           }
   \   0000EC 8D000000              CALLF     L:?pop_l1
   \   0000F0 8D000000              CALLF     L:?pop_l0
   \   0000F4 80                    IRET

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine0:
   \   000000 C60000                LD        A, L:hours
   \   000003 905F                  CLRW      Y
   \   000005 9097                  LD        YL, A
   \   000007 AE003C                LDW       X, #0x3c
   \   00000A BF00                  LDW       S:?w0, X
   \   00000C 93                    LDW       X, Y
   \   00000D 8D000000              CALLF     L:?mul16_x_x_w0
   \   000011 C60000                LD        A, L:minutes
   \   000014 9097                  LD        YL, A
   \   000016 90BF00                LDW       S:?w0, Y
   \   000019 72BB0000              ADDW      X, S:?w0
   \   00001D 87                    RETF
    418          
    419          /**
    420            * @brief Timer3 Capture/Compare Interrupt routine.
    421            * @param  None
    422            * @retval None
    423            */

   \                                 In section .far_func.text, align 1
    424           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    425           {
    426            /* In order to detect unexpected events during development,
    427               it is recommended to set a breakpoint on the following instruction.
    428            */
    429           }
   \                     TIM3_CAP_COM_IRQHandler:
   \                     _interrupt_18:
   \   000000 80                    IRET
    430          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    431          
    432          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    433              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    434          /**
    435            * @brief UART1 TX Interrupt routine.
    436            * @param  None
    437            * @retval None
    438            */
    439           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    440           {
    441              /* In order to detect unexpected events during development,
    442                 it is recommended to set a breakpoint on the following instruction.
    443              */
    444           }
    445          
    446          /**
    447            * @brief UART1 RX Interrupt routine.
    448            * @param  None
    449            * @retval None
    450            */
    451           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    452           {
    453              /* In order to detect unexpected events during development,
    454                 it is recommended to set a breakpoint on the following instruction.
    455              */
    456           }
    457          #endif /*STM8S208 or STM8S207 or STM8S103 or STM8S903 or STM8AF62Ax or STM8AF52Ax */
    458          
    459          /**
    460            * @brief I2C Interrupt routine.
    461            * @param  None
    462            * @retval None
    463            */

   \                                 In section .far_func.text, align 1
    464          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    465          {
    466            /* In order to detect unexpected events during development,
    467               it is recommended to set a breakpoint on the following instruction.
    468            */
    469          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80                    IRET
    470          
    471          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    472          /**
    473            * @brief    TX interrupt routine.
    474            * @param  None
    475            * @retval None
    476            */

   \                                 In section .far_func.text, align 1
    477           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    478           {
    479              /* In order to detect unexpected events during development,
    480                 it is recommended to set a breakpoint on the following instruction.
    481              */
    482           }
   \                     UART2_TX_IRQHandler:
   \                     _interrupt_22:
   \   000000 80                    IRET
    483          
    484          /**
    485            * @brief UART2 RX interrupt routine.
    486            * @param  None
    487            * @retval None
    488            */

   \                                 In section .far_func.text, align 1
    489           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    490           {
   \                     UART2_RX_IRQHandler:
   \                     _interrupt_23:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    491              /* In order to detect unexpected events during development,
    492                 it is recommended to set a breakpoint on the following instruction.
    493              */
    494             rx_data=UART2_ReceiveData8();
   \   00000E 8D000000              CALLF     UART2_ReceiveData8
   \   000012 C70000                LD        L:rx_data, A
    495             UART2_ClearITPendingBit(UART2_IT_RXNE);
   \   000015 AE0255                LDW       X, #0x255
   \   000018 8D000000              CALLF     UART2_ClearITPendingBit
    496          
    497           }
   \   00001C 8D000000              CALLF     L:?pop_l1
   \   000020 8D000000              CALLF     L:?pop_l0
   \   000024 80                    IRET
    498          #endif /* STM8S105 or STM8AF626x */
    499          
    500          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    501          /**
    502            * @brief UART3 TX interrupt routine.
    503            * @param  None
    504            * @retval None
    505            */
    506           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    507           {
    508              /* In order to detect unexpected events during development,
    509                 it is recommended to set a breakpoint on the following instruction.
    510              */
    511           }
    512          
    513          /**
    514            * @brief UART3 RX interrupt routine.
    515            * @param  None
    516            * @retval None
    517            */
    518           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    519           {
    520              /* In order to detect unexpected events during development,
    521                 it is recommended to set a breakpoint on the following instruction.
    522              */
    523           }
    524          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    525          
    526          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    527          /**
    528            * @brief ADC2 interrupt routine.
    529            * @param  None
    530            * @retval None
    531            */
    532           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    533           {
    534              /* In order to detect unexpected events during development,
    535                 it is recommended to set a breakpoint on the following instruction.
    536              */
    537           }
    538          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    539          /**
    540            * @brief ADC1 interrupt routine.
    541            * @par Parameters:
    542            * None
    543            * @retval
    544            * None
    545            */

   \                                 In section .far_func.text, align 1
    546           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    547           {
    548              /* In order to detect unexpected events during development,
    549                 it is recommended to set a breakpoint on the following instruction.
    550              */
    551             //ADC1_Cmd (DISABLE);
    552              /*
    553             ADC1_ClearFlag(ADC1_FLAG_EOC);
    554             adcdata = ADC1_GetConversionValue();
    555             measure[index++]=adcdata;
    556                if (index==data_size)
    557                {
    558                  measure[index]=0;
    559                  index=0;
    560                }
    561             ADC1_ClearITPendingBit(ADC1_IT_EOC);
    562               */
    563              //ADC1_Cmd (ENABLE);
    564              //ADC1_Cmd (ENABLE);  //Second Start conversion
    565           }
   \                     ADC1_IRQHandler:
   \                     _interrupt_24:
   \   000000 80                    IRET
    566          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    567          
    568          #ifdef STM8S903
    569          /**
    570            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    571            * @param  None
    572            * @retval None
    573            */
    574          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    575           {
    576            /* In order to detect unexpected events during development,
    577               it is recommended to set a breakpoint on the following instruction.
    578            */
    579           }
    580          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    581          /**
    582            * @brief Timer4 Update/Overflow Interrupt routine.
    583            * @param  None
    584            * @retval None
    585            */

   \                                 In section .far_func.text, align 1
    586           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    587           {
    588            /* In order to detect unexpected events during development,
    589               it is recommended to set a breakpoint on the following instruction.
    590            */
    591           }
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 80                    IRET
    592          #endif /*STM8S903*/
    593          
    594          /**
    595            * @brief Eeprom EEC Interrupt routine.
    596            * @param  None
    597            * @retval None
    598            */

   \                                 In section .far_func.text, align 1
    599          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    600          {
    601            /* In order to detect unexpected events during development,
    602               it is recommended to set a breakpoint on the following instruction.
    603            */
    604          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80                    IRET
    605          
    606          /**
    607            * @}
    608            */
    609          
    610          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     index                             1
     sync                              1
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       1
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler      59
     TIM2_CAP_COM_IRQHandler           1
     TIM3_UPD_OVF_BRK_IRQHandler     245
     ?Subroutine0                     30
     TIM3_CAP_COM_IRQHandler           1
     I2C_IRQHandler                    1
     UART2_TX_IRQHandler               1
     UART2_RX_IRQHandler              37
     ADC1_IRQHandler                   1
     TIM4_UPD_OVF_IRQHandler           1
     EEPROM_EEC_IRQHandler             1

 
 390 bytes in section .far_func.text
   2 bytes in section .near.bss
 
 390 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
