###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             08/Dec/2013  17:08:22 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\stm8s_it. #
#                    c" -e -Ohz --debug --code_model medium --data_model      #
#                    medium -o "C:\Documents and                              #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\"       #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D STM8S105 -lC      #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -lA "C:\Documents and                      #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -I   #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \" -I "C:\Documents and Settings\Administrator\Desktop\s #
#                    tm8s105k-controller\Project\STM8S_StdPeriph_Template\EWS #
#                    TM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\"      #
#                    --vregs 16                                               #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\stm8s_it.lst                                  #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\stm8s_it.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file     stm8s_it.c
      4            * @author   MCD Application Team
      5            * @version  V2.1.0
      6            * @date     18-November-2011
      7            * @brief    Main Interrupt Service Routines.
      8            *           This file provides template for all peripherals interrupt service
      9            *           routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm8s_it.h"
     26          
     27          /** @addtogroup Template_Project
     28            * @{
     29            */
     30          
     31          /* Private typedef -----------------------------------------------------------*/
     32          /* Private define ------------------------------------------------------------*/
     33          #define data_size 10
     34          #define sync_time  30 //30s
     35          #define lcdLed GPIO_PIN_0
     36          #define BLINK_TIME 20000
     37          /* Private macro -------------------------------------------------------------*/
     38          /* Private variables ---------------------------------------------------------*/
     39          extern  volatile u16 timer1;
     40          extern  volatile u16 timer2;
     41          extern  volatile u16 timer3;
     42          extern  volatile u16 adcdata;
     43          extern  volatile u8 timeout;
     44          extern  volatile u8 rx_data;

   \                                 In section .near.bss, align 1
     45          extern  volatile u8 index=0;
   \                     index:
   \   000000                       DS8 1
     46          extern    u8 seconds;
     47          extern    u8 minutes;
     48          extern    u8 hours;
     49          extern    u8 year;
     50          extern    u8 month;
     51          extern    u8 date;
     52          extern  bool volatile  Time_Display;
     53          extern   bool blink_flag;
     54          extern  bool rotate_line2;
     55          

   \                                 In section .near.bss, align 1
     56          volatile u8 sync=0;
   \                     sync:
   \   000000                       DS8 1
     57          extern  bool volatile sync_time_ds1307;
     58          
     59          extern struct   status_reg
     60           {
     61             unsigned manu: 1;
     62             unsigned on:1;
     63             unsigned timer_on:1;
     64             unsigned daily:1;
     65             unsigned monthly:1;
     66           }  volatile   status  ;
     67          
     68          
     69          
     70          extern struct
     71           {
     72             unsigned ds1307:1;
     73             unsigned ds18B20:1;
     74             unsigned buzzer:1;
     75             unsigned lcdLed:1;
     76           }  volatile hardware ;
     77          
     78          extern u16 time_on;
     79          extern u16 time_off;
     80          extern u8 monthly_year;
     81          extern u8 monthly_month;
     82          extern u8 monthly_date;
     83          extern volatile u8 lcdLedTimer;
     84          extern volatile u16 blink_time;
     85          
     86          
     87          
     88          
     89          //extern   u16  measure[data_size];
     90          
     91          /* Private function prototypes -----------------------------------------------*/
     92          /* Private functions ---------------------------------------------------------*/
     93          extern void Save_Status();
     94          extern void CheckProgramPoint();
     95          extern void DisplayLine2();
     96          /* Public functions ----------------------------------------------------------*/
     97          
     98          #ifdef _COSMIC_
     99          /**
    100            * @brief Dummy Interrupt routine
    101            * @par Parameters:
    102            * None
    103            * @retval
    104            * None
    105          */
    106          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
    107          {
    108            /* In order to detect unexpected events during development,
    109               it is recommended to set a breakpoint on the following instruction.
    110            */
    111          }
    112          #endif /*_COSMIC_*/
    113          
    114          /**
    115            * @brief TRAP Interrupt routine
    116            * @param  None
    117            * @retval None
    118            */

   \                                 In section .far_func.text, align 1
    119          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
    120          {
    121            /* In order to detect unexpected events during development,
    122               it is recommended to set a breakpoint on the following instruction.
    123            */
    124          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80                    IRET
    125          
    126          /**
    127            * @brief Top Level Interrupt routine.
    128            * @param  None
    129            * @retval None
    130            */

   \                                 In section .far_func.text, align 1
    131          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
    132          
    133          {
    134            /* In order to detect unexpected events during development,
    135               it is recommended to set a breakpoint on the following instruction.
    136            */
    137          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80                    IRET
    138          
    139          /**
    140            * @brief Auto Wake Up Interrupt routine.
    141            * @param  None
    142            * @retval None
    143            */

   \                                 In section .far_func.text, align 1
    144          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
    145          {
    146            /* In order to detect unexpected events during development,
    147               it is recommended to set a breakpoint on the following instruction.
    148            */
    149          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80                    IRET
    150          
    151          /**
    152            * @brief Clock Controller Interrupt routine.
    153            * @param  None
    154            * @retval None
    155            */

   \                                 In section .far_func.text, align 1
    156          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    157          {
    158            /* In order to detect unexpected events during development,
    159               it is recommended to set a breakpoint on the following instruction.
    160            */
    161          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80                    IRET
    162          
    163          /**
    164            * @brief External Interrupt PORTA Interrupt routine.
    165            * @param  None
    166            * @retval None
    167            */

   \                                 In section .far_func.text, align 1
    168          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    169          {
    170            /* In order to detect unexpected events during development,
    171               it is recommended to set a breakpoint on the following instruction.
    172            */
    173          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80                    IRET
    174          
    175          /**
    176            * @brief External Interrupt PORTB Interrupt routine.
    177            * @param  None
    178            * @retval None
    179            */

   \                                 In section .far_func.text, align 1
    180          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    181          {
    182            /* In order to detect unexpected events during development,
    183               it is recommended to set a breakpoint on the following instruction.
    184            */
    185          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80                    IRET
    186          
    187          /**
    188            * @brief External Interrupt PORTC Interrupt routine.
    189            * @param  None
    190            * @retval None
    191            */

   \                                 In section .far_func.text, align 1
    192          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    193          {
    194            /* In order to detect unexpected events during development,
    195               it is recommended to set a breakpoint on the following instruction.
    196            */
    197          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80                    IRET
    198          
    199          /**
    200            * @brief External Interrupt PORTD Interrupt routine.
    201            * @param  None
    202            * @retval None
    203            */

   \                                 In section .far_func.text, align 1
    204          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    205          {
    206            /* In order to detect unexpected events during development,
    207               it is recommended to set a breakpoint on the following instruction.
    208            */
    209          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80                    IRET
    210          
    211          /**
    212            * @brief External Interrupt PORTE Interrupt routine.
    213            * @param  None
    214            * @retval None
    215            */

   \                                 In section .far_func.text, align 1
    216          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    217          {
    218            /* In order to detect unexpected events during development,
    219               it is recommended to set a breakpoint on the following instruction.
    220            */
    221          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80                    IRET
    222          
    223          #ifdef STM8S903
    224          /**
    225            * @brief External Interrupt PORTF Interrupt routine.
    226            * @param  None
    227            * @retval None
    228            */
    229           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    230           {
    231            /* In order to detect unexpected events during development,
    232               it is recommended to set a breakpoint on the following instruction.
    233            */
    234           }
    235          #endif /*STM8S903*/
    236          
    237          #if defined (STM8S208) || defined (STM8AF52Ax)
    238          /**
    239            * @brief CAN RX Interrupt routine.
    240            * @param  None
    241            * @retval None
    242            */
    243           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    244           {
    245            /* In order to detect unexpected events during development,
    246               it is recommended to set a breakpoint on the following instruction.
    247            */
    248           }
    249          
    250          /**
    251            * @brief CAN TX Interrupt routine.
    252            * @param  None
    253            * @retval None
    254            */
    255           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    256           {
    257            /* In order to detect unexpected events during development,
    258               it is recommended to set a breakpoint on the following instruction.
    259            */
    260           }
    261          #endif /*STM8S208 || STM8AF52Ax */
    262          
    263          /**
    264            * @brief SPI Interrupt routine.
    265            * @param  None
    266            * @retval None
    267            */

   \                                 In section .far_func.text, align 1
    268          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    269          {
    270            /* In order to detect unexpected events during development,
    271               it is recommended to set a breakpoint on the following instruction.
    272            */
    273          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80                    IRET
    274          
    275          /**
    276            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    277            * @param  None
    278            * @retval None
    279            */

   \                                 In section .far_func.text, align 1
    280          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    281          {
    282            /* In order to detect unexpected events during development,
    283               it is recommended to set a breakpoint on the following instruction.
    284            */
    285          }
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 80                    IRET
    286          
    287          /**
    288            * @brief Timer1 Capture/Compare Interrupt routine.
    289            * @param  None
    290            * @retval None
    291            */

   \                                 In section .far_func.text, align 1
    292          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    293          {
    294            /* In order to detect unexpected events during development,
    295               it is recommended to set a breakpoint on the following instruction.
    296            */
    297          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80                    IRET
    298          
    299          #ifdef STM8S903
    300          /**
    301            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    302            * @param  None
    303            * @retval None
    304            */
    305           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    306           {
    307            /* In order to detect unexpected events during development,
    308               it is recommended to set a breakpoint on the following instruction.
    309            */
    310           }
    311          
    312          /**
    313            * @brief Timer5 Capture/Compare Interrupt routine.
    314            * @param  None
    315            * @retval None
    316            */
    317           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    318           {
    319            /* In order to detect unexpected events during development,
    320               it is recommended to set a breakpoint on the following instruction.
    321            */
    322           }
    323          
    324          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    325          /**
    326            * @brief Timer2 Update/Overflow/Break Interrupt routine.
    327            * @param  None
    328            * @retval None
    329            */

   \                                 In section .far_func.text, align 1
    330           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    331           {
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    332            /* In order to detect unexpected events during development,
    333               it is recommended to set a breakpoint on the following instruction.
    334            */
    335              if(hardware.lcdLed) GPIO_WriteLow(GPIOB,lcdLed);
   \   00000E CE0000                LDW       X, L:hardware
   \   000011 9F                    LD        A, XL
   \   000012 A508                  BCP       A, #0x8
   \   000014 270B                  JREQ      L:??TIM2_UPD_OVF_BRK_IRQHandler_0
   \   000016 A601                  LD        A, #0x1
   \   000018 AE5005                LDW       X, #0x5005
   \   00001B 8D000000              CALLF     GPIO_WriteLow
   \   00001F 2009                  JRA       L:??TIM2_UPD_OVF_BRK_IRQHandler_1
    336               else   GPIO_WriteHigh(GPIOB,lcdLed);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_0:
   \   000021 A601                  LD        A, #0x1
   \   000023 AE5005                LDW       X, #0x5005
   \   000026 8D000000              CALLF     GPIO_WriteHigh
    337           timer2++;
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_1:
   \   00002A CE0000                LDW       X, L:timer2
   \   00002D 5C                    INCW      X
   \   00002E CF0000                LDW       L:timer2, X
    338           timer1++;
   \   000031 CE0000                LDW       X, L:timer1
   \   000034 5C                    INCW      X
   \   000035 CF0000                LDW       L:timer1, X
    339           timeout--;
   \   000038 C60000                LD        A, L:timeout
   \   00003B 4A                    DEC       A
   \   00003C C70000                LD        L:timeout, A
    340            if (timeout<=0) timeout=0;
   \   00003F C60000                LD        A, L:timeout
   \   000042 2604                  JRNE      L:??TIM2_UPD_OVF_BRK_IRQHandler_2
   \   000044 725F0000              CLR       L:timeout
    341          
    342            blink_time++;
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_2:
   \   000048 CE0000                LDW       X, L:blink_time
   \   00004B 5C                    INCW      X
   \   00004C CF0000                LDW       L:blink_time, X
    343             if(blink_time >=BLINK_TIME)
   \   00004F CE0000                LDW       X, L:blink_time
   \   000052 A34E20                CPW       X, #0x4e20
   \   000055 2513                  JRC       L:??TIM2_UPD_OVF_BRK_IRQHandler_3
    344             {
    345             if(blink_flag) blink_flag=FALSE;
   \   000057 C60000                LD        A, L:blink_flag
   \   00005A 2706                  JREQ      L:??TIM2_UPD_OVF_BRK_IRQHandler_4
   \   00005C 725F0000              CLR       L:blink_flag
   \   000060 2004                  JRA       L:??TIM2_UPD_OVF_BRK_IRQHandler_5
    346                else blink_flag=TRUE;
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_4:
   \   000062 35010000              MOV       L:blink_flag, #0x1
    347                 blink_time=0;
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_5:
   \   000066 5F                    CLRW      X
   \   000067 CF0000                LDW       L:blink_time, X
    348          
    349             }
    350          
    351          
    352          
    353           //ADC1_Cmd (ENABLE); //Start convert
    354           TIM2_ClearITPendingBit(TIM2_IT_UPDATE);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_3:
   \   00006A A601                  LD        A, #0x1
   \   00006C 8D000000              CALLF     TIM2_ClearITPendingBit
    355          
    356           }
   \   000070 8D000000              CALLF     L:?pop_l1
   \   000074 8D000000              CALLF     L:?pop_l0
   \   000078 80                    IRET
    357          
    358          /**
    359            * @brief Timer2 Capture/Compare Interrupt routine.
    360            * @param  None
    361            * @retval None
    362            */

   \                                 In section .far_func.text, align 1
    363           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    364           {
    365            /* In order to detect unexpected events during development,
    366               it is recommended to set a breakpoint on the following instruction.
    367            */
    368           }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80                    IRET
    369          #endif /*STM8S903*/
    370          
    371          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    372              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    373          /**
    374            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    375            * @param  None
    376            * @retval None
    377            */

   \                                 In section .far_func.text, align 1
    378           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    379           {
   \                     TIM3_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_17:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    380            /* In order to detect unexpected events during development,
    381               it is recommended to set a breakpoint on the following instruction.
    382            */
    383          
    384          
    385             GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \   00000E A601                  LD        A, #0x1
   \   000010 AE500F                LDW       X, #0x500f
   \   000013 8D000000              CALLF     GPIO_WriteReverse
    386             timer3++;
   \   000017 CE0000                LDW       X, L:timer3
   \   00001A 5C                    INCW      X
   \   00001B CF0000                LDW       L:timer3, X
    387             seconds++;
   \   00001E C60000                LD        A, L:seconds
   \   000021 4C                    INC       A
   \   000022 C70000                LD        L:seconds, A
    388              if (seconds >59)
   \   000025 A13C                  CP        A, #0x3c
   \   000027 250B                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_0
    389              {
    390                seconds=0;
   \   000029 725F0000              CLR       L:seconds
    391                minutes++;
   \   00002D C60000                LD        A, L:minutes
   \   000030 4C                    INC       A
   \   000031 C70000                LD        L:minutes, A
    392              }
    393              if (minutes > 59)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_0:
   \   000034 C60000                LD        A, L:minutes
   \   000037 A13C                  CP        A, #0x3c
   \   000039 2513                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
    394              {
    395                minutes=0;
   \   00003B 725F0000              CLR       L:minutes
    396                hours++;
   \   00003F C60000                LD        A, L:hours
   \   000042 4C                    INC       A
   \   000043 C70000                LD        L:hours, A
    397                if(hours > 23) hours=0;
   \   000046 A118                  CP        A, #0x18
   \   000048 2504                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
   \   00004A 725F0000              CLR       L:hours
    398              }
    399          
    400              Time_Display=TRUE;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_1:
   \   00004E 35010000              MOV       L:Time_Display, #0x1
    401          
    402                 // Check for Monthly Alarm      |------- time_now
    403                //                               |----timer_on
    404              /*
    405                    if (!status.manu)
    406                    {
    407                      if( monthly_year==year && monthly_date==date && monthly_month==month)
    408                      {
    409                        u16 time_now=hours*60+minutes;
    410                        if(time_now >= time_on)
    411                        {
    412                        status.daily=1;
    413                        status.monthly=0;
    414                        Save_Status();
    415                        }
    416                      }
    417                    }
    418          
    419                 */
    420          
    421          
    422          
    423                /*
    424                //Check for Daily Alarm
    425                  if (!status.manu)
    426                  {
    427                 u16 time_now=hours*60+minutes;
    428                  status.on=0;
    429                     u16 time=time_on;
    430                     do
    431                    {
    432                       if(time==time_now)
    433                       {
    434                         status.on=1;
    435                          break ;
    436                       }
    437                        time++;
    438                         if( time==1441) time=0;
    439                    } while(!(time==time_off));
    440                   };
    441              */
    442          
    443                 CheckProgramPoint();
   \   000052 8D000000              CALLF     CheckProgramPoint
    444          
    445                  //if(rotate_line2) DisplayLine2();
    446          
    447                 sync++;
   \   000056 C60000                LD        A, L:sync
   \   000059 4C                    INC       A
   \   00005A C70000                LD        L:sync, A
    448                 if (sync > sync_time)
   \   00005D C60000                LD        A, L:sync
   \   000060 A11F                  CP        A, #0x1f
   \   000062 2508                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    449                 {
    450                   sync_time_ds1307=TRUE;
   \   000064 35010000              MOV       L:sync_time_ds1307, #0x1
    451                   sync=0;
   \   000068 725F0000              CLR       L:sync
    452                 }
    453          
    454          
    455                lcdLedTimer--;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_2:
   \   00006C C60000                LD        A, L:lcdLedTimer
   \   00006F 4A                    DEC       A
   \   000070 C70000                LD        L:lcdLedTimer, A
    456                if(lcdLedTimer <= 0) hardware.lcdLed=0;
   \   000073 C60000                LD        A, L:lcdLedTimer
   \   000076 260A                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_3
   \   000078 CE0000                LDW       X, L:hardware
   \   00007B 01                    RRWA      X, A
   \   00007C A4F7                  AND       A, #0xf7
   \   00007E 02                    RLWA      X, A
   \   00007F CF0000                LDW       L:hardware, X
    457          
    458                // else hardware.lcdLed=1;
    459          
    460          
    461          
    462             TIM3_ClearITPendingBit(TIM3_IT_UPDATE);
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_3:
   \   000082 A601                  LD        A, #0x1
   \   000084 8D000000              CALLF     TIM3_ClearITPendingBit
    463           }
   \   000088 8D000000              CALLF     L:?pop_l1
   \   00008C 8D000000              CALLF     L:?pop_l0
   \   000090 80                    IRET
    464          
    465          /**
    466            * @brief Timer3 Capture/Compare Interrupt routine.
    467            * @param  None
    468            * @retval None
    469            */

   \                                 In section .far_func.text, align 1
    470           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    471           {
    472            /* In order to detect unexpected events during development,
    473               it is recommended to set a breakpoint on the following instruction.
    474            */
    475           }
   \                     TIM3_CAP_COM_IRQHandler:
   \                     _interrupt_18:
   \   000000 80                    IRET
    476          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    477          
    478          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    479              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    480          /**
    481            * @brief UART1 TX Interrupt routine.
    482            * @param  None
    483            * @retval None
    484            */
    485           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    486           {
    487              /* In order to detect unexpected events during development,
    488                 it is recommended to set a breakpoint on the following instruction.
    489              */
    490           }
    491          
    492          /**
    493            * @brief UART1 RX Interrupt routine.
    494            * @param  None
    495            * @retval None
    496            */
    497           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    498           {
    499              /* In order to detect unexpected events during development,
    500                 it is recommended to set a breakpoint on the following instruction.
    501              */
    502           }
    503          #endif /*STM8S208 or STM8S207 or STM8S103 or STM8S903 or STM8AF62Ax or STM8AF52Ax */
    504          
    505          /**
    506            * @brief I2C Interrupt routine.
    507            * @param  None
    508            * @retval None
    509            */

   \                                 In section .far_func.text, align 1
    510          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    511          {
    512            /* In order to detect unexpected events during development,
    513               it is recommended to set a breakpoint on the following instruction.
    514            */
    515          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80                    IRET
    516          
    517          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    518          /**
    519            * @brief    TX interrupt routine.
    520            * @param  None
    521            * @retval None
    522            */

   \                                 In section .far_func.text, align 1
    523           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    524           {
    525              /* In order to detect unexpected events during development,
    526                 it is recommended to set a breakpoint on the following instruction.
    527              */
    528           }
   \                     UART2_TX_IRQHandler:
   \                     _interrupt_22:
   \   000000 80                    IRET
    529          
    530          /**
    531            * @brief UART2 RX interrupt routine.
    532            * @param  None
    533            * @retval None
    534            */

   \                                 In section .far_func.text, align 1
    535           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    536           {
   \                     UART2_RX_IRQHandler:
   \                     _interrupt_23:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    537              /* In order to detect unexpected events during development,
    538                 it is recommended to set a breakpoint on the following instruction.
    539              */
    540             rx_data=UART2_ReceiveData8();
   \   00000E 8D000000              CALLF     UART2_ReceiveData8
   \   000012 C70000                LD        L:rx_data, A
    541             UART2_ClearITPendingBit(UART2_IT_RXNE);
   \   000015 AE0255                LDW       X, #0x255
   \   000018 8D000000              CALLF     UART2_ClearITPendingBit
    542          
    543           }
   \   00001C 8D000000              CALLF     L:?pop_l1
   \   000020 8D000000              CALLF     L:?pop_l0
   \   000024 80                    IRET
    544          #endif /* STM8S105 or STM8AF626x */
    545          
    546          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    547          /**
    548            * @brief UART3 TX interrupt routine.
    549            * @param  None
    550            * @retval None
    551            */
    552           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    553           {
    554              /* In order to detect unexpected events during development,
    555                 it is recommended to set a breakpoint on the following instruction.
    556              */
    557           }
    558          
    559          /**
    560            * @brief UART3 RX interrupt routine.
    561            * @param  None
    562            * @retval None
    563            */
    564           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    565           {
    566              /* In order to detect unexpected events during development,
    567                 it is recommended to set a breakpoint on the following instruction.
    568              */
    569           }
    570          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    571          
    572          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    573          /**
    574            * @brief ADC2 interrupt routine.
    575            * @param  None
    576            * @retval None
    577            */
    578           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    579           {
    580              /* In order to detect unexpected events during development,
    581                 it is recommended to set a breakpoint on the following instruction.
    582              */
    583           }
    584          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    585          /**
    586            * @brief ADC1 interrupt routine.
    587            * @par Parameters:
    588            * None
    589            * @retval
    590            * None
    591            */

   \                                 In section .far_func.text, align 1
    592           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    593           {
    594              /* In order to detect unexpected events during development,
    595                 it is recommended to set a breakpoint on the following instruction.
    596              */
    597             //ADC1_Cmd (DISABLE);
    598              /*
    599             ADC1_ClearFlag(ADC1_FLAG_EOC);
    600             adcdata = ADC1_GetConversionValue();
    601             measure[index++]=adcdata;
    602                if (index==data_size)
    603                {
    604                  measure[index]=0;
    605                  index=0;
    606                }
    607             ADC1_ClearITPendingBit(ADC1_IT_EOC);
    608               */
    609              //ADC1_Cmd (ENABLE);
    610              //ADC1_Cmd (ENABLE);  //Second Start conversion
    611           }
   \                     ADC1_IRQHandler:
   \                     _interrupt_24:
   \   000000 80                    IRET
    612          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    613          
    614          #ifdef STM8S903
    615          /**
    616            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    617            * @param  None
    618            * @retval None
    619            */
    620          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    621           {
    622            /* In order to detect unexpected events during development,
    623               it is recommended to set a breakpoint on the following instruction.
    624            */
    625           }
    626          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    627          /**
    628            * @brief Timer4 Update/Overflow Interrupt routine.
    629            * @param  None
    630            * @retval None
    631            */

   \                                 In section .far_func.text, align 1
    632           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    633           {
    634            /* In order to detect unexpected events during development,
    635               it is recommended to set a breakpoint on the following instruction.
    636            */
    637           }
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 80                    IRET
    638          #endif /*STM8S903*/
    639          
    640          /**
    641            * @brief Eeprom EEC Interrupt routine.
    642            * @param  None
    643            * @retval None
    644            */

   \                                 In section .far_func.text, align 1
    645          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    646          {
    647            /* In order to detect unexpected events during development,
    648               it is recommended to set a breakpoint on the following instruction.
    649            */
    650          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80                    IRET
    651          
    652          /**
    653            * @}
    654            */
    655          
    656          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     index                             1
     sync                              1
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       1
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler     121
     TIM2_CAP_COM_IRQHandler           1
     TIM3_UPD_OVF_BRK_IRQHandler     145
     TIM3_CAP_COM_IRQHandler           1
     I2C_IRQHandler                    1
     UART2_TX_IRQHandler               1
     UART2_RX_IRQHandler              37
     ADC1_IRQHandler                   1
     TIM4_UPD_OVF_IRQHandler           1
     EEPROM_EEC_IRQHandler             1

 
 322 bytes in section .far_func.text
   2 bytes in section .near.bss
 
 322 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
