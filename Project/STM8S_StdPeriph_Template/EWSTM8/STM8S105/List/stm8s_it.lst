###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             20/Sep/2013  16:56:53 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\stm8s_it. #
#                    c" -e -Ohz --debug --code_model medium --data_model      #
#                    medium -o "C:\Documents and                              #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\"       #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D STM8S105 -lC      #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -lA "C:\Documents and                      #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -I   #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \" -I "C:\Documents and Settings\Administrator\Desktop\s #
#                    tm8s105k-controller\Project\STM8S_StdPeriph_Template\EWS #
#                    TM8\..\..\..\Libraries\STM8S_StdPeriph_Driver\inc\"      #
#                    --vregs 16                                               #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\stm8s_it.lst                                  #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\stm8s_it.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file     stm8s_it.c
      4            * @author   MCD Application Team
      5            * @version  V2.1.0
      6            * @date     18-November-2011
      7            * @brief    Main Interrupt Service Routines.
      8            *           This file provides template for all peripherals interrupt service
      9            *           routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm8s_it.h"
     26          
     27          /** @addtogroup Template_Project
     28            * @{
     29            */
     30          
     31          /* Private typedef -----------------------------------------------------------*/
     32          /* Private define ------------------------------------------------------------*/
     33          #define data_size 10
     34          /* Private macro -------------------------------------------------------------*/
     35          /* Private variables ---------------------------------------------------------*/
     36          extern  volatile u16 timer1;
     37          extern  volatile u16 timer2;
     38          extern  volatile u16 timer3;
     39          extern  volatile u16 adcdata;
     40          extern  volatile u8 timeout;
     41          extern  volatile u8 rx_data;

   \                                 In section .near.bss, align 1
     42          extern  volatile u8 index=0;
   \                     index:
   \   000000                       DS8 1
     43          extern  volatile u8 seconds;
     44          extern  volatile u8 minutes;
     45          extern  volatile u8 hours;
     46          extern  bool volatile  Time_Display;
     47          
     48          extern struct   status_reg
     49           {
     50             unsigned on:1;
     51             unsigned timer_on:1;
     52             unsigned daily:1;
     53             unsigned monthly:1;
     54           }  volatile   status  ;
     55          
     56          extern u16 time_on;
     57          extern u16 time_off;
     58          
     59          
     60          
     61          //extern   u16  measure[data_size];
     62          
     63          /* Private function prototypes -----------------------------------------------*/
     64          /* Private functions ---------------------------------------------------------*/
     65          /* Public functions ----------------------------------------------------------*/
     66          
     67          #ifdef _COSMIC_
     68          /**
     69            * @brief Dummy Interrupt routine
     70            * @par Parameters:
     71            * None
     72            * @retval
     73            * None
     74          */
     75          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     76          {
     77            /* In order to detect unexpected events during development,
     78               it is recommended to set a breakpoint on the following instruction.
     79            */
     80          }
     81          #endif /*_COSMIC_*/
     82          
     83          /**
     84            * @brief TRAP Interrupt routine
     85            * @param  None
     86            * @retval None
     87            */

   \                                 In section .far_func.text, align 1
     88          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     89          {
     90            /* In order to detect unexpected events during development,
     91               it is recommended to set a breakpoint on the following instruction.
     92            */
     93          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80                    IRET
     94          
     95          /**
     96            * @brief Top Level Interrupt routine.
     97            * @param  None
     98            * @retval None
     99            */

   \                                 In section .far_func.text, align 1
    100          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
    101          
    102          {
    103            /* In order to detect unexpected events during development,
    104               it is recommended to set a breakpoint on the following instruction.
    105            */
    106          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80                    IRET
    107          
    108          /**
    109            * @brief Auto Wake Up Interrupt routine.
    110            * @param  None
    111            * @retval None
    112            */

   \                                 In section .far_func.text, align 1
    113          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
    114          {
    115            /* In order to detect unexpected events during development,
    116               it is recommended to set a breakpoint on the following instruction.
    117            */
    118          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80                    IRET
    119          
    120          /**
    121            * @brief Clock Controller Interrupt routine.
    122            * @param  None
    123            * @retval None
    124            */

   \                                 In section .far_func.text, align 1
    125          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    126          {
    127            /* In order to detect unexpected events during development,
    128               it is recommended to set a breakpoint on the following instruction.
    129            */
    130          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80                    IRET
    131          
    132          /**
    133            * @brief External Interrupt PORTA Interrupt routine.
    134            * @param  None
    135            * @retval None
    136            */

   \                                 In section .far_func.text, align 1
    137          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    138          {
    139            /* In order to detect unexpected events during development,
    140               it is recommended to set a breakpoint on the following instruction.
    141            */
    142          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80                    IRET
    143          
    144          /**
    145            * @brief External Interrupt PORTB Interrupt routine.
    146            * @param  None
    147            * @retval None
    148            */

   \                                 In section .far_func.text, align 1
    149          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    150          {
    151            /* In order to detect unexpected events during development,
    152               it is recommended to set a breakpoint on the following instruction.
    153            */
    154          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80                    IRET
    155          
    156          /**
    157            * @brief External Interrupt PORTC Interrupt routine.
    158            * @param  None
    159            * @retval None
    160            */

   \                                 In section .far_func.text, align 1
    161          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    162          {
    163            /* In order to detect unexpected events during development,
    164               it is recommended to set a breakpoint on the following instruction.
    165            */
    166          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80                    IRET
    167          
    168          /**
    169            * @brief External Interrupt PORTD Interrupt routine.
    170            * @param  None
    171            * @retval None
    172            */

   \                                 In section .far_func.text, align 1
    173          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    174          {
    175            /* In order to detect unexpected events during development,
    176               it is recommended to set a breakpoint on the following instruction.
    177            */
    178          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80                    IRET
    179          
    180          /**
    181            * @brief External Interrupt PORTE Interrupt routine.
    182            * @param  None
    183            * @retval None
    184            */

   \                                 In section .far_func.text, align 1
    185          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    186          {
    187            /* In order to detect unexpected events during development,
    188               it is recommended to set a breakpoint on the following instruction.
    189            */
    190          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80                    IRET
    191          
    192          #ifdef STM8S903
    193          /**
    194            * @brief External Interrupt PORTF Interrupt routine.
    195            * @param  None
    196            * @retval None
    197            */
    198           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    199           {
    200            /* In order to detect unexpected events during development,
    201               it is recommended to set a breakpoint on the following instruction.
    202            */
    203           }
    204          #endif /*STM8S903*/
    205          
    206          #if defined (STM8S208) || defined (STM8AF52Ax)
    207          /**
    208            * @brief CAN RX Interrupt routine.
    209            * @param  None
    210            * @retval None
    211            */
    212           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    213           {
    214            /* In order to detect unexpected events during development,
    215               it is recommended to set a breakpoint on the following instruction.
    216            */
    217           }
    218          
    219          /**
    220            * @brief CAN TX Interrupt routine.
    221            * @param  None
    222            * @retval None
    223            */
    224           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    225           {
    226            /* In order to detect unexpected events during development,
    227               it is recommended to set a breakpoint on the following instruction.
    228            */
    229           }
    230          #endif /*STM8S208 || STM8AF52Ax */
    231          
    232          /**
    233            * @brief SPI Interrupt routine.
    234            * @param  None
    235            * @retval None
    236            */

   \                                 In section .far_func.text, align 1
    237          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    238          {
    239            /* In order to detect unexpected events during development,
    240               it is recommended to set a breakpoint on the following instruction.
    241            */
    242          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80                    IRET
    243          
    244          /**
    245            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    246            * @param  None
    247            * @retval None
    248            */

   \                                 In section .far_func.text, align 1
    249          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    250          {
    251            /* In order to detect unexpected events during development,
    252               it is recommended to set a breakpoint on the following instruction.
    253            */
    254          }
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 80                    IRET
    255          
    256          /**
    257            * @brief Timer1 Capture/Compare Interrupt routine.
    258            * @param  None
    259            * @retval None
    260            */

   \                                 In section .far_func.text, align 1
    261          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    262          {
    263            /* In order to detect unexpected events during development,
    264               it is recommended to set a breakpoint on the following instruction.
    265            */
    266          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80                    IRET
    267          
    268          #ifdef STM8S903
    269          /**
    270            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    271            * @param  None
    272            * @retval None
    273            */
    274           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    275           {
    276            /* In order to detect unexpected events during development,
    277               it is recommended to set a breakpoint on the following instruction.
    278            */
    279           }
    280          
    281          /**
    282            * @brief Timer5 Capture/Compare Interrupt routine.
    283            * @param  None
    284            * @retval None
    285            */
    286           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    287           {
    288            /* In order to detect unexpected events during development,
    289               it is recommended to set a breakpoint on the following instruction.
    290            */
    291           }
    292          
    293          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    294          /**
    295            * @brief Timer2 Update/Overflow/Break Interrupt routine.
    296            * @param  None
    297            * @retval None
    298            */

   \                                 In section .far_func.text, align 1
    299           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    300           {
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    301            /* In order to detect unexpected events during development,
    302               it is recommended to set a breakpoint on the following instruction.
    303            */
    304           timer2++;
   \   00000E CE0000                LDW       X, L:timer2
   \   000011 5C                    INCW      X
   \   000012 CF0000                LDW       L:timer2, X
    305           timer1++;
   \   000015 CE0000                LDW       X, L:timer1
   \   000018 5C                    INCW      X
   \   000019 CF0000                LDW       L:timer1, X
    306           timeout--;
   \   00001C C60000                LD        A, L:timeout
   \   00001F 4A                    DEC       A
   \   000020 C70000                LD        L:timeout, A
    307            if (timeout<=0) timeout=0;
   \   000023 C60000                LD        A, L:timeout
   \   000026 2604                  JRNE      L:??TIM2_UPD_OVF_BRK_IRQHandler_0
   \   000028 725F0000              CLR       L:timeout
    308          
    309           //ADC1_Cmd (ENABLE); //Start convert
    310           TIM2_ClearITPendingBit(TIM2_IT_UPDATE);
   \                     ??TIM2_UPD_OVF_BRK_IRQHandler_0:
   \   00002C A601                  LD        A, #0x1
   \   00002E 8D000000              CALLF     TIM2_ClearITPendingBit
    311          
    312           }
   \   000032 8D000000              CALLF     L:?pop_l1
   \   000036 8D000000              CALLF     L:?pop_l0
   \   00003A 80                    IRET
    313          
    314          /**
    315            * @brief Timer2 Capture/Compare Interrupt routine.
    316            * @param  None
    317            * @retval None
    318            */

   \                                 In section .far_func.text, align 1
    319           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    320           {
    321            /* In order to detect unexpected events during development,
    322               it is recommended to set a breakpoint on the following instruction.
    323            */
    324           }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80                    IRET
    325          #endif /*STM8S903*/
    326          
    327          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    328              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    329          /**
    330            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    331            * @param  None
    332            * @retval None
    333            */

   \                                 In section .far_func.text, align 1
    334           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    335           {
   \                     TIM3_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_17:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    336            /* In order to detect unexpected events during development,
    337               it is recommended to set a breakpoint on the following instruction.
    338            */
    339          
    340          
    341             GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \   00000E A601                  LD        A, #0x1
   \   000010 AE500F                LDW       X, #0x500f
   \   000013 8D000000              CALLF     GPIO_WriteReverse
    342             timer3++;
   \   000017 CE0000                LDW       X, L:timer3
   \   00001A 5C                    INCW      X
   \   00001B CF0000                LDW       L:timer3, X
    343             seconds++;
   \   00001E C60000                LD        A, L:seconds
   \   000021 4C                    INC       A
   \   000022 C70000                LD        L:seconds, A
    344              if (seconds >59)
   \   000025 C60000                LD        A, L:seconds
   \   000028 A13C                  CP        A, #0x3c
   \   00002A 250B                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_0
    345              {
    346                seconds=0;
   \   00002C 725F0000              CLR       L:seconds
    347                minutes++;
   \   000030 C60000                LD        A, L:minutes
   \   000033 4C                    INC       A
   \   000034 C70000                LD        L:minutes, A
    348              }
    349              if (minutes > 59)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_0:
   \   000037 C60000                LD        A, L:minutes
   \   00003A A13C                  CP        A, #0x3c
   \   00003C 2516                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
    350              {
    351                minutes=0;
   \   00003E 725F0000              CLR       L:minutes
    352                hours++;
   \   000042 C60000                LD        A, L:hours
   \   000045 4C                    INC       A
   \   000046 C70000                LD        L:hours, A
    353                if(hours > 23) hours=0;
   \   000049 C60000                LD        A, L:hours
   \   00004C A118                  CP        A, #0x18
   \   00004E 2504                  JRC       L:??TIM3_UPD_OVF_BRK_IRQHandler_1
   \   000050 725F0000              CLR       L:hours
    354              }
    355          
    356              Time_Display=TRUE;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_1:
   \   000054 35010000              MOV       L:Time_Display, #0x1
    357          
    358                //Check for Alarm
    359                  if (status.daily==1)
   \   000058 CE0000                LDW       X, L:status
   \   00005B 9F                    LD        A, XL
   \   00005C A504                  BCP       A, #0x4
   \   00005E 2748                  JREQ      L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    360                  {
    361                u16 time_now=hours*60+minutes;
                           ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \   000060 C60000                LD        A, L:hours
   \   000063 905F                  CLRW      Y
   \   000065 9097                  LD        YL, A
   \   000067 AE003C                LDW       X, #0x3c
   \   00006A BF00                  LDW       S:?w0, X
   \   00006C 93                    LDW       X, Y
   \   00006D 8D000000              CALLF     L:?mul16_x_x_w0
   \   000071 C60000                LD        A, L:minutes
   \   000074 9097                  LD        YL, A
   \   000076 90BF00                LDW       S:?w0, Y
   \   000079 72BB0000              ADDW      X, S:?w0
   \   00007D BF00                  LDW       S:?w0, X
    362                status.on=0;
   \   00007F CE0000                LDW       X, L:status
   \   000082 01                    RRWA      X, A
   \   000083 A4FE                  AND       A, #0xfe
   \   000085 02                    RLWA      X, A
   \   000086 CF0000                LDW       L:status, X
    363                     u16 time=time_on;
   \   000089 CE0000                LDW       X, L:time_on
    364                     do
    365                    {
    366                       if(time==time_now)
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_3:
   \   00008C B300                  CPW       X, S:?w0
   \   00008E 260C                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_4
    367                       {
    368                         status.on=1;
   \   000090 CE0000                LDW       X, L:status
   \   000093 01                    RRWA      X, A
   \   000094 AA01                  OR        A, #0x1
   \   000096 02                    RLWA      X, A
   \   000097 CF0000                LDW       L:status, X
    369                          break ;
   \   00009A 200C                  JRA       L:??TIM3_UPD_OVF_BRK_IRQHandler_2
    370                       }
    371                        time++;
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_4:
   \   00009C 5C                    INCW      X
    372                         if( time==1441) time=0;
   \   00009D A305A1                CPW       X, #0x5a1
   \   0000A0 2601                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_5
   \   0000A2 5F                    CLRW      X
    373                    } while(!(time==time_off));
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_5:
   \   0000A3 C30000                CPW       X, L:time_off
   \   0000A6 26E4                  JRNE      L:??TIM3_UPD_OVF_BRK_IRQHandler_3
    374                   };
    375          
    376          
    377          
    378          
    379          
    380          
    381             TIM3_ClearITPendingBit(TIM3_IT_UPDATE);
   \                     ??TIM3_UPD_OVF_BRK_IRQHandler_2:
   \   0000A8 A601                  LD        A, #0x1
   \   0000AA 8D000000              CALLF     TIM3_ClearITPendingBit
    382           }
   \   0000AE 8D000000              CALLF     L:?pop_l1
   \   0000B2 8D000000              CALLF     L:?pop_l0
   \   0000B6 80                    IRET
    383          
    384          /**
    385            * @brief Timer3 Capture/Compare Interrupt routine.
    386            * @param  None
    387            * @retval None
    388            */

   \                                 In section .far_func.text, align 1
    389           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    390           {
    391            /* In order to detect unexpected events during development,
    392               it is recommended to set a breakpoint on the following instruction.
    393            */
    394           }
   \                     TIM3_CAP_COM_IRQHandler:
   \                     _interrupt_18:
   \   000000 80                    IRET
    395          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    396          
    397          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    398              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    399          /**
    400            * @brief UART1 TX Interrupt routine.
    401            * @param  None
    402            * @retval None
    403            */
    404           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    405           {
    406              /* In order to detect unexpected events during development,
    407                 it is recommended to set a breakpoint on the following instruction.
    408              */
    409           }
    410          
    411          /**
    412            * @brief UART1 RX Interrupt routine.
    413            * @param  None
    414            * @retval None
    415            */
    416           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    417           {
    418              /* In order to detect unexpected events during development,
    419                 it is recommended to set a breakpoint on the following instruction.
    420              */
    421           }
    422          #endif /*STM8S208 or STM8S207 or STM8S103 or STM8S903 or STM8AF62Ax or STM8AF52Ax */
    423          
    424          /**
    425            * @brief I2C Interrupt routine.
    426            * @param  None
    427            * @retval None
    428            */

   \                                 In section .far_func.text, align 1
    429          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    430          {
    431            /* In order to detect unexpected events during development,
    432               it is recommended to set a breakpoint on the following instruction.
    433            */
    434          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80                    IRET
    435          
    436          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    437          /**
    438            * @brief    TX interrupt routine.
    439            * @param  None
    440            * @retval None
    441            */

   \                                 In section .far_func.text, align 1
    442           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    443           {
    444              /* In order to detect unexpected events during development,
    445                 it is recommended to set a breakpoint on the following instruction.
    446              */
    447           }
   \                     UART2_TX_IRQHandler:
   \                     _interrupt_22:
   \   000000 80                    IRET
    448          
    449          /**
    450            * @brief UART2 RX interrupt routine.
    451            * @param  None
    452            * @retval None
    453            */

   \                                 In section .far_func.text, align 1
    454           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    455           {
   \                     UART2_RX_IRQHandler:
   \                     _interrupt_23:
   \   000000 8A                    PUSH      CC
   \   000001 84                    POP       A
   \   000002 A4BF                  AND       A, #0xbf
   \   000004 88                    PUSH      A
   \   000005 86                    POP       CC
   \   000006 8D000000              CALLF     L:?push_l0
   \   00000A 8D000000              CALLF     L:?push_l1
    456              /* In order to detect unexpected events during development,
    457                 it is recommended to set a breakpoint on the following instruction.
    458              */
    459             rx_data=UART2_ReceiveData8();
   \   00000E 8D000000              CALLF     UART2_ReceiveData8
   \   000012 C70000                LD        L:rx_data, A
    460             UART2_ClearITPendingBit(UART2_IT_RXNE);
   \   000015 AE0255                LDW       X, #0x255
   \   000018 8D000000              CALLF     UART2_ClearITPendingBit
    461          
    462           }
   \   00001C 8D000000              CALLF     L:?pop_l1
   \   000020 8D000000              CALLF     L:?pop_l0
   \   000024 80                    IRET
    463          #endif /* STM8S105 or STM8AF626x */
    464          
    465          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    466          /**
    467            * @brief UART3 TX interrupt routine.
    468            * @param  None
    469            * @retval None
    470            */
    471           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    472           {
    473              /* In order to detect unexpected events during development,
    474                 it is recommended to set a breakpoint on the following instruction.
    475              */
    476           }
    477          
    478          /**
    479            * @brief UART3 RX interrupt routine.
    480            * @param  None
    481            * @retval None
    482            */
    483           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    484           {
    485              /* In order to detect unexpected events during development,
    486                 it is recommended to set a breakpoint on the following instruction.
    487              */
    488           }
    489          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    490          
    491          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    492          /**
    493            * @brief ADC2 interrupt routine.
    494            * @param  None
    495            * @retval None
    496            */
    497           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    498           {
    499              /* In order to detect unexpected events during development,
    500                 it is recommended to set a breakpoint on the following instruction.
    501              */
    502           }
    503          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    504          /**
    505            * @brief ADC1 interrupt routine.
    506            * @par Parameters:
    507            * None
    508            * @retval
    509            * None
    510            */

   \                                 In section .far_func.text, align 1
    511           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    512           {
    513              /* In order to detect unexpected events during development,
    514                 it is recommended to set a breakpoint on the following instruction.
    515              */
    516             //ADC1_Cmd (DISABLE);
    517              /*
    518             ADC1_ClearFlag(ADC1_FLAG_EOC);
    519             adcdata = ADC1_GetConversionValue();
    520             measure[index++]=adcdata;
    521                if (index==data_size)
    522                {
    523                  measure[index]=0;
    524                  index=0;
    525                }
    526             ADC1_ClearITPendingBit(ADC1_IT_EOC);
    527               */
    528              //ADC1_Cmd (ENABLE);
    529              //ADC1_Cmd (ENABLE);  //Second Start conversion
    530           }
   \                     ADC1_IRQHandler:
   \                     _interrupt_24:
   \   000000 80                    IRET
    531          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    532          
    533          #ifdef STM8S903
    534          /**
    535            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    536            * @param  None
    537            * @retval None
    538            */
    539          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    540           {
    541            /* In order to detect unexpected events during development,
    542               it is recommended to set a breakpoint on the following instruction.
    543            */
    544           }
    545          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    546          /**
    547            * @brief Timer4 Update/Overflow Interrupt routine.
    548            * @param  None
    549            * @retval None
    550            */

   \                                 In section .far_func.text, align 1
    551           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    552           {
    553            /* In order to detect unexpected events during development,
    554               it is recommended to set a breakpoint on the following instruction.
    555            */
    556           }
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 80                    IRET
    557          #endif /*STM8S903*/
    558          
    559          /**
    560            * @brief Eeprom EEC Interrupt routine.
    561            * @param  None
    562            * @retval None
    563            */

   \                                 In section .far_func.text, align 1
    564          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    565          {
    566            /* In order to detect unexpected events during development,
    567               it is recommended to set a breakpoint on the following instruction.
    568            */
    569          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80                    IRET
    570          
    571          /**
    572            * @}
    573            */
    574          
    575          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     index                             1
     TRAP_IRQHandler                   1
     TLI_IRQHandler                    1
     AWU_IRQHandler                    1
     CLK_IRQHandler                    1
     EXTI_PORTA_IRQHandler             1
     EXTI_PORTB_IRQHandler             1
     EXTI_PORTC_IRQHandler             1
     EXTI_PORTD_IRQHandler             1
     EXTI_PORTE_IRQHandler             1
     SPI_IRQHandler                    1
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       1
     TIM1_CAP_COM_IRQHandler           1
     TIM2_UPD_OVF_BRK_IRQHandler      59
     TIM2_CAP_COM_IRQHandler           1
     TIM3_UPD_OVF_BRK_IRQHandler     183
     TIM3_CAP_COM_IRQHandler           1
     I2C_IRQHandler                    1
     UART2_TX_IRQHandler               1
     UART2_RX_IRQHandler              37
     ADC1_IRQHandler                   1
     TIM4_UPD_OVF_IRQHandler           1
     EEPROM_EEC_IRQHandler             1

 
 298 bytes in section .far_func.text
   1 byte  in section .near.bss
 
 298 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: 1
