###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             19/Jul/2013  18:07:48 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          
     14          /* Includes ------------------------------------------------------------------*/
     15          #include "stm8s.h"
     16          #include "stdio.h"
     17          #include "string.h"
     18          /* Private defines -----------------------------------------------------------*/
     19          
     20          /* ================ LCD ======================= */
     21          
     22          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     23          #define LCD_PORT (GPIOC)
     24          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     25          #define DATA4 GPIO_PIN_4
     26          #define DATA5 GPIO_PIN_5
     27          #define DATA6 GPIO_PIN_6
     28          #define DATA7 GPIO_PIN_7
     29          #define EN  GPIO_PIN_3
     30          #define RW  GPIO_PIN_1
     31          #define RS  GPIO_PIN_2
     32          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     33          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     34          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     35          
     36          #define key_ok    GPIO_PIN_4
     37          #define key_plus  GPIO_PIN_1
     38          #define key_minus GPIO_PIN_2
     39          
     40          #ifdef __GNUC__
     41            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     42               set to 'Yes') calls __io_putchar() */
     43            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     44          #else
     45            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     46          #endif /* __GNUC__ */
     47          
     48          
     49          
     50          
     51          #define SpecialSymbol 0x1b //Esc to start message
     52          
     53          
     54          
     55          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     56          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     57          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     58          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     59          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     60          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
     61          #define data_size 20

   \                                 In section .near.bss, align 1
     62          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     63          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     64          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     65          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     66          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     67          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     68          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     69          u8 mounts;
   \                     mounts:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     70          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     71          u8 error;
   \                     error:
   \   000000                       DS8 1
     72          //u8 index=0;

   \                                 In section .near.bss, align 1
     73          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
     74          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
     75          
     76          
     77          
     78          
     79          
     80          
     81          
     82          
     83          /* Private function prototypes -----------------------------------------------*/
     84          void InitHardware();
     85          void GpioConfiguration();
     86          void InitClk();
     87          void InitAdc();
     88          void InitI2C();
     89          bool ReadDS1307();
     90          void InitUart();
     91          void InitLcd();
     92          void InitDelayTimer();
     93          void Delay1( u16 Delay);
     94          void Delay2( u16 Delay);
     95          void LCDInstrNibble (u8 Instr);
     96          void LCDInstr(u8 Instr);
     97          void LCDDataOut(u8 data);
     98          void LCD_Busy();
     99          void PulseEnable();
    100          void SendData();
    101          void SendChar(u8 Char);
    102          void Send_Hello();
    103          bool Set_Clock();
    104          bool key_ok_on();
    105          bool key_plus_on();
    106          bool key_minus_on();
    107          bool Init_DS1307(void);
    108          bool Check_DS1307(void);
    109          bool I2C_Start(void);
    110          bool I2C_WA(u8 address);
    111          bool I2C_WD(u8 data);
    112          bool I2C_RA(u8 address);
    113          bool Set_DS1307( u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds);
    114          u8 convert_tobcd(u8 data);
    115          u8 I2C_RD(void);
    116          
    117          u16  Average();
    118          
    119          
    120          /* Private functions ---------------------------------------------------------*/
    121          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1, keep-with-next
    122          void main(void)
    123          {
    124              /*High speed internal clock prescaler: 1*/
    125              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    126          
    127              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    128              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    129              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    130              InitUart();
   \   00000C 8D000000              CALLF     InitUart
    131              enableInterrupts();
   \   000010 9A                    RIM
    132              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000011 8D000000              CALLF     ?Subroutine10
    133              InitLcd();
   \                     ??CrossCallReturnLabel_22:
   \   000015 8D000000              CALLF     InitLcd
    134              InitAdc();
   \   000019 8D000000              CALLF     InitAdc
    135              InitI2C();
   \   00001D 8D000000              CALLF     InitI2C
    136              //if (!Init_DS1307())printf("E1:%d",error);
    137              Send_Hello();
   \   000021 8D000000              CALLF     Send_Hello
    138              if (!Check_DS1307())
   \   000025 8D000000              CALLF     Check_DS1307
   \   000029 A100                  CP        A, #0x0
   \   00002B 263F                  JRNE      L:??main_0
    139              {
    140               line_lcd=0;
   \   00002D 725F0000              CLR       L:line_lcd
    141               printf("\nSetClock");
   \   000031 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000034 8D000000              CALLF     printf
    142                Set_Clock();
   \   000038 8D000000              CALLF     Set_Clock
   \   00003C 202E                  JRA       L:??main_0
    143          
    144              }
    145          
    146          
    147               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    148          
    149               // Working fuction
    150              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    151          
    152              while(1)
    153              {
    154                ADC1_Cmd (ENABLE);
    155          
    156                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    157                   Delay2(30000);
    158                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    159                   Delay2(30000);
    160          
    161                line_lcd=0;
    162               if (!ReadDS1307())
    163               {
    164                 printf("\n E2:%d",error);
    165                  //restart i2c
    166                // Reset the CPU: Enable the watchdog and wait until it expires
    167                 IWDG->KR = IWDG_KEY_ENABLE;
    168                 while ( 1 );    // Wait until reset occurs from IWDG
    169          
    170          
    171               }
    172                 else  printf("\n      ");
   \                     ??main_1:
   \   00003E AE0000                LDW       X, #`?<Constant "\\n      ">`
   \   000041 8D000000              CALLF     printf
    173               line_lcd=1;
   \   000045 8D000000              CALLF     ?Subroutine12
    174               printf("\n%02x:%02x:%02x",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_30:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:minutes
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F C60000                LD        A, L:hours
   \   000052 97                    LD        XL, A
   \   000053 89                    PUSHW     X
   \   000054 AE0000                LDW       X, #`?<Constant "\\n%02x:%02x:%02x">`
   \   000057 8D000000              CALLF     printf
   \   00005B 5B06                  ADD       SP, #0x6
    175               //line_lcd=2;
    176               //printf("\n Just Test:%X", timer2);
    177                if (rx_data==SpecialSymbol) SendData();
   \   00005D C60000                LD        A, L:rx_data
   \   000060 A11B                  CP        A, #0x1b
   \   000062 2604                  JRNE      L:??main_2
   \   000064 8D000000              CALLF     SendData
    178                //SendData();
    179          
    180                if (key_ok_on())
   \                     ??main_2:
   \   000068 8D000000              CALLF     key_ok_on
   \                     ??main_0:
   \   00006C A601                  LD        A, #0x1
   \   00006E 8D000000              CALLF     ADC1_Cmd
   \   000072 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_32:
   \   000076 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_31:
   \   00007A 725F0000              CLR       L:line_lcd
   \   00007E 8D000000              CALLF     ReadDS1307
   \   000082 A100                  CP        A, #0x0
   \   000084 26B8                  JRNE      L:??main_1
   \   000086 C60000                LD        A, L:error
   \   000089 5F                    CLRW      X
   \   00008A 97                    LD        XL, A
   \   00008B 89                    PUSHW     X
   \   00008C AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00008F 8D000000              CALLF     printf
   \   000093 5B02                  ADD       SP, #0x2
   \   000095 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_3:
   \   000099 20FE                  JRA       L:??main_3
    181                {
    182          
    183                }
    184          
    185          
    186              }
    187          
    188          
    189          
    190          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine14:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE7530                LDW       X, #0x7530
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine12:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    191          

   \                                 In section .far_func.text, align 1, keep-with-next
    192          void InitI2C(void)
    193          {
    194             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    195             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    196             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    197          }
    198          

   \                                 In section .far_func.text, align 1, keep-with-next
    199          bool I2C_Start(void)
    200          {
    201             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    202                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    203              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_59:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    204                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    205                  {
    206                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    207                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    208                  }
    209                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    210          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    211          

   \                                 In section .far_func.text, align 1, keep-with-next
    212          bool I2C_WA(u8 address)
    213          {
    214            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    215                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    216                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_58:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    217                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    218                   {
    219                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    220                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    221                   }
    222                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    223          }
    224          

   \                                 In section .far_func.text, align 1, keep-with-next
    225          bool I2C_RA(u8 address)
    226          {
    227            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    228                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    229                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_60:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    230                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    231                   {
    232                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    233                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    234                   }
    235                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    236          }
    237          
    238          

   \                                 In section .far_func.text, align 1, keep-with-next
    239          bool I2C_WD(u8 data)
    240          {
    241           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    242             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    243             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_57:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    244              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    245              {
    246                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    247                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    248              }
    249               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    250          }
    251          

   \                                 In section .far_func.text, align 1, keep-with-next
    252          u8 I2C_RD(void)
    253          {
    254           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    255            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    256           //while((!(I2C->SR1 & 0x40))&&timeout);
    257           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    258           {
    259             error=4;
   \   000019 35040000              MOV       L:error, #0x4
    260             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    261           }
    262           u8 data=I2C_ReceiveData();
    263           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    264          }
    265          
    266          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_WD
   \   000005 A100                  CP        A, #0x0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
    267          bool Init_DS1307(void)
    268          {
    269             // Test DS1307
    270              error=0;
   \                     Init_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine21
    271              if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_52:
   \   000004 2602                  JRNE      L:??Init_DS1307_0
   \                     ??Init_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    272              if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Init_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_56:
   \   00000C 27F8                  JREQ      L:??Init_DS1307_1
    273              if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_44:
   \   000012 27F2                  JREQ      L:??Init_DS1307_1
    274              if(!I2C_WD(0x00)) return FALSE;
   \   000014 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_45:
   \   000018 27EC                  JREQ      L:??Init_DS1307_1
    275              I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine28
    276          
    277              // timeout=100;  error=4;
    278              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    279              //    if (!timeout)return FALSE ;
    280               return TRUE;
   \                     ??CrossCallReturnLabel_74:
   \   00001E A601                  LD        A, #0x1
   \   000020 87                    RETF
    281          }
    282          

   \                                 In section .far_func.text, align 1, keep-with-next
    283          bool  ReadDS1307(void)
    284          {
    285          
    286                error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine21
    287                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_51:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    288                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_55:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    289                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_43:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    290                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine15
    291                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_34:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    292                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    293                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine17
    294                 seconds = I2C_RD();
   \                     ??CrossCallReturnLabel_38:
   \   000028 C70000                LD        L:seconds, A
    295                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine17
    296                 minutes = I2C_RD();
   \                     ??CrossCallReturnLabel_37:
   \   00002F C70000                LD        L:minutes, A
    297                //Last read byte by I2C slave
    298                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000032 8D000000              CALLF     ?Subroutine16
    299                 I2C_GenerateSTOP(ENABLE);
    300                 hours = I2C_RD();
   \                     ??CrossCallReturnLabel_35:
   \   000036 C70000                LD        L:hours, A
    301                 return TRUE;
   \   000039 A601                  LD        A, #0x1
   \   00003B 87                    RETF
    302          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_76:
   \   000009 AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_75:
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    303          

   \                                 In section .far_func.text, align 1, keep-with-next
    304          bool Check_DS1307(void)
    305          {
    306             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    307                 error=0;
   \                     Check_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine21
    308                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_50:
   \   000004 2602                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    309                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_54:
   \   00000C 27F8                  JREQ      L:??Check_DS1307_1
    310                 if(!I2C_WD(0x08)) return FALSE;
   \   00000E A608                  LD        A, #0x8
   \   000010 8D000000              CALLF     I2C_WD
   \   000014 A100                  CP        A, #0x0
   \   000016 27EE                  JREQ      L:??Check_DS1307_1
    311                 I2C_GenerateSTOP(ENABLE);
   \   000018 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_33:
   \   00001C 27E8                  JREQ      L:??Check_DS1307_1
    312                  //Last read byte by I2C slave
    313                 if (!I2C_Start()) return FALSE;
    314                 if(!I2C_RA(0xD0))return FALSE;
   \   00001E A6D0                  LD        A, #0xd0
   \   000020 8D000000              CALLF     I2C_RA
   \   000024 A100                  CP        A, #0x0
   \   000026 27DE                  JREQ      L:??Check_DS1307_1
    315                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000028 8D000000              CALLF     ?Subroutine16
    316                 I2C_GenerateSTOP(ENABLE);
   \                     ??CrossCallReturnLabel_36:
   \   00002C A1AA                  CP        A, #0xaa
   \   00002E 26D6                  JRNE      L:??Check_DS1307_1
    317                 u8 data = I2C_RD();
    318                 if (data != 0xAA) return FALSE;
    319                 else return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 87                    RETF
    320          }
    321          

   \                                 In section .far_func.text, align 1, keep-with-next
    322          bool Set_DS1307( u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    323          {
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 3B0000                PUSH      S:?b12
   \   000007 B700                  LD        S:?b8, A
   \   000009 450000                MOV       S:?b9, S:?b0
   \   00000C 450000                MOV       S:?b10, S:?b1
   \   00000F 450000                MOV       S:?b11, S:?b2
   \   000012 450000                MOV       S:?b12, S:?b3
    324                 // convert hex or decimal to bcd format
    325          
    326          
    327                 error=0;
   \   000015 8D000000              CALLF     ?Subroutine21
    328                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_49:
   \   000019 2603                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   00001B 4F                    CLR       A
   \   00001C 203A                  JRA       L:??Set_DS1307_2
    329                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   00001E 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_53:
   \   000022 27F7                  JREQ      L:??Set_DS1307_1
    330                 if(!I2C_WD(0x00)) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_42:
   \   000028 27F1                  JREQ      L:??Set_DS1307_1
    331                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   00002A B600                  LD        A, S:?b12
   \   00002C 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_61:
   \   000030 27E9                  JREQ      L:??Set_DS1307_1
    332                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   000032 B600                  LD        A, S:?b11
   \   000034 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_62:
   \   000038 27E1                  JREQ      L:??Set_DS1307_1
    333                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   00003A B600                  LD        A, S:?b10
   \   00003C 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_63:
   \   000040 27D9                  JREQ      L:??Set_DS1307_1
    334                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000042 B600                  LD        A, S:?b9
   \   000044 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_64:
   \   000048 27D1                  JREQ      L:??Set_DS1307_1
    335                 if(!I2C_WD(convert_tobcd(year))) return FALSE;
   \   00004A B600                  LD        A, S:?b8
   \   00004C 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_65:
   \   000050 27C9                  JREQ      L:??Set_DS1307_1
    336                 I2C_GenerateSTOP(ENABLE);
   \   000052 8D000000              CALLF     ?Subroutine28
    337          
    338          
    339             return TRUE;
   \                     ??CrossCallReturnLabel_77:
   \   000056 A601                  LD        A, #0x1
   \                     ??Set_DS1307_2:
   \   000058 320000                POP       S:?b12
   \   00005B AC000000              JPF       L:?epilogue_l2
    340          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    341          
    342          

   \                                 In section .far_func.text, align 1, keep-with-next
    343          u8 convert_tobcd(u8 data)
    344          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    345             u8 data_second_decimal=data/10;
    346             u8 data_first_decimal=data - 10*data_second_decimal;
    347             data=16*data_second_decimal + data_first_decimal;
    348            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    349          }
    350          
    351          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    352          bool Set_Clock()
    353          {
    354             //Clear Display
    355             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine11
    356             Delay1(1000);
    357          
    358             line_lcd=0;
   \                     ??CrossCallReturnLabel_26:
   \   000004 725F0000              CLR       L:line_lcd
    359             printf("\nSeconds:");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   00000B 8D000000              CALLF     printf
    360          
    361              do
    362              {
    363                line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000F 8D000000              CALLF     ?Subroutine12
    364               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_27:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:minutes
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 C60000                LD        A, L:hours
   \   00001C 97                    LD        XL, A
   \   00001D 89                    PUSHW     X
   \   00001E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000021 8D000000              CALLF     printf
   \   000025 5B06                  ADD       SP, #0x6
    365                 if (key_plus_on()) seconds ++;
   \   000027 8D000000              CALLF     key_plus_on
   \   00002B A100                  CP        A, #0x0
   \   00002D 2707                  JREQ      L:??Set_Clock_1
   \   00002F C60000                LD        A, L:seconds
   \   000032 4C                    INC       A
   \   000033 C70000                LD        L:seconds, A
    366                  if (seconds >=60) seconds = 0;
   \                     ??Set_Clock_1:
   \   000036 C60000                LD        A, L:seconds
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 2504                  JRC       L:??Set_Clock_2
   \   00003D 725F0000              CLR       L:seconds
    367                 if (key_minus_on()) seconds --;
   \                     ??Set_Clock_2:
   \   000041 8D000000              CALLF     key_minus_on
   \   000045 A100                  CP        A, #0x0
   \   000047 2707                  JREQ      L:??Set_Clock_3
   \   000049 C60000                LD        A, L:seconds
   \   00004C 4A                    DEC       A
   \   00004D C70000                LD        L:seconds, A
    368                  if (seconds >=255) seconds=59;
   \                     ??Set_Clock_3:
   \   000050 C60000                LD        A, L:seconds
   \   000053 A1FF                  CP        A, #0xff
   \   000055 2604                  JRNE      L:??Set_Clock_4
   \   000057 353B0000              MOV       L:seconds, #0x3b
    369          
    370              } while (!key_ok_on());
   \                     ??Set_Clock_4:
   \   00005B 8D000000              CALLF     key_ok_on
   \   00005F A100                  CP        A, #0x0
   \   000061 27AC                  JREQ      L:??Set_Clock_0
    371          
    372                 line_lcd=0;
   \   000063 725F0000              CLR       L:line_lcd
    373               printf("\nMinutes:");
   \   000067 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   00006A 8D000000              CALLF     printf
    374                do
    375              {
    376                line_lcd=1;
   \                     ??Set_Clock_5:
   \   00006E 8D000000              CALLF     ?Subroutine12
    377               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_28:
   \   000072 89                    PUSHW     X
   \   000073 C60000                LD        A, L:minutes
   \   000076 97                    LD        XL, A
   \   000077 89                    PUSHW     X
   \   000078 C60000                LD        A, L:hours
   \   00007B 97                    LD        XL, A
   \   00007C 89                    PUSHW     X
   \   00007D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000080 8D000000              CALLF     printf
   \   000084 5B06                  ADD       SP, #0x6
    378                 if (key_plus_on()) minutes ++;
   \   000086 8D000000              CALLF     key_plus_on
   \   00008A A100                  CP        A, #0x0
   \   00008C 2707                  JREQ      L:??Set_Clock_6
   \   00008E C60000                LD        A, L:minutes
   \   000091 4C                    INC       A
   \   000092 C70000                LD        L:minutes, A
    379                  if (minutes >=60) minutes = 0;
   \                     ??Set_Clock_6:
   \   000095 C60000                LD        A, L:minutes
   \   000098 A13C                  CP        A, #0x3c
   \   00009A 2504                  JRC       L:??Set_Clock_7
   \   00009C 725F0000              CLR       L:minutes
    380                 if (key_minus_on()) minutes --;
   \                     ??Set_Clock_7:
   \   0000A0 8D000000              CALLF     key_minus_on
   \   0000A4 A100                  CP        A, #0x0
   \   0000A6 2707                  JREQ      L:??Set_Clock_8
   \   0000A8 C60000                LD        A, L:minutes
   \   0000AB 4A                    DEC       A
   \   0000AC C70000                LD        L:minutes, A
    381                  if (minutes >=255) minutes=59;
   \                     ??Set_Clock_8:
   \   0000AF C60000                LD        A, L:minutes
   \   0000B2 A1FF                  CP        A, #0xff
   \   0000B4 2604                  JRNE      L:??Set_Clock_9
   \   0000B6 353B0000              MOV       L:minutes, #0x3b
    382          
    383              } while (!key_ok_on());
   \                     ??Set_Clock_9:
   \   0000BA 8D000000              CALLF     key_ok_on
   \   0000BE A100                  CP        A, #0x0
   \   0000C0 27AC                  JREQ      L:??Set_Clock_5
    384          
    385              //Clear Display
    386              LCDInstr(0x01);
   \   0000C2 8D000000              CALLF     ?Subroutine11
    387              Delay1(1000);
    388              line_lcd=0;
   \                     ??CrossCallReturnLabel_25:
   \   0000C6 725F0000              CLR       L:line_lcd
    389              printf("\nHours:");
   \   0000CA AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000CD 8D000000              CALLF     printf
    390                do
    391              {
    392                line_lcd=1;
   \                     ??Set_Clock_10:
   \   0000D1 8D000000              CALLF     ?Subroutine12
    393               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_29:
   \   0000D5 89                    PUSHW     X
   \   0000D6 C60000                LD        A, L:minutes
   \   0000D9 97                    LD        XL, A
   \   0000DA 89                    PUSHW     X
   \   0000DB C60000                LD        A, L:hours
   \   0000DE 97                    LD        XL, A
   \   0000DF 89                    PUSHW     X
   \   0000E0 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000E3 8D000000              CALLF     printf
   \   0000E7 5B06                  ADD       SP, #0x6
    394                 if (key_plus_on()) hours ++;
   \   0000E9 8D000000              CALLF     key_plus_on
   \   0000ED A100                  CP        A, #0x0
   \   0000EF 2707                  JREQ      L:??Set_Clock_11
   \   0000F1 C60000                LD        A, L:hours
   \   0000F4 4C                    INC       A
   \   0000F5 C70000                LD        L:hours, A
    395                  if (hours >=24) hours = 0;
   \                     ??Set_Clock_11:
   \   0000F8 C60000                LD        A, L:hours
   \   0000FB A118                  CP        A, #0x18
   \   0000FD 2504                  JRC       L:??Set_Clock_12
   \   0000FF 725F0000              CLR       L:hours
    396                 if (key_minus_on()) hours --;
   \                     ??Set_Clock_12:
   \   000103 8D000000              CALLF     key_minus_on
   \   000107 A100                  CP        A, #0x0
   \   000109 2707                  JREQ      L:??Set_Clock_13
   \   00010B C60000                LD        A, L:hours
   \   00010E 4A                    DEC       A
   \   00010F C70000                LD        L:hours, A
    397                  if (hours >=255) hours =23;
   \                     ??Set_Clock_13:
   \   000112 C60000                LD        A, L:hours
   \   000115 A1FF                  CP        A, #0xff
   \   000117 2604                  JRNE      L:??Set_Clock_14
   \   000119 35170000              MOV       L:hours, #0x17
    398          
    399              } while (!key_ok_on());
   \                     ??Set_Clock_14:
   \   00011D 8D000000              CALLF     key_ok_on
   \   000121 A100                  CP        A, #0x0
   \   000123 27AC                  JREQ      L:??Set_Clock_10
    400          
    401          
    402          
    403            return TRUE;
   \   000125 A601                  LD        A, #0x1
   \   000127 87                    RETF
    404          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_70:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 AC000000              JPF       Delay1
    405          

   \                                 In section .far_func.text, align 1, keep-with-next
    406          bool key_ok_on()
    407          {
    408            //Read Key OK
    409            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 2622                  JRNE      L:??key_ok_on_0
    410             {
    411               timer2=0;  // Key must be push for timer2 time
   \   00000B 5F                    CLRW      X
   \   00000C CF0000                LDW       L:timer2, X
    412                while((timer2 < 30000) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000F CE0000                LDW       X, L:timer2
   \   000012 A37530                CPW       X, #0x7530
   \   000015 240B                  JRNC      L:??key_ok_on_2
   \   000017 AE5019                LDW       X, #0x5019
   \   00001A 8D000000              CALLF     GPIO_ReadInputData
   \   00001E A510                  BCP       A, #0x10
   \   000020 27ED                  JREQ      L:??key_ok_on_1
    413                  if (timer2>=30000) return TRUE;
   \                     ??key_ok_on_2:
   \   000022 CE0000                LDW       X, L:timer2
   \   000025 A37530                CPW       X, #0x7530
   \   000028 2503                  JRC       L:??key_ok_on_0
   \   00002A A601                  LD        A, #0x1
   \   00002C 87                    RETF
    414             }
    415          
    416            return FALSE;
   \                     ??key_ok_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    417          }
    418          

   \                                 In section .far_func.text, align 1, keep-with-next
    419           bool key_plus_on()
    420          {
    421            //Read Key OK
    422               Delay1(1000); //prevent key vibration
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine8
    423             if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     ??CrossCallReturnLabel_19:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    424               {
    425               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    426                while((timer2 < 10000) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_14:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_82:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    427                  if (timer2>=10000) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_15:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    428               }
    429          
    430            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    431          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 AE03E8                LDW       X, #0x3e8
   \   000003 8D000000              CALLF     Delay1
   \   000007 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_81:
   \   00000B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
    432          

   \                                 In section .far_func.text, align 1, keep-with-next
    433            bool key_minus_on()
    434          {
    435            //Read Key OK
    436               Delay1(1000); //prevent key vibration
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine8
    437             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     ??CrossCallReturnLabel_18:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    438               {
    439               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    440                while((timer2 < 10000) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_12:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_83:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    441                  if (timer2>=10000) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine6
   \                     ??CrossCallReturnLabel_13:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    442               }
    443          
    444            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    445          }
    446          
    447          
    448          
    449          

   \                                 In section .far_func.text, align 1, keep-with-next
    450          void GpioConfiguration()
    451          {
    452          
    453            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    454          
    455            // ADC PE6 NEW PB0
    456            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    457          
    458            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    459            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    460          
    461            //PD0 Led
    462            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     GPIO_Init
    463            //I2C
    464            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000032 35B00000              MOV       S:?b0, #0xb0
   \   000036 A610                  LD        A, #0x10
   \   000038 AE5005                LDW       X, #0x5005
   \   00003B 8D000000              CALLF     GPIO_Init
    465            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00003F 35B00000              MOV       S:?b0, #0xb0
   \   000043 A620                  LD        A, #0x20
   \   000045 AE5005                LDW       X, #0x5005
   \   000048 8D000000              CALLF     ?Subroutine18
    466            // Remap Pins pb4,pb5  sda,scl ;
    467          
    468             //Init KEY OK,PLUS,MINUS
    469            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_39:
   \   00004C A610                  LD        A, #0x10
   \   00004E AE5019                LDW       X, #0x5019
   \   000051 8D000000              CALLF     ?Subroutine18
    470            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_40:
   \   000055 A602                  LD        A, #0x2
   \   000057 AE5000                LDW       X, #0x5000
   \   00005A 8D000000              CALLF     ?Subroutine18
    471            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_41:
   \   00005E A604                  LD        A, #0x4
   \   000060 AE5000                LDW       X, #0x5000
   \   000063 AC000000              JPF       GPIO_Init
    472          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF
    473          

   \                                 In section .far_func.text, align 1, keep-with-next
    474          void InitClk()
    475          {
    476            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    477            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    478            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    479            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    480            CLK_SOURCE_HSI,       // Switch to internal timer.
    481            DISABLE,              // Disable the clock switch interrupt.
    482            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    483          
    484            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine20
    485            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_46:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine20
    486            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_47:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine20
    487            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_48:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    488          
    489          
    490          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    491          
    492          

   \                                 In section .far_func.text, align 1, keep-with-next
    493          void InitAdc()
    494          {
    495               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    496               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    497               /*
    498               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    499                          ADC1_CHANNEL_0,
    500                          ADC1_PRESSEL_FCPU_D4,
    501                           ADC1_EXTTRIG_TIM,
    502          
    503                 */
    504               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    505               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    506                                      ADC1_CHANNEL_0,
    507                                      ADC1_ALIGN_RIGHT
    508                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    509          
    510          
    511               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    512          
    513          
    514               //ADC1_Cmd (ENABLE);
    515               //ADC1->CR1 |= ADC1_CR1_ADON ;
    516               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    517               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    518          
    519          }
    520          

   \                                 In section .far_func.text, align 1, keep-with-next
    521          void InitUart()
    522          {
    523             UART2_DeInit();
   \                     InitUart:
   \   000000 8D000000              CALLF     UART2_DeInit
    524             UART2_Init((u32)9600,
    525                        UART2_WORDLENGTH_8D,
    526                        UART2_STOPBITS_1,
    527                        UART2_PARITY_NO,
    528                        UART2_SYNCMODE_CLOCK_DISABLE,
    529                        UART2_MODE_TXRX_ENABLE
    530                          );
   \   000004 350C0000              MOV       S:?b7, #0xc
   \   000008 35800000              MOV       S:?b6, #0x80
   \   00000C 3F00                  CLR       S:?b5
   \   00000E 3F00                  CLR       S:?b4
   \   000010 4F                    CLR       A
   \   000011 AE2580                LDW       X, #0x2580
   \   000014 BF00                  LDW       S:?w1, X
   \   000016 5F                    CLRW      X
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 8D000000              CALLF     UART2_Init
    531          
    532             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   \   00001D A601                  LD        A, #0x1
   \   00001F AE0255                LDW       X, #0x255
   \   000022 8D000000              CALLF     UART2_ITConfig
    533             UART2_Cmd(ENABLE);
   \   000026 A601                  LD        A, #0x1
   \   000028 AC000000              JPF       UART2_Cmd
    534          
    535            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    536          }
    537          

   \                                 In section .far_func.text, align 1, keep-with-next
    538          void SendChar( u8 Char)
    539          {
    540             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    541            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    542          }
   \   00000E 87                    RETF
    543          

   \                                 In section .far_func.text, align 1, keep-with-next
    544          void Send_Hello()
    545          {
   \                     Send_Hello:
   \   000000 3B0000                PUSH      S:?b8
    546            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine9
    547             Delay1(10);
    548             sprintf(data,"Hello");
   \                     ??CrossCallReturnLabel_21:
   \   000007 90AE0000              LDW       Y, #`?<Constant "Hello">`
   \   00000B AE0000                LDW       X, #data
   \   00000E 8D000000              CALLF     sprintf
    549              u8 i=0;
   \   000012 3F00                  CLR       S:?b8
    550            do
    551           {
    552            SendChar(data[i++]);
   \                     ??Send_Hello_0:
   \   000014 8D000000              CALLF     ?Subroutine2
    553           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_3:
   \   000018 26FA                  JRNE      L:??Send_Hello_0
    554            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??Send_Hello_1:
   \   00001A AE0040                LDW       X, #0x40
   \   00001D 8D000000              CALLF     UART2_GetFlagStatus
   \   000021 A100                  CP        A, #0x0
   \   000023 27F5                  JREQ      L:??Send_Hello_1
    555            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000025 8D000000              CALLF     ?Subroutine10
    556          
    557          
    558          
    559          }
   \                     ??CrossCallReturnLabel_23:
   \   000029 320000                POP       S:?b8
   \   00002C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteHigh
   \   000009 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_78:
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 AE000A                LDW       X, #0xa
   \   000003 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 D60000                LD        A, (L:data,X)
   \   000008 8D000000              CALLF     SendChar
   \   00000C B600                  LD        A, S:?b8
   \   00000E 4C                    INC       A
   \   00000F B700                  LD        S:?b8, A
   \   000011 5F                    CLRW      X
   \   000012 41                    EXG       A, XL
   \   000013 B600                  LD        A, S:?b8
   \   000015 724D0000              TNZ       (L:data,X)
   \   000019 87                    RETF
    560          
    561          
    562          
    563          
    564          

   \                                 In section .far_func.text, align 1, keep-with-next
    565          void SendData()
    566          {
   \                     SendData:
   \   000000 3B0000                PUSH      S:?b8
    567           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine9
    568            Delay1(10);
    569            u8 i=0;
   \                     ??CrossCallReturnLabel_20:
   \   000007 3F00                  CLR       S:?b8
    570            sprintf(data,"%d %c",adcdata,0x0d);
   \   000009 4B0D                  PUSH      #0xd
   \   00000B 4B00                  PUSH      #0x0
   \   00000D 3B0000                PUSH      L:adcdata + 1
   \   000010 3B0000                PUSH      L:adcdata
   \   000013 90AE0000              LDW       Y, #`?<Constant "%d %c">`
   \   000017 AE0000                LDW       X, #data
   \   00001A 8D000000              CALLF     sprintf
   \   00001E 5B04                  ADD       SP, #0x4
    571           do
    572           {
    573             SendChar(data[i++]);
   \                     ??SendData_0:
   \   000020 8D000000              CALLF     ?Subroutine2
    574          
    575           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_2:
   \   000024 26FA                  JRNE      L:??SendData_0
    576             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??SendData_1:
   \   000026 AE0040                LDW       X, #0x40
   \   000029 8D000000              CALLF     UART2_GetFlagStatus
   \   00002D A100                  CP        A, #0x0
   \   00002F 27F5                  JREQ      L:??SendData_1
    577            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000031 8D000000              CALLF     ?Subroutine10
    578            rx_data=0;
   \                     ??CrossCallReturnLabel_24:
   \   000035 725F0000              CLR       L:rx_data
    579          }
   \   000039 320000                POP       S:?b8
   \   00003C 87                    RETF
    580          

   \                                 In section .far_func.text, align 1, keep-with-next
    581          void LCDDataOut(u8 data)
    582          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    583            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_90
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine32_0
    584            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_90:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_91
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine32_0
    585            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_91:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_92
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine32_0
    586            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_92:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_93
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine32_0
    587          }
   \                     ??CrossCallReturnLabel_93:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_99:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    588          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine32_0
   \   000002                       ;               // Fall through to label ??Subroutine32_0

   \                                 In section .far_func.text, align 1, keep-with-next
    589          void InitLcd()
    590          {
    591           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine4
    592            LCD_RW(0);
    593            LCD_RS(0);
   \                     ??CrossCallReturnLabel_11:
   \   000006 8D000000              CALLF     ?Subroutine5
    594            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_88:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine7
    595          
    596            LCDInstrNibble(0x03);
    597             Delay1(10);
    598            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_16:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    599             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine7
    600            LCDInstrNibble(0x03);
    601             Delay1(10);
    602          
    603             //Line 4
    604            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_17:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    605            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    606            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    607            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    608          
    609            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    610            Delay1(10);
   \   00003D 8D000000              CALLF     ?Subroutine29
    611          
    612            LCDInstr(0x01) ;
   \                     ??CrossCallReturnLabel_80:
   \   000041 8D000000              CALLF     ?Subroutine27
    613            Delay1(250);
   \                     ??CrossCallReturnLabel_71:
   \   000045 AE00FA                LDW       X, #0xfa
   \   000048 8D000000              CALLF     Delay1
    614          
    615            LCDInstr(0x06);
   \   00004C A606                  LD        A, #0x6
   \   00004E 8D000000              CALLF     LCDInstr
    616            Delay1(10);
   \   000052 AE000A                LDW       X, #0xa
   \   000055 AC000000              JPF       Delay1
    617          
    618          
    619          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_79:
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_97:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_96:
   \   00000A 87                    RETF
    620          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine32_0
   \                     ??CrossCallReturnLabel_94:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_85:
   \   00000D                       REQUIRE ??Subroutine31_0
   \   00000D                       ;               // Fall through to label ??Subroutine31_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_84:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    621          void LCDInstr(u8 Instr)
    622          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    623            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine5
    624            LCD_RW(0);
   \                     ??CrossCallReturnLabel_86:
   \   000009 2000                  JRA       ?Subroutine0
    625            LCDDataOut(Instr>>4);
    626            PulseEnable();
    627            LCDDataOut(Instr & 0x0F);
    628            PulseEnable();
    629          }
    630          

   \                                 In section .far_func.text, align 1, keep-with-next
    631          void LCDData(u8 Data)
    632          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    633            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine3
    634            LCD_RW(0);
   \                     ??CrossCallReturnLabel_5:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    635            LCDDataOut(Data>>4);
    636            PulseEnable() ;
    637            LCDDataOut(Data & 0x0F) ;
    638            PulseEnable();
    639          }
    640          

   \                                 In section .far_func.text, align 1, keep-with-next
    641          void LCDInstrNibble(u8 Instr)
    642          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    643            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine4
    644            LCD_RW(0);
    645            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_10:
   \   00000B AC000000              JPF       ??Subroutine31_0
    646            PulseEnable();
    647          }
    648          

   \                                 In section .far_func.text, align 1, keep-with-next
    649          void PulseEnable(void)
    650          {
    651            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine1
    652             Delay1(1);
    653            LCD_EN(1);
    654             Delay1(1);
    655            LCD_EN(0);
   \                     ??CrossCallReturnLabel_0:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine32_0
    656             Delay1(1);
   \                     ??CrossCallReturnLabel_89:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
    657          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_98:
   \   000006 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_67:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_66:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
    658          

   \                                 In section .far_func.text, align 1, keep-with-next
    659          void LCD_Busy(void)
    660          {
    661             //set Port D7 as Input
    662             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    663             //Set Read
    664             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine3
    665             LCD_RS(0);
   \                     ??CrossCallReturnLabel_4:
   \   000013 8D000000              CALLF     ?Subroutine5
    666             // Read Busy Flag
    667                timer2=0;
   \                     ??CrossCallReturnLabel_87:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
    668             do
    669             {
    670             // Enable set
    671               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine1
    672                Delay1(1);
    673               LCD_EN(1);
    674                Delay1(1);
    675             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_1:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
    676                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
    677                //Clear read
    678              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine32_0
    679             //set Port D7 as Output
    680             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_95:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
    681          
    682          }
    683          
    684          

   \                                 In section .far_func.text, align 1, keep-with-next
    685          void LCD(u8 data)
    686           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    687             //  static u8 linet=0;
    688          
    689          
    690               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_69
    691               {
    692          
    693                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
    694                   {
    695                   case 0:
    696                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
    697                     count=0;
   \   00001F 725F0000              CLR       L:count
    698                     break;
   \   000023 2022                  JRA       L:??LCD_4
    699                   case 1:
    700                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
    701                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
    702                     break;
   \   00002F 2016                  JRA       L:??LCD_4
    703                   case 2:
    704                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
    705                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
    706                     break;
   \   00003B 200A                  JRA       L:??LCD_4
    707                   case 3:
    708                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
    709                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
    710                     break;
    711                   //default:
    712                    //  LCDInstr(0x80 |0x40);    //Line 1
    713                    }
    714                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
    715                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
    716                   {
    717                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
    718                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine27
    719                    Delay1(2500);
   \                     ??CrossCallReturnLabel_73:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
    720                   }
    721          
    722                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ?Subroutine25
    723          
    724          
    725               }
    726          
    727          
    728               if (count==20)
   \                     ??CrossCallReturnLabel_69:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
    729                {
    730                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
    731                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
    732                }
    733                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
    734                  {
    735                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
    736                    Delay1(1);
    737                  }
    738                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
    739                    {
    740                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
    741                      count=0;
   \   000088 725F0000              CLR       L:count
    742                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
    743                    }
    744                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
    745                        {
    746                          count=0;
   \   000092 725F0000              CLR       L:count
    747                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine27
    748                          Delay1(250);
   \                     ??CrossCallReturnLabel_72:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
    749                        }
    750          
    751          
    752              /*
    753                   line++;
    754                   if (line>3)
    755                   {
    756                     line=1;  //Line 0 for Time
    757                   }
    758                 switch(line)
    759                   {
    760                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
    761                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
    762                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
    763                   default : LCDInstr(0x80 | 0x40); // Line 1
    764                   }
    765                   Delay(1);
    766                   count=0;
    767                }
    768          
    769               */
    770          
    771               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
    772               {
    773                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
    774                  Delay1(1);
   \   0000AB 8D000000              CALLF     ?Subroutine25
    775                 count++;
   \                     ??CrossCallReturnLabel_68:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
    776               }
    777           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF
    778          

   \                                 In section .far_func.text, align 1, keep-with-next
    779          void InitDelayTimer()
    780          {
    781             //Timer 2 use for Delay  long Delay is 40ms for lcd
    782             //Tclock 16/8=2Mhz  /20 10us
    783                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
    784                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
    785                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
    786                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
    787            //Enable TIM2
    788                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
    789          
    790          }
    791          
    792          

   \                                 In section .far_func.text, align 1, keep-with-next
    793          u16 Average()
    794          {
    795           //Find average in measure
    796            u8 i=0;
   \                     Average:
   \   000000 3F00                  CLR       S:?b0
    797            u16 Summa=0;
   \   000002 3F00                  CLR       S:?b3
   \   000004 3F00                  CLR       S:?b2
    798            do
    799            {
    800             Summa+=measure[i++];
   \                     ??Average_0:
   \   000006 5F                    CLRW      X
   \   000007 41                    EXG       A, XL
   \   000008 B600                  LD        A, S:?b0
   \   00000A 41                    EXG       A, XL
   \   00000B 58                    SLLW      X
   \   00000C DE0000                LDW       X, (L:measure,X)
   \   00000F 72BB0000              ADDW      X, S:?w1
   \   000013 BF00                  LDW       S:?w1, X
   \   000015 B600                  LD        A, S:?b0
   \   000017 4C                    INC       A
   \   000018 B700                  LD        S:?b0, A
    801            } while ( measure[i]!=0);
   \   00001A 5F                    CLRW      X
   \   00001B 41                    EXG       A, XL
   \   00001C B600                  LD        A, S:?b0
   \   00001E 58                    SLLW      X
   \   00001F DE0000                LDW       X, (L:measure,X)
   \   000022 26E2                  JRNE      L:??Average_0
    802             if(i!=0) Summa=Summa/i;
   \   000024 3D00                  TNZ       S:?b0
   \   000026 2708                  JREQ      L:??Average_1
   \   000028 905F                  CLRW      Y
   \   00002A 61                    EXG       A, YL
   \   00002B BE00                  LDW       X, S:?w1
   \   00002D 65                    DIVW      X, Y
   \   00002E BF00                  LDW       S:?w1, X
    803             return Summa;
   \                     ??Average_1:
   \   000030 BE00                  LDW       X, S:?w1
   \   000032 87                    RETF
    804          }
    805          

   \                                 In section .far_func.text, align 1, keep-with-next
    806          PUTCHAR_PROTOTYPE
    807          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
    808            /* Place your implementation of fputc here */
    809            /* e.g. write a character to the USART */
    810                //USART_SendData(USART3, (u8) ch);
    811               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
    812             /* Loop until the end of transmission */
    813              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
    814            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
    815          }
    816          
    817          

   \                                 In section .far_func.text, align 1, keep-with-next
    818          void Delay1(u16 Delay)
    819          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
    820            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
    821            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
    822          }
   \   00000D 87                    RETF
    823          

   \                                 In section .far_func.text, align 1, keep-with-next
    824           void Delay2(u16 Delay)
    825          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
    826            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
    827            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
    828          }
   \   00000D 87                    RETF
    829          
    830          
    831          
    832          /*
    833          void Delay12 (u16 Delay)
    834          {
    835            timer2=0;
    836            while ( timer2 < Delay); ;
    837          }
    838          */
    839          
    840          
    841          #ifdef USE_FULL_ASSERT
    842          
    843          /**
    844            * @brief  Reports the name of the source file and the source line number
    845            *   where the assert_param error has occurred.
    846            * @param file: pointer to the source file name
    847            * @param line: assert_param error line source number
    848            * @retval : None
    849            */

   \                                 In section .far_func.text, align 1
    850          void assert_failed(u8* file, u32 line)
    851          {
    852            /* User can add his own implementation to report the file name and line number,
    853               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    854          
    855            /* Infinite loop */
    856            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
    857            {
    858          
    859            }
    860          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n      ">`:
   \   000000 0A2020202020          DC8 "\012      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02x:%02x:%02x">`:
   \   000000 0A253032783A          DC8 "\012%02x:%02x:%02x"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "Hello">`:
   \   000000 48656C6C6F00          DC8 "Hello"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d %c">`:
   \   000000 256420256300          DC8 "%d %c"
    861          #endif
    862          
    863          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     mounts                            1
     years                             1
     error                             1
     result                            4
     k                                 2
     ?Subroutine10                     9
     main                            155
     ?Subroutine14                    16
     ?Subroutine12                    10
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine23                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine22                     9
     ?Subroutine21                    11
     ?Subroutine19                     8
     ?Subroutine28                     6
     Init_DS1307                      33
     ReadDS1307                       60
     ?Subroutine17                    10
     ?Subroutine16                    13
     ?Subroutine15                    11
     Check_DS1307                     51
     Set_DS1307                       95
     ?Subroutine24                    11
     convert_tobcd                    23
     ?Subroutine27                     6
     Set_Clock                       296
     ?Subroutine11                    11
     key_ok_on                        47
     key_plus_on                      37
     ?Subroutine8                     12
     ?Subroutine30                     7
     ?Subroutine6                      7
     key_minus_on                     37
     GpioConfiguration               103
     ?Subroutine18                     9
     InitClk                          56
     ?Subroutine20                     9
     InitAdc                          45
     InitUart                         44
     SendChar                         15
     Send_Hello                       45
     ?Subroutine9                     14
     ?Subroutine29                     7
     ?Subroutine2                     26
     SendData                         61
     LCDDataOut                       87
     ?Subroutine3                      7
     ??Subroutine32_0                  5
     ?Subroutine26                     7
     ?Subroutine5                      2
     InitLcd                          89
     ?Subroutine7                     15
     ?Subroutine4                     11
     ?Subroutine0                     13
     ??Subroutine31_0                 10
     ?Subroutine13                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine1                     24
     ?Subroutine25                     6
     LCD_Busy                         69
     LCD                             186
     InitDelayTimer                   29
     Average                          51
     fputc                            18
     Delay1                           14
     Delay2                           14
     assert_failed                     2
     ?<Constant "\nSetClock">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n      ">            8
     ?<Constant "\n%02x:%02x:%02x">   16
     ?<Constant "\nSeconds:">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nHours:">            8
     ?<Constant "Hello">               6
     ?<Constant "%d %c">               6

 
 2 379 bytes in section .far_func.text
    82 bytes in section .near.bss
    98 bytes in section .near.rodata
 
 2 379 bytes of CODE  memory
    98 bytes of CONST memory
    82 bytes of DATA  memory

Errors: none
Warnings: none
