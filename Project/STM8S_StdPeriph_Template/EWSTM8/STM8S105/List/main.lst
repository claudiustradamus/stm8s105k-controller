###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             15/Aug/2013  23:20:18 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59            //Power
     60          #define power_pin GPIO_PIN_3
     61          
     62          
     63          
     64          //EEPROM Address;
     65          #define EEPROM_ADDR 0x4000
     66          #define EEPROM_ADR_STATUSH EEPROM_ADDR + 0
     67          #define EEPROM_ADR_STATUSL EEPROM_ADDR + 1
     68          #define EEPROM_ADR_TIME_ON_HOURS EEPROM_ADDR +2
     69          #define EEPROM_ADR_TIME_ON_MINUTES EEPROM_ADDR +3
     70          #define EEPROM_ADR_TIME_OFF_HOURS EEPROM_ADDR +4
     71          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     72          
     73          
     74          
     75          #ifdef __GNUC__
     76            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     77               set to 'Yes') calls __io_putchar() */
     78            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     79          #else
     80            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     81          #endif /* __GNUC__ */
     82          
     83          
     84          
     85          
     86          #define SpecialSymbol 0x1b //Esc to start message
     87          //#define data_size 20
     88          #define key_time 8000
     89          #define key_time_ok 15000
     90          #define DS_Control  0x10  // Out 1s
     91          
     92          
     93          
     94          
     95          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     96          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     97          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     98          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     99          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    100          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    101          //char data[data_size];
    102          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    103          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    104          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    105          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    106          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    107          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    108          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    109          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    110          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    111          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    120          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    121          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    122          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    128          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          char line1[40];
   \                     line1:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
    131          char string1[10];
   \                     string1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    132          bool change;
   \                     change:
   \   000000                       DS8 1
    133          
    134          //u8 index=0;

   \                                 In section .near.bss, align 1
    135          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    136          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    137          
    138          
    139           struct   status_reg
    140           {
    141             unsigned on:1;
    142             unsigned timer_on:1;
    143             unsigned daily:1;

   \                                 In section .near.bss, align 1
    144           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    145          
    146          
    147          
    148          
    149          
    150          
    151          
    152          /* Private function prototypes -----------------------------------------------*/
    153          void InitHardware();
    154          void GpioConfiguration();
    155          void InitClk();
    156          void InitAdc();
    157          void InitI2C();
    158          void EEPROM_INIT();
    159          bool ReadDS1307();
    160          //void InitUart();
    161          void InitLcd();
    162          void InitDelayTimer();
    163          void Delay1( u16 Delay);
    164          void Delay2( u16 Delay);
    165          void Delay_us(u16 Delay);
    166          void LCDInstrNibble (u8 Instr);
    167          void LCDInstr(u8 Instr);
    168          void LCDDataOut(u8 data);
    169          void LCD_Busy();
    170          void PulseEnable();
    171          //void SendData();
    172          void SendChar(u8 Char);
    173          //void Send_Hello();
    174          bool Set_Clock();
    175          bool key_ok_on();
    176          bool key_plus_on();
    177          bool key_minus_on();
    178          bool key_ok_plus();
    179          bool Init_DS1307(void);
    180          bool Check_DS1307(void);
    181          bool I2C_Start(void);
    182          bool I2C_WA(u8 address);
    183          bool I2C_WD(u8 data);
    184          bool I2C_RA(u8 address);
    185          bool Set_DS1307();
    186          bool Set_Delay_Allarm();
    187          bool Read_Allarm();
    188          bool Read_DS18();
    189          bool DS18_Write( u8 data);
    190          bool DS18_Reset();
    191          bool DS18Set();
    192          u8 temperature();
    193          u8 DS18_Read();
    194          u8 convert_tobcd(u8 data);
    195          u8 I2C_RD(void);
    196          u8 adj(u8 min,u8 max,u8 now);
    197          u8 bcd2hex(u8 bcd);
    198          void Power_On(void);
    199          void Power_Off();
    200          void Save_Status();
    201          void Rotate_Line( char * line);
    202          void Display_Line(char * line);
    203          void Clear_Line1(void);
    204          
    205          u16  Average();
    206          
    207          
    208          /* Private functions ---------------------------------------------------------*/
    209          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    210          void main(void)
    211          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    212              /*High speed internal clock prescaler: 1*/
    213              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    214          
    215              InitClk();
   \   000003 8D000000              CALLF     InitClk
    216              InitDelayTimer();
   \   000007 8D000000              CALLF     InitDelayTimer
    217              GpioConfiguration();
   \   00000B 8D000000              CALLF     GpioConfiguration
    218              GPIO_WriteLow(GPIOD, power_pin );
   \   00000F 8D000000              CALLF     ?Subroutine13
    219              //InitUart();
    220              enableInterrupts();
   \                     ??CrossCallReturnLabel_30:
   \   000013 9A                    RIM
    221              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000014 A680                  LD        A, #0x80
   \   000016 8D000000              CALLF     ?Subroutine56
    222              InitLcd();
   \                     ??CrossCallReturnLabel_155:
   \   00001A 8D000000              CALLF     InitLcd
    223              //InitAdc();
    224              InitI2C();
   \   00001E 8D000000              CALLF     InitI2C
    225              //Init DS18B20
    226              DS18Set();
   \   000022 8D000000              CALLF     DS18Set
    227              line_lcd=0;
   \   000026 725F0000              CLR       L:line_lcd
    228              if (!Read_DS18())
   \   00002A 8D000000              CALLF     Read_DS18
   \   00002E A100                  CP        A, #0x0
   \   000030 260D                  JRNE      L:??main_0
    229              {
    230               printf("\nDS_Err_I");
   \   000032 AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   000035 8D000000              CALLF     printf
    231                while (!key_ok_on());
   \                     ??main_1:
   \   000039 8D000000              CALLF     ?Subroutine42
    232              }
   \                     ??CrossCallReturnLabel_120:
   \   00003D 27FA                  JREQ      L:??main_1
    233          
    234          
    235          
    236          
    237          
    238              //years=bcd2hex(13);
    239              Delay1(1000);
   \                     ??main_0:
   \   00003F AE03E8                LDW       X, #0x3e8
   \   000042 8D000000              CALLF     Delay1
    240               if (!ReadDS1307())
   \   000046 8D000000              CALLF     ReadDS1307
   \   00004A A100                  CP        A, #0x0
   \   00004C 2615                  JRNE      L:??main_2
    241               {
    242                 printf("\n E2:%d",error);
   \   00004E C60000                LD        A, L:error
   \   000051 5F                    CLRW      X
   \   000052 97                    LD        XL, A
   \   000053 89                    PUSHW     X
   \   000054 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000057 8D000000              CALLF     printf
   \   00005B 5B02                  ADD       SP, #0x2
    243                 // Reset the CPU: Enable the watchdog and wait until it expires
    244                 IWDG->KR = IWDG_KEY_ENABLE;
   \   00005D 35CC50E0              MOV       L:0x50e0, #0xcc
    245                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   000061 20FE                  JRA       L:??main_3
    246               }
    247               //Send_Hello();
    248              //line_lcd=0;
    249              //printf("\nHello");
    250          
    251          
    252              if (!Check_DS1307())
   \                     ??main_2:
   \   000063 8D000000              CALLF     Check_DS1307
   \   000067 A100                  CP        A, #0x0
   \   000069 2626                  JRNE      L:??main_4
    253              {
    254                 if (error!=0)
   \   00006B C60000                LD        A, L:error
   \   00006E 2712                  JREQ      L:??main_5
    255                 {
    256                  printf("\n E:%d",error);
   \   000070 5F                    CLRW      X
   \   000071 97                    LD        XL, A
   \   000072 89                    PUSHW     X
   \   000073 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000076 8D000000              CALLF     printf
   \   00007A 5B02                  ADD       SP, #0x2
    257                   while (!key_ok_on());
   \                     ??main_6:
   \   00007C 8D000000              CALLF     ?Subroutine42
    258          
    259                 }
   \                     ??CrossCallReturnLabel_121:
   \   000080 27FA                  JREQ      L:??main_6
    260               line_lcd=0;
   \                     ??main_5:
   \   000082 725F0000              CLR       L:line_lcd
    261               printf("\nSetClock");
   \   000086 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000089 8D000000              CALLF     printf
    262                Set_Clock();
   \   00008D 8D000000              CALLF     Set_Clock
    263          
    264              }
    265          
    266                 //Read Status register from eepom and update it
    267                //size=sizeof(status);
    268               //u16 status
    269               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_4:
   \   000091 AE4000                LDW       X, #0x4000
   \   000094 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   000098 B700                  LD        S:?b8, A
   \   00009A AE4001                LDW       X, #0x4001
   \   00009D 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   0000A1 905F                  CLRW      Y
   \   0000A3 9097                  LD        YL, A
   \   0000A5 5F                    CLRW      X
   \   0000A6 41                    EXG       A, XL
   \   0000A7 B600                  LD        A, S:?b8
   \   0000A9 41                    EXG       A, XL
   \   0000AA 4F                    CLR       A
   \   0000AB 02                    RLWA      X, A
   \   0000AC 8D000000              CALLF     ??Subroutine64_0
   \                     ??CrossCallReturnLabel_200:
   \   0000B0 CF0000                LDW       L:status, X
    270                status_check = *(u16*)(&status);
   \   0000B3 CE0000                LDW       X, L:status
   \   0000B6 CF0000                LDW       L:status_check, X
    271              //When Start Check for Allarm and computing Daily_long_on
    272               if ( Read_Allarm() == TRUE)
   \   0000B9 8D000000              CALLF     Read_Allarm
   \   0000BD A101                  CP        A, #0x1
   \   0000BF 260C                  JRNE      L:??CrossCallReturnLabel_168
    273               {
    274                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000C1 8D000000              CALLF     ?Subroutine1
    275                 time_off= daily_hour_off*60+daily_minute_off;
    276               }
   \                     ??CrossCallReturnLabel_1:
   \   0000C5 2006                  JRA       L:??CrossCallReturnLabel_168
    277          
    278               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    279          
    280               // Working fuction
    281              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    282          
    283          
    284          
    285              // strcpy(line1,"Hello I am here! ");
    286              //  while(1)
    287              //  {
    288              //     Display_Line(line1);
    289              //     Delay2(20000);
    290              //  }
    291              //  while (!key_ok_on());
    292                 //sprintf(line1,"TIMER ON ");
    293              while(1)
    294              {
    295                ADC1_Cmd (ENABLE);
    296          
    297                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    298                   Delay2(5000);
    299                   //ttimer++;
    300                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    301                   Delay2(5000);
    302          
    303                     //status_check = *(u16*)(&status);
    304          
    305                line_lcd=0;
    306               if (!ReadDS1307())
    307               {
    308                 printf("\n E2:%d",error);
    309                  //restart i2c
    310                // Reset the CPU: Enable the watchdog and wait until it expires
    311                 IWDG->KR = IWDG_KEY_ENABLE;
    312                 while ( 1 );    // Wait until reset occurs from IWDG
    313          
    314               }
    315                 else
    316                   //printf("\n      ");
    317          
    318               //line_lcd=2;
    319               //printf("\n Just Test:%X", timer2);
    320                   //if (rx_data==SpecialSymbol) SendData();
    321                //SendData();
    322          
    323                if (key_ok_on())
    324                {
    325                  line_lcd=0;
    326                  printf("\n%02d:%02d:%02d",years,mounts,date);
    327                  status.daily=1; //On Daily timer
    328                  Save_Status();
    329                  Delay2(50000);
    330                  Clear_Line1();
    331                  change=TRUE;
    332                  //Delay2(10000);
    333                  //Delay2(10000);
    334                }
    335          
    336                if(key_ok_plus()) Set_Delay_Allarm();  //Set Daily Allarm
    337                if(key_plus_on()) Power_On();
    338                if(key_minus_on())Power_Off();
    339          
    340          
    341                //Check for Allarm
    342                    if (status.daily==1)
    343                  {
    344                u16 time_now=hours*60+minutes;
    345                status.on=0;
    346                     u16 time=time_on;
    347                     do
    348                    {
    349                       if(time==time_now)
    350                       {
    351                         status.on=1;
    352                          break ;
    353                       }
    354                        time++;
    355                         if( time==1441) time=0;
    356                    } while(!(time==time_off));
    357                   };
    358          
    359          
    360                      //Read Temperature
    361                  // if( ttimer > 5 )
    362                   //{
    363          
    364          
    365                      result1=temperature();
    366                      if (result_old != result1) change=TRUE;
    367                       //else  change=FALSE;
    368                      result_old=result1;
    369                      result2=0;
    370                      if(result1%2!=0) result2=5;
    371                      result1/=2;
    372          
    373          
    374                     // char result3;
    375                     // ttimer=0;
    376                 //  }
    377          
    378                   //printf("\n%d.%d",result1,result2);
    379          
    380                     //Display
    381                     // line_lcd=0;
    382                     if (status.daily==1)  sprintf(string1,"TIMER ON");
    383                      else sprintf(string1,"TIMER OFF");
    384          
    385          
    386          
    387                       if (change)
    388                       {
    389                      sprintf(line1,"%d.%dC %s ",result1,result2,string1);
    390                         change=FALSE;
    391                       }
    392                      Display_Line(line1);
    393                    line_lcd=1;
    394                    printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    395          
    396          
    397                     if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_7:
   \   0000C7 A608                  LD        A, #0x8
   \   0000C9 8D000000              CALLF     ??Subroutine60_0
   \                     ??CrossCallReturnLabel_168:
   \   0000CD A601                  LD        A, #0x1
   \   0000CF 8D000000              CALLF     ADC1_Cmd
   \   0000D3 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_73:
   \   0000D7 8D000000              CALLF     ?Subroutine27
   \                     ??CrossCallReturnLabel_72:
   \   0000DB 725F0000              CLR       L:line_lcd
   \   0000DF 8D000000              CALLF     ReadDS1307
   \   0000E3 A100                  CP        A, #0x0
   \   0000E5 2615                  JRNE      L:??main_8
   \   0000E7 C60000                LD        A, L:error
   \   0000EA 5F                    CLRW      X
   \   0000EB 97                    LD        XL, A
   \   0000EC 89                    PUSHW     X
   \   0000ED AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   0000F0 8D000000              CALLF     printf
   \   0000F4 5B02                  ADD       SP, #0x2
   \   0000F6 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_9:
   \   0000FA 20FE                  JRA       L:??main_9
   \                     ??main_8:
   \   0000FC 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_122:
   \   000100 2734                  JREQ      L:??main_10
   \   000102 725F0000              CLR       L:line_lcd
   \   000106 C60000                LD        A, L:`date`
   \   000109 5F                    CLRW      X
   \   00010A 97                    LD        XL, A
   \   00010B 89                    PUSHW     X
   \   00010C C60000                LD        A, L:mounts
   \   00010F 97                    LD        XL, A
   \   000110 89                    PUSHW     X
   \   000111 C60000                LD        A, L:years
   \   000114 97                    LD        XL, A
   \   000115 89                    PUSHW     X
   \   000116 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000119 8D000000              CALLF     printf
   \   00011D 5B06                  ADD       SP, #0x6
   \   00011F 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_107:
   \   000123 8D000000              CALLF     Save_Status
   \   000127 AEC350                LDW       X, #0xc350
   \   00012A 8D000000              CALLF     Delay2
   \   00012E 8D000000              CALLF     Clear_Line1
   \   000132 35010000              MOV       L:change, #0x1
   \                     ??main_10:
   \   000136 8D000000              CALLF     key_ok_plus
   \   00013A A100                  CP        A, #0x0
   \   00013C 2704                  JREQ      L:??main_11
   \   00013E 8D000000              CALLF     Set_Delay_Allarm
   \                     ??main_11:
   \   000142 8D000000              CALLF     key_plus_on
   \   000146 A100                  CP        A, #0x0
   \   000148 2704                  JREQ      L:??main_12
   \   00014A 8D000000              CALLF     Power_On
   \                     ??main_12:
   \   00014E 8D000000              CALLF     key_minus_on
   \   000152 A100                  CP        A, #0x0
   \   000154 2704                  JREQ      L:??main_13
   \   000156 8D000000              CALLF     Power_Off
   \                     ??main_13:
   \   00015A CE0000                LDW       X, L:status
   \   00015D 9F                    LD        A, XL
   \   00015E A504                  BCP       A, #0x4
   \   000160 2739                  JREQ      L:??main_14
   \   000162 C60000                LD        A, L:hours
   \   000165 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_206:
   \   000169 C60000                LD        A, L:minutes
   \   00016C 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_202:
   \   000170 BF00                  LDW       S:?w0, X
   \   000172 CE0000                LDW       X, L:status
   \   000175 01                    RRWA      X, A
   \   000176 A4FE                  AND       A, #0xfe
   \   000178 02                    RLWA      X, A
   \   000179 CF0000                LDW       L:status, X
   \   00017C CE0000                LDW       X, L:time_on
   \                     ??main_15:
   \   00017F B300                  CPW       X, S:?w0
   \   000181 260C                  JRNE      L:??main_16
   \   000183 CE0000                LDW       X, L:status
   \   000186 01                    RRWA      X, A
   \   000187 AA01                  OR        A, #0x1
   \   000189 02                    RLWA      X, A
   \   00018A CF0000                LDW       L:status, X
   \   00018D 200C                  JRA       L:??main_14
   \                     ??main_16:
   \   00018F 5C                    INCW      X
   \   000190 A305A1                CPW       X, #0x5a1
   \   000193 2601                  JRNE      L:??main_17
   \   000195 5F                    CLRW      X
   \                     ??main_17:
   \   000196 C30000                CPW       X, L:time_off
   \   000199 26E4                  JRNE      L:??main_15
   \                     ??main_14:
   \   00019B 8D000000              CALLF     temperature
   \   00019F C70000                LD        L:result1, A
   \   0001A2 C10000                CP        A, L:result_old
   \   0001A5 2704                  JREQ      L:??main_18
   \   0001A7 35010000              MOV       L:change, #0x1
   \                     ??main_18:
   \   0001AB C70000                LD        L:result_old, A
   \   0001AE 725F0000              CLR       L:result2
   \   0001B2 7201000004            BTJF      L:result1, #0x0, L:??main_19
   \   0001B7 35050000              MOV       L:result2, #0x5
   \                     ??main_19:
   \   0001BB 44                    SRL       A
   \   0001BC C70000                LD        L:result1, A
   \   0001BF CE0000                LDW       X, L:status
   \   0001C2 9F                    LD        A, XL
   \   0001C3 A504                  BCP       A, #0x4
   \   0001C5 2706                  JREQ      L:??main_20
   \   0001C7 90AE0000              LDW       Y, #`?<Constant "TIMER ON">`
   \   0001CB 2004                  JRA       ??main_21
   \                     ??main_20:
   \   0001CD 90AE0000              LDW       Y, #`?<Constant "TIMER OFF">`
   \                     ??main_21:
   \   0001D1 AE0000                LDW       X, #string1
   \   0001D4 8D000000              CALLF     sprintf
   \   0001D8 C60000                LD        A, L:change
   \   0001DB 2720                  JREQ      L:??main_22
   \   0001DD 4B00                  PUSH      #BYTE1(string1)
   \   0001DF 4B00                  PUSH      #BYTE2(string1)
   \   0001E1 C60000                LD        A, L:result2
   \   0001E4 5F                    CLRW      X
   \   0001E5 97                    LD        XL, A
   \   0001E6 89                    PUSHW     X
   \   0001E7 C60000                LD        A, L:result1
   \   0001EA 97                    LD        XL, A
   \   0001EB 89                    PUSHW     X
   \   0001EC 90AE0000              LDW       Y, #`?<Constant "%d.%dC %s ">`
   \   0001F0 AE0000                LDW       X, #line1
   \   0001F3 8D000000              CALLF     sprintf
   \   0001F7 5B06                  ADD       SP, #0x6
   \   0001F9 725F0000              CLR       L:change
   \                     ??main_22:
   \   0001FD AE0000                LDW       X, #line1
   \   000200 8D000000              CALLF     Display_Line
   \   000204 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_52:
   \   000208 89                    PUSHW     X
   \   000209 C60000                LD        A, L:minutes
   \   00020C 97                    LD        XL, A
   \   00020D 89                    PUSHW     X
   \   00020E C60000                LD        A, L:hours
   \   000211 97                    LD        XL, A
   \   000212 89                    PUSHW     X
   \   000213 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000216 8D000000              CALLF     printf
   \   00021A 5B06                  ADD       SP, #0x6
   \   00021C CE0000                LDW       X, L:status
   \   00021F 9F                    LD        A, XL
   \   000220 A501                  BCP       A, #0x1
   \   000222 2703                  JREQ      ??lb_0
   \   000224 CC0000                JP        L:??main_7
    398                       else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??lb_0:
   \   000227 8D000000              CALLF     ?Subroutine13
    399          
    400          
    401          
    402              }
   \                     ??CrossCallReturnLabel_31:
   \   00022B CC0000                JP        L:??CrossCallReturnLabel_168
    403          
    404          
    405          
    406          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine64_0
   \   000002                       ;               // Fall through to label ??Subroutine64_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine65_0
   \   000002                       ;               // Fall through to label ??Subroutine65_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine27:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE1388                LDW       X, #0x1388
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine22:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_154:
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine56:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine5:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_207:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_203:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 C60000                LD        A, L:daily_hour_off
   \   000014 8D000000              CALLF     ??Subroutine65_0
   \                     ??CrossCallReturnLabel_205:
   \   000018 C60000                LD        A, L:daily_minute_off
   \   00001B 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_204:
   \   00001F CF0000                LDW       L:time_off, X
   \   000022 87                    RETF
    407          

   \                                 In section .far_func.text, align 1, keep-with-next
    408          void Power_On()
    409          {
    410            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine35
    411            status.daily=0; //Off Daily timer
    412            Save_Status();
    413            change=TRUE;
    414          }
   \                     ??CrossCallReturnLabel_90:
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 8D000000              CALLF     Save_Status
   \   000012 35010000              MOV       L:change, #0x1
   \   000016 87                    RETF
    415          

   \                                 In section .far_func.text, align 1, keep-with-next
    416          void Power_Off()
    417          {
    418            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine35
    419            status.daily=0; //Off Daily timer
    420            Save_Status();
    421            change=TRUE;
    422          }
   \                     ??CrossCallReturnLabel_89:
   \   00000A 87                    RETF
    423          

   \                                 In section .far_func.text, align 1, keep-with-next
    424          void InitI2C(void)
    425          {
    426             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    427             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    428             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    429          }
    430          

   \                                 In section .far_func.text, align 1, keep-with-next
    431          bool I2C_Start(void)
    432          {
    433             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    434                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    435              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_138:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    436                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    437                  {
    438                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    439                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    440                  }
    441                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    442          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    443          

   \                                 In section .far_func.text, align 1, keep-with-next
    444          bool I2C_WA(u8 address)
    445          {
    446            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    447                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    448                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_137:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    449                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    450                   {
    451                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    452                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    453                   }
    454                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    455          }
    456          

   \                                 In section .far_func.text, align 1, keep-with-next
    457          bool I2C_RA(u8 address)
    458          {
    459            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    460                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    461                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_139:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    462                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    463                   {
    464                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    465                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    466                   }
    467                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    468          }
    469          
    470          

   \                                 In section .far_func.text, align 1, keep-with-next
    471          bool I2C_WD(u8 data)
    472          {
    473           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    474             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    475             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_136:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    476              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    477              {
    478                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    479                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    480              }
    481               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    482          }
    483          

   \                                 In section .far_func.text, align 1, keep-with-next
    484          u8 I2C_RD(void)
    485          {
    486           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    487            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    488           //while((!(I2C->SR1 & 0x40))&&timeout);
    489           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    490           {
    491             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    492             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    493           }
    494           u8 data=I2C_ReceiveData();
    495           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    496          }
    497          
    498            /*
    499          bool Init_DS1307(void)
    500          {
    501             // Test DS1307
    502              error=0;
    503              if (!I2C_Start()) return FALSE;
    504              if(!I2C_WA(0xD0)) return FALSE;
    505              if(!I2C_WD(0x00)) return FALSE;
    506              if(!I2C_WD(0x00)) return FALSE;
    507              I2C_GenerateSTOP(ENABLE);
    508          
    509              // timeout=100;  error=4;
    510              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    511              //    if (!timeout)return FALSE ;
    512               return TRUE;
    513          }
    514             */
    515          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine63_0
   \   000001                       ;               // Fall through to label ??Subroutine63_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    516          bool  ReadDS1307(void)
    517          {
    518                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine44
    519                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_132:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    520                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_135:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    521                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_196:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    522                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine28
    523                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_75:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    524                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    525                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine26
    526                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_71:
   \   000028 C70000                LD        L:seconds, A
    527                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine26
    528                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_70:
   \   00002F C70000                LD        L:minutes, A
    529                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine26
    530                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_69:
   \   000036 C70000                LD        L:hours, A
    531                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine26
    532                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_68:
   \   00003D C70000                LD        L:days, A
    533                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine26
    534                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_67:
   \   000044 C70000                LD        L:`date`, A
    535                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine26
    536                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_66:
   \   00004B C70000                LD        L:mounts, A
    537                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine33
    538                   I2C_GenerateSTOP(ENABLE);
    539                    years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_82:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:years, A
    540          
    541               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    542               //   u8 data1 = I2C_RD();
    543                //Last read byte by I2C slave
    544               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    545               //  I2C_GenerateSTOP(ENABLE);
    546               //  temp2= I2C_RD();
    547                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    548                    {
    549                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    550                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    551                    }
    552          
    553                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    554          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_149:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    555          

   \                                 In section .far_func.text, align 1, keep-with-next
    556          bool Check_DS1307(void)
    557          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    558             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    559                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine44
    560                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_131:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    561                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_134:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    562                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine63_0
   \                     ??CrossCallReturnLabel_199:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    563                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine28
    564                  //Last read byte by I2C slave
    565                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_74:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    566                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    567                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine53
    568                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_150:
   \   00002E B700                  LD        S:?b8, A
    569                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine33
    570                 I2C_GenerateSTOP(ENABLE);
    571                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_83:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    572                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    573          }
    574          

   \                                 In section .far_func.text, align 1, keep-with-next
    575          bool Set_DS1307()
    576          {
    577                 // convert hex or decimal to bcd format
    578          
    579          
    580                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine44
    581                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_130:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    582                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_133:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    583                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_195:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    584                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_123:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    585                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_124:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    586                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_125:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    587                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_126:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    588                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_127:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    589                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_128:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    590                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_129:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    591                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine63_0
   \                     ??CrossCallReturnLabel_197:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    592                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine63_0
   \                     ??CrossCallReturnLabel_198:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    593                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    594          
    595          
    596             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    597          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    598          
    599          

   \                                 In section .far_func.text, align 1, keep-with-next
    600          u8 convert_tobcd(u8 data)
    601          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    602             u8 data_second_decimal=data/10;
    603             u8 data_first_decimal=data - 10*data_second_decimal;
    604             data=16*data_second_decimal + data_first_decimal;
    605            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    606          }
    607          

   \                                 In section .far_func.text, align 1, keep-with-next
    608          u8 bcd2hex(u8 bcd)
    609          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    610            u8 hex=0;
    611            hex=(bcd>>4)*10 +(bcd&0x0f);
    612            bcd=0;
    613            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    614          }
    615          
    616          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    617          bool Set_Clock()
    618          {
    619              //Clear Display
    620             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine14
    621             Delay1(1000);
    622             line_lcd=0;
    623              printf("\nYears:");
   \                     ??CrossCallReturnLabel_37:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    624                do
    625              {
    626               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine24
    627               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_59:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    628                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine62_0
    629              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_188:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_113:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    630          
    631               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    632              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    633                do
    634              {
    635               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine24
    636               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_60:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    637                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    638              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_114:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    639          
    640              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine14
    641               Delay1(1000);
    642                line_lcd=0;
    643              printf("\nDate:");
   \                     ??CrossCallReturnLabel_38:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    644                do
    645              {
    646               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine24
    647               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_61:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    648                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    649              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_115:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    650          
    651          
    652              //Clear Display
    653             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine14
    654             Delay1(1000);
    655             line_lcd=0;
    656              printf("\nDays:");
   \                     ??CrossCallReturnLabel_39:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    657                do
    658              {
    659                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    660               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    661                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    662              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_116:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    663          
    664          
    665          
    666             //Clear Display
    667             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine14
    668             Delay1(1000);
    669             line_lcd=0;
    670              printf("\nHours:");
   \                     ??CrossCallReturnLabel_40:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    671                do
    672              {
    673                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine22
    674               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_49:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    675                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine62_0
    676              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_187:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_117:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    677          
    678               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    679               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    680                do
    681              {
    682                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine22
    683               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_50:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    684                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine32
    685              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_192:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_118:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    686          
    687              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    688              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    689              do
    690              {
    691                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine22
    692               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_51:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    693                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine32
    694              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_191:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_119:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    695          
    696                // Set parameter to DS1307 + time byte
    697                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    698          
    699                //bool k=Check_DS1307();
    700          
    701            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    702          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine62_0
   \   000006                       ;               // Fall through to label ??Subroutine62_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_145:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    703          
    704          

   \                                 In section .far_func.text, align 1, keep-with-next
    705          u8 adj(u8 min,u8 max,u8 now)
    706          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    707             u8 adj=now;
    708             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    709             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    710             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    711             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    712             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    713             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    714          }
    715          
    716          

   \                                 In section .far_func.text, align 1, keep-with-next
    717          bool key_ok_on()
    718          {
    719            //Read Key OK
    720            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_153:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    721             {
    722               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    723                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_152:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    724                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    725             }
    726          
    727            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    728          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    729          

   \                                 In section .far_func.text, align 1, keep-with-next
    730           bool key_plus_on()
    731          {
    732            //Read Key OK
    733              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_103:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    734               {
    735               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    736                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_55:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_102:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    737                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_56:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    738               }
    739          
    740            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    741          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    742          

   \                                 In section .far_func.text, align 1, keep-with-next
    743            bool key_minus_on()
    744          {
    745            //Read Key OK
    746             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_105:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    747               {
    748               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    749                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_53:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_104:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    750                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_54:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    751               }
    752          
    753            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    754          }
    755          
    756          

   \                                 In section .far_func.text, align 1, keep-with-next
    757          bool  key_ok_plus()
    758          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    759            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_41:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    760            {
    761                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    762                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_57:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_42:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    763                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_58:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    764            }
    765          
    766           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    767          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_151:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    768          
    769          

   \                                 In section .far_func.text, align 1, keep-with-next
    770          bool Set_Delay_Allarm()
    771          {
    772          
    773             //clr
    774             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine14
    775             Delay1(1000);
    776             line_lcd=0;
    777             printf("\nH On:");
   \                     ??CrossCallReturnLabel_32:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    778            do
    779              {
    780               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    781               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    782                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine62_0
    783              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_190:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_108:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    784          
    785             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine14
    786             Delay1(1000);
    787             line_lcd=0;
    788             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_33:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    789            do
    790              {
    791               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    792               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    793                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine32
    794              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_194:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_109:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    795          
    796              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine14
    797              Delay1(1000);
    798              line_lcd=0;
    799              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_34:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    800            do
    801              {
    802               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    803               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    804                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine62_0
    805              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_189:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_110:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    806          
    807            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine14
    808             Delay1(1000);
    809             line_lcd=0;
    810             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_35:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    811            do
    812              {
    813               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    814               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    815                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine32
    816              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_193:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_111:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    817          
    818               //Computing time_long_on
    819          
    820               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine21
    821               u8 minute=daily_minute_on;
    822               daily_long_on=0;
    823               do
    824               {
    825                    daily_long_on++;
   \                     ??CrossCallReturnLabel_48:
   \   0000DC 8D000000              CALLF     ?Subroutine12
    826                    minute++;
    827                    if (minute==60)
   \                     ??CrossCallReturnLabel_29:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    828                    {
    829                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    830                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    831                    }
    832                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    833          
    834               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_48
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_48
    835          
    836                //Display daily_long_on
    837              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine14
    838              Delay1(1000);
    839              line_lcd=0;
    840              printf("\nLong :");
   \                     ??CrossCallReturnLabel_36:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    841          
    842                do
    843              {
    844               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    845               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    846                 //daily_long_on=adj(0,1440,daily_long_on);
    847              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_112:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    848          
    849              time_on=daily_hour_on*60+daily_minute_on;
   \   000123 8D000000              CALLF     ?Subroutine1
    850              time_off= daily_hour_off*60+daily_minute_off;
    851              //Save data to eeprom
    852                status.daily=1;
   \                     ??CrossCallReturnLabel_0:
   \   000127 8D000000              CALLF     ?Subroutine41
    853               EEPROM_INIT();
   \                     ??CrossCallReturnLabel_106:
   \   00012B 8D000000              CALLF     ?Subroutine2
    854              //u8 temp =*(u8*)(&status);
    855              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    856               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    857               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    858               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_3:
   \   00012F C60000                LD        A, L:daily_hour_on
   \   000132 AE4002                LDW       X, #0x4002
   \   000135 8D000000              CALLF     ?Subroutine7
    859               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_14:
   \   000139 C60000                LD        A, L:daily_minute_on
   \   00013C AE4003                LDW       X, #0x4003
   \   00013F 8D000000              CALLF     ?Subroutine7
    860               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_15:
   \   000143 C60000                LD        A, L:daily_hour_off
   \   000146 AE4004                LDW       X, #0x4004
   \   000149 8D000000              CALLF     ?Subroutine7
    861               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_16:
   \   00014D C60000                LD        A, L:daily_minute_off
   \   000150 AE4005                LDW       X, #0x4005
   \   000153 8D000000              CALLF     ?Subroutine7
    862               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_17:
   \   000157 A6F7                  LD        A, #0xf7
   \   000159 8D000000              CALLF     FLASH_Lock
    863          
    864             return TRUE;
   \   00015D A601                  LD        A, #0x1
   \   00015F 87                    RETF
    865          
    866          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_142:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_141:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_140:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    867          

   \                                 In section .far_func.text, align 1, keep-with-next
    868          void Save_Status()
    869          {
    870            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ?Subroutine2
    871            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    872            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    873            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_2:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    874          }
    875          

   \                                 In section .far_func.text, align 1, keep-with-next
    876          bool Read_Allarm()
    877          {
    878             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000007 C70000                LD        L:daily_hour_on, A
    879              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    880             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000017 C70000                LD        L:daily_minute_on, A
    881              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    882             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   000025 C70000                LD        L:daily_hour_off, A
    883              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    884             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000033 C70000                LD        L:daily_minute_off, A
    885              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    886               // Computting daily_long_on
    887                u8 hour=daily_hour_on;
   \   00003D 8D000000              CALLF     ?Subroutine21
    888               u8 minute=daily_minute_on;
    889               daily_long_on=0;
    890               do
    891               {
    892                    daily_long_on++;
   \                     ??CrossCallReturnLabel_47:
   \   000041 8D000000              CALLF     ?Subroutine12
    893                    minute++;
    894                    if (minute==60)
   \                     ??CrossCallReturnLabel_28:
   \   000045 2607                  JRNE      L:??Read_Allarm_2
    895                    {
    896                      minute=0;
   \   000047 3F00                  CLR       S:?b1
    897                      hour++;
   \   000049 B600                  LD        A, S:?b0
   \   00004B 4C                    INC       A
   \   00004C B700                  LD        S:?b0, A
    898                    }
    899                    if(hour==24) hour=0;
   \                     ??Read_Allarm_2:
   \   00004E B600                  LD        A, S:?b0
   \   000050 A118                  CP        A, #0x18
   \   000052 2602                  JRNE      L:??Read_Allarm_3
   \   000054 3F00                  CLR       S:?b0
    900          
    901               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_3:
   \   000056 C60000                LD        A, L:daily_hour_off
   \   000059 B100                  CP        A, S:?b0
   \   00005B 26E4                  JRNE      L:??CrossCallReturnLabel_47
   \   00005D C60000                LD        A, L:daily_minute_off
   \   000060 B100                  CP        A, S:?b1
   \   000062 26DD                  JRNE      L:??CrossCallReturnLabel_47
    902          
    903            return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    904          }
    905          

   \                                 In section .far_func.text, align 1, keep-with-next
    906          void EEPROM_INIT()
    907          {
    908            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    909            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    910            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    911          
    912          
    913          
    914          }
    915          
    916          

   \                                 In section .far_func.text, align 1, keep-with-next
    917          void GpioConfiguration()
    918          {
    919          
    920            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    921          
    922            // ADC PE6 NEW PB0
    923            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    924          
    925            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    926            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine29
    927          
    928            //PD0 Led
    929            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_76:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine37
    930            //I2C
    931            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_93:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine37
    932            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_94:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine38
    933            // Remap Pins pb4,pb5  sda,scl ;
    934          
    935             //Init KEY OK,PLUS,MINUS
    936            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_96:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine38
    937            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_97:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine38
    938            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_98:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine37
    939          
    940            //Init DS18b20 data pin
    941            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_95:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine29
    942          
    943            // Power Pin
    944             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_77:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
    945          
    946          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
    947          

   \                                 In section .far_func.text, align 1, keep-with-next
    948          void InitClk()
    949          {
    950            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    951            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    952            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    953            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    954            CLK_SOURCE_HSI,       // Switch to internal timer.
    955            DISABLE,              // Disable the clock switch interrupt.
    956            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    957          
    958            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine39
    959            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_99:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine39
    960            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_100:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine39
    961            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_101:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    962          
    963          
    964          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    965          
    966          

   \                                 In section .far_func.text, align 1, keep-with-next
    967          void InitAdc()
    968          {
    969               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    970               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    971               /*
    972               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    973                          ADC1_CHANNEL_0,
    974                          ADC1_PRESSEL_FCPU_D4,
    975                           ADC1_EXTTRIG_TIM,
    976          
    977                 */
    978               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    979               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    980                                      ADC1_CHANNEL_0,
    981                                      ADC1_ALIGN_RIGHT
    982                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    983          
    984          
    985               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    986          
    987          
    988               //ADC1_Cmd (ENABLE);
    989               //ADC1->CR1 |= ADC1_CR1_ADON ;
    990               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    991               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    992          
    993          }
    994          
    995          /*
    996          void InitUart()
    997          {
    998             UART2_DeInit();
    999             UART2_Init((u32)9600,
   1000                        UART2_WORDLENGTH_8D,
   1001                        UART2_STOPBITS_1,
   1002                        UART2_PARITY_NO,
   1003                        UART2_SYNCMODE_CLOCK_DISABLE,
   1004                        UART2_MODE_TXRX_ENABLE
   1005                          );
   1006          
   1007             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1008             UART2_Cmd(ENABLE);
   1009          
   1010            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1011          }
   1012            */
   1013          

   \                                 In section .far_func.text, align 1, keep-with-next
   1014          void SendChar( u8 Char)
   1015          {
   1016             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
   1017            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
   1018          }
   \   00000E 87                    RETF
   1019            /*
   1020          void Send_Hello()
   1021          {
   1022            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1023             Delay1(10);
   1024             sprintf(data,"Hello");
   1025              u8 i=0;
   1026            do
   1027           {
   1028            SendChar(data[i++]);
   1029           } while (data[i]!=0);
   1030            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1031            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1032          
   1033          
   1034          
   1035          }
   1036              */
   1037          
   1038          
   1039              /*
   1040          
   1041          void SendData()
   1042          {
   1043           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1044            Delay1(10);
   1045            u8 i=0;
   1046            sprintf(data,"%d %c",adcdata,0x0d);
   1047           do
   1048           {
   1049             SendChar(data[i++]);
   1050          
   1051           } while (data[i]!=0);
   1052             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1053            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1054            rx_data=0;
   1055          }
   1056          */
   1057          

   \                                 In section .far_func.text, align 1, keep-with-next
   1058          void LCDDataOut(u8 data)
   1059          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1060            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_23:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_177
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine61_0
   1061            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_177:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_22:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_178
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine61_0
   1062            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_178:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_21:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_179
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine61_0
   1063            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_179:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_20:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_180
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine61_0
   1064          }
   \                     ??CrossCallReturnLabel_180:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_186:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1065          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine61_0
   \   000002                       ;               // Fall through to label ??Subroutine61_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1066          void InitLcd()
   1067          {
   1068           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine9
   1069            LCD_RW(0);
   1070            LCD_RS(0);
   \                     ??CrossCallReturnLabel_25:
   \   000006 8D000000              CALLF     ?Subroutine10
   1071            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_175:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine16
   1072          
   1073            LCDInstrNibble(0x03);
   1074             Delay1(10);
   1075            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_44:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1076             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine16
   1077            LCDInstrNibble(0x03);
   1078             Delay1(10);
   1079          
   1080             //Line 4
   1081            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_43:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1082            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1083            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1084            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1085          
   1086            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1087            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1088          
   1089            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine52
   1090            Delay1(250);
   \                     ??CrossCallReturnLabel_146:
   \   000048 AE00FA                LDW       X, #0xfa
   \   00004B 8D000000              CALLF     Delay1
   1091          
   1092            LCDInstr(0x06);
   \   00004F A606                  LD        A, #0x6
   \   000051 8D000000              CALLF     LCDInstr
   1093            Delay1(10);
   \   000055 AE000A                LDW       X, #0xa
   \   000058 AC000000              JPF       Delay1
   1094          
   1095          
   1096          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_184:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_183:
   \   00000A 87                    RETF
   1097          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine61_0
   \                     ??CrossCallReturnLabel_181:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_158:
   \   00000D                       REQUIRE ??Subroutine57_0
   \   00000D                       ;               // Fall through to label ??Subroutine57_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_157:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1098          void LCDInstr(u8 Instr)
   1099          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1100            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine10
   1101            LCD_RW(0);
   \                     ??CrossCallReturnLabel_173:
   \   000009 2000                  JRA       ?Subroutine0
   1102            LCDDataOut(Instr>>4);
   1103            PulseEnable();
   1104            LCDDataOut(Instr & 0x0F);
   1105            PulseEnable();
   1106          }
   1107          

   \                                 In section .far_func.text, align 1, keep-with-next
   1108          void LCDData(u8 Data)
   1109          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1110            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine8
   1111            LCD_RW(0);
   \                     ??CrossCallReturnLabel_19:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1112            LCDDataOut(Data>>4);
   1113            PulseEnable() ;
   1114            LCDDataOut(Data & 0x0F) ;
   1115            PulseEnable();
   1116          }
   1117          

   \                                 In section .far_func.text, align 1, keep-with-next
   1118          void LCDInstrNibble(u8 Instr)
   1119          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1120            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine9
   1121            LCD_RW(0);
   1122            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_24:
   \   00000B AC000000              JPF       ??Subroutine57_0
   1123            PulseEnable();
   1124          }
   1125          

   \                                 In section .far_func.text, align 1, keep-with-next
   1126          void PulseEnable(void)
   1127          {
   1128            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1129             Delay1(1);
   1130            LCD_EN(1);
   1131             Delay1(1);
   1132            LCD_EN(0);
   \                     ??CrossCallReturnLabel_7:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine61_0
   1133             Delay1(1);
   \                     ??CrossCallReturnLabel_176:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1134          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_185:
   \   000006 5F                    CLRW      X
   \   000007 5C                    INCW      X
   \   000008 8D000000              CALLF     Delay1
   \   00000C A608                  LD        A, #0x8
   \   00000E AE500A                LDW       X, #0x500a
   \   000011 8D000000              CALLF     GPIO_WriteHigh
   \   000015 5F                    CLRW      X
   \   000016 5C                    INCW      X
   \   000017 AC000000              JPF       Delay1
   1135          

   \                                 In section .far_func.text, align 1, keep-with-next
   1136          void LCD_Busy(void)
   1137          {
   1138             //set Port D7 as Input
   1139             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1140             //Set Read
   1141             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine8
   1142             LCD_RS(0);
   \                     ??CrossCallReturnLabel_18:
   \   000013 8D000000              CALLF     ?Subroutine10
   1143             // Read Busy Flag
   1144                timer2=0;
   \                     ??CrossCallReturnLabel_174:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1145             do
   1146             {
   1147             // Enable set
   1148               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1149                Delay1(1);
   1150               LCD_EN(1);
   1151                Delay1(1);
   1152             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_6:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1153                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1154                //Clear read
   1155              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine61_0
   1156             //set Port D7 as Output
   1157             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_182:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1158          
   1159          }
   1160          
   1161          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A680                  LD        A, #0x80
   \   000002                       REQUIRE ??Subroutine58_0
   \   000002                       ;               // Fall through to label ??Subroutine58_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine59_0
   \   000004                       ;               // Fall through to label ??Subroutine59_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   1162          void LCD(u8 data)
   1163           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1164             //  static u8 linet=0;
   1165          
   1166          
   1167               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 2656                  JRNE      L:??CrossCallReturnLabel_162
   1168               {
   1169          
   1170                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 270E                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 2717                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2720                  JREQ      L:??LCD_3
   \   000017 2028                  JRA       L:??LCD_4
   1171                   {
   1172                   case 0:
   1173                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 8D000000              CALLF     ?Subroutine18
   1174                     count=0;
   1175                     break;
   \                     ??CrossCallReturnLabel_160:
   \   00001D 2022                  JRA       L:??LCD_4
   1176                   case 1:
   1177                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00001F A6C0                  LD        A, #0xc0
   \   000021 8D000000              CALLF     LCDInstr
   1178                     count=20;
   \   000025 35140000              MOV       L:count, #0x14
   1179                     break;
   \   000029 2016                  JRA       L:??LCD_4
   1180                   case 2:
   1181                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00002B A694                  LD        A, #0x94
   \   00002D 8D000000              CALLF     LCDInstr
   1182                     count=40;
   \   000031 35280000              MOV       L:count, #0x28
   1183                     break;
   \   000035 200A                  JRA       L:??LCD_4
   1184                   case 3:
   1185                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000037 A6D4                  LD        A, #0xd4
   \   000039 8D000000              CALLF     LCDInstr
   1186                     count=60;
   \   00003D 353C0000              MOV       L:count, #0x3c
   1187                     break;
   1188                   //default:
   1189                    //  LCDInstr(0x80 |0x40);    //Line 1
   1190                    }
   1191                   line_lcd++;
   \                     ??LCD_4:
   \   000041 C60000                LD        A, L:line_lcd
   \   000044 4C                    INC       A
   \   000045 C70000                LD        L:line_lcd, A
   1192                   if (line_lcd>=5)
   \   000048 A105                  CP        A, #0x5
   \   00004A 250F                  JRC       L:??LCD_5
   1193                   {
   1194                    line_lcd=1;   //line >=5
   \   00004C 35010000              MOV       L:line_lcd, #0x1
   1195                    LCDInstr(0x01); //Clear LCD
   \   000050 8D000000              CALLF     ?Subroutine52
   1196                    Delay1(2500);
   \                     ??CrossCallReturnLabel_148:
   \   000054 AE09C4                LDW       X, #0x9c4
   \   000057 8D000000              CALLF     Delay1
   1197                   }
   1198          
   1199                   Delay1(1);
   \                     ??LCD_5:
   \   00005B 8D000000              CALLF     ??Subroutine59_0
   1200          
   1201          
   1202               }
   1203          
   1204          
   1205               if (count==20)
   \                     ??CrossCallReturnLabel_162:
   \   00005F C60000                LD        A, L:count
   \   000062 A114                  CP        A, #0x14
   \   000064 260A                  JRNE      L:??LCD_6
   1206                {
   1207                  LCDInstr(0x80 | 0x40);
   \   000066 A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   000068 8D000000              CALLF     LCDInstr
   1208                  Delay1(1);
   \                     ??LCD_8:
   \   00006C 5F                    CLRW      X
   \   00006D 5C                    INCW      X
   \   00006E 2023                  JRA       ??LCD_9
   1209                }
   1210                   else if(count==40)
   \                     ??LCD_6:
   \   000070 A128                  CP        A, #0x28
   \   000072 2604                  JRNE      L:??LCD_10
   1211                  {
   1212                    LCDInstr(0x80 | 0x14);
   \   000074 A694                  LD        A, #0x94
   \   000076 20F0                  JRA       ??LCD_7
   1213                    Delay1(1);
   1214                  }
   1215                    else if(count==60)
   \                     ??LCD_10:
   \   000078 A13C                  CP        A, #0x3c
   \   00007A 2608                  JRNE      L:??LCD_11
   1216                    {
   1217                      LCDInstr(0x80 | 0x54);
   \   00007C A6D4                  LD        A, #0xd4
   \   00007E 8D000000              CALLF     ??Subroutine58_0
   1218                      count=0;
   1219                      Delay1(1);
   \                     ??CrossCallReturnLabel_161:
   \   000082 20E8                  JRA       ??LCD_8
   1220                    }
   1221                      else if(count >80)
   \                     ??LCD_11:
   \   000084 A151                  CP        A, #0x51
   \   000086 250F                  JRC       L:??LCD_12
   1222                        {
   1223                          count=0;
   \   000088 725F0000              CLR       L:count
   1224                          LCDInstr(0x01); //Clear LCD
   \   00008C 8D000000              CALLF     ?Subroutine52
   1225                          Delay1(250);
   \                     ??CrossCallReturnLabel_147:
   \   000090 AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   000093 8D000000              CALLF     Delay1
   1226                        }
   1227          
   1228          
   1229              /*
   1230                   line++;
   1231                   if (line>3)
   1232                   {
   1233                     line=1;  //Line 0 for Time
   1234                   }
   1235                 switch(line)
   1236                   {
   1237                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1238                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1239                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1240                   default : LCDInstr(0x80 | 0x40); // Line 1
   1241                   }
   1242                   Delay(1);
   1243                   count=0;
   1244                }
   1245          
   1246               */
   1247          
   1248               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   000097 B600                  LD        A, S:?b8
   \   000099 A11C                  CP        A, #0x1c
   \   00009B 250B                  JRC       L:??LCD_13
   1249               {
   1250                 LCDData(data);
   \   00009D 8D000000              CALLF     ?Subroutine6
   1251                  Delay1(1);
   1252                 count++;
   \                     ??CrossCallReturnLabel_165:
   \   0000A1 C60000                LD        A, L:count
   \   0000A4 4C                    INC       A
   \   0000A5 C70000                LD        L:count, A
   1253               }
   1254           }
   \                     ??LCD_13:
   \   0000A8 320000                POP       S:?b8
   \   0000AB 87                    RETF
   1255          

   \                                 In section .far_func.text, align 1, keep-with-next
   1256          void InitDelayTimer()
   1257          {
   1258             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1259             //Tclock 16/8=2Mhz  /20 10us
   1260                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1261                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1262                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1263                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1264            //Enable TIM2
   1265                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1266          
   1267          }
   1268          

   \                                 In section .far_func.text, align 1, keep-with-next
   1269          bool DS18_Write(u8 data)
   1270          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1271            disableInterrupts();
   \   000006 9B                    SIM
   1272            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1273            {
   1274             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine11
   1275             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1276             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_27:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_172
   \   00001A 8D000000              CALLF     ?Subroutine17
   1277               //else DS18(0);
   1278             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_172:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1279             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine17
   1280             //Delay1(0);
   1281            }
   \                     ??CrossCallReturnLabel_171:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1282            enableInterrupts();
   \   000032 9A                    RIM
   1283            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1284          
   1285          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine60_0
   \   000002                       ;               // Fall through to label ??Subroutine60_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_144:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 A604                  LD        A, #0x4
   \   000002 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_156:
   \   000006 87                    RETF
   1286          
   1287          

   \                                 In section .far_func.text, align 1, keep-with-next
   1288          u8  DS18_Read()
   1289          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1290              //Init DS18b20 data pin as Input
   1291          
   1292            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1293              disableInterrupts();
   \   000006 9B                    SIM
   1294            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1295            {
   1296              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine11
   1297              Delay_us(1); //Start time slot 4,5 us
   1298              DS18(1);
   \                     ??CrossCallReturnLabel_26:
   \   00000D 8D000000              CALLF     ?Subroutine17
   1299              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_169:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1300              //Delay1(0);
   1301             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_46:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1302              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1303              //  DS18(1);  // Next bit
   1304             // Delay1(0);
   1305          
   1306            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1307              enableInterrupts();
   \   000046 9A                    RIM
   1308              //Init DS18b20 data pin
   1309             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1310             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1311          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1312          

   \                                 In section .far_func.text, align 1, keep-with-next
   1313          bool DS18_Reset()
   1314          {
   1315             //Init Reset Pulse
   1316              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine51
   1317              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_143:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1318              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine17
   1319              //Delay1(1);
   1320              timer2=0;
   \                     ??CrossCallReturnLabel_170:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1321              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_62:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_45:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1322              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_63:
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1323              // Delay1(10);
   1324              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000027 AE0014                LDW       X, #0x14
   \   00002A 8D000000              CALLF     Delay1
   1325          
   1326              return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 87                    RETF
   1327          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1328          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1329          u8 temperature ()
   1330          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1331          
   1332             //Init Reset Pulse
   1333               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_87:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1334             //Skip ROM Command 0xCC
   1335              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine31
   1336             //Function command  CONVERT T [44h]
   1337              DS18_Write(0x44);
   1338              //Wait util end convert
   1339              timer2=0;
   1340               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_81:
   \   000013 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_65:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_81
   1341                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1342               //u8 temp8=timer2;
   1343              //Init Reset Pulse
   1344              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_88:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1345              // Skip ROM Command 0xCC
   1346              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine30
   1347              //Function command READ SCRATCHPAD [BEh]
   1348              DS18_Write(0xBE);
   1349               u8 temp1=DS18_Read();
   1350               u8 temp2=DS18_Read();
   1351              DS18_Reset();
   \                     ??CrossCallReturnLabel_79:
   \   000033 8D000000              CALLF     DS18_Reset
   1352                u16 result = temp2*256+temp1;
   1353                temp1= (u8)(result>>3);
   1354               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1355          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine64_0
   \                     ??CrossCallReturnLabel_201:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1356          

   \                                 In section .far_func.text, align 1, keep-with-next
   1357          bool Read_DS18()
   1358          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1359          
   1360             //Init Reset Pulse
   1361               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_85:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1362             //Skip ROM Command 0xCC
   1363              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine31
   1364             //Function command  CONVERT T [44h]
   1365              DS18_Write(0x44);
   1366              //Wait util end convert
   1367              timer2=0;
   1368               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_80:
   \   000013 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_64:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_80
   1369                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1370               //u8 temp8=timer2;
   1371              //Init Reset Pulse
   1372              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_86:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1373              // Skip ROM Command 0xCC
   1374              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine30
   1375              //Function command READ SCRATCHPAD [BEh]
   1376              DS18_Write(0xBE);
   1377               u8 temp1=DS18_Read();
   1378               u8 temp2=DS18_Read();
   1379               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_78:
   \   000033 8D000000              CALLF     ?Subroutine36
   1380               u8 temp4=DS18_Read();
   1381               u8 temp5=DS18_Read();
   1382               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_92:
   \   000037 8D000000              CALLF     ?Subroutine36
   1383               u8 temp7=DS18_Read();
   1384               u8 temp8=DS18_Read();
   1385               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_91:
   \   00003B 8D000000              CALLF     DS18_Read
   1386          
   1387               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1388          
   1389                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1390                result2=0;
   \   000047 725F0000              CLR       L:result2
   1391                u16 result = temp2*256+temp1;
   1392                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   00004F C70000                LD        L:result1, A
   1393                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1394                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1395          
   1396          
   1397                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1398               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1399               //line_lcd=1;
   1400               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1401               // while (!key_ok_on());
   1402          
   1403               //u8 temp3=DS18_Read();
   1404          
   1405              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1406          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1407          

   \                                 In section .far_func.text, align 1, keep-with-next
   1408          bool DS18Set ()
   1409          {
   1410               //Init Reset Pulse
   1411              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_84:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1412             //Skip ROM Command 0xCC
   1413              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1414             //Function command  WRITE SCRATCHPAD 0x4E
   1415              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1416             //Write 3 bytes last is config reg
   1417              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1418              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1419              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1420          
   1421          
   1422          
   1423          
   1424            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1425          }
   1426          
   1427          
   1428          
   1429          
   1430           /*
   1431          u16 Average()
   1432          {
   1433           //Find average in measure
   1434            u8 i=0;
   1435            u16 Summa=0;
   1436            do
   1437            {
   1438             Summa+=measure[i++];
   1439            } while ( measure[i]!=0);
   1440             if(i!=0) Summa=Summa/i;
   1441             return Summa;
   1442          }
   1443             */
   1444          

   \                                 In section .far_func.text, align 1, keep-with-next
   1445          PUTCHAR_PROTOTYPE
   1446          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1447            /* Place your implementation of fputc here */
   1448            /* e.g. write a character to the USART */
   1449                //USART_SendData(USART3, (u8) ch);
   1450               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1451             /* Loop until the end of transmission */
   1452              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1453            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1454          }
   1455          
   1456          

   \                                 In section .far_func.text, align 1, keep-with-next
   1457          void Delay1(u16 Delay)
   1458          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1459              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1460            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1461            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1462          }
   \   00000D 87                    RETF
   1463          

   \                                 In section .far_func.text, align 1, keep-with-next
   1464           void Delay2(u16 Delay)
   1465          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1466            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1467            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1468          }
   \   00000D 87                    RETF
   1469          
   1470          

   \                                 In section .far_func.text, align 1, keep-with-next
   1471          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1472          {
   1473            //disableInterrupts();
   1474            do
   1475              {
   1476                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1477                nop();
   \   000001 9D                    NOP
   1478              }
   1479              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1480            //enableInterrupts();
   1481          }
   \   000005 87                    RETF
   1482          
   1483          
   1484          
   1485          /*
   1486          void Delay12 (u16 Delay)
   1487          {
   1488            timer2=0;
   1489            while ( timer2 < Delay); ;
   1490          }
   1491          */
   1492          
   1493          
   1494          #ifdef USE_FULL_ASSERT
   1495          
   1496          /**
   1497            * @brief  Reports the name of the source file and the source line number
   1498            *   where the assert_param error has occurred.
   1499            * @param file: pointer to the source file name
   1500            * @param line: assert_param error line source number
   1501            * @retval : None
   1502            */

   \                                 In section .far_func.text, align 1, keep-with-next
   1503          void assert_failed(u8* file, u32 line)
   1504          {
   1505            /* User can add his own implementation to report the file name and line number,
   1506               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1507          
   1508            /* Infinite loop */
   1509            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1510            {
   1511          
   1512            }
   1513          }
   1514          #endif
   1515          
   1516          

   \                                 In section .far_func.text, align 1, keep-with-next
   1517          void Display_Line(char* line)
   1518          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1519            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1520            u8 count;
   1521              //Set Cursor to First Line
   1522             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1523             count=0;
   \   000010 3F00                  CLR       S:?b10
   1524             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine59_0
   1525            do
   1526            {
   1527          
   1528              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_163:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1529               {
   1530                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine6
   1531                  Delay1(1);
   1532                 count++;
   \                     ??CrossCallReturnLabel_166:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1533               }
   1534               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1535            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_163
   1536          
   1537             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1538          
   1539          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1540          

   \                                 In section .far_func.text, align 1, keep-with-next
   1541          void Rotate_Line( char * line)
   1542          {
   1543          
   1544             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1545             char temp_next;
   1546          
   1547             do
   1548             {
   1549                temp_next=*(line+1);
   1550               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1551                //line++;
   1552                //temp_next=*line;
   1553               //*line=*line++;
   1554             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1555             line--;
   1556             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1557          
   1558          }
   \   000012 87                    RETF
   1559          

   \                                 In section .far_func.text, align 1, keep-with-next
   1560          void Clear_Line1 ()
   1561          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1562               //Set Cursor to First Line
   1563             LCDInstr(0x80 | 0x00);
   \   000003 8D000000              CALLF     ?Subroutine18
   1564             count=0;
   1565             Delay1(1);
   \                     ??CrossCallReturnLabel_159:
   \   000007 8D000000              CALLF     ??Subroutine59_0
   1566              u8 count=0;
   \                     ??CrossCallReturnLabel_164:
   \   00000B 35080000              MOV       S:?b8, #0x8
   1567             do
   1568             {
   1569               LCDData(' ');
   \                     ??Clear_Line1_0:
   \   00000F A620                  LD        A, #0x20
   \   000011 8D000000              CALLF     ?Subroutine6
   1570                  Delay1(1);
   1571                  count++;
   1572             }while (count<8);
   \                     ??CrossCallReturnLabel_167:
   \   000015 B600                  LD        A, S:?b8
   \   000017 4A                    DEC       A
   \   000018 B700                  LD        S:?b8, A
   \   00001A 26F3                  JRNE      L:??Clear_Line1_0
   1573          
   1574          
   1575          }
   \   00001C 320000                POP       S:?b8
   \   00001F 87                    RETF

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "TIMER ON">`:
   \   000000 54494D455220          DC8 "TIMER ON"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "TIMER OFF">`:
   \   000000 54494D455220          DC8 "TIMER OFF"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d.%dC %s ">`:
   \   000000 25642E256443          DC8 "%d.%dC %s "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"
   1576          
   1577          
   1578          
   1579          
   1580          
   1581          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     line1                            40
     string1                          10
     change                            1
     result                            4
     k                                 2
     status                            2
     ??Subroutine60_0                  7
     ?Subroutine42                     7
     main                            558
     ?Subroutine54                     2
     ??Subroutine64_0                  8
     ?Subroutine48                     2
     ??Subroutine65_0                 12
     ?Subroutine41                    11
     ?Subroutine27                    16
     ?Subroutine22                    10
     ?Subroutine13                     7
     ?Subroutine56                     7
     ?Subroutine5                      9
     ?Subroutine1                     35
     Power_On                         11
     ?Subroutine35                    23
     Power_Off                        11
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine47                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine46                     1
     ??Subroutine63_0                  7
     ?Subroutine45                     9
     ?Subroutine44                    11
     ReadDS1307                      109
     ?Subroutine33                    11
     ?Subroutine28                    13
     ?Subroutine26                     8
     ?Subroutine53                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine43                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine52                     6
     Set_Clock                       395
     ?Subroutine32                     6
     ??Subroutine62_0                  5
     ?Subroutine24                    10
     ?Subroutine14                    16
     adj                              77
     key_ok_on                        41
     ?Subroutine55                     7
     key_plus_on                      37
     ?Subroutine40                     7
     ?Subroutine23                     7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine15                    26
     Set_Delay_Allarm                352
     ?Subroutine21                    15
     ?Subroutine12                    15
     ?Subroutine7                      5
     ?Subroutine2                     29
     ?Subroutine49                     9
     Save_Status                      10
     Read_Allarm                     103
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine38                     9
     ?Subroutine37                     9
     ?Subroutine29                    12
     InitClk                          56
     ?Subroutine39                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine8                      7
     ??Subroutine61_0                  5
     ?Subroutine50                     7
     ?Subroutine10                     2
     InitLcd                          92
     ?Subroutine16                    17
     ?Subroutine9                     11
     ?Subroutine0                     13
     ??Subroutine57_0                 10
     ?Subroutine20                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine4                     27
     LCD_Busy                         69
     ?Subroutine18                     2
     ??Subroutine58_0                  9
     ?Subroutine6                      4
     ??Subroutine59_0                  6
     LCD                             172
     InitDelayTimer                   29
     DS18_Write                       57
     ?Subroutine17                     2
     ?Subroutine11                    10
     ?Subroutine51                     7
     DS18_Read                        77
     ?Subroutine19                    12
     DS18_Reset                       49
     ?Subroutine25                     7
     ?Subroutine34                     7
     temperature                      63
     ?Subroutine31                    17
     ?Subroutine30                    25
     ?Subroutine3                     21
     Read_DS18                       121
     ?Subroutine36                    12
     DS18Set                          41
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      32
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "TIMER ON">            9
     ?<Constant "TIMER OFF">          10
     ?<Constant "%d.%dC %s ">         11
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4
     ?<Constant "\n%d.%d">             7

 
 4 237 bytes in section .far_func.text
    95 bytes in section .near.bss
     3 bytes in section .near.data
   210 bytes in section .near.rodata
 
 4 237 bytes of CODE  memory
   210 bytes of CONST memory
    98 bytes of DATA  memory

Errors: none
Warnings: none
