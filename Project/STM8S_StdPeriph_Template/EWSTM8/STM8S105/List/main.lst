###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             20/Sep/2013  21:10:01 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     52          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     53          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     54          
     55          #define key_ok    GPIO_PIN_4
     56          #define key_plus  GPIO_PIN_1
     57          #define key_minus GPIO_PIN_2
     58            //DS18B20  Temp Sensor
     59          #define ds18_data GPIO_PIN_2 //2
     60          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     61            //Power
     62          #define power_pin GPIO_PIN_3
     63          
     64          
     65          
     66          //EEPROM Address;
     67          #define EEPROM_ADDR 0x4000
     68          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     69          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     70          #define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     71          #define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     72          #define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     73          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     74          #define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     75          #define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     76          #define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     77          
     78          #ifdef __GNUC__
     79            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     80               set to 'Yes') calls __io_putchar() */
     81            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     82          #else
     83            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     84          #endif /* __GNUC__ */
     85          
     86          
     87          
     88          
     89          #define SpecialSymbol 0x1b //Esc to start message
     90          //#define data_size 20
     91          #define key_time 8000
     92          #define key_time_ok 15000
     93          #define key_time_press 4000
     94          #define key_time_release 400
     95          #define DS_Control  0x10  // Out 1s
     96          #define time_menu 10  // 5s
     97          
     98          
     99          
    100          
    101          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    102          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    103          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    104          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    105          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    106          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    107          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    108          //char data[data_size];
    109          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    110          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    111          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    115          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    116          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    117          u8 month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    118          u8 year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    130          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    131          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    132          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    133          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    139          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          char  daily_dispaly,month_display;
   \                     daily_dispaly:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     month_display:
   \   000000                       DS8 1
    142          
    143          
    144          

   \                                 In section .near.bss, align 1
    145          char line1[8];
   \                     line1:
   \   000000                       DS8 8
    146          //char string1[10];
    147          //char string2[10];

   \                                 In section .near.bss, align 1
    148          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    150          
    151          //u8 index=0;

   \                                 In section .near.bss, align 1
    152          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    153          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    154          
    155          
    156           struct   status_reg
    157           {
    158             unsigned on:1;
    159             unsigned timer_on:1;
    160             unsigned daily:1;
    161             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    162           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    163          
    164          //time_t  ltime;
    165          //struct tm ptim;
    166          
    167          
    168          
    169          
    170          
    171          /* Private function prototypes -----------------------------------------------*/
    172          void InitHardware();
    173          void GpioConfiguration();
    174          void InitClk();
    175          void InitAdc();
    176          void InitI2C();
    177          void EEPROM_INIT();
    178          bool ReadDS1307();
    179          //void InitUart();
    180          void InitLcd();
    181          void InitDelayTimer2();
    182          void InitDelayTimer3();
    183          void Delay1( u16 Delay);
    184          void Delay2( u16 Delay);
    185          void Delay_us(u16 Delay);
    186          void LCDInstrNibble (u8 Instr);
    187          void LCDInstr(u8 Instr);
    188          void LCDDataOut(u8 data);
    189          void LCD_Busy();
    190          void PulseEnable();
    191          //void SendData();
    192          void SendChar(u8 Char);
    193          //void Send_Hello();
    194          bool Set_Clock();
    195          bool key_ok_on();
    196          bool key_plus_on();
    197          bool key_minus_on();
    198          bool key_ok_plus();
    199          bool Init_DS1307(void);
    200          bool Check_DS1307(void);
    201          bool I2C_Start(void);
    202          bool I2C_WA(u8 address);
    203          bool I2C_WD(u8 data);
    204          bool I2C_RA(u8 address);
    205          bool Set_DS1307();
    206          //bool Set_Delay_Allarm();
    207          bool Set_Timer_On();
    208          bool Set_Timer_Off();
    209          bool Read_Allarm();
    210          bool Read_DS18();
    211          bool DS18_Write( u8 data);
    212          bool DS18_Reset();
    213          bool DS18Set();
    214          u8 temperature();
    215          u8 DS18_Read();
    216          u8 convert_tobcd(u8 data);
    217          u8 I2C_RD(void);
    218          u8 adj(u8 min,u8 max,u8 now);
    219          u8 bcd2hex(u8 bcd);
    220          void Power_On(void);
    221          void Power_Off();
    222          void Save_Status();
    223          void Rotate_Line( char * line);
    224          void Display_Line(char * line);
    225          void Clear_Line1(void);
    226          void Clear_Line2(void);
    227          void Menu(void);
    228          u8 Key_Press(void);
    229          void Display(void);
    230          bool Set_Date(void);
    231          
    232          u16  Average();
    233          
    234          
    235          /* Private functions ---------------------------------------------------------*/
    236          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1
    237          void main(void)
    238          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    239              /*High speed internal clock prescaler: 1*/
    240              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    241          
    242              InitClk();
   \   000003 8D000000              CALLF     InitClk
    243              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    244              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    245              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    246              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine16
    247              //InitUart();
    248               enableInterrupts();
   \                     ??CrossCallReturnLabel_39:
   \   000017 9A                    RIM
    249              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    250               InitLcd();
   \   000018 8D000000              CALLF     InitLcd
    251              //InitAdc();
    252              InitI2C();
   \   00001C 8D000000              CALLF     InitI2C
    253          
    254              //year=bcd2hex(13);
    255              Delay1(1000);
   \   000020 AE03E8                LDW       X, #0x3e8
   \   000023 8D000000              CALLF     Delay1
    256               if (!ReadDS1307())
   \   000027 8D000000              CALLF     ReadDS1307
   \   00002B A100                  CP        A, #0x0
   \   00002D 2615                  JRNE      L:??main_0
    257               {
    258                 printf("\n E2:%d",error);
   \   00002F C60000                LD        A, L:error
   \   000032 5F                    CLRW      X
   \   000033 97                    LD        XL, A
   \   000034 89                    PUSHW     X
   \   000035 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000038 8D000000              CALLF     printf
   \   00003C 5B02                  ADD       SP, #0x2
    259                 // Reset the CPU: Enable the watchdog and wait until it expires
    260                 IWDG->KR = IWDG_KEY_ENABLE;
   \   00003E 35CC50E0              MOV       L:0x50e0, #0xcc
    261                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_1:
   \   000042 20FE                  JRA       L:??main_1
    262               }
    263               //Send_Hello();
    264              //line_lcd=0;
    265              //printf("\nHello");
    266          
    267          
    268              if (!Check_DS1307())
   \                     ??main_0:
   \   000044 8D000000              CALLF     Check_DS1307
   \   000048 A100                  CP        A, #0x0
   \   00004A 2626                  JRNE      L:??main_2
    269              {
    270                 if (error!=0)
   \   00004C C60000                LD        A, L:error
   \   00004F 2712                  JREQ      L:??main_3
    271                 {
    272                  printf("\n E:%d",error);
   \   000051 5F                    CLRW      X
   \   000052 97                    LD        XL, A
   \   000053 89                    PUSHW     X
   \   000054 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000057 8D000000              CALLF     printf
   \   00005B 5B02                  ADD       SP, #0x2
    273                   while (!key_ok_on());
   \                     ??main_4:
   \   00005D 8D000000              CALLF     ?Subroutine40
    274          
    275                 }
   \                     ??CrossCallReturnLabel_119:
   \   000061 27FA                  JREQ      L:??main_4
    276               line_lcd=0;
   \                     ??main_3:
   \   000063 725F0000              CLR       L:line_lcd
    277               printf("\nSetClock");
   \   000067 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00006A 8D000000              CALLF     printf
    278                Set_Clock();
   \   00006E 8D000000              CALLF     Set_Clock
    279          
    280              }
    281          
    282          
    283                 //Read Status register from eepom and update it
    284                //size=sizeof(status);
    285               //u16 status
    286               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_2:
   \   000072 AE4000                LDW       X, #0x4000
   \   000075 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   000079 B700                  LD        S:?b8, A
   \   00007B AE4001                LDW       X, #0x4001
   \   00007E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   000082 905F                  CLRW      Y
   \   000084 9097                  LD        YL, A
   \   000086 5F                    CLRW      X
   \   000087 41                    EXG       A, XL
   \   000088 B600                  LD        A, S:?b8
   \   00008A 41                    EXG       A, XL
   \   00008B 4F                    CLR       A
   \   00008C 02                    RLWA      X, A
   \   00008D 8D000000              CALLF     ??Subroutine75_0
   \                     ??CrossCallReturnLabel_242:
   \   000091 CF0000                LDW       L:status, X
    287                status_check = *(u16*)(&status);
   \   000094 CE0000                LDW       X, L:status
   \   000097 CF0000                LDW       L:status_check, X
    288              //When Start Check for Allarm and computing Daily_long_on
    289               if ( Read_Allarm() == TRUE)
   \   00009A 8D000000              CALLF     Read_Allarm
   \   00009E A101                  CP        A, #0x1
   \   0000A0 260B                  JRNE      L:??CrossCallReturnLabel_1
    290               {
    291                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000A2 8D000000              CALLF     ?Subroutine3
    292                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_3:
   \   0000A6 C60000                LD        A, L:daily_hour_off
   \   0000A9 8D000000              CALLF     ?Subroutine2
    293               }
    294          
    295          
    296                // Enable Timer3
    297                 TIM3_Cmd(ENABLE);
   \                     ??CrossCallReturnLabel_1:
   \   0000AD A601                  LD        A, #0x1
   \   0000AF 8D000000              CALLF     TIM3_Cmd
    298          
    299                     //Init DS18B20
    300              DS18Set();
   \   0000B3 8D000000              CALLF     DS18Set
    301              line_lcd=0;
   \   0000B7 725F0000              CLR       L:line_lcd
    302              if (!Read_DS18())
   \   0000BB 8D000000              CALLF     Read_DS18
   \   0000BF A100                  CP        A, #0x0
   \   0000C1 260D                  JRNE      L:??main_5
    303              {
    304               printf("\nDS_Err_I");
   \   0000C3 AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   0000C6 8D000000              CALLF     printf
    305                while (!key_ok_on());
   \                     ??main_6:
   \   0000CA 8D000000              CALLF     ?Subroutine40
    306              }
   \                     ??CrossCallReturnLabel_120:
   \   0000CE 27FA                  JREQ      L:??main_6
    307          
    308              daily_dispaly=' ';
   \                     ??main_5:
   \   0000D0 35200000              MOV       L:daily_dispaly, #0x20
    309              month_display=' ';
   \   0000D4 35200000              MOV       L:month_display, #0x20
   \   0000D8 2006                  JRA       L:??CrossCallReturnLabel_218
    310          
    311               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    312          
    313               // Working fuction
    314              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 month,u8 hours,u8 minutes,u8 seconds)
    315          
    316          
    317          
    318              // strcpy(line1,"Hello I am here! ");
    319              //  while(1)
    320              //  {
    321              //     Display_Line(line1);
    322              //     Delay2(20000);
    323              //  }
    324              //  while (!key_ok_on());
    325                 //sprintf(line1,"TIMER ON ");
    326              while(1)
    327              {
    328               // ADC1_Cmd (ENABLE);
    329          
    330                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    331                  // Delay2(10000);
    332                   //ttimer++;
    333                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    334                //   Delay2(5000);
    335          
    336                     //status_check = *(u16*)(&status);
    337          
    338          
    339                /*
    340               if (!ReadDS1307())
    341               {
    342                 printf("\n E2:%d",error);
    343                  //restart i2c
    344                // Reset the CPU: Enable the watchdog and wait until it expires
    345                 IWDG->KR = IWDG_KEY_ENABLE;
    346                 while ( 1 );    // Wait until reset occurs from IWDG
    347          
    348               }
    349               */
    350          
    351          
    352                if(key_ok_on()) Menu();
    353                if(key_plus_on()) Power_On();
    354                if(key_minus_on())Power_Off();
    355          
    356                /*
    357                //Check for Allarm
    358                    if (status.daily==1)
    359                  {
    360                u16 time_now=hours*60+minutes;
    361                status.on=0;
    362                     u16 time=time_on;
    363                     do
    364                    {
    365                       if(time==time_now)
    366                       {
    367                         status.on=1;
    368                          break ;
    369                       }
    370                        time++;
    371                         if( time==1441) time=0;
    372                    } while(!(time==time_off));
    373                   };
    374          
    375                 */
    376                      //Read Temperature
    377                  // if( ttimer > 5 )
    378                   //{
    379          
    380                     /*
    381                      result1=temperature();
    382                      if (result_old != result1) change=TRUE;
    383                       //else  change=FALSE;
    384                      result_old=result1;
    385                      result2=0;
    386                      if(result1%2!=0) result2=5;
    387                      result1/=2;
    388                     */
    389          
    390                     // char result3;
    391                     // ttimer=0;
    392                 //  }
    393          
    394                   //printf("\n%d.%d",result1,result2);
    395          
    396                     //Display
    397                     // line_lcd=0;
    398          
    399                  /*
    400                     if (status.daily==1)  sprintf(string1,"TIMER On");
    401                      else sprintf(string1,"TIMER Off");
    402                     if (status.monthly==1) sprintf(string2,"Monthly On");
    403                       else sprintf(string2,"Monthly Off");
    404                  */
    405          
    406          
    407                   /*
    408                       if (change)
    409                       {
    410                      sprintf(line1,"%d.%dC %s %s",result1,result2,string1,string2);
    411                         change=FALSE;
    412                       }
    413                     line_lcd=0;
    414                      Display_Line(line1);
    415                    line_lcd=1;
    416                    printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    417          
    418                   */
    419          
    420                      if(Time_Display) Display();  //
    421          
    422                     if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_7:
   \   0000DA A608                  LD        A, #0x8
   \   0000DC 8D000000              CALLF     ??Subroutine72_0
   \                     ??CrossCallReturnLabel_218:
   \   0000E0 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_121:
   \   0000E4 2704                  JREQ      L:??main_8
   \   0000E6 8D000000              CALLF     Menu
   \                     ??main_8:
   \   0000EA 8D000000              CALLF     key_plus_on
   \   0000EE A100                  CP        A, #0x0
   \   0000F0 2704                  JREQ      L:??main_9
   \   0000F2 8D000000              CALLF     Power_On
   \                     ??main_9:
   \   0000F6 8D000000              CALLF     key_minus_on
   \   0000FA A100                  CP        A, #0x0
   \   0000FC 2704                  JREQ      L:??main_10
   \   0000FE 8D000000              CALLF     Power_Off
   \                     ??main_10:
   \   000102 C60000                LD        A, L:Time_Display
   \   000105 2704                  JREQ      L:??main_11
   \   000107 8D000000              CALLF     Display
   \                     ??main_11:
   \   00010B CE0000                LDW       X, L:status
   \   00010E 9F                    LD        A, XL
   \   00010F A501                  BCP       A, #0x1
   \   000111 26C7                  JRNE      L:??main_7
    423                       else   GPIO_WriteLow(GPIOD, power_pin );
   \   000113 8D000000              CALLF     ?Subroutine16
    424          
    425          
    426          
    427              }
   \                     ??CrossCallReturnLabel_38:
   \   000117 20C7                  JRA       L:??CrossCallReturnLabel_218
    428          
    429          
    430          
    431          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine16:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine5:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 905F                  CLRW      Y
   \   000005 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_180:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_245:
   \   000010 CF0000                LDW       L:time_on, X
   \   000013 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine75_0
   \   000002                       ;               // Fall through to label ??Subroutine75_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine75_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_179:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_244:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine64:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0
    432          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine70_0
   \   000004                       ;               // Fall through to label ??Subroutine70_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
    433          void Display(void)
    434          {
    435             //Clear_Line1 ();
    436             result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    437             result2=0;
   \   000007 725F0000              CLR       L:result2
    438             if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    439             result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    440          
    441          
    442             if (status.monthly) month_display='M';
   \   000018 CE0000                LDW       X, L:status
   \   00001B 9F                    LD        A, XL
   \   00001C A508                  BCP       A, #0x8
   \   00001E 2704                  JREQ      L:??Display_1
   \   000020 354D0000              MOV       L:month_display, #0x4d
    443               //Blink D
    444             //if (status.on && status.daily)
    445             //{
    446               if (daily_dispaly=='D') daily_dispaly=' ';
   \                     ??Display_1:
   \   000024 C60000                LD        A, L:daily_dispaly
   \   000027 A144                  CP        A, #0x44
   \   000029 2606                  JRNE      L:??Display_2
   \   00002B 35200000              MOV       L:daily_dispaly, #0x20
   \   00002F 2004                  JRA       L:??Display_3
    447                else daily_dispaly='D';
   \                     ??Display_2:
   \   000031 35440000              MOV       L:daily_dispaly, #0x44
    448             //}
    449              //else  if (status.daily) d='D';
    450             sprintf(line1,"\n%d.%dC %c%c ",result1,result2,daily_dispaly,month_display);
   \                     ??Display_3:
   \   000035 C60000                LD        A, L:month_display
   \   000038 5F                    CLRW      X
   \   000039 97                    LD        XL, A
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:daily_dispaly
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:result2
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 C60000                LD        A, L:result1
   \   000048 97                    LD        XL, A
   \   000049 89                    PUSHW     X
   \   00004A 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC %c%c ">`
   \   00004E AE0000                LDW       X, #line1
   \   000051 8D000000              CALLF     sprintf
   \   000055 5B08                  ADD       SP, #0x8
    451             line_lcd=0;
   \   000057 725F0000              CLR       L:line_lcd
    452             printf(line1);
   \   00005B AE0000                LDW       X, #line1
   \   00005E 8D000000              CALLF     ?Subroutine27
    453          
    454             line_lcd=1;
    455             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_205:
   \   000062 89                    PUSHW     X
   \   000063 C60000                LD        A, L:minutes
   \   000066 97                    LD        XL, A
   \   000067 89                    PUSHW     X
   \   000068 C60000                LD        A, L:hours
   \   00006B 97                    LD        XL, A
   \   00006C 89                    PUSHW     X
   \   00006D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000070 8D000000              CALLF     printf
   \   000074 5B06                  ADD       SP, #0x6
    456          
    457          
    458            Time_Display=FALSE;
   \   000076 725F0000              CLR       L:Time_Display
    459          }
   \   00007A 87                    RETF
    460          

   \                                 In section .far_func.text, align 1
    461          void Power_On()
    462          {
    463            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine41
    464            status.daily=0; //Off Daily timer
    465            Save_Status();
   \                     ??CrossCallReturnLabel_123:
   \   00000A 8D000000              CALLF     Save_Status
    466            change=TRUE;
   \   00000E 35010000              MOV       L:change, #0x1
    467          }
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine41:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    468          

   \                                 In section .far_func.text, align 1
    469          void Power_Off()
    470          {
    471            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine41
    472            status.daily=0; //Off Daily alarm
    473            status.monthly=0; //Off Monthly alarm
   \                     ??CrossCallReturnLabel_122:
   \   00000A CE0000                LDW       X, L:status
   \   00000D 01                    RRWA      X, A
   \   00000E A4F7                  AND       A, #0xf7
   \   000010 02                    RLWA      X, A
   \   000011 CF0000                LDW       L:status, X
    474            Save_Status();
   \   000014 8D000000              CALLF     Save_Status
    475            change=TRUE;
   \   000018 35010000              MOV       L:change, #0x1
    476          }
   \   00001C 87                    RETF
    477          

   \                                 In section .far_func.text, align 1
    478          void InitI2C(void)
    479          {
    480             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    481             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    482             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    483          }
    484          

   \                                 In section .far_func.text, align 1, keep-with-next
    485          bool I2C_Start(void)
    486          {
    487             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    488                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    489              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_131:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    490                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    491                  {
    492                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    493                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    494                  }
    495                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    496          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    497          

   \                                 In section .far_func.text, align 1, keep-with-next
    498          bool I2C_WA(u8 address)
    499          {
    500            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    501                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    502                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_130:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    503                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    504                   {
    505                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    506                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    507                   }
    508                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    509          }
    510          

   \                                 In section .far_func.text, align 1, keep-with-next
    511          bool I2C_RA(u8 address)
    512          {
    513            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    514                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    515                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_132:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    516                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    517                   {
    518                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    519                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    520                   }
    521                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    522          }
    523          
    524          

   \                                 In section .far_func.text, align 1, keep-with-next
    525          bool I2C_WD(u8 data)
    526          {
    527           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    528             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    529             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_129:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    530              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    531              {
    532                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    533                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    534              }
    535               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    536          }
    537          

   \                                 In section .far_func.text, align 1, keep-with-next
    538          u8 I2C_RD(void)
    539          {
    540           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    541            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    542           //while((!(I2C->SR1 & 0x40))&&timeout);
    543           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    544           {
    545             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    546             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    547           }
    548           u8 data=I2C_ReceiveData();
    549           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    550          }
    551          
    552            /*
    553          bool Init_DS1307(void)
    554          {
    555             // Test DS1307
    556              error=0;
    557              if (!I2C_Start()) return FALSE;
    558              if(!I2C_WA(0xD0)) return FALSE;
    559              if(!I2C_WD(0x00)) return FALSE;
    560              if(!I2C_WD(0x00)) return FALSE;
    561              I2C_GenerateSTOP(ENABLE);
    562          
    563              // timeout=100;  error=4;
    564              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    565              //    if (!timeout)return FALSE ;
    566               return TRUE;
    567          }
    568             */
    569          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine74_0
   \   000001                       ;               // Fall through to label ??Subroutine74_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    570          bool  ReadDS1307(void)
    571          {
    572                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine45
    573                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_142:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    574                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_145:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    575                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_238:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    576                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine32
    577                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_83:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    578                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    579                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine30
    580                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_76:
   \   000028 C70000                LD        L:seconds, A
    581                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine30
    582                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_75:
   \   00002F C70000                LD        L:minutes, A
    583                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine30
    584                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_74:
   \   000036 C70000                LD        L:hours, A
    585                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine30
    586                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_73:
   \   00003D C70000                LD        L:days, A
    587                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine30
    588                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_72:
   \   000044 C70000                LD        L:`date`, A
    589                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine30
    590                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_71:
   \   00004B C70000                LD        L:month, A
    591                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine34
    592                   I2C_GenerateSTOP(ENABLE);
    593                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_84:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    594          
    595               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    596               //   u8 data1 = I2C_RD();
    597                //Last read byte by I2C slave
    598               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    599               //  I2C_GenerateSTOP(ENABLE);
    600               //  temp2= I2C_RD();
    601                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    602                    {
    603                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    604                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    605                    }
    606          
    607                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    608          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_177:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine62:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    609          

   \                                 In section .far_func.text, align 1, keep-with-next
    610          bool Check_DS1307(void)
    611          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    612             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    613                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine45
    614                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_141:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    615                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_144:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    616                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine74_0
   \                     ??CrossCallReturnLabel_241:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    617                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine32
    618                  //Last read byte by I2C slave
    619                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_82:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    620                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    621                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine62
    622                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_178:
   \   00002E B700                  LD        S:?b8, A
    623                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine34
    624                 I2C_GenerateSTOP(ENABLE);
    625                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_85:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    626                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    627          }
    628          

   \                                 In section .far_func.text, align 1, keep-with-next
    629          bool Set_DS1307()
    630          {
    631                 // convert hex or decimal to bcd format
    632          
    633          
    634                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine45
    635                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_140:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    636                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_143:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    637                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_237:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    638                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_133:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    639                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_134:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    640                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_135:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    641                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_136:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    642                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_137:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    643                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_138:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    644                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_139:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    645                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine74_0
   \                     ??CrossCallReturnLabel_239:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    646                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine74_0
   \                     ??CrossCallReturnLabel_240:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    647                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    648          
    649          
    650             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    651          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    652          
    653          

   \                                 In section .far_func.text, align 1, keep-with-next
    654          u8 convert_tobcd(u8 data)
    655          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    656             u8 data_second_decimal=data/10;
    657             u8 data_first_decimal=data - 10*data_second_decimal;
    658             data=16*data_second_decimal + data_first_decimal;
    659            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    660          }
    661          

   \                                 In section .far_func.text, align 1, keep-with-next
    662          u8 bcd2hex(u8 bcd)
    663          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    664            u8 hex=0;
    665            hex=(bcd>>4)*10 +(bcd&0x0f);
    666            bcd=0;
    667            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    668          }
    669          
    670          

   \                                 In section .far_func.text, align 1, keep-with-next
    671          bool Set_Clock()
    672          {
    673              //Clear Display
    674             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine19
    675             Delay1(1000);
    676             line_lcd=0;
    677              printf("\nYear>");
    678                do
    679              {
    680               line_lcd=1;
   \                     ??CrossCallReturnLabel_44:
   \   000004 8D000000              CALLF     ?Subroutine26
    681               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_61:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    682                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine67_0
    683              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_190:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_108:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_44
    684          
    685               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine39
    686              printf("\nMonth>");
    687                do
    688              {
    689               line_lcd=1;
   \                     ??CrossCallReturnLabel_102:
   \   000036 8D000000              CALLF     ?Subroutine26
    690               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_62:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    691                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    692              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_109:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_102
    693          
    694              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine20
    695               Delay1(1000);
    696                line_lcd=0;
    697              printf("\nDate>");
    698                do
    699              {
    700               line_lcd=1;
   \                     ??CrossCallReturnLabel_46:
   \   00006A 8D000000              CALLF     ?Subroutine26
    701               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_63:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    702                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    703              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_110:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_46
    704          
    705          
    706              //Clear Display
    707             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine21
    708             Delay1(1000);
    709             line_lcd=0;
    710              printf("\nDays>");
   \                     ??CrossCallReturnLabel_48:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    711                do
    712              {
    713                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    714               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    715                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    716              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_111:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    717          
    718          
    719          
    720             //Clear Display
    721             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine21
    722             Delay1(1000);
    723             line_lcd=0;
    724              printf("\nHour>");
   \                     ??CrossCallReturnLabel_49:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    725                do
    726              {
    727                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine70_0
    728               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_206:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    729                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine67_0
    730              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_189:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_112:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    731          
    732               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    733               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    734                do
    735              {
    736                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine70_0
    737               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_207:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    738                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine33
    739              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_195:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_113:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    740          
    741              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    742              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    743              do
    744              {
    745                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine70_0
    746               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_208:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    747                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine33
    748              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_194:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_114:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    749          
    750                // Set parameter to DS1307 + time byte
    751                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    752          
    753                //bool k=Check_DS1307();
    754          
    755            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    756          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_171:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_172:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine67_0
   \   000006                       ;               // Fall through to label ??Subroutine67_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_173:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_182:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr
    757          
    758          

   \                                 In section .far_func.text, align 1, keep-with-next
    759          u8 adj(u8 min,u8 max,u8 now)
    760          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    761             u8 adj=now;
    762             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    763             {
    764               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    765               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    766             }
    767             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    768             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    769             {
    770               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    771               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    772             }
    773             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    774             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    775          
    776             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    777          }
    778          
    779          

   \                                 In section .far_func.text, align 1, keep-with-next
    780          bool key_ok_on()
    781          {
    782            //Read Key OK
    783            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_77:
   \   000004 2627                  JRNE      L:??key_ok_on_0
    784             {
    785               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    786                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_78:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    787                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 250D                  JRC       L:??key_ok_on_0
    788                 {
    789                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    790                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;   //if realease retrun true
   \   000024 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_79:
   \   000028 2703                  JREQ      L:??key_ok_on_0
   \   00002A A601                  LD        A, #0x1
   \   00002C 87                    RETF
    791                 }
    792             }
    793          
    794            return FALSE;
   \                     ??key_ok_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    795          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    796          
    797          
    798          

   \                                 In section .far_func.text, align 1, keep-with-next
    799           bool key_plus_on()
    800          {
    801            //Read Key OK
    802              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_95:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2623                  JRNE      L:??key_plus_on_0
    803               {
    804               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    805                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_87:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_94:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    806                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_plus_on_0
    807                  {
    808                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_81:
   \   000026 2703                  JREQ      L:??key_plus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    809                  }
    810               }
    811          
    812            return FALSE;
   \                     ??key_plus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    813          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    814          
    815          

   \                                 In section .far_func.text, align 1, keep-with-next
    816            bool key_minus_on()
    817          {
    818            //Read Key OK
    819             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_97:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2623                  JRNE      L:??key_minus_on_0
    820               {
    821               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    822                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_86:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_96:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    823                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_minus_on_0
    824                  {
    825                   if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_80:
   \   000026 2703                  JREQ      L:??key_minus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    826                  }
    827               }
    828          
    829            return FALSE;
   \                     ??key_minus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    830          }
    831          
    832          

   \                                 In section .far_func.text, align 1
    833          bool  key_ok_plus()
    834          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    835            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_40:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    836            {
    837                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    838                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_88:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_41:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    839                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_89:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    840            }
    841          
    842           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    843          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine17:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    844          
    845          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006                       REQUIRE ??Subroutine68_0
   \   000006                       ;               // Fall through to label ??Subroutine68_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004                       REQUIRE ??Subroutine69_0
   \   000004                       ;               // Fall through to label ??Subroutine69_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_203:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_202:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    846          bool Set_Timer_On()
    847          {
    848          
    849             //clr
    850             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine21
    851             Delay1(1000);
    852             line_lcd=0;
    853             printf("\nH On>");
   \                     ??CrossCallReturnLabel_52:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On>">`
   \   000007 8D000000              CALLF     ?Subroutine38
    854              timer3=0;
    855            do
    856              {
    857               line_lcd=1;
   \                     ??CrossCallReturnLabel_100:
   \   00000B 8D000000              CALLF     ?Subroutine29
    858               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_68:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    859                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine67_0
    860              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_187:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_127:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_117:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_100
    861          
    862             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    863             Delay1(1000);
    864             line_lcd=0;
    865             printf("\nMin On>");
   \                     ??CrossCallReturnLabel_53:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On>">`
   \   000041 8D000000              CALLF     ?Subroutine38
    866              timer3=0;
    867            do
    868              {
    869               line_lcd=1;
   \                     ??CrossCallReturnLabel_101:
   \   000045 8D000000              CALLF     ?Subroutine29
    870               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_69:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    871                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine33
    872              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_192:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_128:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_118:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_101
    873          
    874             //Save data to eeprom
    875               status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E 8D000000              CALLF     ?Subroutine1
    876               EEPROM_INIT();
    877              //u8 temp =*(u8*)(&status);
    878              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    879               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    880               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    881               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_197:
   \   000072 C60000                LD        A, L:daily_hour_on
   \   000075 AE4002                LDW       X, #0x4002
   \   000078 8D000000              CALLF     ?Subroutine6
    882               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_17:
   \   00007C C60000                LD        A, L:daily_minute_on
   \   00007F AE4003                LDW       X, #0x4003
   \   000082 8D000000              CALLF     ?Subroutine4
    883               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    884                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_5:
   \   000086 8D000000              CALLF     ?Subroutine3
    885                 change=TRUE;
   \                     ??CrossCallReturnLabel_2:
   \   00008A 35010000              MOV       L:change, #0x1
    886          
    887             return TRUE;
   \   00008E A601                  LD        A, #0x1
   \   000090 87                    RETF
    888          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_201:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine56
   \                     ??CrossCallReturnLabel_200:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    889          

   \                                 In section .far_func.text, align 1, keep-with-next
    890          bool Set_Timer_Off()
    891          {
    892          
    893              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine21
    894              Delay1(1000);
    895              line_lcd=0;
    896              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_50:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine38
    897               timer3=0;
    898            do
    899              {
    900               line_lcd=1;
   \                     ??CrossCallReturnLabel_98:
   \   00000B 8D000000              CALLF     ?Subroutine28
    901               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_65:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    902                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine67_0
    903              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_188:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_125:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_115:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_98
    904          
    905            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    906             Delay1(1000);
    907             line_lcd=0;
    908             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_51:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   000041 8D000000              CALLF     ?Subroutine38
    909             timer3=0;
    910            do
    911              {
    912               line_lcd=1;
   \                     ??CrossCallReturnLabel_99:
   \   000045 8D000000              CALLF     ?Subroutine28
    913               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_66:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    914                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine33
    915              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_193:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_126:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_116:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_99
    916          
    917            //Save data to eeprom
    918               status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E 8D000000              CALLF     ?Subroutine1
    919               EEPROM_INIT();
    920              //u8 temp =*(u8*)(&status);
    921              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    922               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    923               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    924               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_196:
   \   000072 C60000                LD        A, L:daily_hour_off
   \   000075 AE4004                LDW       X, #0x4004
   \   000078 8D000000              CALLF     ?Subroutine6
    925               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_16:
   \   00007C C60000                LD        A, L:daily_minute_off
   \   00007F AE4005                LDW       X, #0x4005
   \   000082 8D000000              CALLF     ?Subroutine4
    926               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    927                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_6:
   \   000086 C60000                LD        A, L:daily_hour_off
   \   000089 905F                  CLRW      Y
   \   00008B 8D000000              CALLF     ?Subroutine2
    928                 change=TRUE;
   \                     ??CrossCallReturnLabel_0:
   \   00008F 35010000              MOV       L:change, #0x1
    929               return TRUE;
   \   000093 A601                  LD        A, #0x1
   \   000095 87                    RETF
    930          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    931          
    932          /*
    933               //Computing time_long_on
    934          
    935               u8 hour=daily_hour_on;
    936               u8 minute=daily_minute_on;
    937               daily_long_on=0;
    938               do
    939               {
    940                    daily_long_on++;
    941                    minute++;
    942                    if (minute==60)
    943                    {
    944                      minute=0;
    945                      hour++;
    946                    }
    947                    if(hour==24) hour=0;
    948          
    949               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
    950          
    951                //Display daily_long_on
    952              LCDInstr(0x01);
    953              Delay1(1000);
    954              line_lcd=0;
    955              printf("\nLong :");
    956          
    957                do
    958              {
    959               line_lcd=1;
    960               printf("\n%d",daily_long_on);
    961                 //daily_long_on=adj(0,1440,daily_long_on);
    962              } while (!key_ok_on());
    963          
    964              time_on=daily_hour_on*60+daily_minute_on;
    965              time_off= daily_hour_off*60+daily_minute_off;
    966              //Save data to eeprom
    967                status.daily=1;
    968               EEPROM_INIT();
    969              //u8 temp =*(u8*)(&status);
    970              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    971               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    972               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    973               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    974               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    975               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    976               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    977               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    978          
    979             return TRUE;
    980          
    981          }
    982            */
    983          

   \                                 In section .far_func.text, align 1
    984          void Save_Status()
    985          {
    986            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ??Subroutine69_0
    987            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    988            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    989            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_199:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    990          }
    991          

   \                                 In section .far_func.text, align 1
    992          bool Read_Allarm()
    993          {
    994             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   000007 C70000                LD        L:daily_hour_on, A
    995              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    996             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000017 C70000                LD        L:daily_minute_on, A
    997              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    998             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000025 C70000                LD        L:daily_hour_off, A
    999              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
   1000             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000033 C70000                LD        L:daily_minute_off, A
   1001              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
   1002             monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   \   00003D AE4006                LDW       X, #0x4006
   \   000040 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   000044 C70000                LD        L:monthly_year, A
   1003              if(monthly_year >99) return FALSE;
   \   000047 A164                  CP        A, #0x64
   \   000049 24C3                  JRNC      L:??Read_Allarm_1
   1004             monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   \   00004B AE4007                LDW       X, #0x4007
   \   00004E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000052 C70000                LD        L:monthly_month, A
   1005              if(monthly_month>12) return FALSE;
   \   000055 A10D                  CP        A, #0xd
   \   000057 24B5                  JRNC      L:??Read_Allarm_1
   1006             monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   \   000059 AE4008                LDW       X, #0x4008
   \   00005C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   000060 C70000                LD        L:monthly_date, A
   1007              if(monthly_date >31) return FALSE;
   \   000063 A120                  CP        A, #0x20
   \   000065 24A7                  JRNC      L:??Read_Allarm_1
   1008            return TRUE;
   \   000067 A601                  LD        A, #0x1
   \   000069 87                    RETF
   1009          }
   1010          

   \                                 In section .far_func.text, align 1, keep-with-next
   1011          void EEPROM_INIT()
   1012          {
   1013            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1014            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1015            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1016          
   1017          
   1018          
   1019          }
   1020          
   1021          

   \                                 In section .far_func.text, align 1
   1022          void GpioConfiguration()
   1023          {
   1024          
   1025            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1026          
   1027            // ADC PE6 NEW PB0
   1028            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1029          
   1030            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1031            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine51
   1032          
   1033            //PD0 Led
   1034            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_155:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine54
   1035            //I2C
   1036            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_163:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine54
   1037            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_164:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine55
   1038            // Remap Pins pb4,pb5  sda,scl ;
   1039          
   1040             //Init KEY OK,PLUS,MINUS
   1041            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_166:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine55
   1042            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_167:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine55
   1043            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_168:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine54
   1044          
   1045            //Init DS18b20 data pin
   1046            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_165:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine51
   1047          
   1048            // Power Pin
   1049             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_156:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
   1050          
   1051          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine55:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine51:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
   1052          

   \                                 In section .far_func.text, align 1
   1053          void InitClk()
   1054          {
   1055            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1056            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1057            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1058            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1059            CLK_SOURCE_HSI,       // Switch to internal timer.
   1060            DISABLE,              // Disable the clock switch interrupt.
   1061            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1062          
   1063            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine52
   1064            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_157:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine52
   1065            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_158:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine52
   1066            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_159:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine52
   1067            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_160:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1068          
   1069          
   1070          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1071          
   1072          
   1073          /*
   1074          void InitAdc()
   1075          {
   1076               ADC1_DeInit();
   1077               ADC1_StartConversion();
   1078          
   1079               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1080               //           ADC1_CHANNEL_0,
   1081               //           ADC1_PRESSEL_FCPU_D4,
   1082               //            ADC1_EXTTRIG_TIM,
   1083          
   1084          
   1085               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1086               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1087                                      ADC1_CHANNEL_0,
   1088                                      ADC1_ALIGN_RIGHT
   1089                                     );
   1090          
   1091          
   1092               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1093          
   1094          
   1095               //ADC1_Cmd (ENABLE);
   1096               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1097               ADC1_StartConversion();
   1098               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1099          
   1100          }
   1101          */
   1102          
   1103          
   1104          
   1105          /*
   1106          void InitUart()
   1107          {
   1108             UART2_DeInit();
   1109             UART2_Init((u32)9600,
   1110                        UART2_WORDLENGTH_8D,
   1111                        UART2_STOPBITS_1,
   1112                        UART2_PARITY_NO,
   1113                        UART2_SYNCMODE_CLOCK_DISABLE,
   1114                        UART2_MODE_TXRX_ENABLE
   1115                          );
   1116          
   1117             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1118             UART2_Cmd(ENABLE);
   1119          
   1120            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1121          }
   1122            */
   1123          
   1124          
   1125          /*
   1126          void SendChar( u8 Char)
   1127          {
   1128             UART2->DR = Char;
   1129            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1130          }
   1131          
   1132           */
   1133          
   1134           /*
   1135          void Send_Hello()
   1136          {
   1137            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1138             Delay1(10);
   1139             sprintf(data,"Hello");
   1140              u8 i=0;
   1141            do
   1142           {
   1143            SendChar(data[i++]);
   1144           } while (data[i]!=0);
   1145            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1146            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1147          
   1148          
   1149          
   1150          }
   1151          
   1152          
   1153          
   1154          
   1155          
   1156          void SendData()
   1157          {
   1158           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1159            Delay1(10);
   1160            u8 i=0;
   1161            sprintf(data,"%d %c",adcdata,0x0d);
   1162           do
   1163           {
   1164             SendChar(data[i++]);
   1165          
   1166           } while (data[i]!=0);
   1167             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1168            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1169            rx_data=0;
   1170          }
   1171          */
   1172          
   1173          
   1174           /*
   1175          u16 Average()
   1176          {
   1177           //Find average in measure
   1178            u8 i=0;
   1179            u16 Summa=0;
   1180            do
   1181            {
   1182             Summa+=measure[i++];
   1183            } while ( measure[i]!=0);
   1184             if(i!=0) Summa=Summa/i;
   1185             return Summa;
   1186          }
   1187             */
   1188          

   \                                 In section .far_func.text, align 1, keep-with-next
   1189          void LCDDataOut(u8 data)
   1190          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1191            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_227
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine73_0
   1192            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_227:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_32:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_228
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine73_0
   1193            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_228:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_31:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_229
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine73_0
   1194            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_229:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_30:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_230
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine73_0
   1195          }
   \                     ??CrossCallReturnLabel_230:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_236:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine58:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1196          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine73_0
   \   000002                       ;               // Fall through to label ??Subroutine73_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1197          void InitLcd()
   1198          {
   1199           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine13
   1200            LCD_RW(0);
   1201            LCD_RS(0);
   \                     ??CrossCallReturnLabel_35:
   \   000006 8D000000              CALLF     ?Subroutine14
   1202            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_225:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine18
   1203          
   1204            LCDInstrNibble(0x03);
   1205             Delay1(10);
   1206            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_43:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1207             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine18
   1208            LCDInstrNibble(0x03);
   1209             Delay1(10);
   1210          
   1211             //Line 4
   1212            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_42:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1213            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1214            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1215            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1216          
   1217            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1218            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1219          
   1220            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine23
   1221            Delay1(250);
   1222          
   1223            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_54:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1224            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1225          
   1226          
   1227          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_181:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_234:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_233:
   \   00000A 87                    RETF
   1228          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine73_0
   \                     ??CrossCallReturnLabel_231:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_186:
   \   00000D                       REQUIRE ??Subroutine66_0
   \   00000D                       ;               // Fall through to label ??Subroutine66_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_185:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1229          void LCDInstr(u8 Instr)
   1230          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1231            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine14
   1232            LCD_RW(0);
   \                     ??CrossCallReturnLabel_223:
   \   000009 2000                  JRA       ?Subroutine0
   1233            LCDDataOut(Instr>>4);
   1234            PulseEnable();
   1235            LCDDataOut(Instr & 0x0F);
   1236            PulseEnable();
   1237          }
   1238          

   \                                 In section .far_func.text, align 1, keep-with-next
   1239          void LCDData(u8 Data)
   1240          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1241            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1242            LCD_RW(0);
   \                     ??CrossCallReturnLabel_29:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1243            LCDDataOut(Data>>4);
   1244            PulseEnable() ;
   1245            LCDDataOut(Data & 0x0F) ;
   1246            PulseEnable();
   1247          }
   1248          

   \                                 In section .far_func.text, align 1, keep-with-next
   1249          void LCDInstrNibble(u8 Instr)
   1250          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1251            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine13
   1252            LCD_RW(0);
   1253            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_34:
   \   00000B AC000000              JPF       ??Subroutine66_0
   1254            PulseEnable();
   1255          }
   1256          

   \                                 In section .far_func.text, align 1, keep-with-next
   1257          void PulseEnable(void)
   1258          {
   1259            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine8
   1260             Delay1(1);
   1261            LCD_EN(1);
   1262             Delay1(1);
   1263            LCD_EN(0);
   \                     ??CrossCallReturnLabel_22:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine73_0
   1264             Delay1(1);
   \                     ??CrossCallReturnLabel_226:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1265          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_235:
   \   000006 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_214:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_213:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1266          

   \                                 In section .far_func.text, align 1, keep-with-next
   1267          void LCD_Busy(void)
   1268          {
   1269             //set Port D7 as Input
   1270             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1271             //Set Read
   1272             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1273             LCD_RS(0);
   \                     ??CrossCallReturnLabel_28:
   \   000013 8D000000              CALLF     ?Subroutine14
   1274             // Read Busy Flag
   1275                timer2=0;
   \                     ??CrossCallReturnLabel_224:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1276             do
   1277             {
   1278             // Enable set
   1279               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine8
   1280                Delay1(1);
   1281               LCD_EN(1);
   1282                Delay1(1);
   1283             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_23:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1284                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1285                //Clear read
   1286              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine73_0
   1287             //set Port D7 as Output
   1288             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_232:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1289          
   1290          }
   1291          
   1292          

   \                                 In section .far_func.text, align 1, keep-with-next
   1293          void LCD(u8 data)
   1294           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1295             //  static u8 linet=0;
   1296          
   1297          
   1298               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 2658                  JRNE      L:??CrossCallReturnLabel_211
   1299               {
   1300          
   1301                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2710                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 2719                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2722                  JREQ      L:??LCD_3
   \   000017 202A                  JRA       L:??LCD_4
   1302                   {
   1303                   case 0:
   1304                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     ?Subroutine61
   1305                     count=0;
   1306                     break;
   \                     ??CrossCallReturnLabel_174:
   \   00001F 2022                  JRA       L:??LCD_4
   1307                   case 1:
   1308                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000021 A6C0                  LD        A, #0xc0
   \   000023 8D000000              CALLF     LCDInstr
   1309                     count=20;
   \   000027 35140000              MOV       L:count, #0x14
   1310                     break;
   \   00002B 2016                  JRA       L:??LCD_4
   1311                   case 2:
   1312                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00002D A694                  LD        A, #0x94
   \   00002F 8D000000              CALLF     LCDInstr
   1313                     count=40;
   \   000033 35280000              MOV       L:count, #0x28
   1314                     break;
   \   000037 200A                  JRA       L:??LCD_4
   1315                   case 3:
   1316                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000039 A6D4                  LD        A, #0xd4
   \   00003B 8D000000              CALLF     LCDInstr
   1317                     count=60;
   \   00003F 353C0000              MOV       L:count, #0x3c
   1318                     break;
   1319                   //default:
   1320                    //  LCDInstr(0x80 |0x40);    //Line 1
   1321                    }
   1322                   line_lcd++;
   \                     ??LCD_4:
   \   000043 C60000                LD        A, L:line_lcd
   \   000046 4C                    INC       A
   \   000047 C70000                LD        L:line_lcd, A
   1323                   if (line_lcd>=5)
   \   00004A A105                  CP        A, #0x5
   \   00004C 250F                  JRC       L:??LCD_5
   1324                   {
   1325                    line_lcd=1;   //line >=5
   \   00004E 35010000              MOV       L:line_lcd, #0x1
   1326                    LCDInstr(0x01); //Clear LCD
   \   000052 8D000000              CALLF     ?Subroutine65
   1327                    Delay1(2500);
   \                     ??CrossCallReturnLabel_184:
   \   000056 AE09C4                LDW       X, #0x9c4
   \   000059 8D000000              CALLF     Delay1
   1328                   }
   1329          
   1330                   Delay1(1);
   \                     ??LCD_5:
   \   00005D 8D000000              CALLF     ??Subroutine71_0
   1331          
   1332          
   1333               }
   1334          
   1335          
   1336               if (count==20)
   \                     ??CrossCallReturnLabel_211:
   \   000061 C60000                LD        A, L:count
   \   000064 A114                  CP        A, #0x14
   \   000066 260A                  JRNE      L:??LCD_6
   1337                {
   1338                  LCDInstr(0x80 | 0x40);
   \   000068 A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006A 8D000000              CALLF     LCDInstr
   1339                  Delay1(1);
   \                     ??LCD_8:
   \   00006E 5F                    CLRW      X
   \   00006F 5C                    INCW      X
   \   000070 2023                  JRA       ??LCD_9
   1340                }
   1341                   else if(count==40)
   \                     ??LCD_6:
   \   000072 A128                  CP        A, #0x28
   \   000074 2604                  JRNE      L:??LCD_10
   1342                  {
   1343                    LCDInstr(0x80 | 0x14);
   \   000076 A694                  LD        A, #0x94
   \   000078 20F0                  JRA       ??LCD_7
   1344                    Delay1(1);
   1345                  }
   1346                    else if(count==60)
   \                     ??LCD_10:
   \   00007A A13C                  CP        A, #0x3c
   \   00007C 2608                  JRNE      L:??LCD_11
   1347                    {
   1348                      LCDInstr(0x80 | 0x54);
   \   00007E A6D4                  LD        A, #0xd4
   \   000080 8D000000              CALLF     ?Subroutine61
   1349                      count=0;
   1350                      Delay1(1);
   \                     ??CrossCallReturnLabel_175:
   \   000084 20E8                  JRA       ??LCD_8
   1351                    }
   1352                      else if(count >80)
   \                     ??LCD_11:
   \   000086 A151                  CP        A, #0x51
   \   000088 250F                  JRC       L:??LCD_12
   1353                        {
   1354                          count=0;
   \   00008A 725F0000              CLR       L:count
   1355                          LCDInstr(0x01); //Clear LCD
   \   00008E 8D000000              CALLF     ?Subroutine65
   1356                          Delay1(250);
   \                     ??CrossCallReturnLabel_183:
   \   000092 AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   000095 8D000000              CALLF     Delay1
   1357                        }
   1358          
   1359               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   000099 B600                  LD        A, S:?b8
   \   00009B A11C                  CP        A, #0x1c
   \   00009D 250B                  JRC       L:??LCD_13
   1360               {
   1361                 LCDData(data);
   \   00009F 8D000000              CALLF     ?Subroutine11
   1362                  Delay1(1);
   1363                 count++;
   \                     ??CrossCallReturnLabel_209:
   \   0000A3 C60000                LD        A, L:count
   \   0000A6 4C                    INC       A
   \   0000A7 C70000                LD        L:count, A
   1364               }
   1365           }
   \                     ??LCD_13:
   \   0000AA 320000                POP       S:?b8
   \   0000AD 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine71_0
   \   000004                       ;               // Fall through to label ??Subroutine71_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_215:
   \   000004 87                    RETF
   1366          

   \                                 In section .far_func.text, align 1, keep-with-next
   1367          void InitDelayTimer2()
   1368          {
   1369             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1370             //Tclock 16/8=2Mhz  /20 10us
   1371                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1372                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1373                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1374                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1375                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1376          
   1377          }
   1378          

   \                                 In section .far_func.text, align 1, keep-with-next
   1379          void InitDelayTimer3()
   1380          {
   1381             //Timer 3 use for 1s Delay
   1382             //Tclock 16000000/1024=15626
   1383                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1384                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1385                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1386                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1387          
   1388               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1389          
   1390          }
   1391          
   1392          
   1393          
   1394          

   \                                 In section .far_func.text, align 1, keep-with-next
   1395          bool DS18_Write(u8 data)
   1396          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1397            disableInterrupts();
   \   000006 9B                    SIM
   1398            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1399            {
   1400             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine15
   1401             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1402             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_37:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_222
   \   00001A 8D000000              CALLF     ?Subroutine22
   1403               //else DS18(0);
   1404             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_222:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1405             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine22
   1406             //Delay1(0);
   1407            }
   \                     ??CrossCallReturnLabel_221:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1408            enableInterrupts();
   \   000032 9A                    RIM
   1409            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1410          
   1411          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine72_0
   \   000002                       ;               // Fall through to label ??Subroutine72_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_169:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1412          
   1413          

   \                                 In section .far_func.text, align 1, keep-with-next
   1414          u8  DS18_Read()
   1415          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1416              //Init DS18b20 data pin as Input
   1417          
   1418            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1419              disableInterrupts();
   \   000006 9B                    SIM
   1420            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1421            {
   1422              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine15
   1423              Delay_us(1); //Start time slot 4,5 us
   1424              DS18(1);
   \                     ??CrossCallReturnLabel_36:
   \   00000D 8D000000              CALLF     ?Subroutine22
   1425              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_219:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1426              //Delay1(0);
   1427             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_57:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1428              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1429              //  DS18(1);  // Next bit
   1430             // Delay1(0);
   1431          
   1432            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1433              enableInterrupts();
   \   000046 9A                    RIM
   1434              //Init DS18b20 data pin
   1435             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1436             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1437          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1438          

   \                                 In section .far_func.text, align 1, keep-with-next
   1439          bool DS18_Reset()
   1440          {
   1441             //Init Reset Pulse
   1442              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine59
   1443              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_170:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1444              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine22
   1445              //Delay1(1);
   1446              timer2=0;
   \                     ??CrossCallReturnLabel_220:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1447              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_90:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_56:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1448              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_91:
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1449              // Delay1(10);
   1450              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000027 AE0014                LDW       X, #0x14
   \   00002A 8D000000              CALLF     Delay1
   1451          
   1452              return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 87                    RETF
   1453          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1454          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1455          u8 temperature ()
   1456          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1457          
   1458             //Init Reset Pulse
   1459               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_153:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1460             //Skip ROM Command 0xCC
   1461              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine49
   1462             //Function command  CONVERT T [44h]
   1463              DS18_Write(0x44);
   1464              //Wait util end convert
   1465              timer2=0;
   1466               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_149:
   \   000013 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_93:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_149
   1467                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1468               //u8 temp8=timer2;
   1469              //Init Reset Pulse
   1470              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_154:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1471              // Skip ROM Command 0xCC
   1472              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine48
   1473              //Function command READ SCRATCHPAD [BEh]
   1474              DS18_Write(0xBE);
   1475               u8 temp1=DS18_Read();
   1476               u8 temp2=DS18_Read();
   1477              DS18_Reset();
   \                     ??CrossCallReturnLabel_147:
   \   000033 8D000000              CALLF     DS18_Reset
   1478                u16 result = temp2*256+temp1;
   1479                temp1= (u8)(result>>3);
   1480               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_21:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1481          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine75_0
   \                     ??CrossCallReturnLabel_243:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1482          

   \                                 In section .far_func.text, align 1, keep-with-next
   1483          bool Read_DS18()
   1484          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1485          
   1486             //Init Reset Pulse
   1487               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_151:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1488             //Skip ROM Command 0xCC
   1489              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine49
   1490             //Function command  CONVERT T [44h]
   1491              DS18_Write(0x44);
   1492              //Wait util end convert
   1493              timer2=0;
   1494               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_148:
   \   000013 8D000000              CALLF     ?Subroutine36
   \                     ??CrossCallReturnLabel_92:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_148
   1495                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1496               //u8 temp8=timer2;
   1497              //Init Reset Pulse
   1498              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_152:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1499              // Skip ROM Command 0xCC
   1500              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine48
   1501              //Function command READ SCRATCHPAD [BEh]
   1502              DS18_Write(0xBE);
   1503               u8 temp1=DS18_Read();
   1504               u8 temp2=DS18_Read();
   1505               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_146:
   \   000033 8D000000              CALLF     ?Subroutine53
   1506               u8 temp4=DS18_Read();
   1507               u8 temp5=DS18_Read();
   1508               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_162:
   \   000037 8D000000              CALLF     ?Subroutine53
   1509               u8 temp7=DS18_Read();
   1510               u8 temp8=DS18_Read();
   1511               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_161:
   \   00003B 8D000000              CALLF     DS18_Read
   1512          
   1513               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1514          
   1515                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1516                result2=0;
   \   000047 725F0000              CLR       L:result2
   1517                u16 result = temp2*256+temp1;
   1518                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   00004F C70000                LD        L:result1, A
   1519                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1520                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1521          
   1522          
   1523                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1524               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1525               //line_lcd=1;
   1526               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1527               // while (!key_ok_on());
   1528          
   1529               //u8 temp3=DS18_Read();
   1530          
   1531              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1532          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1533          

   \                                 In section .far_func.text, align 1, keep-with-next
   1534          bool DS18Set ()
   1535          {
   1536               //Init Reset Pulse
   1537              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_150:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1538             //Skip ROM Command 0xCC
   1539              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1540             //Function command  WRITE SCRATCHPAD 0x4E
   1541              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1542             //Write 3 bytes last is config reg
   1543              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1544              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1545              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1546          
   1547          
   1548          
   1549          
   1550            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1551          }
   1552          
   1553          
   1554          
   1555          
   1556          
   1557          
   1558          
   1559          

   \                                 In section .far_func.text, align 1, keep-with-next
   1560          void Delay1(u16 Delay)
   1561          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1562              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1563            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1564            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1565          }
   \   00000D 87                    RETF
   1566          

   \                                 In section .far_func.text, align 1, keep-with-next
   1567           void Delay2(u16 Delay)
   1568          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1569            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1570            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1571          }
   \   00000D 87                    RETF
   1572          
   1573          

   \                                 In section .far_func.text, align 1, keep-with-next
   1574          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1575          {
   1576            //disableInterrupts();
   1577            do
   1578              {
   1579                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1580                nop();
   \   000001 9D                    NOP
   1581              }
   1582              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1583            //enableInterrupts();
   1584          }
   \   000005 87                    RETF
   1585          
   1586          

   \                                 In section .far_func.text, align 1, keep-with-next
   1587          void Display_Line(char* line)
   1588          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1589            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1590            u8 count;
   1591              //Set Cursor to First Line
   1592             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1593             count=0;
   \   000010 3F00                  CLR       S:?b10
   1594             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine71_0
   1595            do
   1596            {
   1597          
   1598              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_212:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1599               {
   1600                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine11
   1601                  Delay1(1);
   1602                 count++;
   \                     ??CrossCallReturnLabel_210:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1603               }
   1604               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1605            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_212
   1606          
   1607             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1608          
   1609          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1610          

   \                                 In section .far_func.text, align 1, keep-with-next
   1611          void Rotate_Line( char * line)
   1612          {
   1613          
   1614             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1615             char temp_next;
   1616          
   1617             do
   1618             {
   1619                temp_next=*(line+1);
   1620               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1621                //line++;
   1622                //temp_next=*line;
   1623               //*line=*line++;
   1624             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1625             line--;
   1626             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1627          
   1628          }
   \   000012 87                    RETF
   1629          

   \                                 In section .far_func.text, align 1, keep-with-next
   1630          void Clear_Line1 ()
   1631          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1632               //Set Cursor to First Line
   1633             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine10
   1634             count=0;
   1635             Delay1(1);
   1636              u8 count=0;
   1637             do
   1638             {
   1639               LCDData(' ');
   \                     ??CrossCallReturnLabel_27:
   \   000009 8D000000              CALLF     ?Subroutine9
   1640                  Delay1(1);
   1641                  count++;
   1642             }while (count<8);
   \                     ??CrossCallReturnLabel_25:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_27
   1643          
   1644          
   1645          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_176:
   \   000004 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_217:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_216:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1646          

   \                                 In section .far_func.text, align 1, keep-with-next
   1647          void Clear_Line2 ()
   1648          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1649               //Set Cursor to Second  Line
   1650             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine10
   1651             count=0;
   1652             Delay1(1);
   1653              u8 count=0;
   1654             do
   1655             {
   1656               LCDData(' ');
   \                     ??CrossCallReturnLabel_26:
   \   000009 8D000000              CALLF     ?Subroutine9
   1657                  Delay1(1);
   1658                  count++;
   1659             }while (count<8);
   \                     ??CrossCallReturnLabel_24:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_26
   1660          
   1661          
   1662          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1663          
   1664          
   1665          
   1666          
   1667          

   \                                 In section .far_func.text, align 1, keep-with-next
   1668          void Menu (void)
   1669          {
   1670           // Clear Display
   1671              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine23
   1672              Delay1(250);
   1673              //u8 key;
   1674           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1675              Wait for Plus,Minius or OK
   1676              If plus next option from Menu on the end EXIT
   1677              If minus previous option from Menu  on the end EXIT
   1678              If OK enter to menu option
   1679              If time out about 10s exit from Menu
   1680           */
   1681              do {
   1682          First_Menu:
   1683              line_lcd=0;
   \                     ??CrossCallReturnLabel_55:
   \   000004 725F0000              CLR       L:line_lcd
   1684              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1685              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine29
   1686              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_70:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1687              switch (Key_Press())
   \   000022 8D000000              CALLF     Key_Press
   \   000026 4A                    DEC       A
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   1688                  {
   1689                  case 1: goto Second_Menu ;
   1690                   break;
   1691                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   1692                   break;
   \   000039 CC0000                JP        L:??Menu_3
   1693                  case 3: goto Exit_Menu;
   1694                   break;
   1695                  }
   1696                  break; //Exit Menu
   1697          
   1698          
   1699          Second_Menu:
   1700              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   1701              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     printf
   1702              line_lcd=1;
   \   000047 8D000000              CALLF     ?Subroutine28
   1703              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_67:
   \   00004B 89                    PUSHW     X
   \   00004C C60000                LD        A, L:daily_hour_off
   \   00004F 97                    LD        XL, A
   \   000050 89                    PUSHW     X
   \   000051 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000054 8D000000              CALLF     printf
   \   000058 5B04                  ADD       SP, #0x4
   1704                switch (Key_Press())
   \   00005A 8D000000              CALLF     Key_Press
   \   00005E 4A                    DEC       A
   \   00005F 2710                  JREQ      L:??Menu_4
   \   000061 4A                    DEC       A
   \   000062 2706                  JREQ      L:??Menu_5
   \   000064 4A                    DEC       A
   \   000065 279D                  JREQ      L:??CrossCallReturnLabel_55
   \   000067 CC0000                JP        L:??Menu_3
   1705                  {
   1706                  case 1: goto Third_Menu ;
   1707                   break;
   1708                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   00006A 8D000000              CALLF     Set_Timer_Off
   1709                   break;
   \   00006E CC0000                JP        L:??Menu_3
   1710                  case 3: goto First_Menu;
   1711                   break;
   1712                  }
   1713               break; //Exit Menu
   1714          
   1715          Third_Menu:
   1716                line_lcd=0;
   \                     ??Menu_4:
   \   000071 725F0000              CLR       L:line_lcd
   1717              printf("\nMonthly ");
   \   000075 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000078 8D000000              CALLF     printf
   1718              line_lcd=1;
   \   00007C 35010000              MOV       L:line_lcd, #0x1
   1719              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \   000080 C60000                LD        A, L:monthly_date
   \   000083 5F                    CLRW      X
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:monthly_month
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B C60000                LD        A, L:monthly_year
   \   00008E 97                    LD        XL, A
   \   00008F 89                    PUSHW     X
   \   000090 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000093 8D000000              CALLF     printf
   \   000097 5B06                  ADD       SP, #0x6
   1720                switch (Key_Press())
   \   000099 8D000000              CALLF     Key_Press
   \   00009D 4A                    DEC       A
   \   00009E 274A                  JREQ      L:??Menu_6
   \   0000A0 4A                    DEC       A
   \   0000A1 2706                  JREQ      L:??Menu_7
   \   0000A3 4A                    DEC       A
   \   0000A4 2796                  JREQ      L:??Menu_0
   \   0000A6 CC0000                JP        L:??Menu_3
   1721                  {
   1722                  case 1: goto Fourth_Menu;
   1723                   break;
   1724                  case 2:
   1725                    {
   1726                     Set_Date();
   \                     ??Menu_7:
   \   0000A9 8D000000              CALLF     Set_Date
   1727                     monthly_year=y;
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 C70000                LD        L:monthly_year, A
   1728                     monthly_month=m;
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 C70000                LD        L:monthly_month, A
   1729                     monthly_date=d;
   \   0000B9 C60000                LD        A, L:d
   \   0000BC C70000                LD        L:monthly_date, A
   1730                     status.monthly=1;
   \   0000BF CE0000                LDW       X, L:status
   \   0000C2 01                    RRWA      X, A
   \   0000C3 AA08                  OR        A, #0x8
   \   0000C5 8D000000              CALLF     ??Subroutine68_0
   1731                     // Save Status and Date in EEPROM
   1732                     EEPROM_INIT();
   1733                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1734                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1735                     FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   \                     ??CrossCallReturnLabel_198:
   \   0000C9 C60000                LD        A, L:`y`
   \   0000CC AE4006                LDW       X, #0x4006
   \   0000CF 8D000000              CALLF     ?Subroutine6
   1736                     FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   \                     ??CrossCallReturnLabel_18:
   \   0000D3 C60000                LD        A, L:m
   \   0000D6 AE4007                LDW       X, #0x4007
   \   0000D9 8D000000              CALLF     ?Subroutine6
   1737                     FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   \                     ??CrossCallReturnLabel_19:
   \   0000DD C60000                LD        A, L:d
   \   0000E0 AE4008                LDW       X, #0x4008
   \   0000E3 8D000000              CALLF     ?Subroutine4
   1738                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1739                     break;
   \                     ??CrossCallReturnLabel_4:
   \   0000E7 CC0000                JP        L:??Menu_3
   1740                    }
   1741                  case 3: goto Second_Menu ;
   1742                   break;
   1743                  }
   1744               break; //Exit Menu
   1745          
   1746          
   1747          Fourth_Menu:
   1748              line_lcd=0;
   \                     ??Menu_6:
   \   0000EA 725F0000              CLR       L:line_lcd
   1749              printf("\nClock   ");
   \   0000EE AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000F1 8D000000              CALLF     ?Subroutine27
   1750              line_lcd=1;
   1751              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_204:
   \   0000F5 89                    PUSHW     X
   \   0000F6 C60000                LD        A, L:minutes
   \   0000F9 97                    LD        XL, A
   \   0000FA 89                    PUSHW     X
   \   0000FB C60000                LD        A, L:hours
   \   0000FE 97                    LD        XL, A
   \   0000FF 89                    PUSHW     X
   \   000100 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000103 8D000000              CALLF     printf
   \   000107 5B06                  ADD       SP, #0x6
   1752                switch (Key_Press())
   \   000109 8D000000              CALLF     Key_Press
   \   00010D 4A                    DEC       A
   \   00010E 2711                  JREQ      L:??Menu_8
   \   000110 4A                    DEC       A
   \   000111 2708                  JREQ      L:??Menu_9
   \   000113 4A                    DEC       A
   \   000114 2603                  JRNE      ??lb_1
   \   000116 CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   000119 2062                  JRA       L:??Menu_3
   1753                  {
   1754                  case 1: goto Fifth_Menu ;
   1755                   break;
   1756                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   00011B 8D000000              CALLF     Set_Clock
   1757                   break;
   \   00011F 205C                  JRA       L:??Menu_3
   1758                  case 3: goto Third_Menu;
   1759                   break;
   1760                  }
   1761               break; //Exit Menu
   1762          
   1763          
   1764          Fifth_Menu:
   1765              line_lcd=0;
   \                     ??Menu_8:
   \   000121 725F0000              CLR       L:line_lcd
   1766              printf("\nDate    ");
   \   000125 AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   000128 8D000000              CALLF     printf
   1767              line_lcd=1;
   \   00012C 8D000000              CALLF     ?Subroutine26
   1768              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_64:
   \   000130 89                    PUSHW     X
   \   000131 C60000                LD        A, L:month
   \   000134 97                    LD        XL, A
   \   000135 89                    PUSHW     X
   \   000136 C60000                LD        A, L:year
   \   000139 97                    LD        XL, A
   \   00013A 89                    PUSHW     X
   \   00013B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013E 8D000000              CALLF     printf
   \   000142 5B06                  ADD       SP, #0x6
   1769                switch (Key_Press())
   \   000144 8D000000              CALLF     Key_Press
   \   000148 4A                    DEC       A
   \   000149 270E                  JREQ      L:??Menu_2
   \   00014B 4A                    DEC       A
   \   00014C 2705                  JREQ      L:??Menu_10
   \   00014E 4A                    DEC       A
   \   00014F 2799                  JREQ      L:??Menu_6
   \   000151 202A                  JRA       L:??Menu_3
   1770                  {
   1771                  case 1: goto Exit_Menu ;
   1772                   break;
   1773                  case 2: Set_Date();
   \                     ??Menu_10:
   \   000153 8D000000              CALLF     Set_Date
   1774                   break;
   \   000157 2024                  JRA       L:??Menu_3
   1775                  case 3: goto Fourth_Menu;
   1776                   break;
   1777                  }
   1778               break; //Exit Menu
   1779          
   1780          
   1781          Exit_Menu:
   1782              line_lcd=0;
   \                     ??Menu_2:
   \   000159 725F0000              CLR       L:line_lcd
   1783              printf("\nExit OK ");
   \   00015D AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000160 8D000000              CALLF     printf
   1784              line_lcd=1;
   \   000164 35010000              MOV       L:line_lcd, #0x1
   1785              printf("\n+/-     ");
   \   000168 AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   00016B 8D000000              CALLF     printf
   1786                 switch (Key_Press())
   \   00016F 8D000000              CALLF     Key_Press
   \   000173 4A                    DEC       A
   \   000174 2603                  JRNE      ??lb_2
   \   000176 CC0000                JP        L:??CrossCallReturnLabel_55
   \                     ??lb_2:
   \   000179 A002                  SUB       A, #0x2
   \   00017B 27A4                  JREQ      L:??Menu_8
   1787                  {
   1788                  case 1: goto First_Menu;
   1789                   break;
   1790                  case 2:
   1791                   break;
   1792                  case 3: goto Fifth_Menu;
   1793                   break;
   1794                  }
   1795                 break; //Exit Menu
   1796              }    while (1);
   1797              //exit:
   1798             Clear_Line1();
   \                     ??Menu_3:
   \   00017D 8D000000              CALLF     Clear_Line1
   1799             Clear_Line2();
   \   000181 AC000000              JPF       Clear_Line2
   1800          
   1801          }
   1802          
   1803          

   \                                 In section .far_func.text, align 1, keep-with-next
   1804          u8 Key_Press(void)
   1805          {
   \                     Key_Press:
   \   000000 3B0000                PUSH      S:?b8
   1806             u8 key_press =0;
   \   000003 3F00                  CLR       S:?b8
   1807             timer3=0;
   \   000005 5F                    CLRW      X
   \   000006 CF0000                LDW       L:timer3, X
   1808             do {
   1809                if (key_ok_on()) key_press=1;
   \                     ??Key_Press_0:
   \   000009 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_107:
   \   00000D 2706                  JREQ      L:??Key_Press_1
   \   00000F 35010000              MOV       S:?b8, #0x1
   \   000013 201A                  JRA       L:??Key_Press_2
   1810                   else if (key_plus_on())key_press=2;
   \                     ??Key_Press_1:
   \   000015 8D000000              CALLF     key_plus_on
   \   000019 A100                  CP        A, #0x0
   \   00001B 2706                  JREQ      L:??Key_Press_3
   \   00001D 35020000              MOV       S:?b8, #0x2
   \   000021 200C                  JRA       L:??Key_Press_2
   1811                  else if (key_minus_on())key_press=3;
   \                     ??Key_Press_3:
   \   000023 8D000000              CALLF     key_minus_on
   \   000027 A100                  CP        A, #0x0
   \   000029 2704                  JREQ      L:??Key_Press_2
   \   00002B 35030000              MOV       S:?b8, #0x3
   1812             } while ( (timer3<=time_menu) && !key_press);    //(timer3<=time_menu) &&
   \                     ??Key_Press_2:
   \   00002F 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_124:
   \   000033 2404                  JRNC      L:??Key_Press_4
   \   000035 3D00                  TNZ       S:?b8
   \   000037 27D0                  JREQ      L:??Key_Press_0
   1813          
   1814             return key_press;
   \                     ??Key_Press_4:
   \   000039 B600                  LD        A, S:?b8
   \   00003B 320000                POP       S:?b8
   \   00003E 87                    RETF
   1815          }
   1816          
   1817          
   1818          
   1819          

   \                                 In section .far_func.text, align 1, keep-with-next
   1820          bool Set_Date(void)
   1821          {
   \                     Set_Date:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1822             u8 leap=0 ,date_end,month_start,date_start;
   \   000007 3F00                  CLR       S:?b8
   1823             int yy;
   1824          
   1825                   //Clear Display
   1826             LCDInstr(0x01);
   \   000009 8D000000              CALLF     ?Subroutine19
   1827             Delay1(1000);
   1828             line_lcd=0;
   1829              printf("\nYear>");
   1830              y=year;
   \                     ??CrossCallReturnLabel_45:
   \   00000D C60000                LD        A, L:year
   \   000010 C70000                LD        L:`y`, A
   1831                do
   1832              {
   1833               line_lcd=1;
   \                     ??Set_Date_0:
   \   000013 8D000000              CALLF     ?Subroutine26
   1834               printf("\n%02d:%02d:%02d",y,month,date);
   \                     ??CrossCallReturnLabel_58:
   \   000017 89                    PUSHW     X
   \   000018 C60000                LD        A, L:month
   \   00001B 97                    LD        XL, A
   \   00001C 89                    PUSHW     X
   \   00001D C60000                LD        A, L:`y`
   \   000020 97                    LD        XL, A
   \   000021 89                    PUSHW     X
   \   000022 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000025 8D000000              CALLF     printf
   \   000029 5B06                  ADD       SP, #0x6
   1835                 y=adj(0,99,y);
   \   00002B C60000                LD        A, L:`y`
   \   00002E B700                  LD        S:?b1, A
   \   000030 35630000              MOV       S:?b0, #0x63
   \   000034 8D000000              CALLF     ??Subroutine67_0
   1836              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_191:
   \   000038 C70000                LD        L:`y`, A
   \   00003B 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_104:
   \   00003F 27D2                  JREQ      L:??Set_Date_0
   1837                  yy=y+2000;
   \   000041 C60000                LD        A, L:`y`
   \   000044 5F                    CLRW      X
   \   000045 97                    LD        XL, A
   \   000046 1C07D0                ADDW      X, #0x7d0
   \   000049 BF00                  LDW       S:?w0, X
   1838              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00004B 90AE0190              LDW       Y, #0x190
   \   00004F 8D000000              CALLF     L:?smod16_y_x_y
   \   000053 905D                  TNZW      Y
   \   000055 271C                  JREQ      L:??Set_Date_1
   \   000057 90AE0064              LDW       Y, #0x64
   \   00005B BE00                  LDW       X, S:?w0
   \   00005D 8D000000              CALLF     L:?smod16_y_x_y
   \   000061 905D                  TNZW      Y
   \   000063 2712                  JREQ      L:??Set_Date_2
   \   000065 90AE0004              LDW       Y, #0x4
   \   000069 BE00                  LDW       X, S:?w0
   \   00006B 8D000000              CALLF     L:?smod16_y_x_y
   \   00006F 905D                  TNZW      Y
   \   000071 2604                  JRNE      L:??Set_Date_2
   \                     ??Set_Date_1:
   \   000073 35010000              MOV       S:?b8, #0x1
   1839                  y=yy-2000;
   \                     ??Set_Date_2:
   \   000077 B600                  LD        A, S:?b1
   \   000079 AB30                  ADD       A, #0x30
   \   00007B C70000                LD        L:`y`, A
   1840                   if(y==year) month_start=month;
   \   00007E C60000                LD        A, L:year
   \   000081 C10000                CP        A, L:`y`
   \   000084 2605                  JRNE      L:??Set_Date_3
   \   000086 C60000                LD        A, L:month
   \   000089 B700                  LD        S:?b9, A
   1841               line_lcd=0;
   \                     ??Set_Date_3:
   \   00008B 8D000000              CALLF     ?Subroutine39
   1842              printf("\nMonth>");
   1843                do
   1844              {
   1845               line_lcd=1;
   \                     ??CrossCallReturnLabel_103:
   \   00008F 8D000000              CALLF     ?Subroutine26
   1846               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_59:
   \   000093 89                    PUSHW     X
   \   000094 C60000                LD        A, L:month
   \   000097 97                    LD        XL, A
   \   000098 89                    PUSHW     X
   \   000099 C60000                LD        A, L:year
   \   00009C 97                    LD        XL, A
   \   00009D 89                    PUSHW     X
   \   00009E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000A1 8D000000              CALLF     printf
   \   0000A5 5B06                  ADD       SP, #0x6
   1847                m=adj(month_start,12,month);
   \   0000A7 C60000                LD        A, L:month
   \   0000AA B700                  LD        S:?b1, A
   \   0000AC 350C0000              MOV       S:?b0, #0xc
   \   0000B0 B600                  LD        A, S:?b9
   \   0000B2 8D000000              CALLF     adj
   \   0000B6 C70000                LD        L:m, A
   1848              } while (!key_ok_on());
   \   0000B9 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_105:
   \   0000BD 27D0                  JREQ      L:??CrossCallReturnLabel_103
   1849          
   1850              if ( month == 1 || month==3 || month==5 ||month==7||month==8||month==10||month==12) date_end=31;
   \   0000BF C60000                LD        A, L:month
   \   0000C2 A101                  CP        A, #0x1
   \   0000C4 2718                  JREQ      L:??Set_Date_4
   \   0000C6 A103                  CP        A, #0x3
   \   0000C8 2714                  JREQ      L:??Set_Date_4
   \   0000CA A105                  CP        A, #0x5
   \   0000CC 2710                  JREQ      L:??Set_Date_4
   \   0000CE A107                  CP        A, #0x7
   \   0000D0 270C                  JREQ      L:??Set_Date_4
   \   0000D2 A108                  CP        A, #0x8
   \   0000D4 2708                  JREQ      L:??Set_Date_4
   \   0000D6 A10A                  CP        A, #0xa
   \   0000D8 2704                  JREQ      L:??Set_Date_4
   \   0000DA A10C                  CP        A, #0xc
   \   0000DC 2606                  JRNE      L:??Set_Date_5
   \                     ??Set_Date_4:
   \   0000DE 351F0000              MOV       S:?b8, #0x1f
   \   0000E2 2024                  JRA       L:??Set_Date_6
   1851               else if ( month==4||month==6 || month==9 ||month==11) date_end=30;
   \                     ??Set_Date_5:
   \   0000E4 A104                  CP        A, #0x4
   \   0000E6 270C                  JREQ      L:??Set_Date_7
   \   0000E8 A106                  CP        A, #0x6
   \   0000EA 2708                  JREQ      L:??Set_Date_7
   \   0000EC A109                  CP        A, #0x9
   \   0000EE 2704                  JREQ      L:??Set_Date_7
   \   0000F0 A10B                  CP        A, #0xb
   \   0000F2 2606                  JRNE      L:??Set_Date_8
   \                     ??Set_Date_7:
   \   0000F4 351E0000              MOV       S:?b8, #0x1e
   \   0000F8 200E                  JRA       L:??Set_Date_6
   1852                else
   1853                 {
   1854                   if(leap) date_end=29;
   \                     ??Set_Date_8:
   \   0000FA 3D00                  TNZ       S:?b8
   \   0000FC 2706                  JREQ      L:??Set_Date_9
   \   0000FE 351D0000              MOV       S:?b8, #0x1d
   \   000102 2004                  JRA       L:??Set_Date_6
   1855                    else date_end=28;
   \                     ??Set_Date_9:
   \   000104 351C0000              MOV       S:?b8, #0x1c
   1856                 }
   1857               if(y==year) date_start=date;
   \                     ??Set_Date_6:
   \   000108 C60000                LD        A, L:year
   \   00010B C10000                CP        A, L:`y`
   \   00010E 2605                  JRNE      L:??Set_Date_10
   \   000110 C60000                LD        A, L:`date`
   \   000113 B700                  LD        S:?b10, A
   1858              LCDInstr(0x01);
   \                     ??Set_Date_10:
   \   000115 8D000000              CALLF     ?Subroutine20
   1859               Delay1(1000);
   1860                line_lcd=0;
   1861              printf("\nDate>");
   1862                do
   1863              {
   1864               line_lcd=1;
   \                     ??CrossCallReturnLabel_47:
   \   000119 8D000000              CALLF     ?Subroutine26
   1865               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_60:
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:month
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 C60000                LD        A, L:year
   \   000126 97                    LD        XL, A
   \   000127 89                    PUSHW     X
   \   000128 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00012B 8D000000              CALLF     printf
   \   00012F 5B06                  ADD       SP, #0x6
   1866                 d=adj(date_start,date_end,date);
   \   000131 C60000                LD        A, L:`date`
   \   000134 B700                  LD        S:?b1, A
   \   000136 450000                MOV       S:?b0, S:?b8
   \   000139 B600                  LD        A, S:?b10
   \   00013B 8D000000              CALLF     adj
   \   00013F C70000                LD        L:d, A
   1867              } while (!key_ok_on());
   \   000142 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_106:
   \   000146 27D1                  JREQ      L:??CrossCallReturnLabel_47
   1868          
   1869            return TRUE;
   \   000148 A601                  LD        A, #0x1
   \   00014A 320000                POP       S:?b10
   \   00014D AC000000              JPF       L:?epilogue_w4
   1870          }
   1871          

   \                                 In section .far_func.text, align 1, keep-with-next
   1872           PUTCHAR_PROTOTYPE
   1873          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1874            /* Place your implementation of fputc here */
   1875            /* e.g. write a character to the USART */
   1876                //USART_SendData(USART3, (u8) ch);
   1877               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1878             /* Loop until the end of transmission */
   1879              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1880            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1881          }
   1882          
   1883           #ifdef USE_FULL_ASSERT
   1884          
   1885          /**
   1886            * @brief  Reports the name of the source file and the source line number
   1887            *   where the assert_param error has occurred.
   1888            * @param file: pointer to the source file name
   1889            * @param line: assert_param error line source number
   1890            * @retval : None
   1891            */

   \                                 In section .far_func.text, align 1
   1892          void assert_failed(u8* file, u32 line)
   1893          {
   1894            /* User can add his own implementation to report the file name and line number,
   1895               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1896          
   1897            /* Infinite loop */
   1898            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1899            {
   1900          
   1901            }
   1902          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC %c%c ">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC %c%c "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On>">`:
   \   000000 0A48204F6E3E          DC8 "\012H On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On>">`:
   \   000000 0A4D696E204F          DC8 "\012Min On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   1903          #endif
   1904          
   1905          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     daily_dispaly                     1
     month_display                     1
     line1                             8
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     ?Subroutine40                     7
     ??Subroutine72_0                  7
     main                            281
     ?Subroutine16                     9
     ?Subroutine5                      9
     ?Subroutine3                     20
     ?Subroutine63                     2
     ??Subroutine75_0                  8
     ?Subroutine2                     15
     ?Subroutine64                    12
     ?Subroutine27                     4
     ??Subroutine70_0                 10
     Display                         123
     Power_On                         19
     ?Subroutine41                    15
     Power_Off                        29
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine43                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine47                     1
     ??Subroutine74_0                  7
     ?Subroutine46                     9
     ?Subroutine45                    11
     ReadDS1307                      109
     ?Subroutine34                    11
     ?Subroutine32                    13
     ?Subroutine30                     8
     ?Subroutine62                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine44                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       374
     ?Subroutine39                    11
     ?Subroutine26                    10
     ?Subroutine20                    11
     ?Subroutine19                    11
     ?Subroutine33                     6
     ??Subroutine67_0                  5
     ?Subroutine21                     5
     ?Subroutine60                    16
     ?Subroutine65                     6
     adj                              85
     key_ok_on                        47
     ?Subroutine31                    10
     key_plus_on                      45
     ?Subroutine37                     7
     ?Subroutine35                     7
     key_minus_on                     45
     key_ok_plus                      40
     ?Subroutine17                    29
     ?Subroutine42                     7
     ?Subroutine1                      6
     ??Subroutine68_0                  4
     ??Subroutine69_0                 29
     Set_Timer_On                    145
     ?Subroutine38                     9
     ?Subroutine6                      5
     ?Subroutine56                     9
     ?Subroutine4                     10
     ?Subroutine29                    10
     Set_Timer_Off                   150
     ?Subroutine28                    10
     Save_Status                      10
     Read_Allarm                     106
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine55                     9
     ?Subroutine54                     9
     ?Subroutine51                    12
     InitClk                          62
     ?Subroutine52                     9
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine73_0                  5
     ?Subroutine58                     7
     ?Subroutine14                     2
     InitLcd                          85
     ?Subroutine23                    11
     ?Subroutine18                    17
     ?Subroutine13                    11
     ?Subroutine0                     13
     ??Subroutine66_0                 10
     ?Subroutine25                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine8                     24
     ?Subroutine57                     6
     LCD_Busy                         69
     LCD                             174
     ?Subroutine61                     9
     ?Subroutine11                     4
     ??Subroutine71_0                  5
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       57
     ?Subroutine22                     2
     ?Subroutine15                    10
     ?Subroutine59                     9
     DS18_Read                        77
     ?Subroutine24                    12
     DS18_Reset                       49
     ?Subroutine36                     7
     ?Subroutine50                     7
     temperature                      63
     ?Subroutine49                    17
     ?Subroutine48                    25
     ?Subroutine7                     21
     Read_DS18                       121
     ?Subroutine53                    12
     DS18Set                          41
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine10                    13
     ?Subroutine9                     16
     Clear_Line2                      19
     Menu                            389
     Key_Press                        63
     Set_Date                        337
     fputc                            18
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n%d.%dC %c%c ">     14
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH On>">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On>">           9
     ?<Constant "\nH Off>">            8
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 4 897 bytes in section .far_func.text
    62 bytes in section .near.bss
     3 bytes in section .near.data
   248 bytes in section .near.rodata
 
 4 897 bytes of CODE  memory
   248 bytes of CONST memory
    65 bytes of DATA  memory

Errors: none
Warnings: none
