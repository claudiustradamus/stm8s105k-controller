###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             25/Oct/2013  22:59:42 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     72          #define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     73          #define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     74          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     75          #define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     76          #define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     77          #define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     78          
     79          #ifdef __GNUC__
     80            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     81               set to 'Yes') calls __io_putchar() */
     82            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     83          #else
     84            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     85          #endif /* __GNUC__ */
     86          
     87          
     88          
     89          
     90          #define SpecialSymbol 0x1b //Esc to start message
     91          //#define data_size 20
     92          #define key_time 8000
     93          #define key_time_ok 15000
     94          #define key_time_press 4000
     95          #define key_time_release 400
     96          #define DS_Control  0x10  // Out 1s
     97          #define time_menu 10  // 5s
     98          #define TIMEOUT_DS18B20 1000
     99          #define LCDLEDON 10
    100          //#define sync_time 30 // 30s
    101          
    102          
    103          
    104          
    105          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    106          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    107          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    108          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    109          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    110          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    111          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    112          //char data[data_size];
    113          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    114          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    119          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    120          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    121          u8 month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    122          u8 year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    134          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    135          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    136          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    137          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    142          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    143          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    144          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          char  daily_dispaly,month_display,sync_display;
   \                     daily_dispaly:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     month_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1
    148          //bool  ds_temperature;
    149          
    150          
    151          

   \                                 In section .near.bss, align 1
    152          char line1[8];
   \                     line1:
   \   000000                       DS8 8
    153          //char string1[10];
    154          //char string2[10];

   \                                 In section .near.bss, align 1
    155          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    156          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    157          
    158          //u8 index=0;

   \                                 In section .near.bss, align 1
    159          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    160          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    161          
    162          
    163           struct   status_reg
    164           {
    165             unsigned on:1;
    166             unsigned timer_on:1;
    167             unsigned daily:1;
    168             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    169           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    170          
    171          
    172           struct
    173           {
    174             unsigned ds1307:1;
    175             unsigned ds18B20:1;
    176             unsigned buzzer:1;
    177             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    178           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    179          
    180          //time_t  ltime;
    181          //struct tm ptim;
    182          
    183          
    184          
    185          
    186          
    187          /* Private function prototypes -----------------------------------------------*/
    188          void InitHardware();
    189          void GpioConfiguration();
    190          void InitClk();
    191          void InitAdc();
    192          void InitI2C();
    193          void EEPROM_INIT();
    194          bool ReadDS1307();
    195          //void InitUart();
    196          void InitLcd();
    197          void InitDelayTimer2();
    198          void InitDelayTimer3();
    199          void Delay1( u16 Delay);
    200          void Delay2( u16 Delay);
    201          void Delay_us(u16 Delay);
    202          void LCDInstrNibble (u8 Instr);
    203          void LCDInstr(u8 Instr);
    204          void LCDDataOut(u8 data);
    205          void LCD_Busy();
    206          void PulseEnable();
    207          //void SendData();
    208          void SendChar(u8 Char);
    209          //void Send_Hello();
    210          bool Set_Clock();
    211          bool key_ok_on();
    212          bool key_plus_on();
    213          bool key_minus_on();
    214          bool key_ok_plus();
    215          bool Init_DS1307(void);
    216          bool Check_DS1307(void);
    217          bool I2C_Start(void);
    218          bool I2C_WA(u8 address);
    219          bool I2C_WD(u8 data);
    220          bool I2C_RA(u8 address);
    221          bool Set_DS1307();
    222          //bool Set_Delay_Allarm();
    223          bool Set_Timer_On();
    224          bool Set_Timer_Off();
    225          bool Read_Allarm();
    226          bool Read_DS18();
    227          bool DS18_Write( u8 data);
    228          bool DS18_Reset();
    229          bool DS18Set();
    230          u8 temperature();
    231          u8 DS18_Read();
    232          u8 convert_tobcd(u8 data);
    233          u8 I2C_RD(void);
    234          u8 adj(u8 min,u8 max,u8 now);
    235          u8 bcd2hex(u8 bcd);
    236          void Power_On(void);
    237          void Power_Off();
    238          void Save_Status();
    239          void Rotate_Line( char * line);
    240          void Display_Line(char * line);
    241          void Clear_Line1(void);
    242          void Clear_Line2(void);
    243          void Menu(void);
    244          u8 pressKey(void);
    245          void Display(void);
    246          bool setData(void);
    247          void initBeep(void);
    248          void beep(u16 Interval);
    249          
    250          
    251          
    252          u16  Average();
    253          
    254          
    255          /* Private functions ---------------------------------------------------------*/
    256          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_197:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    257          void main(void)
    258          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    259              /*High speed internal clock prescaler: 1*/
    260              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    261          
    262              InitClk();
   \   000003 8D000000              CALLF     InitClk
    263              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    264              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    265              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    266              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine15
    267              GPIO_WriteLow(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_38:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteLow
    268              hardware.lcdLed=0;
   \   000020 CE0000                LDW       X, L:hardware
   \   000023 01                    RRWA      X, A
   \   000024 A4F7                  AND       A, #0xf7
   \   000026 02                    RLWA      X, A
   \   000027 CF0000                LDW       L:hardware, X
    269              //InitUart();
    270               enableInterrupts();
   \   00002A 9A                    RIM
    271               initBeep();
   \   00002B 8D000000              CALLF     initBeep
    272              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    273               InitLcd();
   \   00002F 8D000000              CALLF     InitLcd
    274              //InitAdc();
    275               InitI2C();
   \   000033 8D000000              CALLF     InitI2C
    276          
    277          
    278              // Enable Timer3
    279              TIM3_Cmd(ENABLE);
   \   000037 A601                  LD        A, #0x1
   \   000039 8D000000              CALLF     TIM3_Cmd
    280          
    281              //year=bcd2hex(13);
    282              //Delay1(10000);
    283               if (!ReadDS1307())
   \   00003D 8D000000              CALLF     ReadDS1307
   \   000041 A100                  CP        A, #0x0
   \   000043 261D                  JRNE      L:??main_0
    284               {
    285                 printf("\n E2:%d",error);
   \   000045 C60000                LD        A, L:error
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004E 8D000000              CALLF     printf
   \   000052 5B02                  ADD       SP, #0x2
    286                 // Reset the CPU: Enable the watchdog and wait until it expires
    287                  hardware.ds1307=0;
   \   000054 CE0000                LDW       X, L:hardware
   \   000057 01                    RRWA      X, A
   \   000058 A4FE                  AND       A, #0xfe
   \   00005A 02                    RLWA      X, A
   \   00005B CF0000                LDW       L:hardware, X
    288                   pressKey();
   \   00005E 8D000000              CALLF     pressKey
    289                //IWDG->KR = IWDG_KEY_ENABLE;
    290                // while ( 1 );    // Wait until reset occurs from IWDG
    291               }
    292               //Send_Hello();
    293              //line_lcd=0;
    294              //printf("\nHello");
    295                hardware.lcdLed=1;
   \                     ??main_0:
   \   000062 8D000000              CALLF     ?Subroutine40
    296          
    297              if (!Check_DS1307())
   \                     ??CrossCallReturnLabel_102:
   \   000066 8D000000              CALLF     Check_DS1307
   \   00006A A100                  CP        A, #0x0
   \   00006C 2624                  JRNE      L:??main_1
    298              {
    299                 if (error!=0)
   \   00006E C60000                LD        A, L:error
   \   000071 2710                  JREQ      L:??main_2
    300                 {
    301                  printf("\n E:%d",error);
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    302                   pressKey();
   \   00007F 8D000000              CALLF     pressKey
    303          
    304                 }
    305               line_lcd=0;
   \                     ??main_2:
   \   000083 725F0000              CLR       L:line_lcd
    306               printf("\nSetClock");
   \   000087 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008A 8D000000              CALLF     printf
    307                Set_Clock();
   \   00008E 8D000000              CALLF     Set_Clock
    308          
    309              }
    310          
    311          
    312                 //Read Status register from eepom and update it
    313                //size=sizeof(status);
    314               //u16 status
    315               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000092 AE4000                LDW       X, #0x4000
   \   000095 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   000099 B700                  LD        S:?b8, A
   \   00009B AE4001                LDW       X, #0x4001
   \   00009E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   0000A2 905F                  CLRW      Y
   \   0000A4 9097                  LD        YL, A
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b8
   \   0000AA 41                    EXG       A, XL
   \   0000AB 4F                    CLR       A
   \   0000AC 02                    RLWA      X, A
   \   0000AD 8D000000              CALLF     ??Subroutine83_0
   \                     ??CrossCallReturnLabel_266:
   \   0000B1 CF0000                LDW       L:status, X
    316                status_check = *(u16*)(&status);
   \   0000B4 CE0000                LDW       X, L:status
   \   0000B7 CF0000                LDW       L:status_check, X
    317              //When Start Check for Allarm and computing Daily_long_on
    318               if ( Read_Allarm() == TRUE)
   \   0000BA 8D000000              CALLF     Read_Allarm
   \   0000BE A101                  CP        A, #0x1
   \   0000C0 260B                  JRNE      L:??CrossCallReturnLabel_1
    319               {
    320                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000C2 8D000000              CALLF     ?Subroutine3
    321                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_3:
   \   0000C6 C60000                LD        A, L:daily_hour_off
   \   0000C9 8D000000              CALLF     ?Subroutine2
    322               }
    323          
    324          
    325          
    326                     //Init DS18B20
    327              DS18Set();
   \                     ??CrossCallReturnLabel_1:
   \   0000CD 8D000000              CALLF     DS18Set
    328              line_lcd=0;
   \   0000D1 725F0000              CLR       L:line_lcd
    329              if (!Read_DS18())
   \   0000D5 8D000000              CALLF     Read_DS18
   \   0000D9 A100                  CP        A, #0x0
   \   0000DB 2611                  JRNE      L:??main_3
    330              {
    331               printf("\nDS_Err_T");
   \   0000DD AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000E0 8D000000              CALLF     printf
    332                 hardware.ds18B20=0;
   \   0000E4 8D000000              CALLF     ?Subroutine43
    333          
    334                 pressKey();
   \                     ??CrossCallReturnLabel_114:
   \   0000E8 8D000000              CALLF     pressKey
   \   0000EC 2004                  JRA       L:??CrossCallReturnLabel_116
    335                //while (!key_ok_on());
    336              }
    337               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000EE 8D000000              CALLF     ?Subroutine44
    338          
    339              daily_dispaly=' ';
   \                     ??CrossCallReturnLabel_116:
   \   0000F2 35200000              MOV       L:daily_dispaly, #0x20
    340              month_display=' ';
   \   0000F6 35200000              MOV       L:month_display, #0x20
    341              sync_time_ds1307= TRUE;
   \   0000FA 35010000              MOV       L:sync_time_ds1307, #0x1
   \   0000FE 2006                  JRA       L:??CrossCallReturnLabel_242
    342          
    343               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    344          
    345               // Working fuction
    346              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 month,u8 hours,u8 minutes,u8 seconds)
    347          
    348          
    349          
    350              // strcpy(line1,"Hello I am here! ");
    351              //  while(1)
    352              //  {
    353              //     Display_Line(line1);
    354              //     Delay2(20000);
    355              //  }
    356              //  while (!key_ok_on());
    357                 //sprintf(line1,"TIMER ON ");
    358          
    359               /* Main Loop*/
    360          
    361              while(1)
    362              {
    363          
    364          
    365                if(key_ok_on()) Menu();
    366                if(key_plus_on()) Power_On();
    367                if(key_minus_on())Power_Off();
    368                if(Time_Display) Display();  //
    369                if(sync_time_ds1307 )  // Sync local time with DS1307
    370                   {
    371                    if (!ReadDS1307())
    372                        {
    373                          GPIO_WriteLow(GPIOD, power_pin );
    374                       printf("\n E2:%d",error);
    375                       //restart i2c
    376                       // Reset the CPU: Enable the watchdog and wait until it expires
    377                       IWDG->KR = IWDG_KEY_ENABLE;
    378                       while ( 1 );    // Wait until reset occurs from IWDG
    379                        }
    380                   sync_time_ds1307=FALSE;
    381                   sync_display='S';
    382                   }
    383          
    384                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_4:
   \   000100 A608                  LD        A, #0x8
   \   000102 8D000000              CALLF     ??Subroutine80_0
   \                     ??CrossCallReturnLabel_242:
   \   000106 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_138:
   \   00010A 2704                  JREQ      L:??main_5
   \   00010C 8D000000              CALLF     Menu
   \                     ??main_5:
   \   000110 8D000000              CALLF     key_plus_on
   \   000114 A100                  CP        A, #0x0
   \   000116 2704                  JREQ      L:??main_6
   \   000118 8D000000              CALLF     Power_On
   \                     ??main_6:
   \   00011C 8D000000              CALLF     key_minus_on
   \   000120 A100                  CP        A, #0x0
   \   000122 2704                  JREQ      L:??main_7
   \   000124 8D000000              CALLF     Power_Off
   \                     ??main_7:
   \   000128 C60000                LD        A, L:Time_Display
   \   00012B 2704                  JREQ      L:??main_8
   \   00012D 8D000000              CALLF     Display
   \                     ??main_8:
   \   000131 C60000                LD        A, L:sync_time_ds1307
   \   000134 2729                  JREQ      L:??main_9
   \   000136 8D000000              CALLF     ReadDS1307
   \   00013A A100                  CP        A, #0x0
   \   00013C 2619                  JRNE      L:??main_10
   \   00013E 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_37:
   \   000142 C60000                LD        A, L:error
   \   000145 5F                    CLRW      X
   \   000146 97                    LD        XL, A
   \   000147 89                    PUSHW     X
   \   000148 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00014B 8D000000              CALLF     printf
   \   00014F 5B02                  ADD       SP, #0x2
   \   000151 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_11:
   \   000155 20FE                  JRA       L:??main_11
   \                     ??main_10:
   \   000157 725F0000              CLR       L:sync_time_ds1307
   \   00015B 35530000              MOV       L:sync_display, #0x53
   \                     ??main_9:
   \   00015F CE0000                LDW       X, L:status
   \   000162 9F                    LD        A, XL
   \   000163 A501                  BCP       A, #0x1
   \   000165 2699                  JRNE      L:??main_4
    385                 else   GPIO_WriteLow(GPIOD, power_pin );
   \   000167 8D000000              CALLF     ?Subroutine15
    386          
    387          
    388          
    389          
    390              }
   \                     ??CrossCallReturnLabel_36:
   \   00016B 2099                  JRA       L:??CrossCallReturnLabel_242
    391          
    392          
    393          
    394          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine44:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine43:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine15:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine5:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 905F                  CLRW      Y
   \   000005 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_203:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_269:
   \   000010 CF0000                LDW       L:time_on, X
   \   000013 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine83_0
   \   000002                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine83_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_202:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_268:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine73:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0
    395          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine78_0
   \   000004                       ;               // Fall through to label ??Subroutine78_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
    396          void Display(void)
    397          {
    398             //Clear_Line1 ();
    399              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    400               result2=0;
   \   000007 725F0000              CLR       L:result2
    401                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    402                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    403          
    404          
    405          
    406             if (status.monthly) month_display='M';
   \   000018 CE0000                LDW       X, L:status
   \   00001B 9F                    LD        A, XL
   \   00001C A508                  BCP       A, #0x8
   \   00001E 2706                  JREQ      L:??Display_1
   \   000020 354D0000              MOV       L:month_display, #0x4d
   \   000024 2004                  JRA       L:??Display_2
    407               else month_display=' ';
   \                     ??Display_1:
   \   000026 35200000              MOV       L:month_display, #0x20
    408               //Blink D
    409             if (status.on && status.daily)
   \                     ??Display_2:
   \   00002A CE0000                LDW       X, L:status
   \   00002D 9F                    LD        A, XL
   \   00002E A501                  BCP       A, #0x1
   \   000030 2750                  JREQ      L:??Display_3
   \   000032 CE0000                LDW       X, L:status
   \   000035 9F                    LD        A, XL
   \   000036 A504                  BCP       A, #0x4
   \   000038 2748                  JREQ      L:??Display_3
    410             {
    411               if (daily_dispaly=='D') daily_dispaly=' ';
   \   00003A C60000                LD        A, L:daily_dispaly
   \   00003D A144                  CP        A, #0x44
   \   00003F 2649                  JRNE      L:??Display_4
   \                     ??Display_5:
   \   000041 35200000              MOV       L:daily_dispaly, #0x20
    412                else daily_dispaly='D';
    413             }
    414              else if (status.daily) daily_dispaly='D';
    415               else daily_dispaly=' ';
    416               if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,sync_display,daily_dispaly,month_display);
   \                     ??Display_6:
   \   000045 C60000                LD        A, L:sync_display
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A BF00                  LDW       S:?w1, X
   \   00004C C60000                LD        A, L:daily_dispaly
   \   00004F 97                    LD        XL, A
   \   000050 BF00                  LDW       S:?w0, X
   \   000052 C60000                LD        A, L:month_display
   \   000055 97                    LD        XL, A
   \   000056 90CE0000              LDW       Y, L:hardware
   \   00005A 909F                  LD        A, YL
   \   00005C A502                  BCP       A, #0x2
   \   00005E 89                    PUSHW     X
   \   00005F 272F                  JREQ      L:??Display_7
   \   000061 8D000000              CALLF     L:?push_w0
   \   000065 8D000000              CALLF     L:?push_w1
   \   000069 C60000                LD        A, L:result2
   \   00006C 97                    LD        XL, A
   \   00006D 89                    PUSHW     X
   \   00006E C60000                LD        A, L:result1
   \   000071 97                    LD        XL, A
   \   000072 89                    PUSHW     X
   \   000073 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000077 AE0000                LDW       X, #line1
   \   00007A 8D000000              CALLF     sprintf
   \   00007E 5B0A                  ADD       SP, #0xa
   \   000080 2023                  JRA       L:??Display_8
   \                     ??Display_3:
   \   000082 CE0000                LDW       X, L:status
   \   000085 9F                    LD        A, XL
   \   000086 A504                  BCP       A, #0x4
   \   000088 27B7                  JREQ      L:??Display_5
   \                     ??Display_4:
   \   00008A 35440000              MOV       L:daily_dispaly, #0x44
   \   00008E 20B5                  JRA       L:??Display_6
    417                else sprintf(line1,"\n%c%c%c",sync_display,daily_dispaly,month_display);
   \                     ??Display_7:
   \   000090 8D000000              CALLF     L:?push_w0
   \   000094 8D000000              CALLF     L:?push_w1
   \   000098 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   00009C AE0000                LDW       X, #line1
   \   00009F 8D000000              CALLF     sprintf
   \   0000A3 5B06                  ADD       SP, #0x6
    418          
    419             line_lcd=0;
   \                     ??Display_8:
   \   0000A5 725F0000              CLR       L:line_lcd
    420             printf(line1);
   \   0000A9 AE0000                LDW       X, #line1
   \   0000AC 8D000000              CALLF     ?Subroutine27
    421          
    422             line_lcd=1;
    423             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_228:
   \   0000B0 89                    PUSHW     X
   \   0000B1 C60000                LD        A, L:minutes
   \   0000B4 97                    LD        XL, A
   \   0000B5 89                    PUSHW     X
   \   0000B6 C60000                LD        A, L:hours
   \   0000B9 97                    LD        XL, A
   \   0000BA 89                    PUSHW     X
   \   0000BB AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000BE 8D000000              CALLF     printf
   \   0000C2 5B06                  ADD       SP, #0x6
    424          
    425          
    426             Time_Display=FALSE;
   \   0000C4 725F0000              CLR       L:Time_Display
    427             sync_display=' ';
   \   0000C8 35200000              MOV       L:sync_display, #0x20
    428          }
   \   0000CC 87                    RETF
    429          

   \                                 In section .far_func.text, align 1
    430          void Power_On()
    431          {
    432            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine39
    433            status.daily=0; //Off Daily timer
    434            status.monthly=0; //Off Monthly alarm
    435            Save_Status();
   \                     ??CrossCallReturnLabel_99:
   \   00000A AC000000              JPF       Save_Status
    436            //hardware.lcdLed=1;
    437          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_195:
   \   000004 A4F7                  AND       A, #0xf7
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine69:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E CE0000                LDW       X, L:status
   \   000011 01                    RRWA      X, A
   \   000012 87                    RETF
    438          

   \                                 In section .far_func.text, align 1, keep-with-next
    439          void Power_Off()
    440          {
    441            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine39
    442            status.daily=0; //Off Daily alarm
    443            status.monthly=0; //Off Monthly alarm
    444            Save_Status();
   \                     ??CrossCallReturnLabel_98:
   \   00000A AC000000              JPF       Save_Status
    445             //hardware.lcdLed=0;
    446          
    447          }
    448          

   \                                 In section .far_func.text, align 1, keep-with-next
    449          void InitI2C(void)
    450          {
    451             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    452             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    453             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    454          }
    455          

   \                                 In section .far_func.text, align 1, keep-with-next
    456          bool I2C_Start(void)
    457          {
    458             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    459                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    460              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_149:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    461                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    462                  {
    463                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    464                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    465                  }
    466                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    467          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    468          

   \                                 In section .far_func.text, align 1, keep-with-next
    469          bool I2C_WA(u8 address)
    470          {
    471            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    472                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    473                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_148:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    474                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    475                   {
    476                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    477                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    478                   }
    479                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    480          }
    481          

   \                                 In section .far_func.text, align 1, keep-with-next
    482          bool I2C_RA(u8 address)
    483          {
    484            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    485                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    486                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_150:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    487                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    488                   {
    489                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    490                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    491                   }
    492                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    493          }
    494          
    495          

   \                                 In section .far_func.text, align 1, keep-with-next
    496          bool I2C_WD(u8 data)
    497          {
    498           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    499             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    500             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_147:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    501              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    502              {
    503                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    504                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    505              }
    506               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    507          }
    508          

   \                                 In section .far_func.text, align 1, keep-with-next
    509          u8 I2C_RD(void)
    510          {
    511           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    512            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    513           //while((!(I2C->SR1 & 0x40))&&timeout);
    514           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    515           {
    516             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    517             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    518           }
    519           u8 data=I2C_ReceiveData();
    520           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    521          }
    522          
    523            /*
    524          bool Init_DS1307(void)
    525          {
    526             // Test DS1307
    527              error=0;
    528              if (!I2C_Start()) return FALSE;
    529              if(!I2C_WA(0xD0)) return FALSE;
    530              if(!I2C_WD(0x00)) return FALSE;
    531              if(!I2C_WD(0x00)) return FALSE;
    532              I2C_GenerateSTOP(ENABLE);
    533          
    534              // timeout=100;  error=4;
    535              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    536              //    if (!timeout)return FALSE ;
    537               return TRUE;
    538          }
    539             */
    540          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine82_0
   \   000001                       ;               // Fall through to label ??Subroutine82_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    541          bool  ReadDS1307(void)
    542          {
    543                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine51
    544                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_152:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    545                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_146:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    546                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_262:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    547                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine33
    548                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_83:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    549                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    550                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine32
    551                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_81:
   \   000028 C70000                LD        L:seconds, A
    552                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine32
    553                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_80:
   \   00002F C70000                LD        L:minutes, A
    554                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine32
    555                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_79:
   \   000036 C70000                LD        L:hours, A
    556                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine32
    557                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_78:
   \   00003D C70000                LD        L:days, A
    558                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine32
    559                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_77:
   \   000044 C70000                LD        L:`date`, A
    560                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine32
    561                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_76:
   \   00004B C70000                LD        L:month, A
    562                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine36
    563                   I2C_GenerateSTOP(ENABLE);
    564                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_89:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    565          
    566               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    567               //   u8 data1 = I2C_RD();
    568                //Last read byte by I2C slave
    569               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    570               //  I2C_GenerateSTOP(ENABLE);
    571               //  temp2= I2C_RD();
    572                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    573                    {
    574                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    575                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    576                    }
    577                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006A CE0000                LDW       X, L:hardware
   \   00006D 01                    RRWA      X, A
   \   00006E AA01                  OR        A, #0x1
   \   000070 02                    RLWA      X, A
   \   000071 CF0000                LDW       L:hardware, X
    578                 return TRUE;
   \   000074 A601                  LD        A, #0x1
   \   000076 87                    RETF
    579          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_192:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    580          

   \                                 In section .far_func.text, align 1, keep-with-next
    581          bool Check_DS1307(void)
    582          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    583             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    584                 error=0;
   \   000003 725F0000              CLR       L:error
    585                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    586                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    587                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_145:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    588                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_265:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    589                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine33
    590                  //Last read byte by I2C slave
    591                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_82:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    592                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    593                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine68
    594                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_193:
   \   00003C B700                  LD        S:?b8, A
    595                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine36
    596                 I2C_GenerateSTOP(ENABLE);
    597                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_90:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    598                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    599          }
    600          

   \                                 In section .far_func.text, align 1, keep-with-next
    601          bool Set_DS1307()
    602          {
    603                 // convert hex or decimal to bcd format
    604          
    605          
    606                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine51
    607                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_151:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    608                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_144:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    609                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_261:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    610                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_153:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    611                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_154:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    612                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_155:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    613                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_156:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    614                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_157:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    615                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_158:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    616                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_159:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    617                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_263:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    618                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_264:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    619                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    620          
    621          
    622             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    623          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    624          
    625          

   \                                 In section .far_func.text, align 1, keep-with-next
    626          u8 convert_tobcd(u8 data)
    627          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    628             u8 data_second_decimal=data/10;
    629             u8 data_first_decimal=data - 10*data_second_decimal;
    630             data=16*data_second_decimal + data_first_decimal;
    631            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    632          }
    633          

   \                                 In section .far_func.text, align 1, keep-with-next
    634          u8 bcd2hex(u8 bcd)
    635          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    636            u8 hex=0;
    637            hex=(bcd>>4)*10 +(bcd&0x0f);
    638            bcd=0;
    639            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    640          }
    641          
    642          

   \                                 In section .far_func.text, align 1, keep-with-next
    643          bool Set_Clock()
    644          {
    645              //Clear Display
    646             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine19
    647             Delay1(1000);
    648             line_lcd=0;
    649              printf("\nYear>");
    650                do
    651              {
    652               line_lcd=1;
   \                     ??CrossCallReturnLabel_45:
   \   000004 8D000000              CALLF     ?Subroutine28
    653               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_63:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    654                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine76_0
    655              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_213:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_127:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_45
    656          
    657               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine46
    658              printf("\nMonth>");
    659                do
    660              {
    661               line_lcd=1;
   \                     ??CrossCallReturnLabel_121:
   \   000036 8D000000              CALLF     ?Subroutine28
    662               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_64:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    663                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    664              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_128:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_121
    665          
    666              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine20
    667               Delay1(1000);
    668                line_lcd=0;
    669              printf("\nDate>");
    670                do
    671              {
    672               line_lcd=1;
   \                     ??CrossCallReturnLabel_47:
   \   00006A 8D000000              CALLF     ?Subroutine28
    673               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_65:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    674                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    675              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_129:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_47
    676          
    677          
    678              //Clear Display
    679             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine21
    680             Delay1(1000);
    681             line_lcd=0;
    682              printf("\nDays>");
   \                     ??CrossCallReturnLabel_49:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    683                do
    684              {
    685                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    686               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    687                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    688              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_130:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    689          
    690          
    691          
    692             //Clear Display
    693             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine21
    694             Delay1(1000);
    695             line_lcd=0;
    696              printf("\nHour>");
   \                     ??CrossCallReturnLabel_50:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    697                do
    698              {
    699                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine78_0
    700               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_229:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    701                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine76_0
    702              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_212:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_131:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    703          
    704               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    705               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    706                do
    707              {
    708                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine78_0
    709               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_230:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    710                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine35
    711              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_218:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_132:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    712          
    713              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    714              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    715              do
    716              {
    717                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine78_0
    718               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_231:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    719                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine35
    720              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_217:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_133:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    721          
    722                // Set parameter to DS1307 + time byte
    723                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    724          
    725                //bool k=Check_DS1307();
    726          
    727            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    728          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_186:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_187:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine76_0
   \   000006                       ;               // Fall through to label ??Subroutine76_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_188:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_205:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    729          
    730          

   \                                 In section .far_func.text, align 1, keep-with-next
    731          u8 adj(u8 min,u8 max,u8 now)
    732          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    733             u8 adj=now;
    734             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    735             {
    736               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    737               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    738             }
    739             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    740             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    741             {
    742               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    743               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    744             }
    745             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    746             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    747          
    748             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    749          }
    750          
    751          

   \                                 In section .far_func.text, align 1, keep-with-next
    752          bool key_ok_on()
    753          {
    754            //Read Key OK
    755            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_84:
   \   000004 2629                  JRNE      L:??key_ok_on_0
    756             {
    757               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    758                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_85:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    759                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 250F                  JRC       L:??key_ok_on_0
    760                 {
    761                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    762                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000024 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_86:
   \   000028 2705                  JREQ      L:??key_ok_on_0
    763                    {
    764                       beep(2000);
   \   00002A 8D000000              CALLF     ?Subroutine38
    765                      hardware.lcdLed=1;
    766                     lcdLedTimer=LCDLEDON;
    767                      return TRUE;   //if realease retrun true
    768                    }
    769                 }
    770             }
   \                     ??CrossCallReturnLabel_95:
   \   00002E 87                    RETF
    771          
    772            return FALSE;
   \                     ??key_ok_on_0:
   \   00002F 4F                    CLR       A
   \   000030 87                    RETF
    773          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_196:
   \   00000B 350A0000              MOV       L:lcdLedTimer, #0xa
   \   00000F A601                  LD        A, #0x1
   \   000011 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    774          
    775          
    776          

   \                                 In section .far_func.text, align 1, keep-with-next
    777           bool key_plus_on()
    778          {
    779            //Read Key OK
    780              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_92:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2625                  JRNE      L:??key_plus_on_0
    781               {
    782               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    783                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_110:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_91:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    784                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 250B                  JRC       L:??key_plus_on_0
    785                  {
    786                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_88:
   \   000026 2705                  JREQ      L:??key_plus_on_0
    787                    {
    788                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine38
    789                       hardware.lcdLed=1;
    790                        lcdLedTimer=LCDLEDON;
    791          
    792                      return TRUE;
    793                    }
    794                  }
    795               }
   \                     ??CrossCallReturnLabel_97:
   \   00002C 87                    RETF
    796          
    797            return FALSE;
   \                     ??key_plus_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    798          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData
    799          
    800          

   \                                 In section .far_func.text, align 1, keep-with-next
    801            bool key_minus_on()
    802          {
    803            //Read Key OK
    804             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_94:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2625                  JRNE      L:??key_minus_on_0
    805               {
    806               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    807                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_109:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_93:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    808                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 250B                  JRC       L:??key_minus_on_0
    809                  {
    810                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_87:
   \   000026 2705                  JREQ      L:??key_minus_on_0
    811                   {
    812                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine38
    813                     hardware.lcdLed=1;
    814                        lcdLedTimer=LCDLEDON;
    815                     return TRUE;
    816                   }
    817                  }
    818               }
   \                     ??CrossCallReturnLabel_96:
   \   00002C 87                    RETF
    819          
    820            return FALSE;
   \                     ??key_minus_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    821          }
    822          
    823          

   \                                 In section .far_func.text, align 1, keep-with-next
    824          bool  key_ok_plus()
    825          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    826            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_41:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
    827            {
    828                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    829                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_111:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_42:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    830                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_112:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_101
    831                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine40
    832                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_101:
   \   000023 350A0000              MOV       L:lcdLedTimer, #0xa
    833                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
    834            }
    835          
    836           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
    837          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    838          
    839          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    840          bool Set_Timer_On()
    841          {
    842          
    843             //clr
    844             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine21
    845             Delay1(1000);
    846             line_lcd=0;
    847             printf("\nH On>");
   \                     ??CrossCallReturnLabel_53:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On>">`
   \   000007 8D000000              CALLF     ?Subroutine45
    848              timer3=0;
    849            do
    850              {
    851               line_lcd=1;
   \                     ??CrossCallReturnLabel_119:
   \   00000B 8D000000              CALLF     ?Subroutine31
    852               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_73:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    853                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine76_0
    854              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_210:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_142:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_136:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_119
    855          
    856             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    857             Delay1(1000);
    858             line_lcd=0;
    859             printf("\nMin On>");
   \                     ??CrossCallReturnLabel_54:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On>">`
   \   000041 8D000000              CALLF     ?Subroutine45
    860              timer3=0;
    861            do
    862              {
    863               line_lcd=1;
   \                     ??CrossCallReturnLabel_120:
   \   000045 8D000000              CALLF     ?Subroutine31
    864               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_74:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    865                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine35
    866              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_215:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_143:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_137:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_120
    867          
    868             //Save data to eeprom
    869               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_On_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_On_3
    870                 else status.daily=0;
   \                     ??Set_Timer_On_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_On_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    871               EEPROM_INIT();
    872              //u8 temp =*(u8*)(&status);
    873              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    874               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    875               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    876               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_220:
   \   000088 C60000                LD        A, L:daily_hour_on
   \   00008B AE4002                LDW       X, #0x4002
   \   00008E 8D000000              CALLF     ?Subroutine6
    877               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_17:
   \   000092 C60000                LD        A, L:daily_minute_on
   \   000095 AE4003                LDW       X, #0x4003
   \   000098 8D000000              CALLF     ?Subroutine4
    878               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    879                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_5:
   \   00009C 8D000000              CALLF     ?Subroutine3
    880                 change=TRUE;
   \                     ??CrossCallReturnLabel_2:
   \   0000A0 35010000              MOV       L:change, #0x1
    881          
    882             return TRUE;
   \   0000A4 A601                  LD        A, #0x1
   \   0000A6 87                    RETF
    883          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_226:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_225:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004                       REQUIRE ??Subroutine77_0
   \   000004                       ;               // Fall through to label ??Subroutine77_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_224:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_223:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    884          

   \                                 In section .far_func.text, align 1, keep-with-next
    885          bool Set_Timer_Off()
    886          {
    887          
    888              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine21
    889              Delay1(1000);
    890              line_lcd=0;
    891              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_51:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine45
    892               timer3=0;
    893            do
    894              {
    895               line_lcd=1;
   \                     ??CrossCallReturnLabel_117:
   \   00000B 8D000000              CALLF     ?Subroutine30
    896               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_70:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    897                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine76_0
    898              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_211:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_140:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_134:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_117
    899          
    900            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    901             Delay1(1000);
    902             line_lcd=0;
    903             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_52:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   000041 8D000000              CALLF     ?Subroutine45
    904             timer3=0;
    905            do
    906              {
    907               line_lcd=1;
   \                     ??CrossCallReturnLabel_118:
   \   000045 8D000000              CALLF     ?Subroutine30
    908               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_71:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    909                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine35
    910              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_216:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_141:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_135:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_118
    911          
    912            //Save data to eeprom
    913               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_Off_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_Off_3
    914                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_Off_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    915               EEPROM_INIT();
    916              //u8 temp =*(u8*)(&status);
    917              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    918               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    919               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    920               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_219:
   \   000088 C60000                LD        A, L:daily_hour_off
   \   00008B AE4004                LDW       X, #0x4004
   \   00008E 8D000000              CALLF     ?Subroutine6
    921               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_16:
   \   000092 C60000                LD        A, L:daily_minute_off
   \   000095 AE4005                LDW       X, #0x4005
   \   000098 8D000000              CALLF     ?Subroutine4
    922               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    923                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_6:
   \   00009C C60000                LD        A, L:daily_hour_off
   \   00009F 905F                  CLRW      Y
   \   0000A1 8D000000              CALLF     ?Subroutine2
    924                 change=TRUE;
   \                     ??CrossCallReturnLabel_0:
   \   0000A5 35010000              MOV       L:change, #0x1
    925               return TRUE;
   \   0000A9 A601                  LD        A, #0x1
   \   0000AB 87                    RETF
    926          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    927          
    928          /*
    929               //Computing time_long_on
    930          
    931               u8 hour=daily_hour_on;
    932               u8 minute=daily_minute_on;
    933               daily_long_on=0;
    934               do
    935               {
    936                    daily_long_on++;
    937                    minute++;
    938                    if (minute==60)
    939                    {
    940                      minute=0;
    941                      hour++;
    942                    }
    943                    if(hour==24) hour=0;
    944          
    945               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
    946          
    947                //Display daily_long_on
    948              LCDInstr(0x01);
    949              Delay1(1000);
    950              line_lcd=0;
    951              printf("\nLong :");
    952          
    953                do
    954              {
    955               line_lcd=1;
    956               printf("\n%d",daily_long_on);
    957                 //daily_long_on=adj(0,1440,daily_long_on);
    958              } while (!key_ok_on());
    959          
    960              time_on=daily_hour_on*60+daily_minute_on;
    961              time_off= daily_hour_off*60+daily_minute_off;
    962              //Save data to eeprom
    963                status.daily=1;
    964               EEPROM_INIT();
    965              //u8 temp =*(u8*)(&status);
    966              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    967               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    968               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    969               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    970               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    971               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    972               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    973               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    974          
    975             return TRUE;
    976          
    977          }
    978            */
    979          

   \                                 In section .far_func.text, align 1, keep-with-next
    980          void Save_Status()
    981          {
    982            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ??Subroutine77_0
    983            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    984            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    985            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_222:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    986          }
    987          

   \                                 In section .far_func.text, align 1
    988          bool Read_Allarm()
    989          {
    990             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   000007 C70000                LD        L:daily_hour_on, A
    991              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    992             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000017 C70000                LD        L:daily_minute_on, A
    993              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    994             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000025 C70000                LD        L:daily_hour_off, A
    995              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    996             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000033 C70000                LD        L:daily_minute_off, A
    997              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    998             monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   \   00003D AE4006                LDW       X, #0x4006
   \   000040 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   000044 C70000                LD        L:monthly_year, A
    999              if(monthly_year >99) return FALSE;
   \   000047 A164                  CP        A, #0x64
   \   000049 24C3                  JRNC      L:??Read_Allarm_1
   1000             monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   \   00004B AE4007                LDW       X, #0x4007
   \   00004E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000052 C70000                LD        L:monthly_month, A
   1001              if(monthly_month>12) return FALSE;
   \   000055 A10D                  CP        A, #0xd
   \   000057 24B5                  JRNC      L:??Read_Allarm_1
   1002             monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   \   000059 AE4008                LDW       X, #0x4008
   \   00005C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   000060 C70000                LD        L:monthly_date, A
   1003              if(monthly_date >31) return FALSE;
   \   000063 A120                  CP        A, #0x20
   \   000065 24A7                  JRNC      L:??Read_Allarm_1
   1004            return TRUE;
   \   000067 A601                  LD        A, #0x1
   \   000069 87                    RETF
   1005          }
   1006          

   \                                 In section .far_func.text, align 1, keep-with-next
   1007          void EEPROM_INIT()
   1008          {
   1009            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1010            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1011            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1012          
   1013          
   1014          
   1015          }
   1016          
   1017          

   \                                 In section .far_func.text, align 1
   1018          void GpioConfiguration()
   1019          {
   1020          
   1021            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1022          
   1023            // ADC PE6 NEW PB0
   1024            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     ?Subroutine59
   1025          
   1026            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1027            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_174:
   \   000018 A680                  LD        A, #0x80
   \   00001A 8D000000              CALLF     ?Subroutine55
   1028          
   1029            //PD0 Led
   1030            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_166:
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
   1031            //I2C
   1032            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000025 35B00000              MOV       S:?b0, #0xb0
   \   000029 A610                  LD        A, #0x10
   \   00002B AE5005                LDW       X, #0x5005
   \   00002E 8D000000              CALLF     GPIO_Init
   1033            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000032 35B00000              MOV       S:?b0, #0xb0
   \   000036 A620                  LD        A, #0x20
   \   000038 AE5005                LDW       X, #0x5005
   \   00003B 8D000000              CALLF     ?Subroutine60
   1034            // Remap Pins pb4,pb5  sda,scl ;
   1035          
   1036             //Init KEY OK,PLUS,MINUS
   1037            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_177:
   \   00003F A610                  LD        A, #0x10
   \   000041 AE5019                LDW       X, #0x5019
   \   000044 8D000000              CALLF     ?Subroutine60
   1038            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_178:
   \   000048 A602                  LD        A, #0x2
   \   00004A AE5000                LDW       X, #0x5000
   \   00004D 8D000000              CALLF     ?Subroutine60
   1039            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_179:
   \   000051 A604                  LD        A, #0x4
   \   000053 AE5000                LDW       X, #0x5000
   \   000056 8D000000              CALLF     ?Subroutine59
   1040          
   1041            //Init DS18b20 data pin
   1042            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \                     ??CrossCallReturnLabel_175:
   \   00005A A604                  LD        A, #0x4
   \   00005C AE500F                LDW       X, #0x500f
   \   00005F 8D000000              CALLF     ?Subroutine59
   1043          
   1044            // Power Pin
   1045             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_176:
   \   000063 A608                  LD        A, #0x8
   \   000065 8D000000              CALLF     ?Subroutine55
   1046          
   1047            // lcdLed Pin
   1048             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_167:
   \   000069 AE5005                LDW       X, #0x5005
   \   00006C AC000000              JPF       GPIO_Init
   1049          
   1050          
   1051          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35F00000              MOV       S:?b0, #0xf0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine55:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B A601                  LD        A, #0x1
   \   00000D 87                    RETF
   1052          

   \                                 In section .far_func.text, align 1
   1053          void InitClk()
   1054          {
   1055            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1056            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1057            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1058            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1059            CLK_SOURCE_HSI,       // Switch to internal timer.
   1060            DISABLE,              // Disable the clock switch interrupt.
   1061            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1062          
   1063            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine61
   1064            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_180:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine61
   1065            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_181:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine61
   1066            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_182:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine61
   1067            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_183:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1068          
   1069          
   1070          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1071          
   1072          
   1073          /*
   1074          void InitAdc()
   1075          {
   1076               ADC1_DeInit();
   1077               ADC1_StartConversion();
   1078          
   1079               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1080               //           ADC1_CHANNEL_0,
   1081               //           ADC1_PRESSEL_FCPU_D4,
   1082               //            ADC1_EXTTRIG_TIM,
   1083          
   1084          
   1085               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1086               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1087                                      ADC1_CHANNEL_0,
   1088                                      ADC1_ALIGN_RIGHT
   1089                                     );
   1090          
   1091          
   1092               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1093          
   1094          
   1095               //ADC1_Cmd (ENABLE);
   1096               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1097               ADC1_StartConversion();
   1098               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1099          
   1100          }
   1101          */
   1102          
   1103          
   1104          
   1105          /*
   1106          void InitUart()
   1107          {
   1108             UART2_DeInit();
   1109             UART2_Init((u32)9600,
   1110                        UART2_WORDLENGTH_8D,
   1111                        UART2_STOPBITS_1,
   1112                        UART2_PARITY_NO,
   1113                        UART2_SYNCMODE_CLOCK_DISABLE,
   1114                        UART2_MODE_TXRX_ENABLE
   1115                          );
   1116          
   1117             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1118             UART2_Cmd(ENABLE);
   1119          
   1120            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1121          }
   1122            */
   1123          
   1124          
   1125          /*
   1126          void SendChar( u8 Char)
   1127          {
   1128             UART2->DR = Char;
   1129            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1130          }
   1131          
   1132           */
   1133          
   1134           /*
   1135          void Send_Hello()
   1136          {
   1137            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1138             Delay1(10);
   1139             sprintf(data,"Hello");
   1140              u8 i=0;
   1141            do
   1142           {
   1143            SendChar(data[i++]);
   1144           } while (data[i]!=0);
   1145            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1146            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1147          
   1148          
   1149          
   1150          }
   1151          
   1152          
   1153          
   1154          
   1155          
   1156          void SendData()
   1157          {
   1158           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1159            Delay1(10);
   1160            u8 i=0;
   1161            sprintf(data,"%d %c",adcdata,0x0d);
   1162           do
   1163           {
   1164             SendChar(data[i++]);
   1165          
   1166           } while (data[i]!=0);
   1167             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1168            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1169            rx_data=0;
   1170          }
   1171          */
   1172          
   1173          
   1174           /*
   1175          u16 Average()
   1176          {
   1177           //Find average in measure
   1178            u8 i=0;
   1179            u16 Summa=0;
   1180            do
   1181            {
   1182             Summa+=measure[i++];
   1183            } while ( measure[i]!=0);
   1184             if(i!=0) Summa=Summa/i;
   1185             return Summa;
   1186          }
   1187             */
   1188          

   \                                 In section .far_func.text, align 1, keep-with-next
   1189          void LCDDataOut(u8 data)
   1190          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1191            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_251
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine81_0
   1192            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_251:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_32:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_252
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine81_0
   1193            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_252:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_31:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_253
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine81_0
   1194            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_253:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_30:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_254
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine81_0
   1195          }
   \                     ??CrossCallReturnLabel_254:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_260:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine64:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1196          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine81_0
   \   000002                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1197          void InitLcd()
   1198          {
   1199           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine13
   1200            LCD_RW(0);
   1201            LCD_RS(0);
   \                     ??CrossCallReturnLabel_35:
   \   000006 8D000000              CALLF     ?Subroutine14
   1202            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_249:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine18
   1203          
   1204            LCDInstrNibble(0x03);
   1205             Delay1(10);
   1206            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_44:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1207             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine18
   1208            LCDInstrNibble(0x03);
   1209             Delay1(10);
   1210          
   1211             //Line 4
   1212            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_43:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1213            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1214            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1215            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1216          
   1217            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1218            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1219          
   1220            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine24
   1221            Delay1(250);
   1222          
   1223            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_58:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1224            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1225          
   1226          
   1227          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_204:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_258:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_257:
   \   00000A 87                    RETF
   1228          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine81_0
   \                     ??CrossCallReturnLabel_255:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_209:
   \   00000D                       REQUIRE ??Subroutine75_0
   \   00000D                       ;               // Fall through to label ??Subroutine75_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_208:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1229          void LCDInstr(u8 Instr)
   1230          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1231            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine14
   1232            LCD_RW(0);
   \                     ??CrossCallReturnLabel_247:
   \   000009 2000                  JRA       ?Subroutine0
   1233            LCDDataOut(Instr>>4);
   1234            PulseEnable();
   1235            LCDDataOut(Instr & 0x0F);
   1236            PulseEnable();
   1237          }
   1238          

   \                                 In section .far_func.text, align 1, keep-with-next
   1239          void LCDData(u8 Data)
   1240          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1241            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1242            LCD_RW(0);
   \                     ??CrossCallReturnLabel_29:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1243            LCDDataOut(Data>>4);
   1244            PulseEnable() ;
   1245            LCDDataOut(Data & 0x0F) ;
   1246            PulseEnable();
   1247          }
   1248          

   \                                 In section .far_func.text, align 1, keep-with-next
   1249          void LCDInstrNibble(u8 Instr)
   1250          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1251            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine13
   1252            LCD_RW(0);
   1253            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_34:
   \   00000B AC000000              JPF       ??Subroutine75_0
   1254            PulseEnable();
   1255          }
   1256          

   \                                 In section .far_func.text, align 1, keep-with-next
   1257          void PulseEnable(void)
   1258          {
   1259            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine8
   1260             Delay1(1);
   1261            LCD_EN(1);
   1262             Delay1(1);
   1263            LCD_EN(0);
   \                     ??CrossCallReturnLabel_22:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine81_0
   1264             Delay1(1);
   \                     ??CrossCallReturnLabel_250:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1265          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_259:
   \   000006 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_238:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_237:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1266          

   \                                 In section .far_func.text, align 1, keep-with-next
   1267          void LCD_Busy(void)
   1268          {
   1269             //set Port D7 as Input
   1270             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1271             //Set Read
   1272             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1273             LCD_RS(0);
   \                     ??CrossCallReturnLabel_28:
   \   000013 8D000000              CALLF     ?Subroutine14
   1274             // Read Busy Flag
   1275                timer2=0;
   \                     ??CrossCallReturnLabel_248:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1276             do
   1277             {
   1278             // Enable set
   1279               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine8
   1280                Delay1(1);
   1281               LCD_EN(1);
   1282                Delay1(1);
   1283             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_23:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1284                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1285                //Clear read
   1286              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine81_0
   1287             //set Port D7 as Output
   1288             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_256:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1289          
   1290          }
   1291          
   1292          

   \                                 In section .far_func.text, align 1, keep-with-next
   1293          void LCD(u8 data)
   1294           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1295             //  static u8 linet=0;
   1296          
   1297          
   1298               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2674                  JRNE      L:??CrossCallReturnLabel_235
   1299               {
   1300          
   1301                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 272C                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2735                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 273E                  JREQ      L:??LCD_3
   \   000018 2046                  JRA       L:??LCD_4
   1302                   {
   1303                   case 0:
   1304                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1305                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1306                      {
   1307                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1308                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     ?Subroutine11
   1309                         Delay1(1);
   1310                      }
   \                     ??CrossCallReturnLabel_232:
   \   000030 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_55:
   \   000034 25EC                  JRC       L:??LCD_5
   1311                     LCDInstr(0x80 | 0x00);
   \   000036 A680                  LD        A, #0x80
   \   000038 8D000000              CALLF     ?Subroutine67
   1312                     count=0;
   1313                     break;
   \                     ??CrossCallReturnLabel_189:
   \   00003C 2022                  JRA       L:??LCD_4
   1314                   case 1:
   1315                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00003E A6C0                  LD        A, #0xc0
   \   000040 8D000000              CALLF     LCDInstr
   1316                     count=20;
   \   000044 35140000              MOV       L:count, #0x14
   1317                     break;
   \   000048 2016                  JRA       L:??LCD_4
   1318                   case 2:
   1319                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004A A694                  LD        A, #0x94
   \   00004C 8D000000              CALLF     LCDInstr
   1320                     count=40;
   \   000050 35280000              MOV       L:count, #0x28
   1321                     break;
   \   000054 200A                  JRA       L:??LCD_4
   1322                   case 3:
   1323                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000056 A6D4                  LD        A, #0xd4
   \   000058 8D000000              CALLF     LCDInstr
   1324                     count=60;
   \   00005C 353C0000              MOV       L:count, #0x3c
   1325                     break;
   1326                   //default:
   1327                    //  LCDInstr(0x80 |0x40);    //Line 1
   1328                    }
   1329                   line_lcd++;
   \                     ??LCD_4:
   \   000060 C60000                LD        A, L:line_lcd
   \   000063 4C                    INC       A
   \   000064 C70000                LD        L:line_lcd, A
   1330                   if (line_lcd>=5)
   \   000067 A105                  CP        A, #0x5
   \   000069 250F                  JRC       L:??LCD_6
   1331                   {
   1332                    line_lcd=1;   //line >=5
   \   00006B 35010000              MOV       L:line_lcd, #0x1
   1333                    LCDInstr(0x01); //Clear LCD
   \   00006F 8D000000              CALLF     ?Subroutine74
   1334                    Delay1(2500);
   \                     ??CrossCallReturnLabel_207:
   \   000073 AE09C4                LDW       X, #0x9c4
   \   000076 8D000000              CALLF     Delay1
   1335                   }
   1336          
   1337                   Delay1(1);
   \                     ??LCD_6:
   \   00007A 8D000000              CALLF     ??Subroutine79_0
   1338          
   1339          
   1340               }
   1341          
   1342          
   1343               if (count==20)
   \                     ??CrossCallReturnLabel_235:
   \   00007E C60000                LD        A, L:count
   \   000081 A114                  CP        A, #0x14
   \   000083 260A                  JRNE      L:??LCD_7
   1344                {
   1345                  LCDInstr(0x80 | 0x40);
   \   000085 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   000087 8D000000              CALLF     LCDInstr
   1346                  Delay1(1);
   \                     ??LCD_9:
   \   00008B 5F                    CLRW      X
   \   00008C 5C                    INCW      X
   \   00008D 2023                  JRA       ??LCD_10
   1347                }
   1348                   else if(count==40)
   \                     ??LCD_7:
   \   00008F A128                  CP        A, #0x28
   \   000091 2604                  JRNE      L:??LCD_11
   1349                  {
   1350                    LCDInstr(0x80 | 0x14);
   \   000093 A694                  LD        A, #0x94
   \   000095 20F0                  JRA       ??LCD_8
   1351                    Delay1(1);
   1352                  }
   1353                    else if(count==60)
   \                     ??LCD_11:
   \   000097 A13C                  CP        A, #0x3c
   \   000099 2608                  JRNE      L:??LCD_12
   1354                    {
   1355                      LCDInstr(0x80 | 0x54);
   \   00009B A6D4                  LD        A, #0xd4
   \   00009D 8D000000              CALLF     ?Subroutine67
   1356                      count=0;
   1357                      Delay1(1);
   \                     ??CrossCallReturnLabel_190:
   \   0000A1 20E8                  JRA       ??LCD_9
   1358                    }
   1359                      else if(count >80)
   \                     ??LCD_12:
   \   0000A3 A151                  CP        A, #0x51
   \   0000A5 250F                  JRC       L:??LCD_13
   1360                        {
   1361                          count=0;
   \   0000A7 725F0000              CLR       L:count
   1362                          LCDInstr(0x01); //Clear LCD
   \   0000AB 8D000000              CALLF     ?Subroutine74
   1363                          Delay1(250);
   \                     ??CrossCallReturnLabel_206:
   \   0000AF AE00FA                LDW       X, #0xfa
   \                     ??LCD_10:
   \   0000B2 8D000000              CALLF     Delay1
   1364                        }
   1365          
   1366               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_13:
   \   0000B6 B600                  LD        A, S:?b9
   \   0000B8 A11C                  CP        A, #0x1c
   \   0000BA 250B                  JRC       L:??LCD_14
   1367               {
   1368                 LCDData(data);
   \   0000BC 8D000000              CALLF     ?Subroutine11
   1369                  Delay1(1);
   1370                 count++;
   \                     ??CrossCallReturnLabel_233:
   \   0000C0 C60000                LD        A, L:count
   \   0000C3 4C                    INC       A
   \   0000C4 C70000                LD        L:count, A
   1371               }
   1372           }
   \                     ??LCD_14:
   \   0000C7 AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine79_0
   \   000004                       ;               // Fall through to label ??Subroutine79_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_239:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1373          

   \                                 In section .far_func.text, align 1, keep-with-next
   1374          void InitDelayTimer2()
   1375          {
   1376             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1377             //Tclock 16/8=2Mhz  /20 10us
   1378                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1379                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1380                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1381                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1382                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1383          
   1384          }
   1385          

   \                                 In section .far_func.text, align 1, keep-with-next
   1386          void InitDelayTimer3()
   1387          {
   1388             //Timer 3 use for 1s Delay
   1389             //Tclock 16000000/1024=15626
   1390                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1391                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1392                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1393                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1394          
   1395               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1396          
   1397          }
   1398          
   1399          
   1400          
   1401          

   \                                 In section .far_func.text, align 1, keep-with-next
   1402          bool DS18_Write(u8 data)
   1403          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1404            disableInterrupts();
   \   000006 9B                    SIM
   1405            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1406            {
   1407             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1408             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1409             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_40:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_246
   \   00001A 8D000000              CALLF     ?Subroutine23
   1410               //else DS18(0);
   1411             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_246:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1412             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine23
   1413             //Delay1(0);
   1414            }
   \                     ??CrossCallReturnLabel_245:
   \   000029 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_56:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1415            enableInterrupts();
   \   00002F 9A                    RIM
   1416            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1417          
   1418          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine80_0
   \   000002                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_184:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1419          
   1420          

   \                                 In section .far_func.text, align 1, keep-with-next
   1421          u8  DS18_Read()
   1422          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1423              //Init DS18b20 data pin as Input
   1424          
   1425            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1426              disableInterrupts();
   \   000006 9B                    SIM
   1427            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1428            {
   1429              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1430              Delay_us(1); //Start time slot 4,5 us
   1431              DS18(1);
   \                     ??CrossCallReturnLabel_39:
   \   00000D 8D000000              CALLF     ?Subroutine23
   1432              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_243:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1433              //Delay1(0);
   1434             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_62:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1435              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1436              //  DS18(1);  // Next bit
   1437             // Delay1(0);
   1438          
   1439            }
   \   00003D 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_57:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1440              enableInterrupts();
   \   000043 9A                    RIM
   1441              //Init DS18b20 data pin
   1442             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1443             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1444          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1445          

   \                                 In section .far_func.text, align 1, keep-with-next
   1446          bool DS18_Reset()
   1447          {
   1448             //Init Reset Pulse
   1449              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine65
   1450              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_185:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1451              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine23
   1452              //Delay1(1);
   1453              timer2=0;
   \                     ??CrossCallReturnLabel_244:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1454              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_103:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_60:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1455              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_104:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1456              {
   1457                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine43
   1458                return FALSE;
   \                     ??CrossCallReturnLabel_113:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1459              }
   1460          
   1461              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1462               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_105:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_61:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1463                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_106:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1464                 {
   1465                  hardware.ds18B20=0;
   1466                  return FALSE;
   1467                 }
   1468          
   1469              // Delay1(10);
   1470              //Delay1(20);    //25=524us
   1471               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine44
   1472              return TRUE;
   \                     ??CrossCallReturnLabel_115:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1473          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1474          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1475          u8 temperature ()
   1476          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1477          
   1478             //Init Reset Pulse
   1479               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_164:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1480             //Skip ROM Command 0xCC
   1481              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine57
   1482             //Function command  CONVERT T [44h]
   1483              DS18_Write(0x44);
   1484              //Wait util end convert
   1485              timer2=0;
   1486               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_171:
   \   000013 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_108:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_171
   1487                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1488               //u8 temp8=timer2;
   1489              //Init Reset Pulse
   1490              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_165:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1491              // Skip ROM Command 0xCC
   1492              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine56
   1493              //Function command READ SCRATCHPAD [BEh]
   1494              DS18_Write(0xBE);
   1495               u8 temp1=DS18_Read();
   1496               u8 temp2=DS18_Read();
   1497              DS18_Reset();
   \                     ??CrossCallReturnLabel_169:
   \   000033 8D000000              CALLF     DS18_Reset
   1498                u16 result = temp2*256+temp1;
   1499                temp1= (u8)(result>>3);
   1500               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_21:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1501          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_199:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_198:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine83_0
   \                     ??CrossCallReturnLabel_267:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1502          

   \                                 In section .far_func.text, align 1, keep-with-next
   1503          bool Read_DS18()
   1504          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1505          
   1506             //Init Reset Pulse
   1507               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_162:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1508             //Skip ROM Command 0xCC
   1509              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine57
   1510             //Function command  CONVERT T [44h]
   1511              DS18_Write(0x44);
   1512              //Wait util end convert
   1513              timer2=0;
   1514               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_170:
   \   000013 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_107:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_170
   1515                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1516               //u8 temp8=timer2;
   1517              //Init Reset Pulse
   1518              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_163:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1519              // Skip ROM Command 0xCC
   1520              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine56
   1521              //Function command READ SCRATCHPAD [BEh]
   1522              DS18_Write(0xBE);
   1523               u8 temp1=DS18_Read();
   1524               u8 temp2=DS18_Read();
   1525               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_168:
   \   000033 8D000000              CALLF     ?Subroutine58
   1526               u8 temp4=DS18_Read();
   1527               u8 temp5=DS18_Read();
   1528               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_173:
   \   000037 8D000000              CALLF     ?Subroutine58
   1529               u8 temp7=DS18_Read();
   1530               u8 temp8=DS18_Read();
   1531               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_172:
   \   00003B 8D000000              CALLF     DS18_Read
   1532          
   1533               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1534          
   1535                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1536                result2=0;
   \   000047 725F0000              CLR       L:result2
   1537                u16 result = temp2*256+temp1;
   1538                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   00004F C70000                LD        L:result1, A
   1539                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1540                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1541          
   1542          
   1543                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1544               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1545               //line_lcd=1;
   1546               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1547               // while (!key_ok_on());
   1548          
   1549               //u8 temp3=DS18_Read();
   1550          
   1551              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1552          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1553          

   \                                 In section .far_func.text, align 1, keep-with-next
   1554          bool DS18Set ()
   1555          {
   1556               //Init Reset Pulse
   1557              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_160:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1558             //Skip ROM Command 0xCC
   1559              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine71
   1560             //Function command  WRITE SCRATCHPAD 0x4E
   1561              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_201:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1562             //Write 3 bytes last is config reg
   1563              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1564              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1565              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1566          
   1567             //Init Reset Pulse
   1568              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_161:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1569              //Skip ROM Command 0xCC
   1570              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine71
   1571              //Function   Store in Conf Reg
   1572              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_200:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1573          
   1574          
   1575          
   1576          
   1577          
   1578          
   1579            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1580          }
   1581          
   1582          
   1583          
   1584          
   1585          
   1586          
   1587          
   1588          

   \                                 In section .far_func.text, align 1, keep-with-next
   1589          void Delay1(u16 Delay)
   1590          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1591              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1592            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1593            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1594          }
   \   00000D 87                    RETF
   1595          

   \                                 In section .far_func.text, align 1, keep-with-next
   1596           void Delay2(u16 Delay)
   1597          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1598            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1599            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1600          }
   \   00000D 87                    RETF
   1601          
   1602          

   \                                 In section .far_func.text, align 1, keep-with-next
   1603          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1604          {
   1605            //disableInterrupts();
   1606            do
   1607              {
   1608                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1609                nop();
   \   000001 9D                    NOP
   1610              }
   1611              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1612            //enableInterrupts();
   1613          }
   \   000005 87                    RETF
   1614          
   1615          

   \                                 In section .far_func.text, align 1, keep-with-next
   1616          void Display_Line(char* line)
   1617          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1618            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1619            u8 count;
   1620              //Set Cursor to First Line
   1621             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1622             count=0;
   \   000010 3F00                  CLR       S:?b10
   1623             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine79_0
   1624            do
   1625            {
   1626          
   1627              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_236:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1628               {
   1629                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine11
   1630                  Delay1(1);
   1631                 count++;
   \                     ??CrossCallReturnLabel_234:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1632               }
   1633               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1634            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_236
   1635          
   1636             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1637          
   1638          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1639          

   \                                 In section .far_func.text, align 1, keep-with-next
   1640          void Rotate_Line( char * line)
   1641          {
   1642          
   1643             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1644             char temp_next;
   1645          
   1646             do
   1647             {
   1648                temp_next=*(line+1);
   1649               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1650                //line++;
   1651                //temp_next=*line;
   1652               //*line=*line++;
   1653             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1654             line--;
   1655             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1656          
   1657          }
   \   000012 87                    RETF
   1658          

   \                                 In section .far_func.text, align 1, keep-with-next
   1659          void Clear_Line1 ()
   1660          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1661               //Set Cursor to First Line
   1662             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine10
   1663             count=0;
   1664             Delay1(1);
   1665              u8 count=0;
   1666             do
   1667             {
   1668               LCDData(' ');
   \                     ??CrossCallReturnLabel_27:
   \   000009 8D000000              CALLF     ?Subroutine9
   1669                  Delay1(1);
   1670                  count++;
   1671             }while (count<8);
   \                     ??CrossCallReturnLabel_25:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_27
   1672          
   1673          
   1674          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_191:
   \   000004 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_241:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_240:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1675          

   \                                 In section .far_func.text, align 1, keep-with-next
   1676          void Clear_Line2 ()
   1677          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1678               //Set Cursor to Second  Line
   1679             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine10
   1680             count=0;
   1681             Delay1(1);
   1682              u8 count=0;
   1683             do
   1684             {
   1685               LCDData(' ');
   \                     ??CrossCallReturnLabel_26:
   \   000009 8D000000              CALLF     ?Subroutine9
   1686                  Delay1(1);
   1687                  count++;
   1688             }while (count<8);
   \                     ??CrossCallReturnLabel_24:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_26
   1689          
   1690          
   1691          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1692          
   1693          
   1694          
   1695          
   1696          

   \                                 In section .far_func.text, align 1, keep-with-next
   1697          void Menu (void)
   1698          {
   1699           // Clear Display
   1700              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine24
   1701              Delay1(250);
   1702              //u8 key;
   1703           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1704              Wait for Plus,Minius or OK
   1705              If plus next option from Menu on the end EXIT
   1706              If minus previous option from Menu  on the end EXIT
   1707              If OK enter to menu option
   1708              If time out about 10s exit from Menu
   1709           */
   1710              do {
   1711          First_Menu:
   1712              line_lcd=0;
   \                     ??CrossCallReturnLabel_59:
   \   000004 725F0000              CLR       L:line_lcd
   1713              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1714              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine31
   1715              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_75:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1716              switch (pressKey())
   \   000022 8D000000              CALLF     pressKey
   \   000026 4A                    DEC       A
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   1717                  {
   1718                  case 1: goto Second_Menu ;
   1719                   break;
   1720                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   1721                   break;
   \   000039 CC0000                JP        L:??Menu_3
   1722                  case 3: goto Exit_Menu;
   1723                   break;
   1724                  }
   1725                  break; //Exit Menu
   1726          
   1727          
   1728          Second_Menu:
   1729              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   1730              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     printf
   1731              line_lcd=1;
   \   000047 8D000000              CALLF     ?Subroutine30
   1732              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_72:
   \   00004B 89                    PUSHW     X
   \   00004C C60000                LD        A, L:daily_hour_off
   \   00004F 97                    LD        XL, A
   \   000050 89                    PUSHW     X
   \   000051 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000054 8D000000              CALLF     printf
   \   000058 5B04                  ADD       SP, #0x4
   1733                switch (pressKey())
   \   00005A 8D000000              CALLF     pressKey
   \   00005E 4A                    DEC       A
   \   00005F 2710                  JREQ      L:??Menu_4
   \   000061 4A                    DEC       A
   \   000062 2706                  JREQ      L:??Menu_5
   \   000064 4A                    DEC       A
   \   000065 279D                  JREQ      L:??CrossCallReturnLabel_59
   \   000067 CC0000                JP        L:??Menu_3
   1734                  {
   1735                  case 1: goto Third_Menu ;
   1736                   break;
   1737                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   00006A 8D000000              CALLF     Set_Timer_Off
   1738                   break;
   \   00006E CC0000                JP        L:??Menu_3
   1739                  case 3: goto First_Menu;
   1740                   break;
   1741                  }
   1742               break; //Exit Menu
   1743          
   1744          Third_Menu:
   1745                line_lcd=0;
   \                     ??Menu_4:
   \   000071 725F0000              CLR       L:line_lcd
   1746              printf("\nMonthly ");
   \   000075 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000078 8D000000              CALLF     printf
   1747              line_lcd=1;
   \   00007C 35010000              MOV       L:line_lcd, #0x1
   1748              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \   000080 C60000                LD        A, L:monthly_date
   \   000083 5F                    CLRW      X
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:monthly_month
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B C60000                LD        A, L:monthly_year
   \   00008E 97                    LD        XL, A
   \   00008F 89                    PUSHW     X
   \   000090 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000093 8D000000              CALLF     printf
   \   000097 5B06                  ADD       SP, #0x6
   1749                switch (pressKey())
   \   000099 8D000000              CALLF     pressKey
   \   00009D 4A                    DEC       A
   \   00009E 2750                  JREQ      L:??Menu_6
   \   0000A0 4A                    DEC       A
   \   0000A1 2706                  JREQ      L:??Menu_7
   \   0000A3 4A                    DEC       A
   \   0000A4 2796                  JREQ      L:??Menu_0
   \   0000A6 CC0000                JP        L:??Menu_3
   1750                  {
   1751                  case 1: goto Fourth_Menu;
   1752                   break;
   1753                  case 2:
   1754                    {
   1755                     setData();
   \                     ??Menu_7:
   \   0000A9 8D000000              CALLF     setData
   1756                     monthly_year=y;
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 C70000                LD        L:monthly_year, A
   1757                     monthly_month=m;
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 C70000                LD        L:monthly_month, A
   1758                     monthly_date=d;
   \   0000B9 C60000                LD        A, L:d
   \   0000BC C70000                LD        L:monthly_date, A
   1759                     status.monthly=1;
   \   0000BF CE0000                LDW       X, L:status
   \   0000C2 01                    RRWA      X, A
   \   0000C3 AA08                  OR        A, #0x8
   \   0000C5 8D000000              CALLF     ?Subroutine69
   1760                     status.daily=0;  // Disable Daily Alarm On date enable it
   1761                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_194:
   \   0000C9 A4FE                  AND       A, #0xfe
   \   0000CB 8D000000              CALLF     ?Subroutine1
   1762                     // Save Status and Date in EEPROM
   1763                     EEPROM_INIT();
   1764                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1765                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1766                     FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   \                     ??CrossCallReturnLabel_221:
   \   0000CF C60000                LD        A, L:`y`
   \   0000D2 AE4006                LDW       X, #0x4006
   \   0000D5 8D000000              CALLF     ?Subroutine6
   1767                     FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   \                     ??CrossCallReturnLabel_18:
   \   0000D9 C60000                LD        A, L:m
   \   0000DC AE4007                LDW       X, #0x4007
   \   0000DF 8D000000              CALLF     ?Subroutine6
   1768                     FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   \                     ??CrossCallReturnLabel_19:
   \   0000E3 C60000                LD        A, L:d
   \   0000E6 AE4008                LDW       X, #0x4008
   \   0000E9 8D000000              CALLF     ?Subroutine4
   1769                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1770                     break;
   \                     ??CrossCallReturnLabel_4:
   \   0000ED CC0000                JP        L:??Menu_3
   1771                    }
   1772                  case 3: goto Second_Menu ;
   1773                   break;
   1774                  }
   1775               break; //Exit Menu
   1776          
   1777          
   1778          Fourth_Menu:
   1779              line_lcd=0;
   \                     ??Menu_6:
   \   0000F0 725F0000              CLR       L:line_lcd
   1780              printf("\nClock   ");
   \   0000F4 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000F7 8D000000              CALLF     ?Subroutine27
   1781              line_lcd=1;
   1782              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_227:
   \   0000FB 89                    PUSHW     X
   \   0000FC C60000                LD        A, L:minutes
   \   0000FF 97                    LD        XL, A
   \   000100 89                    PUSHW     X
   \   000101 C60000                LD        A, L:hours
   \   000104 97                    LD        XL, A
   \   000105 89                    PUSHW     X
   \   000106 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000109 8D000000              CALLF     printf
   \   00010D 5B06                  ADD       SP, #0x6
   1783                switch (pressKey())
   \   00010F 8D000000              CALLF     pressKey
   \   000113 4A                    DEC       A
   \   000114 2711                  JREQ      L:??Menu_8
   \   000116 4A                    DEC       A
   \   000117 2708                  JREQ      L:??Menu_9
   \   000119 4A                    DEC       A
   \   00011A 2603                  JRNE      ??lb_1
   \   00011C CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   00011F 2062                  JRA       L:??Menu_3
   1784                  {
   1785                  case 1: goto Fifth_Menu ;
   1786                   break;
   1787                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000121 8D000000              CALLF     Set_Clock
   1788                   break;
   \   000125 205C                  JRA       L:??Menu_3
   1789                  case 3: goto Third_Menu;
   1790                   break;
   1791                  }
   1792               break; //Exit Menu
   1793          
   1794          
   1795          Fifth_Menu:
   1796              line_lcd=0;
   \                     ??Menu_8:
   \   000127 725F0000              CLR       L:line_lcd
   1797              printf("\nDate    ");
   \   00012B AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   00012E 8D000000              CALLF     printf
   1798              line_lcd=1;
   \   000132 8D000000              CALLF     ?Subroutine28
   1799              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_66:
   \   000136 89                    PUSHW     X
   \   000137 C60000                LD        A, L:month
   \   00013A 97                    LD        XL, A
   \   00013B 89                    PUSHW     X
   \   00013C C60000                LD        A, L:year
   \   00013F 97                    LD        XL, A
   \   000140 89                    PUSHW     X
   \   000141 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000144 8D000000              CALLF     printf
   \   000148 5B06                  ADD       SP, #0x6
   1800                switch (pressKey())
   \   00014A 8D000000              CALLF     pressKey
   \   00014E 4A                    DEC       A
   \   00014F 270E                  JREQ      L:??Menu_2
   \   000151 4A                    DEC       A
   \   000152 2705                  JREQ      L:??Menu_10
   \   000154 4A                    DEC       A
   \   000155 2799                  JREQ      L:??Menu_6
   \   000157 202A                  JRA       L:??Menu_3
   1801                  {
   1802                  case 1: goto Exit_Menu ;
   1803                   break;
   1804                  case 2: setData();
   \                     ??Menu_10:
   \   000159 8D000000              CALLF     setData
   1805                   break;
   \   00015D 2024                  JRA       L:??Menu_3
   1806                  case 3: goto Fourth_Menu;
   1807                   break;
   1808                  }
   1809               break; //Exit Menu
   1810          
   1811          
   1812          Exit_Menu:
   1813              line_lcd=0;
   \                     ??Menu_2:
   \   00015F 725F0000              CLR       L:line_lcd
   1814              printf("\nExit OK ");
   \   000163 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000166 8D000000              CALLF     printf
   1815              line_lcd=1;
   \   00016A 35010000              MOV       L:line_lcd, #0x1
   1816              printf("\n+/-     ");
   \   00016E AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   000171 8D000000              CALLF     printf
   1817                 switch (pressKey())
   \   000175 8D000000              CALLF     pressKey
   \   000179 4A                    DEC       A
   \   00017A 2603                  JRNE      ??lb_2
   \   00017C CC0000                JP        L:??CrossCallReturnLabel_59
   \                     ??lb_2:
   \   00017F A002                  SUB       A, #0x2
   \   000181 27A4                  JREQ      L:??Menu_8
   1818                  {
   1819                  case 1: goto First_Menu;
   1820                   break;
   1821                  case 2:
   1822                   break;
   1823                  case 3: goto Fifth_Menu;
   1824                   break;
   1825                  }
   1826                 break; //Exit Menu
   1827              }    while (1);
   1828              //exit:
   1829             Clear_Line1();
   \                     ??Menu_3:
   \   000183 8D000000              CALLF     Clear_Line1
   1830             Clear_Line2();
   \   000187 AC000000              JPF       Clear_Line2
   1831          
   1832          }
   1833          
   1834          

   \                                 In section .far_func.text, align 1, keep-with-next
   1835          u8 pressKey(void)
   1836          {
   \                     pressKey:
   \   000000 3B0000                PUSH      S:?b8
   1837             u8 pressKey =0;
   \   000003 3F00                  CLR       S:?b8
   1838             timer3=0;
   \   000005 5F                    CLRW      X
   \   000006 CF0000                LDW       L:timer3, X
   1839             hardware.lcdLed=1;
   \   000009 8D000000              CALLF     ?Subroutine40
   1840             lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_100:
   \   00000D 350A0000              MOV       L:lcdLedTimer, #0xa
   1841          
   1842             do {
   1843                if (key_ok_on())
   \                     ??pressKey_0:
   \   000011 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_126:
   \   000015 2706                  JREQ      L:??pressKey_1
   1844                {
   1845                  pressKey=1;
   \   000017 35010000              MOV       S:?b8, #0x1
   \   00001B 201A                  JRA       L:??pressKey_2
   1846                  //beep(5000);
   1847                }
   1848                   else if (key_plus_on())pressKey=2;
   \                     ??pressKey_1:
   \   00001D 8D000000              CALLF     key_plus_on
   \   000021 A100                  CP        A, #0x0
   \   000023 2706                  JREQ      L:??pressKey_3
   \   000025 35020000              MOV       S:?b8, #0x2
   \   000029 200C                  JRA       L:??pressKey_2
   1849                  else if (key_minus_on())pressKey=3;
   \                     ??pressKey_3:
   \   00002B 8D000000              CALLF     key_minus_on
   \   00002F A100                  CP        A, #0x0
   \   000031 2704                  JREQ      L:??pressKey_2
   \   000033 35030000              MOV       S:?b8, #0x3
   1850             } while ( (timer3<=time_menu) && !pressKey);    //(timer3<=time_menu) &&
   \                     ??pressKey_2:
   \   000037 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_139:
   \   00003B 2404                  JRNC      L:??pressKey_4
   \   00003D 3D00                  TNZ       S:?b8
   \   00003F 27D0                  JREQ      L:??pressKey_0
   1851          
   1852              if (pressKey==0) beep(10000);
   \                     ??pressKey_4:
   \   000041 3D00                  TNZ       S:?b8
   \   000043 2607                  JRNE      L:??pressKey_5
   \   000045 AE2710                LDW       X, #0x2710
   \   000048 8D000000              CALLF     beep
   1853          
   1854             return pressKey;
   \                     ??pressKey_5:
   \   00004C B600                  LD        A, S:?b8
   \   00004E 320000                POP       S:?b8
   \   000051 87                    RETF
   1855          }
   1856          
   1857          
   1858          
   1859          

   \                                 In section .far_func.text, align 1, keep-with-next
   1860          bool setData(void)
   1861          {
   \                     setData:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1862             u8 leap=0 ,date_end,month_start,date_start;
   \   000007 3F00                  CLR       S:?b8
   1863             int yy;
   1864          
   1865                   //Clear Display
   1866             LCDInstr(0x01);
   \   000009 8D000000              CALLF     ?Subroutine19
   1867             Delay1(1000);
   1868             line_lcd=0;
   1869             printf("\nYear>");
   1870             y=year;
   \                     ??CrossCallReturnLabel_46:
   \   00000D C60000                LD        A, L:year
   \   000010 C70000                LD        L:`y`, A
   1871             m=month;
   \   000013 C60000                LD        A, L:month
   \   000016 C70000                LD        L:m, A
   1872             d=date;
   \   000019 C60000                LD        A, L:`date`
   \   00001C C70000                LD        L:d, A
   1873                do
   1874              {
   1875               line_lcd=1;
   \                     ??setData_0:
   \   00001F 8D000000              CALLF     ?Subroutine29
   1876               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_67:
   \   000023 89                    PUSHW     X
   \   000024 C60000                LD        A, L:m
   \   000027 97                    LD        XL, A
   \   000028 89                    PUSHW     X
   \   000029 C60000                LD        A, L:`y`
   \   00002C 97                    LD        XL, A
   \   00002D 89                    PUSHW     X
   \   00002E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000031 8D000000              CALLF     printf
   \   000035 5B06                  ADD       SP, #0x6
   1877                 y=adj(0,99,y);
   \   000037 C60000                LD        A, L:`y`
   \   00003A B700                  LD        S:?b1, A
   \   00003C 35630000              MOV       S:?b0, #0x63
   \   000040 8D000000              CALLF     ??Subroutine76_0
   1878              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_214:
   \   000044 C70000                LD        L:`y`, A
   \   000047 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_123:
   \   00004B 27D2                  JREQ      L:??setData_0
   1879                  yy=y+2000;
   \   00004D C60000                LD        A, L:`y`
   \   000050 5F                    CLRW      X
   \   000051 97                    LD        XL, A
   \   000052 1C07D0                ADDW      X, #0x7d0
   \   000055 BF00                  LDW       S:?w0, X
   1880              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   000057 90AE0190              LDW       Y, #0x190
   \   00005B 8D000000              CALLF     L:?smod16_y_x_y
   \   00005F 905D                  TNZW      Y
   \   000061 271C                  JREQ      L:??setData_1
   \   000063 90AE0064              LDW       Y, #0x64
   \   000067 BE00                  LDW       X, S:?w0
   \   000069 8D000000              CALLF     L:?smod16_y_x_y
   \   00006D 905D                  TNZW      Y
   \   00006F 2712                  JREQ      L:??setData_2
   \   000071 90AE0004              LDW       Y, #0x4
   \   000075 BE00                  LDW       X, S:?w0
   \   000077 8D000000              CALLF     L:?smod16_y_x_y
   \   00007B 905D                  TNZW      Y
   \   00007D 2604                  JRNE      L:??setData_2
   \                     ??setData_1:
   \   00007F 35010000              MOV       S:?b8, #0x1
   1881                  y=yy-2000;
   \                     ??setData_2:
   \   000083 B600                  LD        A, S:?b1
   \   000085 AB30                  ADD       A, #0x30
   \   000087 C70000                LD        L:`y`, A
   1882                   if(y==year) month_start=month;
   \   00008A C60000                LD        A, L:year
   \   00008D C10000                CP        A, L:`y`
   \   000090 2605                  JRNE      L:??setData_3
   \   000092 C60000                LD        A, L:month
   \   000095 B700                  LD        S:?b9, A
   1883               line_lcd=0;
   \                     ??setData_3:
   \   000097 8D000000              CALLF     ?Subroutine46
   1884              printf("\nMonth>");
   1885                do
   1886              {
   1887               line_lcd=1;
   \                     ??CrossCallReturnLabel_122:
   \   00009B 8D000000              CALLF     ?Subroutine29
   1888               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_68:
   \   00009F 89                    PUSHW     X
   \   0000A0 C60000                LD        A, L:m
   \   0000A3 97                    LD        XL, A
   \   0000A4 89                    PUSHW     X
   \   0000A5 C60000                LD        A, L:`y`
   \   0000A8 97                    LD        XL, A
   \   0000A9 89                    PUSHW     X
   \   0000AA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000AD 8D000000              CALLF     printf
   \   0000B1 5B06                  ADD       SP, #0x6
   1889                m=adj(month_start,12,m);
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 B700                  LD        S:?b1, A
   \   0000B8 350C0000              MOV       S:?b0, #0xc
   \   0000BC B600                  LD        A, S:?b9
   \   0000BE 8D000000              CALLF     adj
   \   0000C2 C70000                LD        L:m, A
   1890              } while (!key_ok_on());
   \   0000C5 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_124:
   \   0000C9 27D0                  JREQ      L:??CrossCallReturnLabel_122
   1891          
   1892              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000CB C60000                LD        A, L:m
   \   0000CE A101                  CP        A, #0x1
   \   0000D0 2718                  JREQ      L:??setData_4
   \   0000D2 A103                  CP        A, #0x3
   \   0000D4 2714                  JREQ      L:??setData_4
   \   0000D6 A105                  CP        A, #0x5
   \   0000D8 2710                  JREQ      L:??setData_4
   \   0000DA A107                  CP        A, #0x7
   \   0000DC 270C                  JREQ      L:??setData_4
   \   0000DE A108                  CP        A, #0x8
   \   0000E0 2708                  JREQ      L:??setData_4
   \   0000E2 A10A                  CP        A, #0xa
   \   0000E4 2704                  JREQ      L:??setData_4
   \   0000E6 A10C                  CP        A, #0xc
   \   0000E8 2606                  JRNE      L:??setData_5
   \                     ??setData_4:
   \   0000EA 351F0000              MOV       S:?b8, #0x1f
   \   0000EE 2024                  JRA       L:??setData_6
   1893               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??setData_5:
   \   0000F0 A104                  CP        A, #0x4
   \   0000F2 270C                  JREQ      L:??setData_7
   \   0000F4 A106                  CP        A, #0x6
   \   0000F6 2708                  JREQ      L:??setData_7
   \   0000F8 A109                  CP        A, #0x9
   \   0000FA 2704                  JREQ      L:??setData_7
   \   0000FC A10B                  CP        A, #0xb
   \   0000FE 2606                  JRNE      L:??setData_8
   \                     ??setData_7:
   \   000100 351E0000              MOV       S:?b8, #0x1e
   \   000104 200E                  JRA       L:??setData_6
   1894                else
   1895                 {
   1896                   if(leap) date_end=29;
   \                     ??setData_8:
   \   000106 3D00                  TNZ       S:?b8
   \   000108 2706                  JREQ      L:??setData_9
   \   00010A 351D0000              MOV       S:?b8, #0x1d
   \   00010E 2004                  JRA       L:??setData_6
   1897                    else date_end=28;
   \                     ??setData_9:
   \   000110 351C0000              MOV       S:?b8, #0x1c
   1898                 }
   1899               if(y==year) date_start=d;
   \                     ??setData_6:
   \   000114 C60000                LD        A, L:year
   \   000117 C10000                CP        A, L:`y`
   \   00011A 2605                  JRNE      L:??setData_10
   \   00011C C60000                LD        A, L:d
   \   00011F B700                  LD        S:?b10, A
   1900              LCDInstr(0x01);
   \                     ??setData_10:
   \   000121 8D000000              CALLF     ?Subroutine20
   1901               Delay1(1000);
   1902                line_lcd=0;
   1903              printf("\nDate>");
   1904                do
   1905              {
   1906               line_lcd=1;
   \                     ??CrossCallReturnLabel_48:
   \   000125 8D000000              CALLF     ?Subroutine29
   1907               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_69:
   \   000129 89                    PUSHW     X
   \   00012A C60000                LD        A, L:m
   \   00012D 97                    LD        XL, A
   \   00012E 89                    PUSHW     X
   \   00012F C60000                LD        A, L:`y`
   \   000132 97                    LD        XL, A
   \   000133 89                    PUSHW     X
   \   000134 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000137 8D000000              CALLF     printf
   \   00013B 5B06                  ADD       SP, #0x6
   1908                 d=adj(date_start,date_end,d);
   \   00013D C60000                LD        A, L:d
   \   000140 B700                  LD        S:?b1, A
   \   000142 450000                MOV       S:?b0, S:?b8
   \   000145 B600                  LD        A, S:?b10
   \   000147 8D000000              CALLF     adj
   \   00014B C70000                LD        L:d, A
   1909              } while (!key_ok_on());
   \   00014E 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_125:
   \   000152 27D1                  JREQ      L:??CrossCallReturnLabel_48
   1910          
   1911            return TRUE;
   \   000154 A601                  LD        A, #0x1
   \   000156 320000                POP       S:?b10
   \   000159 AC000000              JPF       L:?epilogue_w4
   1912          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   1913          
   1914          

   \                                 In section .far_func.text, align 1, keep-with-next
   1915          void initBeep(void)
   1916          {
   1917            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   1918            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   1919             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   1920               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   1921             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   1922          
   1923          }
   1924          

   \                                 In section .far_func.text, align 1, keep-with-next
   1925          void beep(u16 Interval)
   1926          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1927          
   1928           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   1929               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   1930            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   1931          
   1932          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   1933          

   \                                 In section .far_func.text, align 1, keep-with-next
   1934           PUTCHAR_PROTOTYPE
   1935          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1936            /* Place your implementation of fputc here */
   1937            /* e.g. write a character to the USART */
   1938                //USART_SendData(USART3, (u8) ch);
   1939               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1940             /* Loop until the end of transmission */
   1941              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1942            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1943          }
   1944          
   1945           #ifdef USE_FULL_ASSERT
   1946          
   1947          /**
   1948            * @brief  Reports the name of the source file and the source line number
   1949            *   where the assert_param error has occurred.
   1950            * @param file: pointer to the source file name
   1951            * @param line: assert_param error line source number
   1952            * @retval : None
   1953            */

   \                                 In section .far_func.text, align 1
   1954          void assert_failed(u8* file, u32 line)
   1955          {
   1956            /* User can add his own implementation to report the file name and line number,
   1957               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1958          
   1959            /* Infinite loop */
   1960            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1961            {
   1962          
   1963            }
   1964          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On>">`:
   \   000000 0A48204F6E3E          DC8 "\012H On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On>">`:
   \   000000 0A4D696E204F          DC8 "\012Min On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   1965          #endif
   1966          
   1967          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     daily_dispaly                     1
     month_display                     1
     sync_display                      1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     line1                             8
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     hardware                          2
     ?Subroutine47                     7
     ??Subroutine80_0                  7
     ?Subroutine40                     5
     ?Subroutine70                    11
     main                            365
     ?Subroutine44                    11
     ?Subroutine43                    11
     ?Subroutine15                     9
     ?Subroutine5                      9
     ?Subroutine3                     20
     ?Subroutine72                     2
     ??Subroutine83_0                  8
     ?Subroutine2                     15
     ?Subroutine73                    12
     ?Subroutine27                     4
     ??Subroutine78_0                 10
     Display                         205
     Power_On                         14
     ?Subroutine39                    11
     ?Subroutine69                    19
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine50                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine53                     1
     ??Subroutine82_0                  7
     ?Subroutine49                     9
     ReadDS1307                      119
     ?Subroutine51                    11
     ?Subroutine36                    11
     ?Subroutine33                    13
     ?Subroutine32                     8
     ?Subroutine68                    10
     Check_DS1307                     78
     Set_DS1307                      108
     ?Subroutine52                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       374
     ?Subroutine46                    11
     ?Subroutine20                    11
     ?Subroutine19                    11
     ?Subroutine35                     6
     ??Subroutine76_0                  5
     ?Subroutine21                     5
     ?Subroutine66                    16
     ?Subroutine74                     6
     ?Subroutine28                    10
     adj                              85
     key_ok_on                        49
     ?Subroutine38                    18
     ?Subroutine34                    10
     key_plus_on                      47
     ?Subroutine42                     7
     ?Subroutine37                     7
     key_minus_on                     47
     key_ok_plus                      48
     ?Subroutine17                    29
     ?Subroutine48                     7
     Set_Timer_On                    167
     ?Subroutine45                     9
     ?Subroutine6                      5
     ?Subroutine4                     10
     ?Subroutine1                      4
     ??Subroutine77_0                 29
     ?Subroutine62                     9
     ?Subroutine31                    10
     Set_Timer_Off                   172
     ?Subroutine30                    10
     Save_Status                      10
     Read_Allarm                     106
     EEPROM_INIT                      15
     GpioConfiguration               112
     ?Subroutine60                     9
     ?Subroutine59                     9
     ?Subroutine55                    14
     InitClk                          62
     ?Subroutine61                     9
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine81_0                  5
     ?Subroutine64                     7
     ?Subroutine14                     2
     InitLcd                          85
     ?Subroutine24                    11
     ?Subroutine18                    17
     ?Subroutine13                    11
     ?Subroutine0                     13
     ??Subroutine75_0                 10
     ?Subroutine26                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine8                     24
     ?Subroutine63                     6
     LCD_Busy                         69
     LCD                             203
     ?Subroutine67                     9
     ?Subroutine11                     4
     ??Subroutine79_0                  5
     ?Subroutine22                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine23                     2
     ?Subroutine16                    10
     ?Subroutine65                     9
     DS18_Read                        74
     ?Subroutine25                    12
     DS18_Reset                       72
     ?Subroutine41                     7
     ?Subroutine54                     7
     temperature                      63
     ?Subroutine57                    15
     ?Subroutine71                     6
     ?Subroutine56                    23
     ?Subroutine7                     21
     Read_DS18                       121
     ?Subroutine58                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine10                    13
     ?Subroutine9                     16
     Clear_Line2                      19
     Menu                            395
     pressKey                         82
     setData                         349
     ?Subroutine29                    10
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH On>">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On>">           9
     ?<Constant "\nH Off>">            8
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 5 373 bytes in section .far_func.text
    67 bytes in section .near.bss
     3 bytes in section .near.data
   256 bytes in section .near.rodata
 
 5 373 bytes of CODE  memory
   256 bytes of CONST memory
    70 bytes of DATA  memory

Errors: none
Warnings: none
