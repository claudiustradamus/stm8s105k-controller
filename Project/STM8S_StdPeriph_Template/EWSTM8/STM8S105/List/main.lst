###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             08/Dec/2013  17:16:03 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include  "time.h"
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          
     81          
     82          
     83          
     84          #ifdef __GNUC__
     85            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     86               set to 'Yes') calls __io_putchar() */
     87            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     88          #else
     89            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     90          #endif /* __GNUC__ */
     91          
     92          
     93          
     94          
     95          #define SpecialSymbol 0x1b //Esc to start message
     96          //#define data_size 20
     97          #define key_time 8000
     98          #define KEY_TIME_ON 8000
     99          #define KEY_TIME_HOLD 65000
    100          #define key_time_press 4000
    101          #define key_time_release 400
    102          #define DS_Control  0x10  // Out 1s
    103          #define time_menu 10  // 5s
    104          #define TIMEOUT_DS18B20 8000
    105          #define LCDLEDON 20
    106          //#define sync_time 30 // 30s
    107          #define power_jitter 3 //3s
    108          
    109          
    110          
    111          
    112          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    113          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    114          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    115          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    116          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    118          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    119          //char data[data_size];
    120          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    121          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    126          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    127          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    128          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    129          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    141          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    142          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    143          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    144          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    150          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    152          char  manu_display,sync_display,program_display,program_number;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_number:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    153          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    154          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    155          u8 button;
   \                     button:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    156          u8 power;
   \                     power:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    157          bool blink_flag;
   \                     blink_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    158          u16 blink_time;
   \                     blink_time:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    159          bool key_ok_hold;
   \                     key_ok_hold:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    160          bool rotate_line2=FALSE;
   \                     rotate_line2:
   \   000000                       DS8 1
    161          

   \                                 In section .near.bss, align 1
    162          struct tm ptim;
   \                     ptim:
   \   000000                       DS8 22
    163          //bool  ds_temperature;
    164          
    165          
    166          

   \                                 In section .near.bss, align 1
    167          char line1[10];
   \                     line1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    168          char line2[10];
   \                     line2:
   \   000000                       DS8 10
    169          //char string1[10];
    170          //char string2[10];

   \                                 In section .near.bss, align 1
    171          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    172          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    173          
    174          //u8 index=0;

   \                                 In section .near.bss, align 1
    175          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    176          int volatile k=0;
   \                     k:
   \   000000                       DS8 2

   \                                 In section .near.data, align 1
    177          char *day_week[11] = {" Off"," Sun"," Mon"," Tues"," Wednes"," Thurs"," Fri"," Satur"," Daily"," Month"};
   \                     day_week:
   \   000000 000000000000          DC16 `?<Constant " Off">`, `?<Constant " Sun">`, `?<Constant " Mon">`
   \   000006 00000000              DC16 `?<Constant " Tues">`, `?<Constant " Wednes">`
   \   00000A 00000000              DC16 `?<Constant " Thurs">`, `?<Constant " Fri">`
   \   00000E 00000000              DC16 `?<Constant " Satur">`, `?<Constant " Daily">`
   \   000012 0000                  DC16 `?<Constant " Month">`
   \   000014 0000                  DC8 0, 0

   \                                 In section .near.data, align 1
    178          char *setup_menu[5] ={"\nPrgClear","\nSetClock","\nSetDate","\nSh Date","\nExit"};
   \                     setup_menu:
   \   000000 00000000              DC16 `?<Constant "\\nPrgClear">`, `?<Constant "\\nSetClock">`
   \   000004 00000000              DC16 `?<Constant "\\nSetDate">`, `?<Constant "\\nSh Date">`
   \   000008 0000                  DC16 `?<Constant "\\nExit">`
    179          //char *test[3] ={"18777","2","3"};
    180          
    181           struct   status_reg
    182           {
    183             unsigned manu:1;
    184             unsigned on:1;
    185             unsigned timer_on:1;
    186             unsigned daily:1;
    187             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    188           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    189          
    190          
    191           struct
    192           {
    193             unsigned ds1307:1;
    194             unsigned ds18B20:1;
    195             unsigned buzzer:1;
    196             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    197           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    198          
    199          
    200          
    201           typedef  struct
    202            {
    203              u8 day;
    204              u8 onhour ;
    205              u8 onminute ;
    206              u8 offhour;
    207              u8 offminute;
    208          
    209            }  program ;
    210          
    211                   // = new proram[8];

   \                                 In section .near.bss, align 1
    212             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 40
    213            /*
    214             =
    215           {
    216             {0x00,0x00,0x00,0x00,0x00},
    217             {0x00,0x00,0x00,0x00,0x00},
    218             {0x00,0x00,0x00,0x00,0x00},
    219             {0x00,0x00,0x00,0x00,0x00},
    220             {0x00,0x00,0x00,0x00,0x00},
    221             {0x00,0x00,0x00,0x00,0x00},
    222             {0x00,0x00,0x00,0x00,0x00},
    223             {0x00,0x00,0x00,0x00,0x00},
    224           };
    225              */
    226          
    227          //time_t  ltime;
    228          //struct tm ptim;
    229          
    230          
    231          
    232          
    233          
    234          /* Private function prototypes -----------------------------------------------*/
    235          void InitHardware();
    236          void GpioConfiguration();
    237          void InitClk();
    238          void InitAdc();
    239          void InitI2C();
    240          void EEPROM_INIT();
    241          bool ReadDS1307();
    242          //void InitUart();
    243          void InitLcd();
    244          void InitDelayTimer2();
    245          void InitDelayTimer3();
    246          void Delay1( u16 Delay);
    247          void Delay2( u16 Delay);
    248          void Delay_us(u16 Delay);
    249          void LCDInstrNibble (u8 Instr);
    250          void LCDInstr(u8 Instr);
    251          void LCDDataOut(u8 data);
    252          void LCD_Busy();
    253          void PulseEnable();
    254          //void SendData();
    255          void SendChar(u8 Char);
    256          //void Send_Hello();
    257          bool SetClock();
    258          bool SetData();
    259          bool InputDataProgram(bool smart);
    260          //bool key_ok_hold();
    261          bool key_ok_on();
    262          bool key_plus_on();
    263          bool key_minus_on();
    264          bool key_ok_plus();
    265          bool Init_DS1307(void);
    266          bool Check_DS1307(void);
    267          bool I2C_Start(void);
    268          bool I2C_WA(u8 address);
    269          bool I2C_WD(u8 data);
    270          bool I2C_RA(u8 address);
    271          bool Set_DS1307();
    272          //bool Set_Delay_Allarm();
    273          //bool Set_Timer_On();
    274          //bool Set_Timer_Off();
    275          //bool Read_Allarm();
    276          bool Read_DS18();
    277          bool DS18_Write( u8 data);
    278          bool DS18_Reset();
    279          bool DS18Set();
    280          u8 temperature();
    281          u8 DS18_Read();
    282          u8 convert_tobcd(u8 data);
    283          u8 I2C_RD(void);
    284          u8 adj(u8 min,u8 max,u8 now);
    285          u8 bcd2hex(u8 bcd);
    286          void Power_On(void);
    287          void Power_Off();
    288          void SaveStatus();
    289          void Rotate_Line( char * line);
    290          void Display_Line(char * line);
    291          void DisplayLine2(void);
    292          void ClearLine1(void);
    293          void ClearLine2(void);
    294          void Menu(void);
    295          void pressKey(void);
    296          void Display(void);
    297          void initBeep(void);
    298          void beep(u16 Interval);
    299          void FirstMenu();
    300          void ProgramMenu();
    301          void SaveProgram();
    302          void ReadProgram();
    303          void ResetProgram();
    304          void CheckProgramPoint();
    305          void SetupMenu();
    306          void SelectMenu(u8 si);
    307          
    308          
    309          
    310          
    311          u16  Average();
    312          
    313          
    314          /* Private functions ---------------------------------------------------------*/
    315          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_185:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_206:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    316          void main(void)
    317          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    318              /*High speed internal clock prescaler: 1*/
    319              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    320              InitClk();
   \   000003 8D000000              CALLF     InitClk
    321              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    322              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    323              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    324              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine12
    325              GPIO_WriteHigh(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_20:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteHigh
    326              hardware.lcdLed=1;
   \   000020 8D000000              CALLF     ?Subroutine32
    327              lcdLedTimer=LCDLEDON;
    328              //InitUart();
    329               enableInterrupts();
   \                     ??CrossCallReturnLabel_76:
   \   000024 9A                    RIM
    330               initBeep();
   \   000025 8D000000              CALLF     initBeep
    331              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    332               InitLcd();
   \   000029 8D000000              CALLF     InitLcd
    333              //InitAdc();
    334               InitI2C();
   \   00002D 8D000000              CALLF     InitI2C
    335              // Enable Timer3
    336              TIM3_Cmd(ENABLE);
   \   000031 A601                  LD        A, #0x1
   \   000033 8D000000              CALLF     TIM3_Cmd
    337              //year=bcd2hex(13);
    338              //Delay1(10000);
    339               if (!ReadDS1307())
   \   000037 8D000000              CALLF     ReadDS1307
   \   00003B A100                  CP        A, #0x0
   \   00003D 261D                  JRNE      L:??main_0
    340               {
    341                 printf("\n E2:%d",error);
   \   00003F C60000                LD        A, L:error
   \   000042 5F                    CLRW      X
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B02                  ADD       SP, #0x2
    342                 // Reset the CPU: Enable the watchdog and wait until it expires
    343                  hardware.ds1307=0;
   \   00004E CE0000                LDW       X, L:hardware
   \   000051 01                    RRWA      X, A
   \   000052 A4FE                  AND       A, #0xfe
   \   000054 02                    RLWA      X, A
   \   000055 CF0000                LDW       L:hardware, X
    344                   pressKey();
   \   000058 8D000000              CALLF     pressKey
    345                //IWDG->KR = IWDG_KEY_ENABLE;
    346                // while ( 1 );    // Wait until reset occurs from IWDG
    347               }
    348          
    349          
    350                  // lcdLedTimer=LCDLEDON;
    351                  //GPIO_WriteHigh(GPIOB,lcdLed);
    352          
    353              if (!Check_DS1307())
   \                     ??main_0:
   \   00005C 8D000000              CALLF     Check_DS1307
   \   000060 A100                  CP        A, #0x0
   \   000062 2624                  JRNE      L:??main_1
    354              {
    355                 if (error!=0)
   \   000064 C60000                LD        A, L:error
   \   000067 2710                  JREQ      L:??main_2
    356                 {
    357                  printf("\n E:%d",error);
   \   000069 5F                    CLRW      X
   \   00006A 97                    LD        XL, A
   \   00006B 89                    PUSHW     X
   \   00006C AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00006F 8D000000              CALLF     printf
   \   000073 5B02                  ADD       SP, #0x2
    358                   pressKey();
   \   000075 8D000000              CALLF     pressKey
    359          
    360                 }
    361               line_lcd=0;
   \                     ??main_2:
   \   000079 725F0000              CLR       L:line_lcd
    362               printf("\nSetClock");
   \   00007D AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000080 8D000000              CALLF     printf
    363                SetClock();
   \   000084 8D000000              CALLF     SetClock
    364                 // reset program point
    365          
    366              }
    367          
    368          
    369                 //Read Status register from eepom and update it
    370                //size=sizeof(status);
    371               //u16 status
    372              *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000088 AE4000                LDW       X, #0x4000
   \   00008B 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_135:
   \   00008F B700                  LD        S:?b8, A
   \   000091 AE4001                LDW       X, #0x4001
   \   000094 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_134:
   \   000098 905F                  CLRW      Y
   \   00009A 9097                  LD        YL, A
   \   00009C 5F                    CLRW      X
   \   00009D 41                    EXG       A, XL
   \   00009E B600                  LD        A, S:?b8
   \   0000A0 41                    EXG       A, XL
   \   0000A1 4F                    CLR       A
   \   0000A2 02                    RLWA      X, A
   \   0000A3 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_203:
   \   0000A7 CF0000                LDW       L:status, X
    373              status_check = *(u16*)(&status);
   \   0000AA CE0000                LDW       X, L:status
   \   0000AD CF0000                LDW       L:status_check, X
    374              ReadProgram ();
   \   0000B0 8D000000              CALLF     ReadProgram
    375          
    376              DS18Set();
   \   0000B4 8D000000              CALLF     DS18Set
    377              line_lcd=0;
   \   0000B8 725F0000              CLR       L:line_lcd
    378              if (!Read_DS18())
   \   0000BC 8D000000              CALLF     Read_DS18
   \   0000C0 A100                  CP        A, #0x0
   \   0000C2 2611                  JRNE      L:??main_3
    379              {
    380               printf("\nDS_Err_T");
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000C7 8D000000              CALLF     printf
    381                 hardware.ds18B20=0;
   \   0000CB 8D000000              CALLF     ?Subroutine33
    382                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_78:
   \   0000CF 8D000000              CALLF     pressKey
   \   0000D3 2004                  JRA       L:??CrossCallReturnLabel_80
    383              }
    384               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000D5 8D000000              CALLF     ?Subroutine34
    385          
    386              //daily_dispaly=' ';
    387              //month_display=' ';
    388              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_80:
   \   0000D9 35010000              MOV       L:sync_time_ds1307, #0x1
    389          
    390                    //Same delay if  power jitter
    391              if (status.on)
   \   0000DD 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_132:
   \   0000E1 2717                  JREQ      L:??main_4
    392              {
    393               line_lcd=0;
   \   0000E3 725F0000              CLR       L:line_lcd
    394               printf("\nWait 3s.");
   \   0000E7 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   0000EA 8D000000              CALLF     printf
    395               timer3=0;
   \   0000EE 5F                    CLRW      X
   \   0000EF CF0000                LDW       L:timer3, X
    396               while (timer3<=power_jitter);
   \                     ??main_5:
   \   0000F2 CE0000                LDW       X, L:timer3
   \   0000F5 A30004                CPW       X, #0x4
   \   0000F8 25F8                  JRC       L:??main_5
    397              }
    398          
    399          
    400               /* Main Loop*/
    401          
    402              while(1)
    403              {
    404          
    405          
    406                if(key_ok_on())
   \                     ??main_4:
   \   0000FA 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_102:
   \   0000FE 270F                  JREQ      L:??main_6
    407                {
    408                   if( key_ok_hold) SetupMenu();
   \   000100 C60000                LD        A, L:key_ok_hold
   \   000103 2706                  JREQ      L:??main_7
   \   000105 8D000000              CALLF     SetupMenu
   \   000109 2004                  JRA       L:??main_6
    409                    else FirstMenu();
   \                     ??main_7:
   \   00010B 8D000000              CALLF     FirstMenu
    410                }
    411                if(key_plus_on()) Power_On();
   \                     ??main_6:
   \   00010F 8D000000              CALLF     key_plus_on
   \   000113 A100                  CP        A, #0x0
   \   000115 2704                  JREQ      L:??main_8
   \   000117 8D000000              CALLF     Power_On
    412                if(key_minus_on())Power_Off();
   \                     ??main_8:
   \   00011B 8D000000              CALLF     key_minus_on
   \   00011F A100                  CP        A, #0x0
   \   000121 2704                  JREQ      L:??main_9
   \   000123 8D000000              CALLF     Power_Off
    413                if(Time_Display) Display();  //
   \                     ??main_9:
   \   000127 C60000                LD        A, L:Time_Display
   \   00012A 2704                  JREQ      L:??main_10
   \   00012C 8D000000              CALLF     Display
    414          
    415                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_10:
   \   000130 C60000                LD        A, L:sync_time_ds1307
   \   000133 2725                  JREQ      L:??main_11
    416                   {
    417                    if (!ReadDS1307())
   \   000135 8D000000              CALLF     ReadDS1307
   \   000139 A100                  CP        A, #0x0
   \   00013B 2619                  JRNE      L:??main_12
    418                        {
    419                          GPIO_WriteLow(GPIOD, power_pin );
   \   00013D 8D000000              CALLF     ?Subroutine12
    420                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_19:
   \   000141 C60000                LD        A, L:error
   \   000144 5F                    CLRW      X
   \   000145 97                    LD        XL, A
   \   000146 89                    PUSHW     X
   \   000147 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00014A 8D000000              CALLF     printf
   \   00014E 5B02                  ADD       SP, #0x2
    421                       //restart i2c
    422                       // Reset the CPU: Enable the watchdog and wait until it expires
    423                       IWDG->KR = IWDG_KEY_ENABLE;
   \   000150 35CC50E0              MOV       L:0x50e0, #0xcc
    424                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_13:
   \   000154 20FE                  JRA       L:??main_13
    425                        }
    426                   sync_time_ds1307=FALSE;
   \                     ??main_12:
   \   000156 725F0000              CLR       L:sync_time_ds1307
    427                   //sync_display='S';
    428                   }
    429          
    430                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_11:
   \   00015A 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_133:
   \   00015E 2708                  JREQ      L:??main_14
   \   000160 A608                  LD        A, #0x8
   \   000162 8D000000              CALLF     ??Subroutine80_0
   \                     ??CrossCallReturnLabel_225:
   \   000166 2092                  JRA       L:??main_4
    431                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_14:
   \   000168 8D000000              CALLF     ?Subroutine12
    432          
    433          
    434          
    435              }
   \                     ??CrossCallReturnLabel_18:
   \   00016C 208C                  JRA       L:??main_4
    436          
    437          
    438          
    439          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine50:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine49:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A502                  BCP       A, #0x2
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine34:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine33:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine12:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
    440          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A501                  BCP       A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    441          void Display(void)
    442          {
    443             //ClearLine1 ();
    444              char power_display;
    445              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    446               result2=0;
   \   000007 725F0000              CLR       L:result2
    447                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    448                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    449          
    450          
    451          
    452             if (status.manu)
   \   000018 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_195:
   \   00001C 271D                  JREQ      L:??Display_1
    453             {
    454               program_display=' ';
   \   00001E 35200000              MOV       L:program_display, #0x20
    455               power_display=' ';
    456               if(status.on)
   \   000022 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_130:
   \   000026 270D                  JREQ      L:??Display_2
    457               {
    458                if(manu_display=='M') manu_display=' ';
   \   000028 C60000                LD        A, L:manu_display
   \   00002B A14D                  CP        A, #0x4d
   \   00002D 2606                  JRNE      L:??Display_2
   \   00002F 35200000              MOV       L:manu_display, #0x20
   \   000033 200A                  JRA       L:??Display_3
    459                 else manu_display='M';
   \                     ??Display_2:
   \   000035 354D0000              MOV       L:manu_display, #0x4d
   \   000039 2004                  JRA       L:??Display_3
    460               }
    461                else manu_display='M';
    462             }
    463               else manu_display='A';
   \                     ??Display_1:
   \   00003B 35410000              MOV       L:manu_display, #0x41
    464          
    465          
    466          
    467          
    468               //Blink D
    469          
    470             if (status.on && !status.manu)
   \                     ??Display_3:
   \   00003F 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_131:
   \   000043 271A                  JREQ      L:??Display_4
   \   000045 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_196:
   \   000049 2614                  JRNE      L:??Display_4
    471             {
    472               if (program_display==' ')
   \   00004B C60000                LD        A, L:program_display
   \   00004E A120                  CP        A, #0x20
   \   000050 260D                  JRNE      L:??Display_4
    473                 {
    474                   program_display='P';
   \   000052 35500000              MOV       L:program_display, #0x50
    475                   power_display=0x30 +power;
   \   000056 C60000                LD        A, L:power
   \   000059 AB30                  ADD       A, #0x30
   \   00005B B700                  LD        S:?b4, A
   \   00005D 2008                  JRA       L:??Display_5
    476                 }
    477               else
    478                 {
    479                   program_display=' ';
   \                     ??Display_4:
   \   00005F 35200000              MOV       L:program_display, #0x20
    480                   power_display=' ';
   \   000063 35200000              MOV       S:?b4, #0x20
    481                 }
    482             }
    483               else
    484                 {
    485                   program_display=' ';
    486                   power_display=' ';
    487                 }
    488          
    489          
    490             // else if (status.on) program_display='P';
    491             //  else program_display=' ';
    492          
    493              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,manu_display,program_display,power_display);
   \                     ??Display_5:
   \   000067 C60000                LD        A, L:manu_display
   \   00006A 5F                    CLRW      X
   \   00006B 97                    LD        XL, A
   \   00006C BF00                  LDW       S:?w1, X
   \   00006E C60000                LD        A, L:program_display
   \   000071 97                    LD        XL, A
   \   000072 BF00                  LDW       S:?w0, X
   \   000074 B600                  LD        A, S:?b4
   \   000076 41                    EXG       A, XL
   \   000077 90CE0000              LDW       Y, L:hardware
   \   00007B 909F                  LD        A, YL
   \   00007D A502                  BCP       A, #0x2
   \   00007F 89                    PUSHW     X
   \   000080 2721                  JREQ      L:??Display_6
   \   000082 8D000000              CALLF     L:?push_w0
   \   000086 8D000000              CALLF     L:?push_w1
   \   00008A C60000                LD        A, L:result2
   \   00008D 97                    LD        XL, A
   \   00008E 89                    PUSHW     X
   \   00008F C60000                LD        A, L:result1
   \   000092 97                    LD        XL, A
   \   000093 89                    PUSHW     X
   \   000094 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000098 AE0000                LDW       X, #line1
   \   00009B 8D000000              CALLF     sprintf
   \   00009F 5B0A                  ADD       SP, #0xa
   \   0000A1 2015                  JRA       L:??Display_7
    494                else sprintf(line1,"\n%c%c%c",manu_display,program_display,power_display);
   \                     ??Display_6:
   \   0000A3 8D000000              CALLF     L:?push_w0
   \   0000A7 8D000000              CALLF     L:?push_w1
   \   0000AB 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   0000AF AE0000                LDW       X, #line1
   \   0000B2 8D000000              CALLF     sprintf
   \   0000B6 5B06                  ADD       SP, #0x6
    495          
    496             line_lcd=0;
   \                     ??Display_7:
   \   0000B8 8D000000              CALLF     ?Subroutine37
    497             printf(line1);
    498          
    499             line_lcd=1;
    500             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_88:
   \   0000BC C60000                LD        A, L:seconds
   \   0000BF 5F                    CLRW      X
   \   0000C0 97                    LD        XL, A
   \   0000C1 89                    PUSHW     X
   \   0000C2 C60000                LD        A, L:minutes
   \   0000C5 97                    LD        XL, A
   \   0000C6 89                    PUSHW     X
   \   0000C7 C60000                LD        A, L:hours
   \   0000CA 97                    LD        XL, A
   \   0000CB 89                    PUSHW     X
   \   0000CC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CF 8D000000              CALLF     printf
   \   0000D3 5B06                  ADD       SP, #0x6
    501          
    502          
    503             Time_Display=FALSE;
   \   0000D5 725F0000              CLR       L:Time_Display
    504             //sync_display=' ';
    505          
    506          
    507          }
   \   0000D9 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine37:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #line1
   \   000007 8D000000              CALLF     printf
   \   00000B 35010000              MOV       L:line_lcd, #0x1
   \   00000F 87                    RETF
    508          

   \                                 In section .far_func.text, align 1
    509          void Power_On()
    510          {
    511            //status.auto=0;
    512            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine36
    513            status.manu=1; //Manu
    514            SaveStatus();
   \                     ??CrossCallReturnLabel_86:
   \   00000A AC000000              JPF       SaveStatus
    515            //hardware.lcdLed=1;
    516          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine36:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 AA01                  OR        A, #0x1
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    517          

   \                                 In section .far_func.text, align 1, keep-with-next
    518          void Power_Off()
    519          {
    520            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine36
    521            status.manu=1; //Manu
    522            SaveStatus();
   \                     ??CrossCallReturnLabel_85:
   \   00000A AC000000              JPF       SaveStatus
    523             //hardware.lcdLed=0;
    524          
    525          }
    526          

   \                                 In section .far_func.text, align 1, keep-with-next
    527          void InitI2C(void)
    528          {
    529             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    530             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    531             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    532          }
    533          

   \                                 In section .far_func.text, align 1, keep-with-next
    534          bool I2C_Start(void)
    535          {
    536             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    537                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    538              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_162:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    539                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    540                  {
    541                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    542                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    543                  }
    544                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    545          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    546          

   \                                 In section .far_func.text, align 1, keep-with-next
    547          bool I2C_WA(u8 address)
    548          {
    549            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    550                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    551                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_161:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    552                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    553                   {
    554                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    555                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    556                   }
    557                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    558          }
    559          

   \                                 In section .far_func.text, align 1, keep-with-next
    560          bool I2C_RA(u8 address)
    561          {
    562            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    563                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    564                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_163:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    565                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    566                   {
    567                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    568                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    569                   }
    570                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    571          }
    572          
    573          

   \                                 In section .far_func.text, align 1, keep-with-next
    574          bool I2C_WD(u8 data)
    575          {
    576           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    577             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    578             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_160:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    579              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    580              {
    581                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    582                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    583              }
    584               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    585          }
    586          

   \                                 In section .far_func.text, align 1, keep-with-next
    587          u8 I2C_RD(void)
    588          {
    589           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    590            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    591           //while((!(I2C->SR1 & 0x40))&&timeout);
    592           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    593           {
    594             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    595             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    596           }
    597           u8 data=I2C_ReceiveData();
    598           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    599          }
    600          
    601          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine86_0
   \   000001                       ;               // Fall through to label ??Subroutine86_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    602          bool  ReadDS1307(void)
    603          {        //TIM3_Cmd(DISABLE);
    604                   disableInterrupts();
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine54
    605                 error=0;
    606                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_147:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    607                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_173:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    608                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_258:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    609                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine23
    610                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_44:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    611                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    612                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine22
    613                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_42:
   \   000028 C70000                LD        L:seconds, A
    614                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine22
    615                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_41:
   \   00002F C70000                LD        L:minutes, A
    616                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine22
    617                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   000036 C70000                LD        L:hours, A
    618                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine22
    619                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_39:
   \   00003D C70000                LD        L:days, A
    620                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine22
    621                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_38:
   \   000044 C70000                LD        L:`date`, A
    622                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine22
    623                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_37:
   \   00004B C70000                LD        L:month, A
    624                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine27
    625                   I2C_GenerateSTOP(ENABLE);
    626                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_54:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    627          
    628               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    629               //   u8 data1 = I2C_RD();
    630                //Last read byte by I2C slave
    631               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    632               //  I2C_GenerateSTOP(ENABLE);
    633               //  temp2= I2C_RD();
    634                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    635                    {
    636                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    637                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    638                    }
    639                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006A CE0000                LDW       X, L:hardware
   \   00006D 01                    RRWA      X, A
   \   00006E AA01                  OR        A, #0x1
   \   000070 02                    RLWA      X, A
   \   000071 CF0000                LDW       L:hardware, X
    640                 //TIM3_Cmd(ENABLE);
    641                  enableInterrupts();
   \   000074 9A                    RIM
    642                 return TRUE;
   \   000075 A601                  LD        A, #0x1
   \   000077 87                    RETF
    643          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 9B                    SIM
   \   000001 725F0000              CLR       L:error
   \   000005 8D000000              CALLF     I2C_Start
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_183:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    644          

   \                                 In section .far_func.text, align 1, keep-with-next
    645          bool Check_DS1307(void)
    646          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    647             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    648                 error=0;
   \   000003 725F0000              CLR       L:error
    649                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    650                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    651                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_172:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    652                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_261:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    653                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine23
    654                  //Last read byte by I2C slave
    655                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_43:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    656                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    657                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine68
    658                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_184:
   \   00003C B700                  LD        S:?b8, A
    659                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine27
    660                 I2C_GenerateSTOP(ENABLE);
    661                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_55:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    662                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    663          }
    664          

   \                                 In section .far_func.text, align 1, keep-with-next
    665          bool Set_DS1307()
    666          {
    667                 // convert hex or decimal to bcd format
    668          
    669                 disableInterrupts();
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine54
    670                 error=0;
    671                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_146:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    672                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_171:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    673                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_257:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    674                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_164:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    675                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_165:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    676                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_166:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    677                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_167:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    678                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_168:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    679                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_169:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    680                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_170:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    681                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_259:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    682                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_260:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    683                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    684                 enableInterrupts();
   \   000069 9A                    RIM
    685          
    686             return TRUE;
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    687          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    688          
    689          

   \                                 In section .far_func.text, align 1, keep-with-next
    690          u8 convert_tobcd(u8 data)
    691          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    692             u8 data_second_decimal=data/10;
    693             u8 data_first_decimal=data - 10*data_second_decimal;
    694             data=16*data_second_decimal + data_first_decimal;
    695            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    696          }
    697          

   \                                 In section .far_func.text, align 1, keep-with-next
    698          u8 bcd2hex(u8 bcd)
    699          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    700            u8 hex=0;
    701            hex=(bcd>>4)*10 +(bcd&0x0f);
    702            bcd=0;
    703            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    704          }
    705          
    706          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 A102                  CP        A, #0x2
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_180:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    707          void  SetupMenu()
    708          {
   \                     SetupMenu:
   \   000000 8D000000              CALLF     L:?push_w4
    709               // Clear Display
    710              LCDInstr(0x01); //Clear LCD
   \   000004 8D000000              CALLF     ?Subroutine21
    711              Delay1(250);
   \                     ??CrossCallReturnLabel_36:
   \   000008 8D000000              CALLF     ??Subroutine77_0
    712          
    713              line_lcd=0;
    714              printf("\nMenu +/-");
   \                     ??CrossCallReturnLabel_213:
   \   00000C AE0000                LDW       X, #`?<Constant "\\nMenu +/-">`
   \   00000F 8D000000              CALLF     printf
    715              u8 mi=0;
   \   000013 3F00                  CLR       S:?b8
    716              u8 size_setup_menu = (sizeof(setup_menu)/2) -1;
    717              line_lcd=1;
   \   000015 35010000              MOV       L:line_lcd, #0x1
    718              printf(setup_menu[mi]);
   \   000019 CE0000                LDW       X, L:setup_menu
   \   00001C 8D000000              CALLF     printf
    719              bool key_menu=TRUE;
   \   000020 35010000              MOV       S:?b9, #0x1
   \   000024 2019                  JRA       L:??SetupMenu_0
    720          
    721              do
    722              {
    723                pressKey();
    724                 if(button==2)    // Plus Key  Enter Menu
    725                  {
    726                    mi++;
    727                    if(mi > size_setup_menu) mi=0;
    728                    ClearLine2();
    729                    line_lcd=1;
    730                    printf(setup_menu[mi]);
    731                  }
    732          
    733                 if (button==3)  // Minus Key  down Menu
    734                    {
    735                      mi--;
    736                      if(mi==255) mi=size_setup_menu;
    737                      ClearLine2();
    738                      line_lcd=1;
    739                      printf(setup_menu[mi]);
    740                    }
    741          
    742                  if(button==1 && key_menu)
    743                  {
    744                    key_menu=FALSE;
   \                     ??SetupMenu_1:
   \   000026 3F00                  CLR       S:?b9
    745                    button=4;
   \   000028 35040000              MOV       L:button, #0x4
    746                  }
    747          
    748                  if(button==1) SelectMenu(mi);
    749          
    750                  if(button==4)
    751                  {
    752                    ClearLine1();
   \                     ??SetupMenu_2:
   \   00002C 8D000000              CALLF     ?Subroutine42
    753                    ClearLine2();
    754                    line_lcd=0;
    755                    printf("\nMenu +/-");
   \                     ??CrossCallReturnLabel_112:
   \   000030 AE0000                LDW       X, #`?<Constant "\\nMenu +/-">`
   \   000033 8D000000              CALLF     printf
    756                    line_lcd=1;
   \   000037 8D000000              CALLF     ??Subroutine84_0
    757                    printf(setup_menu[mi]);
    758                    button=5;
   \                     ??CrossCallReturnLabel_254:
   \   00003B 35050000              MOV       L:button, #0x5
    759                  }
   \                     ??SetupMenu_0:
   \   00003F 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_118:
   \   000043 260F                  JRNE      L:??CrossCallReturnLabel_256
   \   000045 B600                  LD        A, S:?b8
   \   000047 4C                    INC       A
   \   000048 B700                  LD        S:?b8, A
   \   00004A A105                  CP        A, #0x5
   \   00004C 2502                  JRC       L:??SetupMenu_3
   \   00004E 3F00                  CLR       S:?b8
   \                     ??SetupMenu_3:
   \   000050 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_256:
   \   000054 C60000                LD        A, L:button
   \   000057 A103                  CP        A, #0x3
   \   000059 2611                  JRNE      L:??CrossCallReturnLabel_255
   \   00005B B600                  LD        A, S:?b8
   \   00005D 4A                    DEC       A
   \   00005E B700                  LD        S:?b8, A
   \   000060 A1FF                  CP        A, #0xff
   \   000062 2604                  JRNE      L:??SetupMenu_4
   \   000064 35040000              MOV       S:?b8, #0x4
   \                     ??SetupMenu_4:
   \   000068 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_255:
   \   00006C C60000                LD        A, L:button
   \   00006F A101                  CP        A, #0x1
   \   000071 260A                  JRNE      L:??SetupMenu_5
   \   000073 3D00                  TNZ       S:?b9
   \   000075 26AF                  JRNE      L:??SetupMenu_1
   \   000077 B600                  LD        A, S:?b8
   \   000079 8D000000              CALLF     SelectMenu
   \                     ??SetupMenu_5:
   \   00007D C60000                LD        A, L:button
   \   000080 A104                  CP        A, #0x4
   \   000082 27A8                  JREQ      L:??SetupMenu_2
    760          
    761              } while ( button != 0 );   //Ok Next Menu   button != 1 &&
   \   000084 C60000                LD        A, L:button
   \   000087 26B6                  JRNE      L:??SetupMenu_0
   \   000089 AC000000              JPF       L:?epilogue_w4
    762          
    763                   if(button==0) return;  // No key press
    764          
    765          
    766          
    767          
    768          
    769          
    770          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_191:
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 8D000000              CALLF     ClearLine1
   \   000004 AC000000              JPF       ClearLine2

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ClearLine2
   \   000004                       REQUIRE ??Subroutine84_0
   \   000004                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004                       REQUIRE ??Subroutine85_0
   \   000004                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 58                    SLLW      X
   \   000006 DE0000                LDW       X, (L:setup_menu,X)
   \   000009 AC000000              JPF       printf
    771          
    772          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 8D000000              CALLF     ClearLine2
   \   000004 35010000              MOV       L:line_lcd, #0x1
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 8D000000              CALLF     ClearLine1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    773          void SelectMenu(u8 si)
    774          {
   \                     SelectMenu:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    775              if(si==4)
   \   000005 A104                  CP        A, #0x4
   \   000007 2607                  JRNE      L:??SelectMenu_0
    776              {
    777                button=0;
   \                     ??SelectMenu_1:
   \   000009 725F0000              CLR       L:button
    778                 return;
   \   00000D CC0000                JP        L:??SelectMenu_2
    779              }
    780          
    781              if(si==3)
   \                     ??SelectMenu_0:
   \   000010 A103                  CP        A, #0x3
   \   000012 2649                  JRNE      L:??SelectMenu_3
    782              {
    783                 ClearLine1();
   \   000014 8D000000              CALLF     ?Subroutine42
    784                 ClearLine2();
    785                 line_lcd=0;
    786                 printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_110:
   \   000018 C60000                LD        A, L:`date`
   \   00001B 5F                    CLRW      X
   \   00001C 97                    LD        XL, A
   \   00001D 89                    PUSHW     X
   \   00001E C60000                LD        A, L:month
   \   000021 97                    LD        XL, A
   \   000022 89                    PUSHW     X
   \   000023 C60000                LD        A, L:year
   \   000026 97                    LD        XL, A
   \   000027 89                    PUSHW     X
   \   000028 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00002B 8D000000              CALLF     printf
   \   00002F 5B06                  ADD       SP, #0x6
    787                 line_lcd=1;
   \   000031 35010000              MOV       L:line_lcd, #0x1
    788                 printf("\n%s",day_week[days+1]);
   \   000035 C60000                LD        A, L:days
   \   000038 5F                    CLRW      X
   \   000039 97                    LD        XL, A
   \   00003A 58                    SLLW      X
   \   00003B 1C0000                ADDW      X, #day_week + 2
   \   00003E FE                    LDW       X, (X)
   \   00003F 89                    PUSHW     X
   \   000040 AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000043 8D000000              CALLF     printf
   \   000047 5B02                  ADD       SP, #0x2
    789                 pressKey();
   \   000049 8D000000              CALLF     ?Subroutine45
    790                 while(button !=0 && button !=1 && button !=2 && button !=3);;
    791                  button=0;
    792                 return;
    793              }
   \                     ??CrossCallReturnLabel_120:
   \   00004D 27BA                  JREQ      L:??SelectMenu_1
   \   00004F A101                  CP        A, #0x1
   \   000051 27B6                  JREQ      L:??SelectMenu_1
   \   000053 A102                  CP        A, #0x2
   \   000055 27B2                  JREQ      L:??SelectMenu_1
   \                     ??SelectMenu_4:
   \   000057 A103                  CP        A, #0x3
   \   000059 26FC                  JRNE      L:??SelectMenu_4
   \   00005B 20AC                  JRA       L:??SelectMenu_1
    794          
    795             ClearLine1();
   \                     ??SelectMenu_3:
   \   00005D 8D000000              CALLF     ?Subroutine41
    796              line_lcd=0;
    797             printf(setup_menu[si]);
   \                     ??CrossCallReturnLabel_109:
   \   000061 8D000000              CALLF     ??Subroutine85_0
    798             ClearLine2();
   \                     ??CrossCallReturnLabel_253:
   \   000065 8D000000              CALLF     ?Subroutine47
    799              line_lcd=1;
    800             printf("\n+/-");
   \                     ??CrossCallReturnLabel_127:
   \   000069 AE0000                LDW       X, #`?<Constant "\\n+/-">`
   \   00006C 8D000000              CALLF     printf
    801              do
    802              {
    803                pressKey();
   \                     ??SelectMenu_5:
   \   000070 8D000000              CALLF     ?Subroutine45
    804          
    805                if(button==3) //Minus
   \                     ??CrossCallReturnLabel_121:
   \   000074 A103                  CP        A, #0x3
   \   000076 2606                  JRNE      L:??SelectMenu_6
    806                {
    807                   button=4;
   \   000078 35040000              MOV       L:button, #0x4
    808                   return;
   \   00007C 2063                  JRA       L:??SelectMenu_2
    809                }
    810          
    811                if(button==1 || button==3)
   \                     ??SelectMenu_6:
   \   00007E A101                  CP        A, #0x1
   \   000080 265A                  JRNE      L:??SelectMenu_7
    812                {
    813                   switch (si)
   \   000082 B600                  LD        A, S:?b8
   \   000084 2708                  JREQ      L:??SelectMenu_8
   \   000086 4A                    DEC       A
   \   000087 273D                  JREQ      L:??SelectMenu_9
   \   000089 4A                    DEC       A
   \   00008A 2745                  JREQ      L:??SelectMenu_10
   \   00008C 204E                  JRA       L:??SelectMenu_7
    814                   {
    815                   case 0:
    816                      ClearLine1();
   \                     ??SelectMenu_8:
   \   00008E 8D000000              CALLF     ?Subroutine42
    817                      ClearLine2();
    818                      line_lcd=0;
    819                      printf("\nClear");
   \                     ??CrossCallReturnLabel_111:
   \   000092 AE0000                LDW       X, #`?<Constant "\\nClear">`
   \   000095 8D000000              CALLF     printf
    820                      line_lcd=1;
   \   000099 35010000              MOV       L:line_lcd, #0x1
    821                      printf("\nall prog");
   \   00009D AE0000                LDW       X, #`?<Constant "\\nall prog">`
   \   0000A0 8D000000              CALLF     printf
    822                      ResetProgram();
   \   0000A4 8D000000              CALLF     ResetProgram
    823                      pressKey();
   \   0000A8 8D000000              CALLF     ?Subroutine45
    824                       while(button !=0 && button !=1 && button !=2 && button !=3);;
   \                     ??CrossCallReturnLabel_122:
   \   0000AC 2603                  JRNE      ??lb_4
   \   0000AE CC0000                JP        L:??SelectMenu_1
   \                     ??lb_4:
   \   0000B1 A101                  CP        A, #0x1
   \   0000B3 2603                  JRNE      ??lb_5
   \   0000B5 CC0000                JP        L:??SelectMenu_1
   \                     ??lb_5:
   \   0000B8 A102                  CP        A, #0x2
   \   0000BA 2603                  JRNE      ??lb_6
   \   0000BC CC0000                JP        L:??SelectMenu_1
   \                     ??lb_6:
   \                     ??SelectMenu_11:
   \   0000BF A103                  CP        A, #0x3
   \   0000C1 26FC                  JRNE      L:??SelectMenu_11
   \   0000C3 CC0000                JP        L:??SelectMenu_1
    825                        button=0;
    826                      return;
    827                    break;
    828                   case 1:
    829                      ClearLine1();
   \                     ??SelectMenu_9:
   \   0000C6 8D000000              CALLF     ?Subroutine71
    830                      ClearLine2();
    831                      SetClock();
   \                     ??CrossCallReturnLabel_193:
   \   0000CA 8D000000              CALLF     SetClock
   \   0000CE CC0000                JP        L:??SelectMenu_1
    832                      button=0;
    833                      return;
    834                    break;
    835                   case 2:
    836                      ClearLine1();
   \                     ??SelectMenu_10:
   \   0000D1 8D000000              CALLF     ?Subroutine71
    837                      ClearLine2();
    838                      SetData();
   \                     ??CrossCallReturnLabel_192:
   \   0000D5 8D000000              CALLF     SetData
   \   0000D9 CC0000                JP        L:??SelectMenu_1
    839                      button=0;
    840                      return;
    841                    break;
    842                  }
    843                }
    844              } while (button !=0);
   \                     ??SelectMenu_7:
   \   0000DC C60000                LD        A, L:button
   \   0000DF 268F                  JRNE      L:??SelectMenu_5
   \                     ??SelectMenu_2:
   \   0000E1 320000                POP       S:?b8
   \   0000E4 87                    RETF
    845          
    846          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 87                    RETF
    847          
    848          

   \                                 In section .far_func.text, align 1, keep-with-next
    849          bool SetData()
    850          {
    851              //Clear Display
    852             LCDInstr(0x01);
   \                     SetData:
   \   000000 8D000000              CALLF     ?Subroutine67
    853             Delay1(1000);
   \                     ??CrossCallReturnLabel_179:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
    854             if(InputDataProgram(FALSE))
   \   00000B 4F                    CLR       A
   \   00000C 8D000000              CALLF     InputDataProgram
   \   000010 A100                  CP        A, #0x0
   \   000012 276A                  JREQ      L:??SetData_0
    855              {
    856                year=y;
   \   000014 C60000                LD        A, L:`y`
   \   000017 C70000                LD        L:year, A
    857                month=m;
   \   00001A C60000                LD        A, L:m
   \   00001D C70000                LD        L:month, A
    858                date=d;
   \   000020 C60000                LD        A, L:d
   \   000023 C70000                LD        L:`date`, A
    859              }
    860              else return FALSE;
    861          
    862              //Find day of week
    863              ptim.tm_year=year+100;
   \   000026 C60000                LD        A, L:year
   \   000029 5F                    CLRW      X
   \   00002A 97                    LD        XL, A
   \   00002B 1C0064                ADDW      X, #0x64
   \   00002E CF0000                LDW       L:ptim + 10, X
    864              ptim.tm_mon=month-1;
   \   000031 C60000                LD        A, L:month
   \   000034 5F                    CLRW      X
   \   000035 97                    LD        XL, A
   \   000036 5A                    DECW      X
   \   000037 CF0000                LDW       L:ptim + 8, X
    865              ptim.tm_mday=date;
   \   00003A C60000                LD        A, L:`date`
   \   00003D 5F                    CLRW      X
   \   00003E 97                    LD        XL, A
   \   00003F CF0000                LDW       L:ptim + 6, X
    866              ptim.tm_sec=seconds;
   \   000042 C60000                LD        A, L:seconds
   \   000045 97                    LD        XL, A
   \   000046 CF0000                LDW       L:ptim, X
    867              ptim.tm_min=minutes;
   \   000049 C60000                LD        A, L:minutes
   \   00004C 97                    LD        XL, A
   \   00004D CF0000                LDW       L:ptim + 2, X
    868              ptim.tm_hour=hours;
   \   000050 C60000                LD        A, L:hours
   \   000053 97                    LD        XL, A
   \   000054 CF0000                LDW       L:ptim + 4, X
    869              ptim.tm_isdst=-1;
   \   000057 5F                    CLRW      X
   \   000058 5A                    DECW      X
   \   000059 CF0000                LDW       L:ptim + 16, X
    870               if(mktime(&ptim)==-1)
   \   00005C AE0000                LDW       X, #ptim
   \   00005F 8D000000              CALLF     __mktime32
   \   000063 BE00                  LDW       X, S:?w0
   \   000065 A3FFFF                CPW       X, #0xffffffffffffffff
   \   000068 2605                  JRNE      L:??SetData_1
   \   00006A BE00                  LDW       X, S:?w1
   \   00006C A3FFFF                CPW       X, #0xffff
   \                     ??SetData_1:
   \   00006F 260F                  JRNE      L:??SetData_2
    871               {
    872                 ClearLine1();
   \   000071 8D000000              CALLF     ?Subroutine41
    873                  line_lcd=0;
    874                 printf("\nError");
   \                     ??CrossCallReturnLabel_107:
   \   000075 AE0000                LDW       X, #`?<Constant "\\nError">`
   \   000078 8D000000              CALLF     printf
   \   00007C 2029                  JRA       L:??SetData_3
    875              }
   \                     ??SetData_0:
   \   00007E 4F                    CLR       A
   \   00007F 87                    RETF
    876                else
    877                {
    878                   ClearLine1();
   \                     ??SetData_2:
   \   000080 8D000000              CALLF     ?Subroutine41
    879                   line_lcd=0;
    880                   printf("\nDay is");
   \                     ??CrossCallReturnLabel_108:
   \   000084 AE0000                LDW       X, #`?<Constant "\\nDay is">`
   \   000087 8D000000              CALLF     printf
    881                   ClearLine2();
   \   00008B 8D000000              CALLF     ?Subroutine47
    882                   line_lcd=1;
    883                   days= ptim.tm_wday;
   \                     ??CrossCallReturnLabel_126:
   \   00008F CE0000                LDW       X, L:ptim + 12
   \   000092 9F                    LD        A, XL
   \   000093 C70000                LD        L:days, A
    884                   printf("\n%s",day_week[days+1]);
   \   000096 5F                    CLRW      X
   \   000097 97                    LD        XL, A
   \   000098 58                    SLLW      X
   \   000099 1C0000                ADDW      X, #day_week + 2
   \   00009C FE                    LDW       X, (X)
   \   00009D 89                    PUSHW     X
   \   00009E AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   0000A1 8D000000              CALLF     printf
   \   0000A5 5B02                  ADD       SP, #0x2
    885          
    886                }
    887          
    888               // Wait for key or time out
    889                do
    890              {
    891                pressKey();
   \                     ??SetData_3:
   \   0000A7 8D000000              CALLF     ?Subroutine45
    892              } while ( button !=0 && button !=1 && button !=2 && button !=3);
   \                     ??CrossCallReturnLabel_119:
   \   0000AB 270C                  JREQ      L:??SetData_4
   \   0000AD A101                  CP        A, #0x1
   \   0000AF 2708                  JREQ      L:??SetData_4
   \   0000B1 A102                  CP        A, #0x2
   \   0000B3 2704                  JREQ      L:??SetData_4
   \   0000B5 A103                  CP        A, #0x3
   \   0000B7 26EE                  JRNE      L:??SetData_3
    893          
    894          
    895              // Set parameter to DS1307 + time byte
    896                if(!Set_DS1307())
   \                     ??SetData_4:
   \   0000B9 8D000000              CALLF     Set_DS1307
   \   0000BD A100                  CP        A, #0x0
   \   0000BF 2603                  JRNE      L:??SetData_5
    897                {
    898                  enableInterrupts();
   \   0000C1 9A                    RIM
    899                  return FALSE;
   \   0000C2 20BA                  JRA       ??SetData_0
    900                }
    901          
    902            return TRUE;
   \                     ??SetData_5:
   \   0000C4 A601                  LD        A, #0x1
   \   0000C6 87                    RETF
    903          }
    904          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_181:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine77_0
   \   000007                       ;               // Fall through to label ??Subroutine77_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine78_0
   \   000006                       ;               // Fall through to label ??Subroutine78_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
    905          bool SetClock()
    906           {
    907             //Clear Display
    908             LCDInstr(0x01);
   \                     SetClock:
   \   000000 8D000000              CALLF     ?Subroutine15
    909             Delay1(1000);
    910             line_lcd=0;
    911              printf("\nHour>");
   \                     ??CrossCallReturnLabel_211:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   000007 8D000000              CALLF     printf
    912                do
    913              {
    914                line_lcd=1;
   \                     ??SetClock_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    915                 if(blink_flag)printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   00000F C60000                LD        A, L:minutes
   \   000012 905F                  CLRW      Y
   \   000014 9097                  LD        YL, A
   \   000016 C60000                LD        A, L:seconds
   \   000019 5F                    CLRW      X
   \   00001A 97                    LD        XL, A
   \   00001B C60000                LD        A, L:blink_flag
   \   00001E 89                    PUSHW     X
   \   00001F 9089                  PUSHW     Y
   \   000021 2710                  JREQ      L:??SetClock_1
   \   000023 C60000                LD        A, L:hours
   \   000026 97                    LD        XL, A
   \   000027 89                    PUSHW     X
   \   000028 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00002B 8D000000              CALLF     printf
   \   00002F 5B06                  ADD       SP, #0x6
   \   000031 2009                  JRA       L:??SetClock_2
    916                  else printf("\n  :%02d:%02d",minutes,seconds);
   \                     ??SetClock_1:
   \   000033 AE0000                LDW       X, #`?<Constant "\\n  :%02d:%02d">`
   \   000036 8D000000              CALLF     printf
   \   00003A 5B04                  ADD       SP, #0x4
    917                 hours=adj(0,23,hours);
   \                     ??SetClock_2:
   \   00003C C60000                LD        A, L:hours
   \   00003F B700                  LD        S:?b1, A
   \   000041 35170000              MOV       S:?b0, #0x17
   \   000045 8D000000              CALLF     ??Subroutine78_0
    918              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_214:
   \   000049 C70000                LD        L:hours, A
   \   00004C 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_99:
   \   000050 27B9                  JREQ      L:??SetClock_0
    919          
    920               line_lcd=0;
   \   000052 725F0000              CLR       L:line_lcd
    921               printf("\nMinute>");
   \   000056 AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000059 8D000000              CALLF     printf
    922                do
    923              {
    924                line_lcd=1;
   \                     ??SetClock_3:
   \   00005D 35010000              MOV       L:line_lcd, #0x1
    925                if(blink_flag) printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   000061 C60000                LD        A, L:hours
   \   000064 5F                    CLRW      X
   \   000065 97                    LD        XL, A
   \   000066 C60000                LD        A, L:seconds
   \   000069 905F                  CLRW      Y
   \   00006B 9097                  LD        YL, A
   \   00006D C60000                LD        A, L:blink_flag
   \   000070 9089                  PUSHW     Y
   \   000072 2713                  JREQ      L:??SetClock_4
   \   000074 C60000                LD        A, L:minutes
   \   000077 9097                  LD        YL, A
   \   000079 9089                  PUSHW     Y
   \   00007B 89                    PUSHW     X
   \   00007C AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007F 8D000000              CALLF     printf
   \   000083 5B06                  ADD       SP, #0x6
   \   000085 200A                  JRA       L:??SetClock_5
    926                 else printf("\n%02d:  :%02d",hours,seconds);
   \                     ??SetClock_4:
   \   000087 89                    PUSHW     X
   \   000088 AE0000                LDW       X, #`?<Constant "\\n%02d:  :%02d">`
   \   00008B 8D000000              CALLF     printf
   \   00008F 5B04                  ADD       SP, #0x4
    927                 minutes=adj(0,59,minutes);
   \                     ??SetClock_5:
   \   000091 C60000                LD        A, L:minutes
   \   000094 8D000000              CALLF     ?Subroutine28
    928              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_218:
   \   000098 C70000                LD        L:minutes, A
   \   00009B 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_100:
   \   00009F 27BC                  JREQ      L:??SetClock_3
    929          
    930              line_lcd=0;
   \   0000A1 725F0000              CLR       L:line_lcd
    931              printf("\nSeconds>");
   \   0000A5 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   0000A8 8D000000              CALLF     printf
    932              do
    933              {
    934                line_lcd=1;
   \                     ??SetClock_6:
   \   0000AC 35010000              MOV       L:line_lcd, #0x1
    935               if(blink_flag)printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \   0000B0 C60000                LD        A, L:hours
   \   0000B3 5F                    CLRW      X
   \   0000B4 97                    LD        XL, A
   \   0000B5 C60000                LD        A, L:minutes
   \   0000B8 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_90:
   \   0000BC 2717                  JREQ      L:??SetClock_7
   \   0000BE C60000                LD        A, L:seconds
   \   0000C1 9097                  LD        YL, A
   \   0000C3 9089                  PUSHW     Y
   \   0000C5 8D000000              CALLF     L:?push_w0
   \   0000C9 89                    PUSHW     X
   \   0000CA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CD 8D000000              CALLF     printf
   \   0000D1 5B06                  ADD       SP, #0x6
   \   0000D3 200E                  JRA       L:??SetClock_8
    936                else printf("\n%02d:%02d:  ",hours,minutes);
   \                     ??SetClock_7:
   \   0000D5 8D000000              CALLF     L:?push_w0
   \   0000D9 89                    PUSHW     X
   \   0000DA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:  ">`
   \   0000DD 8D000000              CALLF     printf
   \   0000E1 5B04                  ADD       SP, #0x4
    937                 seconds=adj(0,59,seconds);
   \                     ??SetClock_8:
   \   0000E3 C60000                LD        A, L:seconds
   \   0000E6 8D000000              CALLF     ?Subroutine28
    938              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_217:
   \   0000EA C70000                LD        L:seconds, A
   \   0000ED 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_101:
   \   0000F1 27B9                  JREQ      L:??SetClock_6
    939          
    940                // Set parameter to DS1307 + time byte
    941                if(!Set_DS1307()) enableInterrupts();
   \   0000F3 8D000000              CALLF     Set_DS1307
   \   0000F7 A100                  CP        A, #0x0
   \   0000F9 2601                  JRNE      L:??SetClock_9
   \   0000FB 9A                    RIM
    942          
    943            return TRUE;
   \                     ??SetClock_9:
   \   0000FC A601                  LD        A, #0x1
   \   0000FE 87                    RETF
    944          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 905F                  CLRW      Y
   \   000002 9097                  LD        YL, A
   \   000004 90BF00                LDW       S:?w0, Y
   \   000007 C60000                LD        A, L:blink_flag
   \   00000A 87                    RETF
    945          
    946          

   \                                 In section .far_func.text, align 1, keep-with-next
    947          u8 adj(u8 min,u8 max,u8 now)
    948          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    949             u8 adj=now;
    950             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    951             {
    952               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    953               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    954             }
    955             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    956             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    957             {
    958               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    959               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    960             }
    961             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    962             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    963          
    964             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    965          }
    966          
    967          

   \                                 In section .far_func.text, align 1, keep-with-next
    968          bool key_ok_on()
    969          {
    970            //Read Key OK
    971            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_47:
   \   000004 2649                  JRNE      L:??key_ok_on_0
    972             {
    973               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    974                key_ok_hold=FALSE;
   \   00000A 725F0000              CLR       L:key_ok_hold
    975                while((timer2 < KEY_TIME_HOLD) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000E CE0000                LDW       X, L:timer2
   \   000011 A3FDE8                CPW       X, #0xfde8
   \   000014 2406                  JRNC      L:??key_ok_on_2
   \   000016 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_48:
   \   00001A 27F2                  JREQ      L:??key_ok_on_1
    976                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A30FA0                CPW       X, #0xfa0
   \   000022 252B                  JRC       L:??key_ok_on_0
    977                 {
    978                      if(timer2>=KEY_TIME_HOLD)
   \   000024 CE0000                LDW       X, L:timer2
   \   000027 A3FDE8                CPW       X, #0xfde8
   \   00002A 2507                  JRC       L:??key_ok_on_3
    979                      {
    980                        key_ok_hold=TRUE;
   \   00002C 35010000              MOV       L:key_ok_hold, #0x1
    981                         return TRUE;
   \                     ??key_ok_on_4:
   \   000030 A601                  LD        A, #0x1
   \   000032 87                    RETF
    982                      }
    983                   timer2=0; // and next must be release
   \                     ??key_ok_on_3:
   \   000033 5F                    CLRW      X
   \   000034 CF0000                LDW       L:timer2, X
    984                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000037 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_49:
   \   00003B 2712                  JREQ      L:??key_ok_on_0
    985                    {
    986                       beep(2000);
   \   00003D 8D000000              CALLF     ?Subroutine30
    987                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_66:
   \   000041 2606                  JRNE      L:??key_ok_on_5
    988                        {
    989                         hardware.lcdLed=1;
   \   000043 8D000000              CALLF     ?Subroutine32
    990                         lcdLedTimer=LCDLEDON;
    991                         return FALSE;
   \                     ??CrossCallReturnLabel_71:
   \   000047 2006                  JRA       ??key_ok_on_0
    992                        }
    993                       hardware.lcdLed=1;
   \                     ??key_ok_on_5:
   \   000049 8D000000              CALLF     ?Subroutine32
    994                       lcdLedTimer=LCDLEDON;
    995          
    996                      return TRUE;   //if realease retrun true
   \                     ??CrossCallReturnLabel_72:
   \   00004D 20E1                  JRA       ??key_ok_on_4
    997                    }
    998                 }
    999             }
   1000          
   1001            return FALSE;
   \                     ??key_ok_on_0:
   \   00004F 4F                    CLR       A
   \   000050 87                    RETF
   1002          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
   1003          
   1004          
   1005          

   \                                 In section .far_func.text, align 1, keep-with-next
   1006           bool key_plus_on()
   1007          {
   1008            //Read Key OK
   1009              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_82:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
   1010               {
   1011               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
   1012                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_57:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_81:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
   1013                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
   1014                  {
   1015                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_51:
   \   000026 2711                  JREQ      L:??key_plus_on_0
   1016                    {
   1017                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine30
   1018                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_68:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
   1019                        {
   1020                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine32
   1021                         lcdLedTimer=LCDLEDON;
   1022                         return FALSE;
   \                     ??CrossCallReturnLabel_74:
   \   000032 2005                  JRA       ??key_plus_on_0
   1023                        }
   1024                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine31
   1025                        lcdLedTimer=LCDLEDON;
   1026          
   1027                      return TRUE;
   1028                    }
   1029                  }
   1030               }
   \                     ??CrossCallReturnLabel_70:
   \   000038 87                    RETF
   1031          
   1032            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
   1033          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_186:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
   1034          
   1035          

   \                                 In section .far_func.text, align 1, keep-with-next
   1036            bool key_minus_on()
   1037          {
   1038            //Read Key OK
   1039             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_84:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
   1040               {
   1041               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
   1042                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_56:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_83:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
   1043                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
   1044                  {
   1045                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_50:
   \   000026 2711                  JREQ      L:??key_minus_on_0
   1046                   {
   1047                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine30
   1048                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_67:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
   1049                       {
   1050                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine32
   1051                        lcdLedTimer=LCDLEDON;
   1052                        return FALSE;
   \                     ??CrossCallReturnLabel_73:
   \   000032 2005                  JRA       ??key_minus_on_0
   1053                       }
   1054                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine31
   1055                     lcdLedTimer=LCDLEDON;
   1056                     return TRUE;
   1057                   }
   1058                  }
   1059               }
   \                     ??CrossCallReturnLabel_69:
   \   000038 87                    RETF
   1060          
   1061            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
   1062          }
   1063          
   1064          

   \                                 In section .far_func.text, align 1, keep-with-next
   1065          bool  key_ok_plus()
   1066          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
   1067            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_23:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
   1068            {
   1069                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
   1070                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_64:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_24:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
   1071                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_65:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_205
   1072                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine75
   1073                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_205:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
   1074                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
   1075            }
   1076          
   1077           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
   1078          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
   1079          
   1080           /*
   1081          bool Set_Timer_On()
   1082          {
   1083          
   1084             //clr
   1085             LCDInstr(0x01);
   1086             Delay1(1000);
   1087             line_lcd=0;
   1088             printf("\nH On>");
   1089              timer3=0;
   1090            do
   1091              {
   1092               line_lcd=1;
   1093               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   1094                 daily_hour_on=adj(0,23,daily_hour_on);
   1095              } while ( timer3<=time_menu && !key_ok_on());
   1096          
   1097          
   1098             LCDInstr(0x01);
   1099             Delay1(1000);
   1100             line_lcd=0;
   1101             printf("\nMin On>");
   1102              timer3=0;
   1103            do
   1104              {
   1105               line_lcd=1;
   1106               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   1107                 daily_minute_on=adj(0,59,daily_minute_on);
   1108              } while ((timer3<=time_menu)&& !key_ok_on());
   1109          
   1110             //Save data to eeprom
   1111               if (!status.monthly) status.daily=1;
   1112                 else status.daily=0;
   1113               EEPROM_INIT();
   1114              //u8 temp =*(u8*)(&status);
   1115              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   1116               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1117               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1118               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   1119               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   1120               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1121                time_on=daily_hour_on*60+daily_minute_on;
   1122                 change=TRUE;
   1123          
   1124             return TRUE;
   1125          }
   1126           */
   1127          
   1128          /*
   1129          bool Set_Timer_Off()
   1130          {
   1131          
   1132              LCDInstr(0x01);
   1133              Delay1(1000);
   1134              line_lcd=0;
   1135              printf("\nH Off>");
   1136               timer3=0;
   1137            do
   1138              {
   1139               line_lcd=1;
   1140               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   1141                 daily_hour_off=adj(0,23,daily_hour_off);
   1142              } while (timer3<=time_menu && !key_ok_on());
   1143          
   1144            LCDInstr(0x01);
   1145             Delay1(1000);
   1146             line_lcd=0;
   1147             printf("\nMin Off>");
   1148             timer3=0;
   1149            do
   1150              {
   1151               line_lcd=1;
   1152               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   1153                 daily_minute_off=adj(0,59,daily_minute_off);
   1154              } while (timer3<=time_menu && !key_ok_on());
   1155          
   1156            //Save data to eeprom
   1157               if (!status.monthly) status.daily=1;
   1158                 else status.daily=0;
   1159               EEPROM_INIT();
   1160              //u8 temp =*(u8*)(&status);
   1161              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
   1162               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1163               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1164               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   1165               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   1166               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1167                time_off= daily_hour_off*60+daily_minute_off;
   1168                 change=TRUE;
   1169               return TRUE;
   1170          }
   1171          
   1172            */
   1173          

   \                                 In section .far_func.text, align 1, keep-with-next
   1174          void SaveStatus()
   1175          {
   1176            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     EEPROM_INIT
   1177            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine48
   1178            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   \                     ??CrossCallReturnLabel_129:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine48
   1179            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_128:
   \   00001C A6F7                  LD        A, #0xf7
   \   00001E AC000000              JPF       FLASH_Lock
   1180          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
   1181          
   1182          

   \                                 In section .far_func.text, align 1, keep-with-next
   1183          void SaveProgram ()
   1184          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
   1185               char *pp = (char*)&programpoint[0];
   1186              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1187             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1188             {
   1189              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 8D000000              CALLF     ?Subroutine40
   1190             }
   \                     ??CrossCallReturnLabel_103:
   \   000015 25F2                  JRC       L:??SaveProgram_0
   1191              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 8D000000              CALLF     FLASH_Lock
   1192          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 1C4002                ADDW      X, #0x4002
   \   000003 8D000000              CALLF     L:?sext32_l0_x
   \   000007 8D000000              CALLF     FLASH_ProgramByte
   \   00000B B600                  LD        A, S:?b8
   \   00000D 4C                    INC       A
   \   00000E B700                  LD        S:?b8, A
   \   000010 A128                  CP        A, #0x28
   \   000012 87                    RETF
   1193          
   1194          

   \                                 In section .far_func.text, align 1, keep-with-next
   1195          void ReadProgram()
   1196          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1197              char *pp = (char*)&programpoint[0];
   1198            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1199             {
   1200               *(pp+i)=FLASH_ReadByte( EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1201             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A128                  CP        A, #0x28
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1202          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1203          
   1204          

   \                                 In section .far_func.text, align 1, keep-with-next
   1205          void ResetProgram()
   1206          {
   \                     ResetProgram:
   \   000000 3B0000                PUSH      S:?b8
   1207          
   1208              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1209             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1210             {
   1211              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,0);
   \                     ??ResetProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A B600                  LD        A, S:?b8
   \   00000C 41                    EXG       A, XL
   \   00000D 8D000000              CALLF     ?Subroutine40
   1212             }
   \                     ??CrossCallReturnLabel_104:
   \   000011 25F6                  JRC       L:??ResetProgram_0
   1213              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 8D000000              CALLF     FLASH_Lock
   1214          
   1215               //Reload ProgrmaPoint
   1216             ReadProgram();
   \   000019 8D000000              CALLF     ReadProgram
   1217          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF
   1218          

   \                                 In section .far_func.text, align 1, keep-with-next
   1219          void CheckProgramPoint()
   1220          {
   \                     CheckProgramPoint:
   \   000000 8D000000              CALLF     L:?push_w4
   1221             if(status.manu) return;
   \   000004 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_194:
   \   000008 2703                  JREQ      ??lb_2
   \   00000A CC0000                JP        L:??CheckProgramPoint_0
   1222             u16 timenow=hours*60+minutes;
   \                     ??lb_2:
   \   00000D C60000                LD        A, L:hours
   \   000010 905F                  CLRW      Y
   \   000012 9097                  LD        YL, A
   \   000014 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_251:
   \   000018 C60000                LD        A, L:minutes
   \   00001B 9097                  LD        YL, A
   \   00001D 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_202:
   \   000021 BF00                  LDW       S:?w4, X
   1223             status.on=0;
   \   000023 CE0000                LDW       X, L:status
   \   000026 01                    RRWA      X, A
   \   000027 A4FD                  AND       A, #0xfd
   \   000029 02                    RLWA      X, A
   \   00002A CF0000                LDW       L:status, X
   1224              //u8 daytoday;
   1225               for( u8 i=0; i<8;i++)
   \   00002D 3F00                  CLR       S:?b6
   1226               {
   1227                  //For Daily Allarm
   1228                 if(programpoint[i].day==8)
   \                     ??CheckProgramPoint_1:
   \   00002F 5F                    CLRW      X
   \   000030 41                    EXG       A, XL
   \   000031 B600                  LD        A, S:?b6
   \   000033 41                    EXG       A, XL
   \   000034 9093                  LDW       Y, X
   \   000036 AE0005                LDW       X, #0x5
   \   000039 8D000000              CALLF     ??Subroutine83_0
   \                     ??CrossCallReturnLabel_250:
   \   00003D 1C0000                ADDW      X, #programpoint
   \   000040 BF00                  LDW       S:?w1, X
   \   000042 92C600                LD        A, [S:?w1.w]
   \   000045 A108                  CP        A, #0x8
   \   000047 266D                  JRNE      L:??CheckProgramPoint_2
   1229                 {
   1230                  int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   000049 5C                    INCW      X
   \   00004A F6                    LD        A, (X)
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 9093                  LDW       Y, X
   \   00004F 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_252:
   \   000053 9093                  LDW       Y, X
   \   000055 BE00                  LDW       X, S:?w1
   \   000057 1C0002                ADDW      X, #0x2
   \   00005A F6                    LD        A, (X)
   \   00005B 5F                    CLRW      X
   \   00005C 97                    LD        XL, A
   \   00005D BF00                  LDW       S:?w0, X
   \   00005F 93                    LDW       X, Y
   \   000060 72BB0000              ADDW      X, S:?w0
   \   000064 9093                  LDW       Y, X
   1231                  int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   \   000066 BE00                  LDW       X, S:?w1
   \   000068 1C0003                ADDW      X, #0x3
   \   00006B F6                    LD        A, (X)
   \   00006C 5F                    CLRW      X
   \   00006D 97                    LD        XL, A
   \   00006E BF00                  LDW       S:?w2, X
   \   000070 AE003C                LDW       X, #0x3c
   \   000073 BF00                  LDW       S:?w0, X
   \   000075 BE00                  LDW       X, S:?w2
   \   000077 8D000000              CALLF     L:?mul16_x_x_w0
   \   00007B BF00                  LDW       S:?w0, X
   \   00007D BE00                  LDW       X, S:?w1
   \   00007F 1C0004                ADDW      X, #0x4
   \   000082 F6                    LD        A, (X)
   \   000083 5F                    CLRW      X
   \   000084 97                    LD        XL, A
   \   000085 BF00                  LDW       S:?w1, X
   \   000087 BE00                  LDW       X, S:?w0
   \   000089 72BB0000              ADDW      X, S:?w1
   \   00008D BF00                  LDW       S:?w0, X
   1232                      do
   1233                        {
   1234                         if (timeon == timenow)
   \                     ??CheckProgramPoint_3:
   \   00008F 90B300                CPW       Y, S:?w4
   \   000092 2611                  JRNE      L:??CheckProgramPoint_4
   1235                          {
   1236                            power = i;
   \   000094 B600                  LD        A, S:?b6
   \   000096 C70000                LD        L:power, A
   1237                            status.on=1;
   \   000099 CE0000                LDW       X, L:status
   \   00009C 01                    RRWA      X, A
   \   00009D AA02                  OR        A, #0x2
   \   00009F 02                    RLWA      X, A
   \   0000A0 CF0000                LDW       L:status, X
   1238                           break;
   \   0000A3 2011                  JRA       L:??CheckProgramPoint_2
   1239                          }
   1240                         timeon ++;
   \                     ??CheckProgramPoint_4:
   \   0000A5 93                    LDW       X, Y
   \   0000A6 5C                    INCW      X
   \   0000A7 9093                  LDW       Y, X
   1241                        if (timeon == 1441) timeon = 0;
   \   0000A9 90A305A1              CPW       Y, #0x5a1
   \   0000AD 2602                  JRNE      L:??CheckProgramPoint_5
   \   0000AF 905F                  CLRW      Y
   1242                        } while (!(timeon==timeoff));
   \                     ??CheckProgramPoint_5:
   \   0000B1 90B300                CPW       Y, S:?w0
   \   0000B4 26D9                  JRNE      L:??CheckProgramPoint_3
   1243                  }
   1244          
   1245                     // for Day of the Week Allarm
   1246                  else if (programpoint[i].day== days) //Point is Weekly Mode
   1247                  {
   1248          
   1249                  }
   1250                 // for Monthly Allarm
   1251                  else if (programpoint[i].day == 9)//Point is Monthly Mode
   1252                   {
   1253                   }
   1254          
   1255          
   1256               }
   \                     ??CheckProgramPoint_2:
   \   0000B6 B600                  LD        A, S:?b6
   \   0000B8 4C                    INC       A
   \   0000B9 B700                  LD        S:?b6, A
   \   0000BB A108                  CP        A, #0x8
   \   0000BD 2403                  JRNC      ??lb_3
   \   0000BF CC0000                JP        L:??CheckProgramPoint_1
   \                     ??lb_3:
   \                     ??CheckProgramPoint_0:
   \   0000C2 AC000000              JPF       L:?epilogue_w4
   1257          
   1258          
   1259          
   1260          
   1261          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 AE003C                LDW       X, #0x3c
   \   000003                       REQUIRE ??Subroutine83_0
   \   000003                       ;               // Fall through to label ??Subroutine83_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000 BF00                  LDW       S:?w0, X
   \   000002 93                    LDW       X, Y
   \   000003 AC000000              JPF       L:?mul16_x_x_w0
   1262          
   1263          

   \                                 In section .far_func.text, align 1, keep-with-next
   1264          bool Read_Allarm()
   1265          {
   1266             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1267              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1268             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1269              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1270             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1271              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1272             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1273              if(daily_hour_off > 59) return FALSE;
   1274             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1275              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1276             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1277              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1278             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1279              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1280            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1281          }
   1282          

   \                                 In section .far_func.text, align 1, keep-with-next
   1283          void EEPROM_INIT()
   1284          {
   1285            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1286            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1287            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1288          
   1289          }
   1290          
   1291          

   \                                 In section .far_func.text, align 1, keep-with-next
   1292          void GpioConfiguration()
   1293          {
   1294          
   1295            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1296          
   1297            // ADC PE6 NEW PB0
   1298            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1299          
   1300            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1301            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1302          
   1303            //PD0 Led
   1304            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine55
   1305            //I2C
   1306            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_150:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1307            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine58
   1308            // Remap Pins pb4,pb5  sda,scl ;
   1309          
   1310             //Init KEY OK,PLUS,MINUS
   1311            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_157:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine58
   1312            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_158:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine58
   1313            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_159:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1314          
   1315            //Init DS18b20 data pin
   1316            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine55
   1317          
   1318            // Power Pin
   1319             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_149:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine55
   1320          
   1321            // lcdLed Pin
   1322             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_HIZ_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_148:
   \   00006B 35900000              MOV       S:?b0, #0x90
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1323          
   1324          
   1325          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1326          

   \                                 In section .far_func.text, align 1, keep-with-next
   1327          void InitClk()
   1328          {
   1329            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1330            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1331            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1332            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1333            CLK_SOURCE_HSI,       // Switch to internal timer.
   1334            DISABLE,              // Disable the clock switch interrupt.
   1335            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1336          
   1337            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine57
   1338            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_153:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine57
   1339            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_154:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine57
   1340            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_155:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine57
   1341            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_156:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1342          
   1343          
   1344          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1345          
   1346          
   1347          

   \                                 In section .far_func.text, align 1, keep-with-next
   1348          void LCDDataOut(u8 data)
   1349          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1350            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_15:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_234
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine81_0
   1351            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_234:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_14:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_235
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine81_0
   1352            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_235:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_13:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_236
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine81_0
   1353            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_236:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_12:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_237
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine81_0
   1354          }
   \                     ??CrossCallReturnLabel_237:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_243:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1355          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine81_0
   \   000002                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1356          void InitLcd()
   1357          {
   1358           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine10
   1359            LCD_RW(0);
   1360            LCD_RS(0);
   \                     ??CrossCallReturnLabel_17:
   \   000006 8D000000              CALLF     ?Subroutine11
   1361            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_232:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine16
   1362          
   1363            LCDInstrNibble(0x03);
   1364             Delay1(10);
   1365            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_26:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1366             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine16
   1367            LCDInstrNibble(0x03);
   1368             Delay1(10);
   1369          
   1370             //Line 4
   1371            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_25:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1372            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1373            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1374            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1375          
   1376            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1377            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1378          
   1379            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_35:
   \   000048 8D000000              CALLF     Delay1
   1380            Delay1(250);
   1381          
   1382            LCDInstr(0x06);
   \   00004C A606                  LD        A, #0x6
   \   00004E 8D000000              CALLF     LCDInstr
   1383            Delay1(10);
   \   000052 AE000A                LDW       X, #0xa
   \   000055 AC000000              JPF       Delay1
   1384          
   1385          
   1386          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_241:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_240:
   \   00000A 87                    RETF
   1387          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine81_0
   \                     ??CrossCallReturnLabel_238:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_208:
   \   00000D                       REQUIRE ??Subroutine76_0
   \   00000D                       ;               // Fall through to label ??Subroutine76_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_207:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1388          void LCDInstr(u8 Instr)
   1389          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1390            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine11
   1391            LCD_RW(0);
   \                     ??CrossCallReturnLabel_230:
   \   000009 2000                  JRA       ?Subroutine0
   1392            LCDDataOut(Instr>>4);
   1393            PulseEnable();
   1394            LCDDataOut(Instr & 0x0F);
   1395            PulseEnable();
   1396          }
   1397          

   \                                 In section .far_func.text, align 1, keep-with-next
   1398          void LCDData(u8 Data)
   1399          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1400            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine9
   1401            LCD_RW(0);
   \                     ??CrossCallReturnLabel_11:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1402            LCDDataOut(Data>>4);
   1403            PulseEnable() ;
   1404            LCDDataOut(Data & 0x0F) ;
   1405            PulseEnable();
   1406          }
   1407          

   \                                 In section .far_func.text, align 1, keep-with-next
   1408          void LCDInstrNibble(u8 Instr)
   1409          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1410            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine10
   1411            LCD_RW(0);
   1412            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_16:
   \   00000B AC000000              JPF       ??Subroutine76_0
   1413            PulseEnable();
   1414          }
   1415          

   \                                 In section .far_func.text, align 1, keep-with-next
   1416          void PulseEnable(void)
   1417          {
   1418            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1419             Delay1(1);
   1420            LCD_EN(1);
   1421             Delay1(1);
   1422            LCD_EN(0);
   \                     ??CrossCallReturnLabel_2:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine81_0
   1423             Delay1(1);
   \                     ??CrossCallReturnLabel_233:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1424          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_242:
   \   000006 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_245:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_244:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1425          

   \                                 In section .far_func.text, align 1, keep-with-next
   1426          void LCD_Busy(void)
   1427          {
   1428             //set Port D7 as Input
   1429             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1430             //Set Read
   1431             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine9
   1432             LCD_RS(0);
   \                     ??CrossCallReturnLabel_10:
   \   000013 8D000000              CALLF     ?Subroutine11
   1433             // Read Busy Flag
   1434                timer2=0;
   \                     ??CrossCallReturnLabel_231:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1435             do
   1436             {
   1437             // Enable set
   1438               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1439                Delay1(1);
   1440               LCD_EN(1);
   1441                Delay1(1);
   1442             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_3:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1443                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1444                //Clear read
   1445              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine81_0
   1446             //set Port D7 as Output
   1447             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_239:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1448          
   1449          }
   1450          
   1451          

   \                                 In section .far_func.text, align 1, keep-with-next
   1452          void LCD(u8 data)
   1453           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1454             //  static u8 linet=0;
   1455          
   1456          
   1457               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2678                  JRNE      L:??CrossCallReturnLabel_223
   1458               {
   1459          
   1460                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 2730                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2739                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 2742                  JREQ      L:??LCD_3
   \   000018 204A                  JRA       L:??LCD_4
   1461                   {
   1462                   case 0:
   1463                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1464                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1465                      {
   1466                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1467                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     LCDData
   1468                         Delay1(1);
   \   000030 8D000000              CALLF     ??Subroutine79_0
   1469                      }
   \                     ??CrossCallReturnLabel_222:
   \   000034 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_30:
   \   000038 25E8                  JRC       L:??LCD_5
   1470                     LCDInstr(0x80 | 0x00);
   \   00003A A680                  LD        A, #0x80
   \   00003C 8D000000              CALLF     ?Subroutine65
   1471                     count=0;
   1472                     break;
   \                     ??CrossCallReturnLabel_174:
   \   000040 2022                  JRA       L:??LCD_4
   1473                   case 1:
   1474                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000042 A6C0                  LD        A, #0xc0
   \   000044 8D000000              CALLF     LCDInstr
   1475                     count=20;
   \   000048 35140000              MOV       L:count, #0x14
   1476                     break;
   \   00004C 2016                  JRA       L:??LCD_4
   1477                   case 2:
   1478                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004E A694                  LD        A, #0x94
   \   000050 8D000000              CALLF     LCDInstr
   1479                     count=40;
   \   000054 35280000              MOV       L:count, #0x28
   1480                     break;
   \   000058 200A                  JRA       L:??LCD_4
   1481                   case 3:
   1482                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00005A A6D4                  LD        A, #0xd4
   \   00005C 8D000000              CALLF     LCDInstr
   1483                     count=60;
   \   000060 353C0000              MOV       L:count, #0x3c
   1484                     break;
   1485                   //default:
   1486                    //  LCDInstr(0x80 |0x40);    //Line 1
   1487                    }
   1488                   line_lcd++;
   \                     ??LCD_4:
   \   000064 C60000                LD        A, L:line_lcd
   \   000067 4C                    INC       A
   \   000068 C70000                LD        L:line_lcd, A
   1489                   if (line_lcd>=5)
   \   00006B A105                  CP        A, #0x5
   \   00006D 250F                  JRC       L:??LCD_6
   1490                   {
   1491                    line_lcd=1;   //line >=5
   \   00006F 35010000              MOV       L:line_lcd, #0x1
   1492                    LCDInstr(0x01); //Clear LCD
   \   000073 8D000000              CALLF     ?Subroutine67
   1493                    Delay1(2500);
   \                     ??CrossCallReturnLabel_182:
   \   000077 AE09C4                LDW       X, #0x9c4
   \   00007A 8D000000              CALLF     Delay1
   1494                   }
   1495          
   1496                   Delay1(1);
   \                     ??LCD_6:
   \   00007E 8D000000              CALLF     ??Subroutine79_0
   1497          
   1498          
   1499               }
   1500          
   1501          
   1502               if (count==20)
   \                     ??CrossCallReturnLabel_223:
   \   000082 C60000                LD        A, L:count
   \   000085 A114                  CP        A, #0x14
   \   000087 260A                  JRNE      L:??LCD_7
   1503                {
   1504                  LCDInstr(0x80 | 0x40);
   \   000089 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   00008B 8D000000              CALLF     LCDInstr
   1505                  Delay1(1);
   \                     ??LCD_9:
   \   00008F 5F                    CLRW      X
   \   000090 5C                    INCW      X
   \   000091 2020                  JRA       ??CrossCallReturnLabel_33
   1506                }
   1507                   else if(count==40)
   \                     ??LCD_7:
   \   000093 A128                  CP        A, #0x28
   \   000095 2604                  JRNE      L:??LCD_10
   1508                  {
   1509                    LCDInstr(0x80 | 0x14);
   \   000097 A694                  LD        A, #0x94
   \   000099 20F0                  JRA       ??LCD_8
   1510                    Delay1(1);
   1511                  }
   1512                    else if(count==60)
   \                     ??LCD_10:
   \   00009B A13C                  CP        A, #0x3c
   \   00009D 2608                  JRNE      L:??LCD_11
   1513                    {
   1514                      LCDInstr(0x80 | 0x54);
   \   00009F A6D4                  LD        A, #0xd4
   \   0000A1 8D000000              CALLF     ?Subroutine65
   1515                      count=0;
   1516                      Delay1(1);
   \                     ??CrossCallReturnLabel_175:
   \   0000A5 20E8                  JRA       ??LCD_9
   1517                    }
   1518                      else if(count >80)
   \                     ??LCD_11:
   \   0000A7 A151                  CP        A, #0x51
   \   0000A9 250C                  JRC       L:??LCD_12
   1519                        {
   1520                          count=0;
   \   0000AB 725F0000              CLR       L:count
   1521                          LCDInstr(0x01); //Clear LCD
   \   0000AF 8D000000              CALLF     ?Subroutine21
   1522                          Delay1(250);
   1523                        }
   \                     ??CrossCallReturnLabel_33:
   \   0000B3 8D000000              CALLF     Delay1
   1524          
   1525               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B7 B600                  LD        A, S:?b9
   \   0000B9 A11C                  CP        A, #0x1c
   \   0000BB 250F                  JRC       L:??LCD_13
   1526               {
   1527                 LCDData(data);
   \   0000BD 8D000000              CALLF     LCDData
   1528                  Delay1(1);
   \   0000C1 8D000000              CALLF     ??Subroutine79_0
   1529                 count++;
   \                     ??CrossCallReturnLabel_224:
   \   0000C5 C60000                LD        A, L:count
   \   0000C8 4C                    INC       A
   \   0000C9 C70000                LD        L:count, A
   1530               }
   1531           }
   \                     ??LCD_13:
   \   0000CC AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_246:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1532          

   \                                 In section .far_func.text, align 1, keep-with-next
   1533          void InitDelayTimer2()
   1534          {
   1535             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1536             //Tclock 16/8=2Mhz  /20 10us
   1537                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1538                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1539                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1540                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1541                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1542          
   1543          }
   1544          

   \                                 In section .far_func.text, align 1, keep-with-next
   1545          void InitDelayTimer3()
   1546          {
   1547             //Timer 3 use for 1s Delay
   1548             //Tclock 16000000/1024=15626
   1549                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1550                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1551                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1552                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1553          
   1554               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1555          
   1556          }
   1557          
   1558          
   1559          
   1560          

   \                                 In section .far_func.text, align 1, keep-with-next
   1561          bool DS18_Write(u8 data)
   1562          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1563            disableInterrupts();
   \   000006 9B                    SIM
   1564            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1565            {
   1566             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine13
   1567             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1568             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_22:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_229
   \   00001A 8D000000              CALLF     ?Subroutine17
   1569               //else DS18(0);
   1570             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_229:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1571             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine17
   1572             //Delay1(0);
   1573            }
   \                     ??CrossCallReturnLabel_228:
   \   000029 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_31:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1574            enableInterrupts();
   \   00002F 9A                    RIM
   1575            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1576          
   1577          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine80_0
   \   000002                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_177:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1578          
   1579          

   \                                 In section .far_func.text, align 1, keep-with-next
   1580          u8  DS18_Read()
   1581          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1582              //Init DS18b20 data pin as Input
   1583          
   1584            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1585              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1586            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1587            {
   1588              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine13
   1589              Delay_us(1); //Start time slot 4,5 us
   1590              DS18(1);
   \                     ??CrossCallReturnLabel_21:
   \   00000D 8D000000              CALLF     ?Subroutine17
   1591              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_226:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1592              //Delay1(0);
   1593             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_29:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1594              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1595              //  DS18(1);  // Next bit
   1596             // Delay1(0);
   1597          
   1598            }
   \   00003D 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_32:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1599              enableInterrupts();
   \   000043 9A                    RIM
   1600              //Init DS18b20 data pin
   1601             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1602             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1603          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1604          

   \                                 In section .far_func.text, align 1, keep-with-next
   1605          bool DS18_Reset()
   1606          {
   1607             //Init Reset Pulse
   1608          
   1609              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine66
   1610              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_178:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1611              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine17
   1612              //Delay1(1);
   1613              timer2=0;
   \                     ??CrossCallReturnLabel_227:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1614              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_58:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_27:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1615              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_59:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1616              {
   1617                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine33
   1618                return FALSE;
   \                     ??CrossCallReturnLabel_77:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1619              }
   1620          
   1621              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1622               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_60:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_28:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1623                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_61:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1624                 {
   1625                  hardware.ds18B20=0;
   1626                  return FALSE;
   1627                 }
   1628          
   1629              // Delay1(10);
   1630              //Delay1(20);    //25=524us
   1631               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine34
   1632              return TRUE;
   \                     ??CrossCallReturnLabel_79:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1633          }
   1634          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1635          u8 temperature ()
   1636          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1637          
   1638             //Init Reset Pulse
   1639              if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_144:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1640             //Skip ROM Command 0xCC
   1641              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine52
   1642             //Function command  CONVERT T [44h]
   1643              DS18_Write(0x44);
   1644              //Wait util end convert
   1645              timer2=0;
   1646               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_139:
   \   000013 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_63:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_139
   1647                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A31F41                CPW       X, #0x1f41
   \   000027 24E1                  JRNC      L:??temperature_1
   1648               //u8 temp8=timer2;
   1649              //Init Reset Pulse
   1650              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_145:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1651              // Skip ROM Command 0xCC
   1652              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine51
   1653              //Function command READ SCRATCHPAD [BEh]
   1654              DS18_Write(0xBE);
   1655               u8 temp1=DS18_Read();
   1656               u8 temp2=DS18_Read();
   1657              DS18_Reset();
   \                     ??CrossCallReturnLabel_137:
   \   000033 8D000000              CALLF     DS18_Reset
   1658                u16 result = temp2*256+temp1;
   1659                temp1= (u8)(result>>3);
   1660               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_1:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1661          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_199:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_198:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_204:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1662          

   \                                 In section .far_func.text, align 1, keep-with-next
   1663          bool Read_DS18()
   1664          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1665          
   1666             //Init Reset Pulse
   1667               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_142:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1668             //Skip ROM Command 0xCC
   1669              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine52
   1670             //Function command  CONVERT T [44h]
   1671              DS18_Write(0x44);
   1672              //Wait util end convert
   1673              timer2=0;
   1674               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_138:
   \   000013 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_62:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_138
   1675                           if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A31F41                CPW       X, #0x1f41
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1676               //u8 temp8=timer2;
   1677              //Init Reset Pulse
   1678              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_143:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1679              // Skip ROM Command 0xCC
   1680              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine51
   1681              //Function command READ SCRATCHPAD [BEh]
   1682              DS18_Write(0xBE);
   1683               u8 temp1=DS18_Read();
   1684               u8 temp2=DS18_Read();
   1685               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_136:
   \   000033 8D000000              CALLF     ?Subroutine56
   1686               u8 temp4=DS18_Read();
   1687               u8 temp5=DS18_Read();
   1688               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_152:
   \   000037 8D000000              CALLF     ?Subroutine56
   1689               u8 temp7=DS18_Read();
   1690               u8 temp8=DS18_Read();
   1691               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_151:
   \   00003B 8D000000              CALLF     DS18_Read
   1692          
   1693               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1694          
   1695                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1696                result2=0;
   \   000047 725F0000              CLR       L:result2
   1697                u16 result = temp2*256+temp1;
   1698                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_0:
   \   00004F C70000                LD        L:result1, A
   1699                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1700                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1701          
   1702          
   1703                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1704               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1705               //line_lcd=1;
   1706               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1707               // while (!key_ok_on());
   1708          
   1709               //u8 temp3=DS18_Read();
   1710          
   1711              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1712          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1713          

   \                                 In section .far_func.text, align 1, keep-with-next
   1714          bool DS18Set ()
   1715          {
   1716               //Init Reset Pulse
   1717              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_140:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1718             //Skip ROM Command 0xCC
   1719              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine73
   1720             //Function command  WRITE SCRATCHPAD 0x4E
   1721              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_201:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1722             //Write 3 bytes last is config reg
   1723              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1724              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1725              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1726          
   1727             //Init Reset Pulse
   1728              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_141:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1729              //Skip ROM Command 0xCC
   1730              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine73
   1731              //Function   Store in Conf Reg
   1732              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_200:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1733            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1734          }
   1735          
   1736          
   1737          
   1738          
   1739          
   1740          
   1741          
   1742          

   \                                 In section .far_func.text, align 1, keep-with-next
   1743          void Delay1(u16 Delay)
   1744          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1745              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1746            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1747            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1748          }
   \   00000D 87                    RETF
   1749          

   \                                 In section .far_func.text, align 1, keep-with-next
   1750           void Delay2(u16 Delay)
   1751          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1752            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1753            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1754          }
   \   00000D 87                    RETF
   1755          
   1756          

   \                                 In section .far_func.text, align 1, keep-with-next
   1757          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1758          {
   1759            //disableInterrupts();
   1760            do
   1761              {
   1762                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1763                nop();
   \   000001 9D                    NOP
   1764              }
   1765              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1766            //enableInterrupts();
   1767          }
   \   000005 87                    RETF
   1768          
   1769          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 3F00                  CLR       S:?b10
   \   000006                       REQUIRE ??Subroutine79_0
   \   000006                       ;               // Fall through to label ??Subroutine79_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1770          void Display_Line(char* line)
   1771          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1772            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1773            u8 count;
   1774              //Set Cursor to First Line
   1775             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     ?Subroutine8
   1776             count=0;
   1777             Delay1(1);
   1778            do
   1779            {
   1780          
   1781              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_221:
   \   000010 B600                  LD        A, S:?b11
   \   000012 A11C                  CP        A, #0x1c
   \   000014 2504                  JRC       L:??CrossCallReturnLabel_7
   1782               {
   1783                 LCDData(current_char);
   \   000016 8D000000              CALLF     ?Subroutine6
   1784                  Delay1(1);
   1785                 count++;
   1786               }
   1787               current_char=*line++;
   \                     ??CrossCallReturnLabel_7:
   \   00001A 8D000000              CALLF     ?Subroutine46
   1788            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_124:
   \   00001E 2706                  JREQ      L:??Display_Line_0
   \   000020 B600                  LD        A, S:?b10
   \   000022 A107                  CP        A, #0x7
   \   000024 25EA                  JRC       L:??CrossCallReturnLabel_221
   1789          
   1790             Rotate_Line(line1);
   \                     ??Display_Line_0:
   \   000026 AE0000                LDW       X, #line1
   \   000029 8D000000              CALLF     Rotate_Line
   1791          
   1792          }
   \   00002D AC000000              JPF       L:?epilogue_l2

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 B700                  LD        S:?b11, A
   \   000005 BE00                  LDW       X, S:?w4
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   \   00000A 3D00                  TNZ       S:?b11
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_248:
   \   000004 B600                  LD        A, S:?b10
   \   000006 4C                    INC       A
   \   000007 B700                  LD        S:?b10, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine82_0
   \   000004                       ;               // Fall through to label ??Subroutine82_0
   1793          
   1794          

   \                                 In section .far_func.text, align 1, keep-with-next
   1795          void DisplayLine2(void)
   1796          {
   \                     DisplayLine2:
   \   000000 8D000000              CALLF     L:?push_l2
   1797            char * line=line2;
   1798            char current_char=  *line++;
   \   000004 C60000                LD        A, L:line2
   \   000007 B700                  LD        S:?b11, A
   \   000009 AE0000                LDW       X, #line2 + 1
   \   00000C BF00                  LDW       S:?w4, X
   1799            u8 count;
   1800              //Set Cursor to Second  Line
   1801             LCDInstr(0x80 | 0x40);
   \   00000E A6C0                  LD        A, #0xc0
   \   000010 8D000000              CALLF     ?Subroutine8
   1802             count=0;
   1803             Delay1(1);
   1804            do
   1805            {
   1806          
   1807              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_220:
   \   000014 B600                  LD        A, S:?b11
   \   000016 A11C                  CP        A, #0x1c
   \   000018 2504                  JRC       L:??CrossCallReturnLabel_6
   1808               {
   1809                 LCDData(current_char);
   \   00001A 8D000000              CALLF     ?Subroutine6
   1810                  Delay1(1);
   1811                 count++;
   1812               }
   1813               current_char=*line++;
   \                     ??CrossCallReturnLabel_6:
   \   00001E 8D000000              CALLF     ?Subroutine46
   1814            }  while ((current_char != 0x00) && (count<7));
   \                     ??CrossCallReturnLabel_123:
   \   000022 2706                  JREQ      L:??DisplayLine2_0
   \   000024 B600                  LD        A, S:?b10
   \   000026 A107                  CP        A, #0x7
   \   000028 25EA                  JRC       L:??CrossCallReturnLabel_220
   1815          
   1816             Rotate_Line(line2);
   \                     ??DisplayLine2_0:
   \   00002A AE0000                LDW       X, #line2
   \   00002D 8D000000              CALLF     Rotate_Line
   1817          
   1818          }
   \   000031 AC000000              JPF       L:?epilogue_l2
   1819          
   1820          
   1821          
   1822          

   \                                 In section .far_func.text, align 1, keep-with-next
   1823          void Rotate_Line( char * line)
   1824          {
   1825          
   1826             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1827             char temp_next;
   1828          
   1829             do
   1830             {
   1831                temp_next=*(line+1);
   1832               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1833                //line++;
   1834                //temp_next=*line;
   1835               //*line=*line++;
   1836             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1837             line--;
   1838             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1839          
   1840          }
   \   000012 87                    RETF
   1841          

   \                                 In section .far_func.text, align 1, keep-with-next
   1842          void ClearLine1 ()
   1843          {
   \                     ClearLine1:
   \   000000 3B0000                PUSH      S:?b8
   1844               //Set Cursor to First Line
   1845             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine7
   1846             count=0;
   1847             Delay1(1);
   1848              u8 count=0;
   1849             do
   1850             {
   1851               LCDData(' ');
   \                     ??CrossCallReturnLabel_8:
   \   000009 8D000000              CALLF     ?Subroutine5
   1852                  Delay1(1);
   1853                  count++;
   1854             }while (count<8);
   \                     ??CrossCallReturnLabel_4:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_8
   1855          
   1856          
   1857          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_176:
   \   000004 8D000000              CALLF     ??Subroutine82_0
   \                     ??CrossCallReturnLabel_247:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_249:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4A                    DEC       A
   \   000009 B700                  LD        S:?b8, A
   \   00000B 87                    RETF
   1858          

   \                                 In section .far_func.text, align 1, keep-with-next
   1859          void ClearLine2 ()
   1860          {
   \                     ClearLine2:
   \   000000 3B0000                PUSH      S:?b8
   1861               //Set Cursor to Second  Line
   1862             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine7
   1863             count=0;
   1864             Delay1(1);
   1865              u8 count=0;
   1866             do
   1867             {
   1868               LCDData(' ');
   \                     ??CrossCallReturnLabel_9:
   \   000009 8D000000              CALLF     ?Subroutine5
   1869                  Delay1(1);
   1870                  count++;
   1871             }while (count<8);
   \                     ??CrossCallReturnLabel_5:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_9
   1872          
   1873          
   1874          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1875          
   1876          
   1877          

   \                                 In section .far_func.text, align 1, keep-with-next
   1878          void FirstMenu()
   1879          {
   1880                // Clear Display
   1881              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_34:
   \   000004 8D000000              CALLF     ??Subroutine77_0
   1882              Delay1(250);
   1883          
   1884                line_lcd=0;
   1885                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_212:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1886                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine24
   1887                 if (!status.manu)
   \                     ??CrossCallReturnLabel_45:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1888                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1889                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1890          
   1891                 do
   1892                 {
   1893                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     ?Subroutine44
   1894          
   1895                  if(button==2)      // Plus Button
   \                     ??CrossCallReturnLabel_117:
   \   000025 262C                  JRNE      L:??FirstMenu_3
   1896                  {
   1897                    if(status.manu) status.manu=0;
   \   000027 CE0000                LDW       X, L:status
   \   00002A 9F                    LD        A, XL
   \   00002B A401                  AND       A, #0x1
   \   00002D 2708                  JREQ      L:??FirstMenu_4
   \   00002F CE0000                LDW       X, L:status
   \   000032 01                    RRWA      X, A
   \   000033 A4FE                  AND       A, #0xfe
   \   000035 2006                  JRA       ??FirstMenu_5
   1898                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   000037 CE0000                LDW       X, L:status
   \   00003A 01                    RRWA      X, A
   \   00003B AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   00003D 02                    RLWA      X, A
   \   00003E CF0000                LDW       L:status, X
   1899                    line_lcd=1;
   \   000041 8D000000              CALLF     ?Subroutine24
   1900                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_46:
   \   000045 2705                  JREQ      L:??FirstMenu_6
   \   000047 AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004A 2003                  JRA       ??FirstMenu_7
   1901                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   00004C AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   00004F 8D000000              CALLF     printf
   1902                  }
   1903          
   1904                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000053 C60000                LD        A, L:button
   \   000056 A103                  CP        A, #0x3
   \   000058 2705                  JREQ      L:??FirstMenu_8
   \   00005A C60000                LD        A, L:button
   \   00005D 2604                  JRNE      L:??FirstMenu_9
   1905                  {
   1906                    SaveStatus();
   \                     ??FirstMenu_8:
   \   00005F AC000000              JPF       SaveStatus
   1907                    return;
   1908                  }
   1909          
   1910          
   1911                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000063 A101                  CP        A, #0x1
   \   000065 26BA                  JRNE      L:??FirstMenu_2
   1912          
   1913                   SaveStatus();
   \   000067 8D000000              CALLF     SaveStatus
   1914                   button=0;
   \   00006B 725F0000              CLR       L:button
   1915                   ProgramMenu();
   \   00006F AC000000              JPF       ProgramMenu
   1916          
   1917          
   1918          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_197:
   \   000008 87                    RETF
   1919          
   1920          
   1921          

   \                                 In section .far_func.text, align 1, keep-with-next
   1922          void ProgramMenu()
   1923          {
   \                     ProgramMenu:
   \   000000 8D000000              CALLF     L:?push_l3
   \   000004 8D000000              CALLF     L:?push_w4
   \   000008 3B0000                PUSH      S:?b10
   1924              u8 program_number=0;
   \   00000B 3F00                  CLR       S:?b10
   1925             do
   1926             {
   1927               sprintf(line1,"\nP%d%s",program_number,day_week[programpoint[program_number].day]);
   \                     ??ProgramMenu_0:
   \   00000D 5F                    CLRW      X
   \   00000E 41                    EXG       A, XL
   \   00000F B600                  LD        A, S:?b10
   \   000011 41                    EXG       A, XL
   \   000012 BF00                  LDW       S:?w7, X
   \   000014 AE0005                LDW       X, #0x5
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 BE00                  LDW       X, S:?w7
   \   00001B 8D000000              CALLF     L:?mul16_x_x_w0
   \   00001F 1C0000                ADDW      X, #programpoint
   \   000022 BF00                  LDW       S:?w4, X
   \   000024 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_113:
   \   000028 89                    PUSHW     X
   \   000029 8D000000              CALLF     L:?push_w7
   \   00002D 90AE0000              LDW       Y, #`?<Constant "\\nP%d%s">`
   \   000031 AE0000                LDW       X, #line1
   \   000034 8D000000              CALLF     sprintf
   \   000038 5B04                  ADD       SP, #0x4
   1928               sprintf(line2,"\n%s",day_week[programpoint[program_number].day]);
   \   00003A 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_114:
   \   00003E 89                    PUSHW     X
   \   00003F 90AE0000              LDW       Y, #`?<Constant "\\n%s">`
   \   000043 AE0000                LDW       X, #line2
   \   000046 8D000000              CALLF     sprintf
   \   00004A 5B02                  ADD       SP, #0x2
   1929               ClearLine2();
   \   00004C 8D000000              CALLF     ClearLine2
   1930               ClearLine1();
   \   000050 8D000000              CALLF     ClearLine1
   1931               line_lcd=0;
   \   000054 8D000000              CALLF     ?Subroutine37
   1932               printf(line1);
   1933               line_lcd=1;
   1934               printf(line2);
   \                     ??CrossCallReturnLabel_87:
   \   000058 AE0000                LDW       X, #line2
   \   00005B 8D000000              CALLF     printf
   1935                 do
   1936                 {
   1937                   pressKey();
   \                     ??ProgramMenu_1:
   \   00005F 8D000000              CALLF     ?Subroutine44
   1938          
   1939                    if(button==2)   //Plus
   \                     ??CrossCallReturnLabel_116:
   \   000063 2621                  JRNE      L:??ProgramMenu_2
   1940                    {
   1941                       programpoint[program_number].day++;
   \   000065 92C600                LD        A, [S:?w4.w]
   \   000068 4C                    INC       A
   \   000069 92C700                LD        [S:?w4.w], A
   1942                        if( programpoint[program_number].day >=9) programpoint[program_number].day=0;
   \   00006C A109                  CP        A, #0x9
   \   00006E 2504                  JRC       L:??ProgramMenu_3
   \   000070 4F                    CLR       A
   \   000071 92C700                LD        [S:?w4.w], A
   1943                          ClearLine2();
   \                     ??ProgramMenu_3:
   \   000074 8D000000              CALLF     ?Subroutine47
   1944                           line_lcd=1;
   1945                           printf("\n%s",day_week[programpoint[program_number].day]);
   \                     ??CrossCallReturnLabel_125:
   \   000078 8D000000              CALLF     ?Subroutine43
   1946                    }
   \                     ??CrossCallReturnLabel_115:
   \   00007C 89                    PUSHW     X
   \   00007D AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000080 8D000000              CALLF     printf
   \   000084 5B02                  ADD       SP, #0x2
   1947          
   1948                    if(button==3 || button==0 ) // Minus
   \                     ??ProgramMenu_2:
   \   000086 C60000                LD        A, L:button
   \   000089 A103                  CP        A, #0x3
   \   00008B 2705                  JREQ      L:??ProgramMenu_4
   \   00008D C60000                LD        A, L:button
   \   000090 260B                  JRNE      L:??ProgramMenu_5
   1949                    {
   1950                       SaveProgram();
   \                     ??ProgramMenu_4:
   \   000092 8D000000              CALLF     SaveProgram
   1951                        button=0;
   \   000096 725F0000              CLR       L:button
   1952                       return;
   \   00009A CC0000                JP        L:??ProgramMenu_6
   1953                    }
   1954          
   1955          
   1956                 } while (button != 1 && button != 0);
   \                     ??ProgramMenu_5:
   \   00009D A101                  CP        A, #0x1
   \   00009F 26BE                  JRNE      L:??ProgramMenu_1
   1957          
   1958                     // Test programm is Active ?
   1959                  if( programpoint[program_number].day !=0)
   \   0000A1 923D00                TNZ       [S:?w4.w]
   \   0000A4 2603                  JRNE      ??lb_0
   \   0000A6 CC0000                JP        L:??ProgramMenu_7
   1960                  {
   1961                        //Set On Hour
   1962                     ClearLine1();
   \                     ??lb_0:
   \   0000A9 8D000000              CALLF     ?Subroutine41
   1963                     line_lcd=0;
   1964                     printf("\nP%d%s",program_number," On");
   \                     ??CrossCallReturnLabel_105:
   \   0000AD 4B00                  PUSH      #BYTE1(`?<Constant " On">`)
   \   0000AF 4B00                  PUSH      #BYTE2(`?<Constant " On">`)
   \   0000B1 8D000000              CALLF     L:?push_w7
   \   0000B5 AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   0000B8 8D000000              CALLF     printf
   \   0000BC 5B04                  ADD       SP, #0x4
   1965                     timer3=0;
   \   0000BE 5F                    CLRW      X
   \   0000BF CF0000                LDW       L:timer3, X
   1966                     ClearLine2();
   \   0000C2 8D000000              CALLF     ClearLine2
   \   0000C6 BE00                  LDW       X, S:?w4
   \   0000C8 1C0002                ADDW      X, #0x2
   \   0000CB BF00                  LDW       S:?w6, X
   1967                     do
   1968                      {
   1969                       line_lcd=1;
   \                     ??ProgramMenu_8:
   \   0000CD 35010000              MOV       L:line_lcd, #0x1
   1970                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   0000D1 C60000                LD        A, L:blink_flag
   \   0000D4 2718                  JREQ      L:??ProgramMenu_9
   \   0000D6 92C600                LD        A, [S:?w6.w]
   \   0000D9 5F                    CLRW      X
   \   0000DA 97                    LD        XL, A
   \   0000DB 89                    PUSHW     X
   \   0000DC BE00                  LDW       X, S:?w4
   \   0000DE 5C                    INCW      X
   \   0000DF F6                    LD        A, (X)
   \   0000E0 5F                    CLRW      X
   \   0000E1 97                    LD        XL, A
   \   0000E2 89                    PUSHW     X
   \   0000E3 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000E6 8D000000              CALLF     printf
   \   0000EA 5B04                  ADD       SP, #0x4
   \   0000EC 200F                  JRA       L:??ProgramMenu_10
   1971                         else printf("\n  :%02d",programpoint[program_number].onminute);
   \                     ??ProgramMenu_9:
   \   0000EE 92C600                LD        A, [S:?w6.w]
   \   0000F1 5F                    CLRW      X
   \   0000F2 97                    LD        XL, A
   \   0000F3 89                    PUSHW     X
   \   0000F4 AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0000F7 8D000000              CALLF     printf
   \   0000FB 5B02                  ADD       SP, #0x2
   1972                       programpoint[program_number].onhour =adj(0,23,programpoint[program_number].onhour);
   \                     ??ProgramMenu_10:
   \   0000FD BE00                  LDW       X, S:?w4
   \   0000FF 5C                    INCW      X
   \   000100 F6                    LD        A, (X)
   \   000101 B700                  LD        S:?b1, A
   \   000103 35170000              MOV       S:?b0, #0x17
   \   000107 8D000000              CALLF     ??Subroutine78_0
   1973                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_215:
   \   00010B BE00                  LDW       X, S:?w4
   \   00010D 5C                    INCW      X
   \   00010E F7                    LD        (X), A
   \   00010F 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_188:
   \   000113 2406                  JRNC      L:??ProgramMenu_11
   \   000115 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_95:
   \   000119 27B2                  JREQ      L:??ProgramMenu_8
   1974          
   1975                        //Set On Minute
   1976                      //ClearLine1();
   1977                      //line_lcd=0;
   1978                      //printf("\nMin On>");
   1979                     // printf("\nP%d%s",program_number," On");
   1980                      timer3=0;
   \                     ??ProgramMenu_11:
   \   00011B 5F                    CLRW      X
   \   00011C CF0000                LDW       L:timer3, X
   1981                    do
   1982                      {
   1983                       line_lcd=1;
   \                     ??ProgramMenu_12:
   \   00011F 35010000              MOV       L:line_lcd, #0x1
   \   000123 BE00                  LDW       X, S:?w4
   \   000125 5C                    INCW      X
   \   000126 F6                    LD        A, (X)
   \   000127 5F                    CLRW      X
   \   000128 97                    LD        XL, A
   \   000129 9093                  LDW       Y, X
   \   00012B C60000                LD        A, L:blink_flag
   \   00012E 2712                  JREQ      L:??ProgramMenu_13
   1984                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   000130 92C600                LD        A, [S:?w6.w]
   \   000133 97                    LD        XL, A
   \   000134 89                    PUSHW     X
   \   000135 9089                  PUSHW     Y
   \   000137 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00013A 8D000000              CALLF     printf
   \   00013E 5B04                  ADD       SP, #0x4
   \   000140 200B                  JRA       L:??ProgramMenu_14
   1985                         else  printf("\n%02d:  ",programpoint[program_number].onhour);
   \                     ??ProgramMenu_13:
   \   000142 9089                  PUSHW     Y
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B02                  ADD       SP, #0x2
   1986                           programpoint[program_number].onminute=adj(0,59,programpoint[program_number].onminute);
   \                     ??ProgramMenu_14:
   \   00014D 92C600                LD        A, [S:?w6.w]
   \   000150 B700                  LD        S:?b1, A
   \   000152 353B0000              MOV       S:?b0, #0x3b
   \   000156 8D000000              CALLF     ?Subroutine26
   1987                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_52:
   \   00015A 2406                  JRNC      L:??ProgramMenu_15
   \   00015C 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_96:
   \   000160 27BD                  JREQ      L:??ProgramMenu_12
   1988          
   1989          
   1990                     // Set Off Hour
   1991          
   1992                     ClearLine1();
   \                     ??ProgramMenu_15:
   \   000162 8D000000              CALLF     ?Subroutine41
   1993                     line_lcd=0;
   1994                     printf("\nP%d%s",program_number," Off");
   \                     ??CrossCallReturnLabel_106:
   \   000166 4B00                  PUSH      #BYTE1(`?<Constant " Off">`)
   \   000168 4B00                  PUSH      #BYTE2(`?<Constant " Off">`)
   \   00016A 8D000000              CALLF     L:?push_w7
   \   00016E AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   000171 8D000000              CALLF     printf
   \   000175 5B04                  ADD       SP, #0x4
   1995                     timer3=0;
   \   000177 5F                    CLRW      X
   \   000178 CF0000                LDW       L:timer3, X
   \   00017B BE00                  LDW       X, S:?w4
   \   00017D 1C0003                ADDW      X, #0x3
   \   000180 BF00                  LDW       S:?w6, X
   \   000182 BE00                  LDW       X, S:?w4
   \   000184 1C0004                ADDW      X, #0x4
   \   000187 BF00                  LDW       S:?w4, X
   1996                     do
   1997                      {
   1998                       line_lcd=1;
   \                     ??ProgramMenu_16:
   \   000189 35010000              MOV       L:line_lcd, #0x1
   1999                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   00018D C60000                LD        A, L:blink_flag
   \   000190 2716                  JREQ      L:??ProgramMenu_17
   \   000192 92C600                LD        A, [S:?w4.w]
   \   000195 5F                    CLRW      X
   \   000196 97                    LD        XL, A
   \   000197 89                    PUSHW     X
   \   000198 92C600                LD        A, [S:?w6.w]
   \   00019B 97                    LD        XL, A
   \   00019C 89                    PUSHW     X
   \   00019D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001A0 8D000000              CALLF     printf
   \   0001A4 5B04                  ADD       SP, #0x4
   \   0001A6 200F                  JRA       L:??ProgramMenu_18
   2000                         else printf("\n  :%02d",programpoint[program_number].offminute);
   \                     ??ProgramMenu_17:
   \   0001A8 92C600                LD        A, [S:?w4.w]
   \   0001AB 5F                    CLRW      X
   \   0001AC 97                    LD        XL, A
   \   0001AD 89                    PUSHW     X
   \   0001AE AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0001B1 8D000000              CALLF     printf
   \   0001B5 5B02                  ADD       SP, #0x2
   2001                       programpoint[program_number].offhour =adj(0,23,programpoint[program_number].offhour);
   \                     ??ProgramMenu_18:
   \   0001B7 92C600                LD        A, [S:?w6.w]
   \   0001BA B700                  LD        S:?b1, A
   \   0001BC 35170000              MOV       S:?b0, #0x17
   \   0001C0 8D000000              CALLF     ?Subroutine26
   2002                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_53:
   \   0001C4 2406                  JRNC      L:??ProgramMenu_19
   \   0001C6 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_97:
   \   0001CA 27BD                  JREQ      L:??ProgramMenu_16
   2003          
   2004                    //Set Off Minute
   2005          
   2006                    timer3=0;
   \                     ??ProgramMenu_19:
   \   0001CC 5F                    CLRW      X
   \   0001CD CF0000                LDW       L:timer3, X
   2007                    do
   2008                      {
   2009                       line_lcd=1;
   \                     ??ProgramMenu_20:
   \   0001D0 35010000              MOV       L:line_lcd, #0x1
   \   0001D4 92C600                LD        A, [S:?w6.w]
   \   0001D7 5F                    CLRW      X
   \   0001D8 97                    LD        XL, A
   \   0001D9 9093                  LDW       Y, X
   \   0001DB C60000                LD        A, L:blink_flag
   \   0001DE 2712                  JREQ      L:??ProgramMenu_21
   2010                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   0001E0 92C600                LD        A, [S:?w4.w]
   \   0001E3 97                    LD        XL, A
   \   0001E4 89                    PUSHW     X
   \   0001E5 9089                  PUSHW     Y
   \   0001E7 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001EA 8D000000              CALLF     printf
   \   0001EE 5B04                  ADD       SP, #0x4
   \   0001F0 200B                  JRA       L:??ProgramMenu_22
   2011                         else  printf("\n%02d:  ",programpoint[program_number].offhour);
   \                     ??ProgramMenu_21:
   \   0001F2 9089                  PUSHW     Y
   \   0001F4 AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   0001F7 8D000000              CALLF     printf
   \   0001FB 5B02                  ADD       SP, #0x2
   2012                           programpoint[program_number].offminute=adj(0,59,programpoint[program_number].offminute);
   \                     ??ProgramMenu_22:
   \   0001FD 92C600                LD        A, [S:?w4.w]
   \   000200 8D000000              CALLF     ?Subroutine28
   2013                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_219:
   \   000204 92C700                LD        [S:?w4.w], A
   \   000207 8D000000              CALLF     ?Subroutine70
   2014          
   2015                  }
   \                     ??CrossCallReturnLabel_189:
   \   00020B 2406                  JRNC      L:??ProgramMenu_7
   \   00020D 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_98:
   \   000211 27BD                  JREQ      L:??ProgramMenu_20
   2016          
   2017          
   2018                   program_number++;
   \                     ??ProgramMenu_7:
   \   000213 B600                  LD        A, S:?b10
   \   000215 4C                    INC       A
   \   000216 B700                  LD        S:?b10, A
   2019          
   2020          
   2021          
   2022          
   2023          
   2024          
   2025          
   2026          
   2027                 } while ( (program_number < 8) && (button!=0));
   \   000218 A108                  CP        A, #0x8
   \   00021A 2408                  JRNC      L:??ProgramMenu_23
   \   00021C C60000                LD        A, L:button
   \   00021F 2703                  JREQ      ??lb_1
   \   000221 CC0000                JP        L:??ProgramMenu_0
   2028          
   2029                   SaveProgram();
   \                     ??lb_1:
   \                     ??ProgramMenu_23:
   \   000224 8D000000              CALLF     SaveProgram
   2030          
   2031          
   2032          }
   \                     ??ProgramMenu_6:
   \   000228 320000                POP       S:?b10
   \   00022B 8D000000              CALLF     L:?pop_w4
   \   00022F 8D000000              CALLF     L:?pop_l3
   \   000233 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 5F                    CLRW      X
   \   000004 97                    LD        XL, A
   \   000005 58                    SLLW      X
   \   000006 DE0000                LDW       X, (L:day_week,X)
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     adj
   \   000005 92C700                LD        [S:?w6.w], A
   \   000008 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_190:
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF
   2033          
   2034          
   2035          

   \                                 In section .far_func.text, align 1, keep-with-next
   2036          void pressKey(void)
   2037          {
   2038             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2039             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2040             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine32
   2041             lcdLedTimer=LCDLEDON;
   2042             do
   2043             {
   2044                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_75:
   \   00000C 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_94:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2045                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2046                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2047             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_187:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_75
   2048          
   2049              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2050          
   2051             //return button;
   2052          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2053          
   2054          
   2055          
   2056          

   \                                 In section .far_func.text, align 1, keep-with-next
   2057          bool InputDataProgram(bool smart )
   2058          {
   \                     InputDataProgram:
   \   000000 8D000000              CALLF     L:?push_l2
   \   000004 B700                  LD        S:?b11, A
   2059             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000006 3F00                  CLR       S:?b8
   \   000008 35010000              MOV       S:?b10, #0x1
   \   00000C 35010000              MOV       S:?b9, #0x1
   2060             int yy;
   2061          
   2062                   //Clear Display
   2063             LCDInstr(0x01);
   \   000010 8D000000              CALLF     ?Subroutine15
   2064             Delay1(1000);
   2065             line_lcd=0;
   2066             printf("\nYear>");
   \                     ??CrossCallReturnLabel_209:
   \   000014 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000017 8D000000              CALLF     printf
   2067             y=year;
   \   00001B C60000                LD        A, L:year
   \   00001E C70000                LD        L:`y`, A
   2068             m=month;
   \   000021 C60000                LD        A, L:month
   \   000024 C70000                LD        L:m, A
   2069             d=date;
   \   000027 C60000                LD        A, L:`date`
   \   00002A C70000                LD        L:d, A
   2070                do
   2071              {
   2072               line_lcd=1;
   \                     ??InputDataProgram_0:
   \   00002D 35010000              MOV       L:line_lcd, #0x1
   2073               if(blink_flag)printf("\n%02d:%02d:%02d",y,m,d);
   \   000031 C60000                LD        A, L:m
   \   000034 905F                  CLRW      Y
   \   000036 9097                  LD        YL, A
   \   000038 C60000                LD        A, L:d
   \   00003B 5F                    CLRW      X
   \   00003C 97                    LD        XL, A
   \   00003D C60000                LD        A, L:blink_flag
   \   000040 89                    PUSHW     X
   \   000041 9089                  PUSHW     Y
   \   000043 2710                  JREQ      L:??InputDataProgram_1
   \   000045 C60000                LD        A, L:`y`
   \   000048 97                    LD        XL, A
   \   000049 89                    PUSHW     X
   \   00004A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00004D 8D000000              CALLF     printf
   \   000051 5B06                  ADD       SP, #0x6
   \   000053 2009                  JRA       L:??InputDataProgram_2
   2074                else printf("\n  :%02d:%02d",m,d);
   \                     ??InputDataProgram_1:
   \   000055 AE0000                LDW       X, #`?<Constant "\\n  :%02d:%02d">`
   \   000058 8D000000              CALLF     printf
   \   00005C 5B04                  ADD       SP, #0x4
   2075                 y=adj(0,99,y);
   \                     ??InputDataProgram_2:
   \   00005E C60000                LD        A, L:`y`
   \   000061 B700                  LD        S:?b1, A
   \   000063 35630000              MOV       S:?b0, #0x63
   \   000067 8D000000              CALLF     ??Subroutine78_0
   2076              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_216:
   \   00006B C70000                LD        L:`y`, A
   \   00006E 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_91:
   \   000072 27B9                  JREQ      L:??InputDataProgram_0
   2077                  yy=y+2000;
   \   000074 C60000                LD        A, L:`y`
   \   000077 5F                    CLRW      X
   \   000078 97                    LD        XL, A
   \   000079 1C07D0                ADDW      X, #0x7d0
   \   00007C BF00                  LDW       S:?w0, X
   2078              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00007E 90AE0190              LDW       Y, #0x190
   \   000082 8D000000              CALLF     L:?smod16_y_x_y
   \   000086 905D                  TNZW      Y
   \   000088 271C                  JREQ      L:??InputDataProgram_3
   \   00008A 90AE0064              LDW       Y, #0x64
   \   00008E BE00                  LDW       X, S:?w0
   \   000090 8D000000              CALLF     L:?smod16_y_x_y
   \   000094 905D                  TNZW      Y
   \   000096 2712                  JREQ      L:??InputDataProgram_4
   \   000098 90AE0004              LDW       Y, #0x4
   \   00009C BE00                  LDW       X, S:?w0
   \   00009E 8D000000              CALLF     L:?smod16_y_x_y
   \   0000A2 905D                  TNZW      Y
   \   0000A4 2604                  JRNE      L:??InputDataProgram_4
   \                     ??InputDataProgram_3:
   \   0000A6 35010000              MOV       S:?b8, #0x1
   2079                  y=yy-2000;
   \                     ??InputDataProgram_4:
   \   0000AA B600                  LD        A, S:?b1
   \   0000AC AB30                  ADD       A, #0x30
   \   0000AE C70000                LD        L:`y`, A
   2080                  if(smart)if(y==year) month_start=month;
   \   0000B1 3D00                  TNZ       S:?b11
   \   0000B3 270D                  JREQ      L:??InputDataProgram_5
   \   0000B5 C60000                LD        A, L:year
   \   0000B8 C10000                CP        A, L:`y`
   \   0000BB 2605                  JRNE      L:??InputDataProgram_5
   \   0000BD C60000                LD        A, L:month
   \   0000C0 B700                  LD        S:?b10, A
   2081               line_lcd=0;
   \                     ??InputDataProgram_5:
   \   0000C2 725F0000              CLR       L:line_lcd
   2082              printf("\nMonth>");
   \   0000C6 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   0000C9 8D000000              CALLF     printf
   2083                do
   2084              {
   2085               line_lcd=1;
   \                     ??InputDataProgram_6:
   \   0000CD 35010000              MOV       L:line_lcd, #0x1
   2086               if(blink_flag) printf("\n%02d:%02d:%02d",y,m,d);
   \   0000D1 C60000                LD        A, L:`y`
   \   0000D4 5F                    CLRW      X
   \   0000D5 97                    LD        XL, A
   \   0000D6 C60000                LD        A, L:d
   \   0000D9 905F                  CLRW      Y
   \   0000DB 9097                  LD        YL, A
   \   0000DD C60000                LD        A, L:blink_flag
   \   0000E0 9089                  PUSHW     Y
   \   0000E2 2713                  JREQ      L:??InputDataProgram_7
   \   0000E4 C60000                LD        A, L:m
   \   0000E7 9097                  LD        YL, A
   \   0000E9 9089                  PUSHW     Y
   \   0000EB 89                    PUSHW     X
   \   0000EC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EF 8D000000              CALLF     printf
   \   0000F3 5B06                  ADD       SP, #0x6
   \   0000F5 200A                  JRA       L:??InputDataProgram_8
   2087                else printf("\n%02d:  :%02d",y,d);
   \                     ??InputDataProgram_7:
   \   0000F7 89                    PUSHW     X
   \   0000F8 AE0000                LDW       X, #`?<Constant "\\n%02d:  :%02d">`
   \   0000FB 8D000000              CALLF     printf
   \   0000FF 5B04                  ADD       SP, #0x4
   2088                m=adj(month_start,12,m);
   \                     ??InputDataProgram_8:
   \   000101 C60000                LD        A, L:m
   \   000104 B700                  LD        S:?b1, A
   \   000106 350C0000              MOV       S:?b0, #0xc
   \   00010A B600                  LD        A, S:?b10
   \   00010C 8D000000              CALLF     adj
   \   000110 C70000                LD        L:m, A
   2089              } while (!key_ok_on());
   \   000113 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_92:
   \   000117 27B4                  JREQ      L:??InputDataProgram_6
   2090          
   2091              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   000119 C60000                LD        A, L:m
   \   00011C A101                  CP        A, #0x1
   \   00011E 2718                  JREQ      L:??InputDataProgram_9
   \   000120 A103                  CP        A, #0x3
   \   000122 2714                  JREQ      L:??InputDataProgram_9
   \   000124 A105                  CP        A, #0x5
   \   000126 2710                  JREQ      L:??InputDataProgram_9
   \   000128 A107                  CP        A, #0x7
   \   00012A 270C                  JREQ      L:??InputDataProgram_9
   \   00012C A108                  CP        A, #0x8
   \   00012E 2708                  JREQ      L:??InputDataProgram_9
   \   000130 A10A                  CP        A, #0xa
   \   000132 2704                  JREQ      L:??InputDataProgram_9
   \   000134 A10C                  CP        A, #0xc
   \   000136 2606                  JRNE      L:??InputDataProgram_10
   \                     ??InputDataProgram_9:
   \   000138 351F0000              MOV       S:?b8, #0x1f
   \   00013C 2024                  JRA       L:??InputDataProgram_11
   2092               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??InputDataProgram_10:
   \   00013E A104                  CP        A, #0x4
   \   000140 270C                  JREQ      L:??InputDataProgram_12
   \   000142 A106                  CP        A, #0x6
   \   000144 2708                  JREQ      L:??InputDataProgram_12
   \   000146 A109                  CP        A, #0x9
   \   000148 2704                  JREQ      L:??InputDataProgram_12
   \   00014A A10B                  CP        A, #0xb
   \   00014C 2606                  JRNE      L:??InputDataProgram_13
   \                     ??InputDataProgram_12:
   \   00014E 351E0000              MOV       S:?b8, #0x1e
   \   000152 200E                  JRA       L:??InputDataProgram_11
   2093                else
   2094                 {
   2095                   if(leap) date_end=29;
   \                     ??InputDataProgram_13:
   \   000154 3D00                  TNZ       S:?b8
   \   000156 2706                  JREQ      L:??InputDataProgram_14
   \   000158 351D0000              MOV       S:?b8, #0x1d
   \   00015C 2004                  JRA       L:??InputDataProgram_11
   2096                    else date_end=28;
   \                     ??InputDataProgram_14:
   \   00015E 351C0000              MOV       S:?b8, #0x1c
   2097                 }
   2098                if(smart)if( y==year && m==month) date_start=d;
   \                     ??InputDataProgram_11:
   \   000162 3D00                  TNZ       S:?b11
   \   000164 2715                  JREQ      L:??InputDataProgram_15
   \   000166 C60000                LD        A, L:year
   \   000169 C10000                CP        A, L:`y`
   \   00016C 260D                  JRNE      L:??InputDataProgram_15
   \   00016E C60000                LD        A, L:month
   \   000171 C10000                CP        A, L:m
   \   000174 2605                  JRNE      L:??InputDataProgram_15
   \   000176 C60000                LD        A, L:d
   \   000179 B700                  LD        S:?b9, A
   2099              LCDInstr(0x01);
   \                     ??InputDataProgram_15:
   \   00017B 8D000000              CALLF     ?Subroutine15
   2100               Delay1(1000);
   2101                line_lcd=0;
   2102              printf("\nDate>");
   \                     ??CrossCallReturnLabel_210:
   \   00017F AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000182 8D000000              CALLF     printf
   2103                do
   2104              {
   2105               line_lcd=1;
   \                     ??InputDataProgram_16:
   \   000186 35010000              MOV       L:line_lcd, #0x1
   2106               if(blink_flag) printf("\n%02d:%02d:%02d",y,m,d);
   \   00018A C60000                LD        A, L:`y`
   \   00018D 5F                    CLRW      X
   \   00018E 97                    LD        XL, A
   \   00018F C60000                LD        A, L:m
   \   000192 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_89:
   \   000196 2717                  JREQ      L:??InputDataProgram_17
   \   000198 C60000                LD        A, L:d
   \   00019B 9097                  LD        YL, A
   \   00019D 9089                  PUSHW     Y
   \   00019F 8D000000              CALLF     L:?push_w0
   \   0001A3 89                    PUSHW     X
   \   0001A4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0001A7 8D000000              CALLF     printf
   \   0001AB 5B06                  ADD       SP, #0x6
   \   0001AD 200E                  JRA       L:??InputDataProgram_18
   2107                else printf("\n%02d:%02d:  ",y,m);
   \                     ??InputDataProgram_17:
   \   0001AF 8D000000              CALLF     L:?push_w0
   \   0001B3 89                    PUSHW     X
   \   0001B4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:  ">`
   \   0001B7 8D000000              CALLF     printf
   \   0001BB 5B04                  ADD       SP, #0x4
   2108                 d=adj(date_start,date_end,d);
   \                     ??InputDataProgram_18:
   \   0001BD C60000                LD        A, L:d
   \   0001C0 B700                  LD        S:?b1, A
   \   0001C2 450000                MOV       S:?b0, S:?b8
   \   0001C5 B600                  LD        A, S:?b9
   \   0001C7 8D000000              CALLF     adj
   \   0001CB C70000                LD        L:d, A
   2109              } while (!key_ok_on());
   \   0001CE 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_93:
   \   0001D2 27B2                  JREQ      L:??InputDataProgram_16
   2110          
   2111            return TRUE;
   \   0001D4 A601                  LD        A, #0x1
   \   0001D6 AC000000              JPF       L:?epilogue_l2
   2112          }
   2113          
   2114          

   \                                 In section .far_func.text, align 1, keep-with-next
   2115          void initBeep(void)
   2116          {
   2117            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2118            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2119             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2120               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2121             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2122          
   2123          }
   2124          

   \                                 In section .far_func.text, align 1, keep-with-next
   2125          void beep(u16 Interval)
   2126          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2127          
   2128           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2129               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2130            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2131          
   2132          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2133          

   \                                 In section .far_func.text, align 1, keep-with-next
   2134           PUTCHAR_PROTOTYPE
   2135          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2136            /* Place your implementation of fputc here */
   2137            /* e.g. write a character to the USART */
   2138                //USART_SendData(USART3, (u8) ch);
   2139               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2140             /* Loop until the end of transmission */
   2141              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2142            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2143          }
   2144          
   2145           #ifdef USE_FULL_ASSERT
   2146          
   2147          /**
   2148            * @brief  Reports the name of the source file and the source line number
   2149            *   where the assert_param error has occurred.
   2150            * @param file: pointer to the source file name
   2151            * @param line: assert_param error line source number
   2152            * @retval : None
   2153            */

   \                                 In section .far_func.text, align 1
   2154          void assert_failed(u8* file, u32 line)
   2155          {
   2156            /* User can add his own implementation to report the file name and line number,
   2157               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2158          
   2159            /* Infinite loop */
   2160            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2161            {
   2162          
   2163            }
   2164          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Off">`:
   \   000000 204F666600            DC8 " Off"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Sun">`:
   \   000000 2053756E00            DC8 " Sun"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Mon">`:
   \   000000 204D6F6E00            DC8 " Mon"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Tues">`:
   \   000000 205475657300          DC8 " Tues"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Wednes">`:
   \   000000 205765646E65          DC8 " Wednes"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Thurs">`:
   \   000000 205468757273          DC8 " Thurs"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Fri">`:
   \   000000 2046726900            DC8 " Fri"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Satur">`:
   \   000000 205361747572          DC8 " Satur"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Daily">`:
   \   000000 204461696C79          DC8 " Daily"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Month">`:
   \   000000 204D6F6E7468          DC8 " Month"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nPrgClear">`:
   \   000000 0A507267436C          DC8 "\012PrgClear"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetDate">`:
   \   000000 0A5365744461          DC8 "\012SetDate"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSh Date">`:
   \   000000 0A5368204461          DC8 "\012Sh Date"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit">`:
   \   000000 0A4578697400          DC8 "\012Exit"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMenu +/-">`:
   \   000000 0A4D656E7520          DC8 "\012Menu +/-"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%s">`:
   \   000000 0A257300              DC8 "\012%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-">`:
   \   000000 0A2B2F2D00            DC8 "\012+/-"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClear">`:
   \   000000 0A436C656172          DC8 "\012Clear"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nall prog">`:
   \   000000 0A616C6C2070          DC8 "\012all prog"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nError">`:
   \   000000 0A4572726F72          DC8 "\012Error"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDay is">`:
   \   000000 0A4461792069          DC8 "\012Day is"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d:%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  :%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nP%d%s">`:
   \   000000 0A5025642573          DC8 "\012P%d%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " On">`:
   \   000000 204F6E00              DC8 " On"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"
   2165          #endif
   2166          
   2167          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
   2168          
   2169          
   2170             /*
   2171          
   2172          void Menu (void)
   2173          {
   2174           // Clear Display
   2175              LCDInstr(0x01); //Clear LCD
   2176              Delay1(250);
   2177              //u8 key;
   2178           // First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   2179              Wait for Plus,Minius or OK
   2180              If plus next option from Menu on the end EXIT
   2181              If minus previous option from Menu  on the end EXIT
   2182              If OK enter to menu option
   2183              If time out about 10s exit from Menu
   2184           //
   2185          
   2186          
   2187          
   2188          
   2189          
   2190          
   2191              do {
   2192          
   2193          First_Menu:
   2194              line_lcd=0;
   2195              printf("\nON      ");
   2196              line_lcd=1;
   2197              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   2198               pressKey();
   2199              switch (button)
   2200                  {
   2201                  case 1: goto Second_Menu ;
   2202                   break;
   2203                  case 2: Set_Timer_On();
   2204                   break;
   2205                  case 3: goto Exit_Menu;
   2206                   break;
   2207                  }
   2208                  break; //Exit Menu
   2209          
   2210          
   2211          Second_Menu:
   2212              line_lcd=0;
   2213              printf("\nOFF     ");
   2214              line_lcd=1;
   2215              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   2216                pressKey();
   2217                switch (button)
   2218                  {
   2219                  case 1: goto Third_Menu ;
   2220                   break;
   2221                  case 2: Set_Timer_Off();
   2222                   break;
   2223                  case 3: goto First_Menu;
   2224                   break;
   2225                  }
   2226               break; //Exit Menu
   2227          
   2228          Third_Menu:
   2229                line_lcd=0;
   2230              printf("\nMonthly ");
   2231              line_lcd=1;
   2232              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   2233                pressKey();
   2234                switch (button)
   2235                  {
   2236                  case 1: goto Fourth_Menu;
   2237                   break;
   2238                  case 2:
   2239                    {
   2240                     setData();
   2241                     monthly_year=y;
   2242                     monthly_month=m;
   2243                     monthly_date=d;
   2244                     status.monthly=1;
   2245                     status.daily=0;  // Disable Daily Alarm On date enable it
   2246                     status.on=0;     // Power off
   2247                     // Save Status and Date in EEPROM
   2248                     EEPROM_INIT();
   2249                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2250                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2251                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   2252                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   2253                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   2254                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2255                     break;
   2256                    }
   2257                  case 3: goto Second_Menu ;
   2258                   break;
   2259                  }
   2260               break; //Exit Menu
   2261          
   2262          
   2263          Fourth_Menu:
   2264              line_lcd=0;
   2265              printf("\nClock   ");
   2266              line_lcd=1;
   2267              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   2268                pressKey();
   2269                switch (button)
   2270                  {
   2271                  case 1: goto Fifth_Menu ;
   2272                   break;
   2273                  case 2: SetClock();
   2274                   break;
   2275                  case 3: goto Third_Menu;
   2276                   break;
   2277                  }
   2278               break; //Exit Menu
   2279          
   2280          
   2281          Fifth_Menu:
   2282              line_lcd=0;
   2283              printf("\nDate    ");
   2284              line_lcd=1;
   2285              printf("\n%02d:%02d:%02d",year,month,date);
   2286                pressKey();
   2287                switch (button)
   2288                  {
   2289                  case 1: goto Exit_Menu ;
   2290                   break;
   2291                  case 2: SetClock();
   2292                   break;
   2293                  case 3: goto Fourth_Menu;
   2294                   break;
   2295                  }
   2296               break; //Exit Menu
   2297          
   2298          
   2299          Exit_Menu:
   2300              line_lcd=0;
   2301              printf("\nExit OK ");
   2302              line_lcd=1;
   2303              printf("\n+/-     ");
   2304                 pressKey();
   2305                switch (button)
   2306                  {
   2307                  case 1: goto First_Menu;
   2308                   break;
   2309                  case 2:
   2310                   break;
   2311                  case 3: goto Fifth_Menu;
   2312                   break;
   2313                  }
   2314                 break; //Exit Menu
   2315              }    while (1);
   2316              //exit:
   2317             ClearLine1();
   2318             ClearLine2();
   2319          
   2320          }
   2321          
   2322          */
   2323          
   2324          
   2325          /*
   2326          void InitAdc()
   2327          {
   2328               ADC1_DeInit();
   2329               ADC1_StartConversion();
   2330          
   2331               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   2332               //           ADC1_CHANNEL_0,
   2333               //           ADC1_PRESSEL_FCPU_D4,
   2334               //            ADC1_EXTTRIG_TIM,
   2335          
   2336          
   2337               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   2338               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   2339                                      ADC1_CHANNEL_0,
   2340                                      ADC1_ALIGN_RIGHT
   2341                                     );
   2342          
   2343          
   2344               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   2345          
   2346          
   2347               //ADC1_Cmd (ENABLE);
   2348               //ADC1->CR1 |= ADC1_CR1_ADON ;
   2349               ADC1_StartConversion();
   2350               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   2351          
   2352          }
   2353          */
   2354          
   2355          
   2356          
   2357          /*
   2358          void InitUart()
   2359          {
   2360             UART2_DeInit();
   2361             UART2_Init((u32)9600,
   2362                        UART2_WORDLENGTH_8D,
   2363                        UART2_STOPBITS_1,
   2364                        UART2_PARITY_NO,
   2365                        UART2_SYNCMODE_CLOCK_DISABLE,
   2366                        UART2_MODE_TXRX_ENABLE
   2367                          );
   2368          
   2369             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   2370             UART2_Cmd(ENABLE);
   2371          
   2372            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   2373          }
   2374            */
   2375          
   2376          
   2377          /*
   2378          void SendChar( u8 Char)
   2379          {
   2380             UART2->DR = Char;
   2381            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   2382          }
   2383          
   2384           */
   2385          
   2386           /*
   2387          void Send_Hello()
   2388          {
   2389            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   2390             Delay1(10);
   2391             sprintf(data,"Hello");
   2392              u8 i=0;
   2393            do
   2394           {
   2395            SendChar(data[i++]);
   2396           } while (data[i]!=0);
   2397            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   2398            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   2399          
   2400          
   2401          
   2402          }
   2403          
   2404          
   2405          
   2406          
   2407          
   2408          void SendData()
   2409          {
   2410           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   2411            Delay1(10);
   2412            u8 i=0;
   2413            sprintf(data,"%d %c",adcdata,0x0d);
   2414           do
   2415           {
   2416             SendChar(data[i++]);
   2417          
   2418           } while (data[i]!=0);
   2419             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   2420            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   2421            rx_data=0;
   2422          }
   2423          */
   2424          
   2425          
   2426           /*
   2427          u16 Average()
   2428          {
   2429           //Find average in measure
   2430            u8 i=0;
   2431            u16 Summa=0;
   2432            do
   2433            {
   2434             Summa+=measure[i++];
   2435            } while ( measure[i]!=0);
   2436             if(i!=0) Summa=Summa/i;
   2437             return Summa;
   2438          }
   2439             */

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     program_number                    1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     power                             1
     blink_flag                        1
     blink_time                        2
     key_ok_hold                       1
     rotate_line2                      1
     ptim                             22
     line1                            10
     line2                            10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     day_week                         22
     setup_menu                       10
     status                            2
     hardware                          2
     programpoint                     40
     ?Subroutine32                     5
     ?Subroutine69                     9
     ?Subroutine39                     7
     ??Subroutine80_0                  7
     ?Subroutine74                     8
     ?Subroutine75                    11
     main                            366
     ?Subroutine50                     9
     ?Subroutine49                     7
     ?Subroutine34                    11
     ?Subroutine33                    11
     ?Subroutine12                     9
     ?Subroutine72                     7
     Display                         218
     ?Subroutine37                    16
     Power_On                         14
     ?Subroutine36                    15
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine59                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine62                     1
     ??Subroutine86_0                  7
     ?Subroutine61                     9
     ReadDS1307                      120
     ?Subroutine54                    12
     ?Subroutine27                    11
     ?Subroutine23                    13
     ?Subroutine22                     8
     ?Subroutine68                    10
     Check_DS1307                     78
     Set_DS1307                      109
     ?Subroutine60                    11
     convert_tobcd                    23
     bcd2hex                          23
     ??Subroutine77_0                  9
     ?Subroutine44                    10
     ?Subroutine21                     8
     ?Subroutine67                     6
     SetupMenu                       141
     ?Subroutine42                     9
     ?Subroutine71                     8
     ?Subroutine2                      4
     ??Subroutine84_0                  4
     ??Subroutine85_0                 13
     ?Subroutine47                     9
     ?Subroutine41                     9
     SelectMenu                      229
     ?Subroutine45                     8
     SetData                         199
     ?Subroutine15                     7
     ?Subroutine28                     6
     ??Subroutine78_0                  5
     SetClock                        255
     ?Subroutine38                    11
     adj                              85
     key_ok_on                        81
     ?Subroutine30                    14
     ?Subroutine25                    10
     key_plus_on                      59
     ?Subroutine35                     7
     ?Subroutine31                     7
     ?Subroutine29                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine14                    29
     SaveStatus                       34
     ?Subroutine48                     9
     SaveProgram                      33
     ?Subroutine40                    19
     ReadProgram                      48
     ResetProgram                     33
     CheckProgramPoint               198
     ?Subroutine1                      3
     ??Subroutine83_0                  7
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine58                     9
     ?Subroutine55                     7
     InitClk                          62
     ?Subroutine57                     9
     LCDDataOut                       87
     ?Subroutine9                      7
     ??Subroutine81_0                  5
     ?Subroutine64                     7
     ?Subroutine11                     2
     InitLcd                          89
     ?Subroutine16                    17
     ?Subroutine10                    11
     ?Subroutine0                     13
     ??Subroutine76_0                 10
     ?Subroutine19                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine4                     24
     ??Subroutine82_0                  6
     LCD_Busy                         69
     LCD                             208
     ?Subroutine65                     9
     ??Subroutine79_0                  5
     ?Subroutine20                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine17                     2
     ?Subroutine13                    10
     ?Subroutine66                     9
     DS18_Read                        74
     ?Subroutine18                    12
     DS18_Reset                       72
     ?Subroutine53                     7
     temperature                      63
     ?Subroutine52                    15
     ?Subroutine73                     6
     ?Subroutine51                    23
     ?Subroutine3                     21
     Read_DS18                       121
     ?Subroutine56                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     ?Subroutine8                      6
     Display_Line                     49
     ?Subroutine46                    13
     ?Subroutine6                     10
     ?Subroutine63                     4
     DisplayLine2                     53
     Rotate_Line                      19
     ClearLine1                       19
     ?Subroutine7                     13
     ?Subroutine5                     12
     ClearLine2                       19
     FirstMenu                       115
     ?Subroutine24                     9
     ProgramMenu                     564
     ?Subroutine43                    10
     ?Subroutine26                    13
     ?Subroutine70                     7
     pressKey                         74
     InputDataProgram                474
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant " Off">                5
     ?<Constant " Sun">                5
     ?<Constant " Mon">                5
     ?<Constant " Tues">               6
     ?<Constant " Wednes">             8
     ?<Constant " Thurs">              7
     ?<Constant " Fri">                5
     ?<Constant " Satur">              7
     ?<Constant " Daily">              7
     ?<Constant " Month">              7
     ?<Constant "\nPrgClear">         10
     ?<Constant "\nSetClock">         10
     ?<Constant "\nSetDate">           9
     ?<Constant "\nSh Date">           9
     ?<Constant "\nExit">              6
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nMenu +/-">         10
     ?<Constant "\n%s">                4
     ?<Constant "\n+/-">               5
     ?<Constant "\nClear">             7
     ?<Constant "\nall prog">         10
     ?<Constant "\nError">             7
     ?<Constant "\nDay is">            8
     ?<Constant "\nHour>">             7
     ?<Constant "\n  :%02d:%02d">     14
     ?<Constant "\nMinute>">           9
     ?<Constant "\n%02d:  :%02d">     14
     ?<Constant "\nSeconds>">         10
     ?<Constant "\n%02d:%02d:  ">     14
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nP%d%s">             7
     ?<Constant " On">                 4
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\n  :%02d">           9
     ?<Constant "\n%02d:  ">           9
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7

 
 6 260 bytes in section .far_func.text
   149 bytes in section .near.bss
    35 bytes in section .near.data
   389 bytes in section .near.rodata
 
 6 260 bytes of CODE  memory
   389 bytes of CONST memory
   184 bytes of DATA  memory

Errors: none
Warnings: none
