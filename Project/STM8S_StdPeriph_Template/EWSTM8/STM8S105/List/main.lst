###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             21/Jul/2013  23:42:52 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56          
     57          #ifdef __GNUC__
     58            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     59               set to 'Yes') calls __io_putchar() */
     60            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     61          #else
     62            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     63          #endif /* __GNUC__ */
     64          
     65          
     66          
     67          
     68          #define SpecialSymbol 0x1b //Esc to start message
     69          #define data_size 20
     70          #define key_time 8000
     71          #define key_time_ok 15000
     72          #define DS_Control  0x10  // Out 1s
     73          #define EEPROM_ADDR 0x4000
     74          
     75          
     76          
     77          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     78          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     79          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     80          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     81          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     82          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     83          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     84          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     85          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     86          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     87          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     88          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     89          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
     90          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     91          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
     92          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
     93          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     94          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     95          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     96          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     97          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     98          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     99          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    100          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    101          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2
    102          //u8 index=0;

   \                                 In section .near.bss, align 1
    103          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    104          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    105          
    106          
    107          
    108          
    109          
    110          
    111          
    112          
    113          /* Private function prototypes -----------------------------------------------*/
    114          void InitHardware();
    115          void GpioConfiguration();
    116          void InitClk();
    117          void InitAdc();
    118          void InitI2C();
    119          void EEPROM_INIT();
    120          bool ReadDS1307();
    121          //void InitUart();
    122          void InitLcd();
    123          void InitDelayTimer();
    124          void Delay1( u16 Delay);
    125          void Delay2( u16 Delay);
    126          void LCDInstrNibble (u8 Instr);
    127          void LCDInstr(u8 Instr);
    128          void LCDDataOut(u8 data);
    129          void LCD_Busy();
    130          void PulseEnable();
    131          //void SendData();
    132          void SendChar(u8 Char);
    133          //void Send_Hello();
    134          bool Set_Clock();
    135          bool key_ok_on();
    136          bool key_plus_on();
    137          bool key_minus_on();
    138          bool key_ok_plus();
    139          bool Init_DS1307(void);
    140          bool Check_DS1307(void);
    141          bool I2C_Start(void);
    142          bool I2C_WA(u8 address);
    143          bool I2C_WD(u8 data);
    144          bool I2C_RA(u8 address);
    145          bool Set_DS1307();
    146          bool Set_Delay_Allarm();
    147          bool Read_Allarm();
    148          u8 convert_tobcd(u8 data);
    149          u8 I2C_RD(void);
    150          u8 adj(u8 min,u8 max,u8 now);
    151          u8 bcd2hex(u8 bcd);
    152          
    153          u16  Average();
    154          
    155          
    156          /* Private functions ---------------------------------------------------------*/
    157          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    158          void main(void)
    159          {
    160              /*High speed internal clock prescaler: 1*/
    161              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    162          
    163              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    164              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    165              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    166              //InitUart();
    167              enableInterrupts();
   \   00000C 9A                    RIM
    168              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   00000D A680                  LD        A, #0x80
   \   00000F AE500F                LDW       X, #0x500f
   \   000012 8D000000              CALLF     GPIO_WriteLow
    169              InitLcd();
   \   000016 8D000000              CALLF     InitLcd
    170              InitAdc();
   \   00001A 8D000000              CALLF     InitAdc
    171              InitI2C();
   \   00001E 8D000000              CALLF     InitI2C
    172              Read_Allarm();
   \   000022 8D000000              CALLF     Read_Allarm
    173              //years=bcd2hex(13);
    174              Delay1(1000);
   \   000026 AE03E8                LDW       X, #0x3e8
   \   000029 8D000000              CALLF     Delay1
    175               if (!ReadDS1307())
   \   00002D 8D000000              CALLF     ReadDS1307
   \   000031 A100                  CP        A, #0x0
   \   000033 2615                  JRNE      L:??main_0
    176               {
    177                 printf("\n E2:%d",error);
   \   000035 C60000                LD        A, L:error
   \   000038 5F                    CLRW      X
   \   000039 97                    LD        XL, A
   \   00003A 89                    PUSHW     X
   \   00003B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00003E 8D000000              CALLF     printf
   \   000042 5B02                  ADD       SP, #0x2
    178                 // Reset the CPU: Enable the watchdog and wait until it expires
    179                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000044 35CC50E0              MOV       L:0x50e0, #0xcc
    180                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_1:
   \   000048 20FE                  JRA       L:??main_1
    181               }
    182               //Send_Hello();
    183              //line_lcd=0;
    184              //printf("\nHello");
    185          
    186          
    187              if (!Check_DS1307())
   \                     ??main_0:
   \   00004A 8D000000              CALLF     Check_DS1307
   \   00004E A100                  CP        A, #0x0
   \   000050 2676                  JRNE      L:??main_2
    188              {
    189                 if (error!=0)
   \   000052 C60000                LD        A, L:error
   \   000055 2712                  JREQ      L:??main_3
    190                 {
    191                  printf("\n E:%d",error);
   \   000057 5F                    CLRW      X
   \   000058 97                    LD        XL, A
   \   000059 89                    PUSHW     X
   \   00005A AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00005D 8D000000              CALLF     printf
   \   000061 5B02                  ADD       SP, #0x2
    192                   while (!key_ok_on());
   \                     ??main_4:
   \   000063 8D000000              CALLF     ?Subroutine25
    193          
    194                 }
   \                     ??CrossCallReturnLabel_85:
   \   000067 27FA                  JREQ      L:??main_4
    195               line_lcd=0;
   \                     ??main_3:
   \   000069 725F0000              CLR       L:line_lcd
    196               printf("\nSetClock");
   \   00006D AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000070 8D000000              CALLF     printf
    197                Set_Clock();
   \   000074 8D000000              CALLF     Set_Clock
   \   000078 204E                  JRA       L:??main_2
    198          
    199              }
    200          
    201          
    202               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    203          
    204               // Working fuction
    205              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    206          
    207              while(1)
    208              {
    209                ADC1_Cmd (ENABLE);
    210          
    211                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    212                   Delay2(10000);
    213                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    214                   Delay2(10000);
    215          
    216                line_lcd=0;
    217               if (!ReadDS1307())
    218               {
    219                 printf("\n E2:%d",error);
    220                  //restart i2c
    221                // Reset the CPU: Enable the watchdog and wait until it expires
    222                 IWDG->KR = IWDG_KEY_ENABLE;
    223                 while ( 1 );    // Wait until reset occurs from IWDG
    224          
    225          
    226               }
    227                 else  printf("\n      ");
   \                     ??main_5:
   \   00007A AE0000                LDW       X, #`?<Constant "\\n      ">`
   \   00007D 8D000000              CALLF     printf
    228               line_lcd=1;
   \   000081 8D000000              CALLF     ?Subroutine14
    229               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_49:
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:minutes
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B C60000                LD        A, L:hours
   \   00008E 97                    LD        XL, A
   \   00008F 89                    PUSHW     X
   \   000090 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000093 8D000000              CALLF     printf
   \   000097 5B06                  ADD       SP, #0x6
    230               //line_lcd=2;
    231               //printf("\n Just Test:%X", timer2);
    232                   //if (rx_data==SpecialSymbol) SendData();
    233                //SendData();
    234          
    235                if (key_ok_on())
   \   000099 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_86:
   \   00009D 271D                  JREQ      L:??main_6
    236                {
    237                  line_lcd=0;
   \   00009F 725F0000              CLR       L:line_lcd
    238                  printf("\n%02d:%02d:%02d",years,mounts,date);
   \   0000A3 C60000                LD        A, L:`date`
   \   0000A6 5F                    CLRW      X
   \   0000A7 97                    LD        XL, A
   \   0000A8 89                    PUSHW     X
   \   0000A9 C60000                LD        A, L:mounts
   \   0000AC 97                    LD        XL, A
   \   0000AD 89                    PUSHW     X
   \   0000AE C60000                LD        A, L:years
   \   0000B1 97                    LD        XL, A
   \   0000B2 89                    PUSHW     X
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B6 8D000000              CALLF     printf
   \   0000BA 5B06                  ADD       SP, #0x6
    239                }
    240          
    241                if(key_ok_plus())
   \                     ??main_6:
   \   0000BC 8D000000              CALLF     key_ok_plus
   \   0000C0 A100                  CP        A, #0x0
   \   0000C2 2704                  JREQ      L:??main_2
    242                {
    243                 //Set Daily Allarm
    244                  Set_Delay_Allarm();
   \   0000C4 8D000000              CALLF     Set_Delay_Allarm
    245                }
   \                     ??main_2:
   \   0000C8 A601                  LD        A, #0x1
   \   0000CA 8D000000              CALLF     ADC1_Cmd
   \   0000CE 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_51:
   \   0000D2 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_50:
   \   0000D6 725F0000              CLR       L:line_lcd
   \   0000DA 8D000000              CALLF     ReadDS1307
   \   0000DE A100                  CP        A, #0x0
   \   0000E0 2698                  JRNE      L:??main_5
   \   0000E2 C60000                LD        A, L:error
   \   0000E5 5F                    CLRW      X
   \   0000E6 97                    LD        XL, A
   \   0000E7 89                    PUSHW     X
   \   0000E8 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   0000EB 8D000000              CALLF     printf
   \   0000EF 5B02                  ADD       SP, #0x2
   \   0000F1 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_7:
   \   0000F5 20FE                  JRA       L:??main_7
    246          
    247          
    248          
    249          
    250              }
    251          
    252          
    253          
    254          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine15:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE2710                LDW       X, #0x2710
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine14:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    255          

   \                                 In section .far_func.text, align 1, keep-with-next
    256          void InitI2C(void)
    257          {
    258             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    259             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    260             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    261          }
    262          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    263          bool I2C_Start(void)
    264          {
    265             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    266                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    267              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_96:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    268                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    269                  {
    270                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    271                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    272                  }
    273                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    274          }
    275          

   \                                 In section .far_func.text, align 1, keep-with-next
    276          bool I2C_WA(u8 address)
    277          {
    278            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    279                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    280                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_95:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    281                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    282                   {
    283                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    284                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    285                   }
    286                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    287          }
    288          

   \                                 In section .far_func.text, align 1, keep-with-next
    289          bool I2C_RA(u8 address)
    290          {
    291            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    292                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    293                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_93:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    294                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    295                   {
    296                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    297                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    298                   }
    299                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    300          }
    301          
    302          

   \                                 In section .far_func.text, align 1, keep-with-next
    303          bool I2C_WD(u8 data)
    304          {
    305           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    306             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    307             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_94:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    308              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    309              {
    310                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    311                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    312              }
    313               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    314          }
    315          

   \                                 In section .far_func.text, align 1, keep-with-next
    316          u8 I2C_RD(void)
    317          {
    318           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    319            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    320           //while((!(I2C->SR1 & 0x40))&&timeout);
    321           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    322           {
    323             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    324             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    325           }
    326           u8 data=I2C_ReceiveData();
    327           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    328          }
    329          
    330            /*
    331          bool Init_DS1307(void)
    332          {
    333             // Test DS1307
    334              error=0;
    335              if (!I2C_Start()) return FALSE;
    336              if(!I2C_WA(0xD0)) return FALSE;
    337              if(!I2C_WD(0x00)) return FALSE;
    338              if(!I2C_WD(0x00)) return FALSE;
    339              I2C_GenerateSTOP(ENABLE);
    340          
    341              // timeout=100;  error=4;
    342              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    343              //    if (!timeout)return FALSE ;
    344               return TRUE;
    345          }
    346             */
    347          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    348          bool  ReadDS1307(void)
    349          {
    350                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine27
    351                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_89:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    352                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_92:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    353                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 4F                    CLR       A
   \   00000F 8D000000              CALLF     ??Subroutine39_0
   \                     ??CrossCallReturnLabel_138:
   \   000013 27F1                  JREQ      L:??ReadDS1307_1
    354                 I2C_GenerateSTOP(ENABLE);
   \   000015 8D000000              CALLF     ?Subroutine17
    355                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_56:
   \   000019 27EB                  JREQ      L:??ReadDS1307_1
    356                 if(!I2C_RA(0xD0))return FALSE;
   \   00001B A6D0                  LD        A, #0xd0
   \   00001D 8D000000              CALLF     I2C_RA
   \   000021 A100                  CP        A, #0x0
   \   000023 27E1                  JREQ      L:??ReadDS1307_1
    357                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000025 8D000000              CALLF     ?Subroutine13
    358                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_45:
   \   000029 C70000                LD        L:seconds, A
    359                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002C 8D000000              CALLF     ?Subroutine13
    360                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_44:
   \   000030 C70000                LD        L:minutes, A
    361                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000033 8D000000              CALLF     ?Subroutine13
    362                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_43:
   \   000037 C70000                LD        L:hours, A
    363                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00003A 8D000000              CALLF     ?Subroutine13
    364                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_42:
   \   00003E C70000                LD        L:days, A
    365                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000041 8D000000              CALLF     ?Subroutine13
    366                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_41:
   \   000045 C70000                LD        L:`date`, A
    367                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000048 8D000000              CALLF     ?Subroutine13
    368                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   00004C C70000                LD        L:mounts, A
    369                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004F 8D000000              CALLF     ?Subroutine13
    370                  years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_39:
   \   000053 C70000                LD        L:years, A
    371                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000056 8D000000              CALLF     ?Subroutine18
    372                  u8 data1 = I2C_RD();
    373                //Last read byte by I2C slave
    374                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \                     ??CrossCallReturnLabel_58:
   \   00005A 8D000000              CALLF     ?Subroutine23
    375                 I2C_GenerateSTOP(ENABLE);
    376                 temp2= I2C_RD();
   \                     ??CrossCallReturnLabel_68:
   \   00005E 8D000000              CALLF     I2C_RD
   \   000062 C70000                LD        L:temp2, A
    377                 return TRUE;
   \   000065 A601                  LD        A, #0x1
   \   000067 87                    RETF
    378          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_106:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_105:
   \   000004 AC000000              JPF       bcd2hex
    379          

   \                                 In section .far_func.text, align 1, keep-with-next
    380          bool Check_DS1307(void)
    381          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    382             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    383                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine27
    384                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_87:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    385                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_90:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    386                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine39_0
   \                     ??CrossCallReturnLabel_134:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    387                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine17
    388                  //Last read byte by I2C slave
    389                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_55:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    390                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    391                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine18
    392                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_57:
   \   00002E B700                  LD        S:?b8, A
    393                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine23
    394                 I2C_GenerateSTOP(ENABLE);
    395                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_69:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    396                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    397          }
    398          

   \                                 In section .far_func.text, align 1, keep-with-next
    399          bool Set_DS1307()
    400          {
    401                 // convert hex or decimal to bcd format
    402          
    403          
    404                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine27
    405                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_88:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    406                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine28
   \                     ??CrossCallReturnLabel_91:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    407                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 4F                    CLR       A
   \   00000F 8D000000              CALLF     ??Subroutine39_0
   \                     ??CrossCallReturnLabel_135:
   \   000013 27F1                  JREQ      L:??Set_DS1307_1
    408                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000015 C60000                LD        A, L:seconds
   \   000018 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_127:
   \   00001C 27E8                  JREQ      L:??Set_DS1307_1
    409                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001E C60000                LD        A, L:minutes
   \   000021 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_128:
   \   000025 27DF                  JREQ      L:??Set_DS1307_1
    410                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000027 C60000                LD        A, L:hours
   \   00002A 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_129:
   \   00002E 27D6                  JREQ      L:??Set_DS1307_1
    411                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   000030 C60000                LD        A, L:days
   \   000033 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_130:
   \   000037 27CD                  JREQ      L:??Set_DS1307_1
    412                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000039 C60000                LD        A, L:`date`
   \   00003C 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_131:
   \   000040 27C4                  JREQ      L:??Set_DS1307_1
    413                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000042 C60000                LD        A, L:mounts
   \   000045 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_132:
   \   000049 27BB                  JREQ      L:??Set_DS1307_1
    414                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004B C60000                LD        A, L:years
   \   00004E 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_133:
   \   000052 27B2                  JREQ      L:??Set_DS1307_1
    415                 if(!I2C_WD(DS_Control))return FALSE;
   \   000054 A610                  LD        A, #0x10
   \   000056 8D000000              CALLF     ??Subroutine39_0
   \                     ??CrossCallReturnLabel_136:
   \   00005A 27AA                  JREQ      L:??Set_DS1307_1
    416                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005C A6AA                  LD        A, #0xaa
   \   00005E 8D000000              CALLF     ??Subroutine39_0
   \                     ??CrossCallReturnLabel_137:
   \   000062 27A2                  JREQ      L:??Set_DS1307_1
    417                 I2C_GenerateSTOP(ENABLE);
   \   000064 A601                  LD        A, #0x1
   \   000066 8D000000              CALLF     I2C_GenerateSTOP
    418          
    419          
    420             return TRUE;
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    421          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004                       REQUIRE ??Subroutine39_0
   \   000004                       ;               // Fall through to label ??Subroutine39_0
    422          
    423          

   \                                 In section .far_func.text, align 1, keep-with-next
    424          u8 convert_tobcd(u8 data)
    425          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    426             u8 data_second_decimal=data/10;
    427             u8 data_first_decimal=data - 10*data_second_decimal;
    428             data=16*data_second_decimal + data_first_decimal;
    429            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    430          }
    431          

   \                                 In section .far_func.text, align 1, keep-with-next
    432          u8 bcd2hex(u8 bcd)
    433          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    434            u8 hex=0;
    435            hex=(bcd>>4)*10 +(bcd&0x0f);
    436            bcd=0;
    437            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    438          }
    439          
    440          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    441          bool Set_Clock()
    442          {
    443              //Clear Display
    444             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine7
    445             Delay1(1000);
    446             line_lcd=0;
    447              printf("\nYears:");
   \                     ??CrossCallReturnLabel_23:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    448                do
    449              {
    450               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine16
    451               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_52:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    452                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine40_0
    453              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_140:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_78:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    454          
    455               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    456              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    457                do
    458              {
    459               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine16
    460               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_53:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    461                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    462              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_79:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    463          
    464              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine7
    465               Delay1(1000);
    466                line_lcd=0;
    467              printf("\nDate:");
   \                     ??CrossCallReturnLabel_24:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    468                do
    469              {
    470               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine16
    471               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_54:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    472                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    473              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_80:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    474          
    475          
    476              //Clear Display
    477             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine7
    478             Delay1(1000);
    479             line_lcd=0;
    480              printf("\nDays:");
   \                     ??CrossCallReturnLabel_25:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    481                do
    482              {
    483                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    484               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    485                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    486              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_81:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    487          
    488          
    489          
    490             //Clear Display
    491             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine7
    492             Delay1(1000);
    493             line_lcd=0;
    494              printf("\nHours:");
   \                     ??CrossCallReturnLabel_26:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    495                do
    496              {
    497                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine14
    498               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_46:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    499                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine40_0
    500              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_139:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_82:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    501          
    502               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    503               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    504                do
    505              {
    506                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine14
    507               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_47:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    508                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine22
    509              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_144:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_83:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    510          
    511              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    512              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    513              do
    514              {
    515                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine14
    516               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_48:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    517                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine22
    518              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_143:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_84:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    519          
    520                // Set parameter to DS1307 + time byte
    521              Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    522          
    523                bool k=Check_DS1307();
   \   000188 8D000000              CALLF     Check_DS1307
    524          
    525            return TRUE;
   \   00018C A601                  LD        A, #0x1
   \   00018E 87                    RETF
    526          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine40_0
   \   000006                       ;               // Fall through to label ??Subroutine40_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_101:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    527          
    528          

   \                                 In section .far_func.text, align 1, keep-with-next
    529          u8 adj(u8 min,u8 max,u8 now)
    530          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    531             u8 adj=now;
    532             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    533             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    534             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    535             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    536             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    537             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    538          }
    539          
    540          

   \                                 In section .far_func.text, align 1, keep-with-next
    541          bool key_ok_on()
    542          {
    543            //Read Key OK
    544            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_109:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    545             {
    546               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    547                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_108:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    548                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    549             }
    550          
    551            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    552          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    553          

   \                                 In section .far_func.text, align 1, keep-with-next
    554           bool key_plus_on()
    555          {
    556            //Read Key OK
    557              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_63:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    558               {
    559               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    560                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_12:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_62:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    561                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_13:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    562               }
    563          
    564            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    565          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    566          

   \                                 In section .far_func.text, align 1, keep-with-next
    567            bool key_minus_on()
    568          {
    569            //Read Key OK
    570             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_65:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    571               {
    572               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    573                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_64:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    574                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    575               }
    576          
    577            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    578          }
    579          
    580          

   \                                 In section .far_func.text, align 1, keep-with-next
    581          bool  key_ok_plus()
    582          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    583            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_27:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    584            {
    585                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    586                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_14:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_28:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    587                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_15:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    588            }
    589          
    590           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    591          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_107:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    592          
    593          

   \                                 In section .far_func.text, align 1, keep-with-next
    594          bool Set_Delay_Allarm()
    595          {
    596          
    597             //clr
    598             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine7
    599             Delay1(1000);
    600             line_lcd=0;
    601             printf("\nH On:");
   \                     ??CrossCallReturnLabel_18:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    602            do
    603              {
    604               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    605               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    606                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine40_0
    607              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_142:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_73:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    608          
    609             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine7
    610             Delay1(1000);
    611             line_lcd=0;
    612             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_19:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    613            do
    614              {
    615               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    616               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    617                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine22
    618              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_146:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_74:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    619          
    620              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine7
    621              Delay1(1000);
    622              line_lcd=0;
    623              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_20:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    624            do
    625              {
    626               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    627               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    628                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine40_0
    629              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_141:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_75:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    630          
    631            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine7
    632             Delay1(1000);
    633             line_lcd=0;
    634             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_21:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    635            do
    636              {
    637               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    638               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    639                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine22
    640              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_145:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_76:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    641          
    642               //Computing time_long_on
    643          
    644               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine21
    645               u8 minute=daily_minute_on;
    646               daily_long_on=0;
    647               do
    648               {
    649                    daily_long_on++;
   \                     ??CrossCallReturnLabel_67:
   \   0000DC 8D000000              CALLF     ?Subroutine11
    650                    minute++;
    651                    if (minute==60)
   \                     ??CrossCallReturnLabel_38:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    652                    {
    653                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    654                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    655                    }
    656                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    657          
    658               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_67
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_67
    659          
    660                //Display daily_long_on
    661              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine7
    662              Delay1(1000);
    663              line_lcd=0;
    664              printf("\nLong :");
   \                     ??CrossCallReturnLabel_22:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    665          
    666                do
    667              {
    668               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    669               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    670                 //daily_long_on=adj(0,1440,daily_long_on);
    671              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_77:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    672          
    673          
    674              //Save data to eeprom
    675               EEPROM_INIT();
   \   000123 8D000000              CALLF     EEPROM_INIT
    676               FLASH_ProgramByte(EEPROM_ADDR,daily_hour_on);
   \   000127 C60000                LD        A, L:daily_hour_on
   \   00012A AE4000                LDW       X, #0x4000
   \   00012D 8D000000              CALLF     ?Subroutine3
    677               FLASH_ProgramByte(EEPROM_ADDR+1,daily_minute_on);
   \                     ??CrossCallReturnLabel_9:
   \   000131 C60000                LD        A, L:daily_minute_on
   \   000134 AE4001                LDW       X, #0x4001
   \   000137 8D000000              CALLF     ?Subroutine3
    678               FLASH_ProgramByte(EEPROM_ADDR+2,daily_hour_off);
   \                     ??CrossCallReturnLabel_8:
   \   00013B C60000                LD        A, L:daily_hour_off
   \   00013E AE4002                LDW       X, #0x4002
   \   000141 8D000000              CALLF     ?Subroutine3
    679               FLASH_ProgramByte(EEPROM_ADDR+3,daily_minute_off);
   \                     ??CrossCallReturnLabel_7:
   \   000145 C60000                LD        A, L:daily_minute_off
   \   000148 AE4003                LDW       X, #0x4003
   \   00014B 8D000000              CALLF     ?Subroutine3
    680          
    681             return TRUE;
   \                     ??CrossCallReturnLabel_6:
   \   00014F A601                  LD        A, #0x1
   \   000151 87                    RETF
    682          
    683          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    684          

   \                                 In section .far_func.text, align 1, keep-with-next
    685          bool Read_Allarm()
    686          {
    687             daily_hour_on=FLASH_ReadByte(EEPROM_ADDR);
   \                     Read_Allarm:
   \   000000 AE4000                LDW       X, #0x4000
   \   000003 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   000007 C70000                LD        L:daily_hour_on, A
    688             daily_minute_on=FLASH_ReadByte(EEPROM_ADDR+1);
   \   00000A AE4001                LDW       X, #0x4001
   \   00000D 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   000011 C70000                LD        L:daily_minute_on, A
    689             daily_hour_off=FLASH_ReadByte(EEPROM_ADDR+2);
   \   000014 AE4002                LDW       X, #0x4002
   \   000017 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_3:
   \   00001B C70000                LD        L:daily_hour_off, A
    690             daily_minute_off=FLASH_ReadByte(EEPROM_ADDR+3);
   \   00001E AE4003                LDW       X, #0x4003
   \   000021 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   000025 C70000                LD        L:daily_minute_off, A
    691               // Computting daily_long_on
    692               u8 hour=daily_hour_on;
   \   000028 8D000000              CALLF     ?Subroutine21
    693               u8 minute=daily_minute_on;
    694               daily_long_on=0;
    695               do
    696               {
    697                    daily_long_on++;
   \                     ??CrossCallReturnLabel_66:
   \   00002C 8D000000              CALLF     ?Subroutine11
    698                    minute++;
    699                    if (minute==60)
   \                     ??CrossCallReturnLabel_37:
   \   000030 2607                  JRNE      L:??Read_Allarm_0
    700                    {
    701                      minute=0;
   \   000032 3F00                  CLR       S:?b1
    702                      hour++;
   \   000034 B600                  LD        A, S:?b0
   \   000036 4C                    INC       A
   \   000037 B700                  LD        S:?b0, A
    703                    }
    704                    if(hour==24) hour=0;
   \                     ??Read_Allarm_0:
   \   000039 B600                  LD        A, S:?b0
   \   00003B A118                  CP        A, #0x18
   \   00003D 2602                  JRNE      L:??Read_Allarm_1
   \   00003F 3F00                  CLR       S:?b0
    705          
    706               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_1:
   \   000041 C60000                LD        A, L:daily_hour_off
   \   000044 B100                  CP        A, S:?b0
   \   000046 26E4                  JRNE      L:??CrossCallReturnLabel_66
   \   000048 C60000                LD        A, L:daily_minute_off
   \   00004B B100                  CP        A, S:?b1
   \   00004D 26DD                  JRNE      L:??CrossCallReturnLabel_66
    707          
    708            return TRUE;
   \   00004F A601                  LD        A, #0x1
   \   000051 87                    RETF
    709          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte
    710          

   \                                 In section .far_func.text, align 1, keep-with-next
    711          void EEPROM_INIT()
    712          {
    713            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    714            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    715            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    716          
    717          
    718          
    719          }
    720          
    721          

   \                                 In section .far_func.text, align 1, keep-with-next
    722          void GpioConfiguration()
    723          {
    724          
    725            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    726          
    727            // ADC PE6 NEW PB0
    728            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    729          
    730            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    731            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    732          
    733            //PD0 Led
    734            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     GPIO_Init
    735            //I2C
    736            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000032 35B00000              MOV       S:?b0, #0xb0
   \   000036 A610                  LD        A, #0x10
   \   000038 AE5005                LDW       X, #0x5005
   \   00003B 8D000000              CALLF     GPIO_Init
    737            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00003F 35B00000              MOV       S:?b0, #0xb0
   \   000043 A620                  LD        A, #0x20
   \   000045 AE5005                LDW       X, #0x5005
   \   000048 8D000000              CALLF     ?Subroutine19
    738            // Remap Pins pb4,pb5  sda,scl ;
    739          
    740             //Init KEY OK,PLUS,MINUS
    741            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_59:
   \   00004C A610                  LD        A, #0x10
   \   00004E AE5019                LDW       X, #0x5019
   \   000051 8D000000              CALLF     ?Subroutine19
    742            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_60:
   \   000055 A602                  LD        A, #0x2
   \   000057 AE5000                LDW       X, #0x5000
   \   00005A 8D000000              CALLF     ?Subroutine19
    743            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_61:
   \   00005E A604                  LD        A, #0x4
   \   000060 AE5000                LDW       X, #0x5000
   \   000063 AC000000              JPF       GPIO_Init
    744          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF
    745          

   \                                 In section .far_func.text, align 1, keep-with-next
    746          void InitClk()
    747          {
    748            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    749            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    750            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    751            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    752            CLK_SOURCE_HSI,       // Switch to internal timer.
    753            DISABLE,              // Disable the clock switch interrupt.
    754            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    755          
    756            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine24
    757            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_70:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine24
    758            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_71:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine24
    759            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_72:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    760          
    761          
    762          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    763          
    764          

   \                                 In section .far_func.text, align 1, keep-with-next
    765          void InitAdc()
    766          {
    767               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    768               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    769               /*
    770               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    771                          ADC1_CHANNEL_0,
    772                          ADC1_PRESSEL_FCPU_D4,
    773                           ADC1_EXTTRIG_TIM,
    774          
    775                 */
    776               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    777               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    778                                      ADC1_CHANNEL_0,
    779                                      ADC1_ALIGN_RIGHT
    780                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    781          
    782          
    783               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    784          
    785          
    786               //ADC1_Cmd (ENABLE);
    787               //ADC1->CR1 |= ADC1_CR1_ADON ;
    788               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    789               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    790          
    791          }
    792          
    793          /*
    794          void InitUart()
    795          {
    796             UART2_DeInit();
    797             UART2_Init((u32)9600,
    798                        UART2_WORDLENGTH_8D,
    799                        UART2_STOPBITS_1,
    800                        UART2_PARITY_NO,
    801                        UART2_SYNCMODE_CLOCK_DISABLE,
    802                        UART2_MODE_TXRX_ENABLE
    803                          );
    804          
    805             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    806             UART2_Cmd(ENABLE);
    807          
    808            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    809          }
    810            */
    811          

   \                                 In section .far_func.text, align 1, keep-with-next
    812          void SendChar( u8 Char)
    813          {
    814             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    815            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    816          }
   \   00000E 87                    RETF
    817            /*
    818          void Send_Hello()
    819          {
    820            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    821             Delay1(10);
    822             sprintf(data,"Hello");
    823              u8 i=0;
    824            do
    825           {
    826            SendChar(data[i++]);
    827           } while (data[i]!=0);
    828            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    829            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    830          
    831          
    832          
    833          }
    834              */
    835          
    836          
    837              /*
    838          
    839          void SendData()
    840          {
    841           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    842            Delay1(10);
    843            u8 i=0;
    844            sprintf(data,"%d %c",adcdata,0x0d);
    845           do
    846           {
    847             SendChar(data[i++]);
    848          
    849           } while (data[i]!=0);
    850             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    851            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    852            rx_data=0;
    853          }
    854          */
    855          

   \                                 In section .far_func.text, align 1, keep-with-next
    856          void LCDDataOut(u8 data)
    857          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    858            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_34:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_116
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine37_0
    859            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_116:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_33:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_117
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine37_0
    860            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_117:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_32:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_118
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine37_0
    861            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_118:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_31:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_119
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine37_0
    862          }
   \                     ??CrossCallReturnLabel_119:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000 8D000000              CALLF     ??Subroutine38_0
   \                     ??CrossCallReturnLabel_124:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    863          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine37_0
   \   000002                       ;               // Fall through to label ??Subroutine37_0

   \                                 In section .far_func.text, align 1, keep-with-next
    864          void InitLcd()
    865          {
    866           LCD_EN(0);
   \                     InitLcd:
   \   000000 8D000000              CALLF     ?Subroutine5
    867            LCD_RW(0);
   \                     ??CrossCallReturnLabel_17:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ??Subroutine37_0
    868            LCD_RS(0);
   \                     ??CrossCallReturnLabel_123:
   \   00000A 8D000000              CALLF     ??Subroutine36_0
    869            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_115:
   \   00000E AE0FA0                LDW       X, #0xfa0
   \   000011 8D000000              CALLF     ?Subroutine10
    870          
    871            LCDInstrNibble(0x03);
    872             Delay1(10);
    873            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_36:
   \   000015 A603                  LD        A, #0x3
   \   000017 8D000000              CALLF     LCDInstrNibble
    874             Delay1(10);
   \   00001B AE000A                LDW       X, #0xa
   \   00001E 8D000000              CALLF     ?Subroutine10
    875            LCDInstrNibble(0x03);
    876             Delay1(10);
    877          
    878             //Line 4
    879            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_35:
   \   000022 A602                  LD        A, #0x2
   \   000024 8D000000              CALLF     LCDInstrNibble
    880            LCDInstrNibble(0x02);
   \   000028 A602                  LD        A, #0x2
   \   00002A 8D000000              CALLF     LCDInstrNibble
    881            LCDInstrNibble(0x08);
   \   00002E A608                  LD        A, #0x8
   \   000030 8D000000              CALLF     LCDInstrNibble
    882            Delay1(100);
   \   000034 AE0064                LDW       X, #0x64
   \   000037 8D000000              CALLF     Delay1
    883          
    884            LCDInstr(0x0C);
   \   00003B A60C                  LD        A, #0xc
   \   00003D 8D000000              CALLF     LCDInstr
    885            Delay1(10);
   \   000041 AE000A                LDW       X, #0xa
   \   000044 8D000000              CALLF     Delay1
    886          
    887            LCDInstr(0x01) ;
   \   000048 8D000000              CALLF     ?Subroutine32
    888            Delay1(250);
   \                     ??CrossCallReturnLabel_102:
   \   00004C AE00FA                LDW       X, #0xfa
   \   00004F 8D000000              CALLF     Delay1
    889          
    890            LCDInstr(0x06);
   \   000053 A606                  LD        A, #0x6
   \   000055 8D000000              CALLF     LCDInstr
    891            Delay1(10);
   \   000059 AE000A                LDW       X, #0xa
   \   00005C AC000000              JPF       Delay1
    892          
    893          
    894          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_125:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 A608                  LD        A, #0x8
   \   000002                       REQUIRE ??Subroutine38_0
   \   000002                       ;               // Fall through to label ??Subroutine38_0
    895          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine37_0
   \                     ??CrossCallReturnLabel_120:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_111:
   \   00000D                       REQUIRE ??Subroutine35_0
   \   00000D                       ;               // Fall through to label ??Subroutine35_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_110:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    896          void LCDInstr(u8 Instr)
    897          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine6
    898            LCD_RS(0);
    899            LCD_RW(0);
   \                     ??CrossCallReturnLabel_112:
   \   000007 2000                  JRA       ?Subroutine0
    900            LCDDataOut(Instr>>4);
    901            PulseEnable();
    902            LCDDataOut(Instr & 0x0F);
    903            PulseEnable();
    904          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 B700                  LD        S:?b8, A
   \   000002                       REQUIRE ??Subroutine36_0
   \   000002                       ;               // Fall through to label ??Subroutine36_0
    905          

   \                                 In section .far_func.text, align 1, keep-with-next
    906          void LCDData(u8 Data)
    907          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    908            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine9
    909            LCD_RW(0);
   \                     ??CrossCallReturnLabel_30:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    910            LCDDataOut(Data>>4);
    911            PulseEnable() ;
    912            LCDDataOut(Data & 0x0F) ;
    913            PulseEnable();
    914          }
    915          

   \                                 In section .far_func.text, align 1, keep-with-next
    916          void LCDInstrNibble(u8 Instr)
    917          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine6
    918            LCD_RS(0);
    919            LCD_RW(0);
   \                     ??CrossCallReturnLabel_113:
   \   000007 A602                  LD        A, #0x2
   \   000009 8D000000              CALLF     ??Subroutine37_0
    920            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_122:
   \   00000D AC000000              JPF       ??Subroutine35_0
    921            PulseEnable();
    922          }
    923          

   \                                 In section .far_func.text, align 1, keep-with-next
    924          void PulseEnable(void)
    925          {
    926            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine1
    927             Delay1(1);
    928            LCD_EN(1);
    929             Delay1(1);
    930            LCD_EN(0);
   \                     ??CrossCallReturnLabel_0:
   \   000004 8D000000              CALLF     ?Subroutine5
    931             Delay1(1);
   \                     ??CrossCallReturnLabel_16:
   \   000008 5F                    CLRW      X
   \   000009 5C                    INCW      X
   \   00000A AC000000              JPF       Delay1
    932          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_126:
   \   000004 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_98:
   \   000008 A608                  LD        A, #0x8
   \   00000A AE500A                LDW       X, #0x500a
   \   00000D 8D000000              CALLF     GPIO_WriteHigh
   \   000011 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_97:
   \   000015 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
    933          

   \                                 In section .far_func.text, align 1, keep-with-next
    934          void LCD_Busy(void)
    935          {
    936             //set Port D7 as Input
    937             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    938             //Set Read
    939             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine9
    940             LCD_RS(0);
   \                     ??CrossCallReturnLabel_29:
   \   000013 8D000000              CALLF     ??Subroutine36_0
    941             // Read Busy Flag
    942                timer2=0;
   \                     ??CrossCallReturnLabel_114:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
    943             do
    944             {
    945             // Enable set
    946               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine1
    947                Delay1(1);
    948               LCD_EN(1);
    949                Delay1(1);
    950             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_1:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
    951                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
    952                //Clear read
    953              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine37_0
    954             //set Port D7 as Output
    955             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_121:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
    956          
    957          }
    958          
    959          

   \                                 In section .far_func.text, align 1, keep-with-next
    960          void LCD(u8 data)
    961           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    962             //  static u8 linet=0;
    963          
    964          
    965               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_100
    966               {
    967          
    968                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
    969                   {
    970                   case 0:
    971                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
    972                     count=0;
   \   00001F 725F0000              CLR       L:count
    973                     break;
   \   000023 2022                  JRA       L:??LCD_4
    974                   case 1:
    975                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
    976                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
    977                     break;
   \   00002F 2016                  JRA       L:??LCD_4
    978                   case 2:
    979                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
    980                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
    981                     break;
   \   00003B 200A                  JRA       L:??LCD_4
    982                   case 3:
    983                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
    984                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
    985                     break;
    986                   //default:
    987                    //  LCDInstr(0x80 |0x40);    //Line 1
    988                    }
    989                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
    990                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
    991                   {
    992                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
    993                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine32
    994                    Delay1(2500);
   \                     ??CrossCallReturnLabel_104:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
    995                   }
    996          
    997                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ?Subroutine30
    998          
    999          
   1000               }
   1001          
   1002          
   1003               if (count==20)
   \                     ??CrossCallReturnLabel_100:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
   1004                {
   1005                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
   1006                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
   1007                }
   1008                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
   1009                  {
   1010                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
   1011                    Delay1(1);
   1012                  }
   1013                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
   1014                    {
   1015                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
   1016                      count=0;
   \   000088 725F0000              CLR       L:count
   1017                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
   1018                    }
   1019                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
   1020                        {
   1021                          count=0;
   \   000092 725F0000              CLR       L:count
   1022                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine32
   1023                          Delay1(250);
   \                     ??CrossCallReturnLabel_103:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
   1024                        }
   1025          
   1026          
   1027              /*
   1028                   line++;
   1029                   if (line>3)
   1030                   {
   1031                     line=1;  //Line 0 for Time
   1032                   }
   1033                 switch(line)
   1034                   {
   1035                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1036                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1037                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1038                   default : LCDInstr(0x80 | 0x40); // Line 1
   1039                   }
   1040                   Delay(1);
   1041                   count=0;
   1042                }
   1043          
   1044               */
   1045          
   1046               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
   1047               {
   1048                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
   1049                  Delay1(1);
   \   0000AB 8D000000              CALLF     ?Subroutine30
   1050                 count++;
   \                     ??CrossCallReturnLabel_99:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
   1051               }
   1052           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF
   1053          

   \                                 In section .far_func.text, align 1, keep-with-next
   1054          void InitDelayTimer()
   1055          {
   1056             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1057             //Tclock 16/8=2Mhz  /20 10us
   1058                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1059                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1060                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1061                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1062            //Enable TIM2
   1063                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1064          
   1065          }
   1066          
   1067           /*
   1068          u16 Average()
   1069          {
   1070           //Find average in measure
   1071            u8 i=0;
   1072            u16 Summa=0;
   1073            do
   1074            {
   1075             Summa+=measure[i++];
   1076            } while ( measure[i]!=0);
   1077             if(i!=0) Summa=Summa/i;
   1078             return Summa;
   1079          }
   1080             */
   1081          

   \                                 In section .far_func.text, align 1, keep-with-next
   1082          PUTCHAR_PROTOTYPE
   1083          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1084            /* Place your implementation of fputc here */
   1085            /* e.g. write a character to the USART */
   1086                //USART_SendData(USART3, (u8) ch);
   1087               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1088             /* Loop until the end of transmission */
   1089              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1090            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1091          }
   1092          
   1093          

   \                                 In section .far_func.text, align 1, keep-with-next
   1094          void Delay1(u16 Delay)
   1095          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1096            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1097            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1098          }
   \   00000D 87                    RETF
   1099          

   \                                 In section .far_func.text, align 1, keep-with-next
   1100           void Delay2(u16 Delay)
   1101          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1102            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1103            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1104          }
   \   00000D 87                    RETF
   1105          
   1106          
   1107          
   1108          /*
   1109          void Delay12 (u16 Delay)
   1110          {
   1111            timer2=0;
   1112            while ( timer2 < Delay); ;
   1113          }
   1114          */
   1115          
   1116          
   1117          #ifdef USE_FULL_ASSERT
   1118          
   1119          /**
   1120            * @brief  Reports the name of the source file and the source line number
   1121            *   where the assert_param error has occurred.
   1122            * @param file: pointer to the source file name
   1123            * @param line: assert_param error line source number
   1124            * @retval : None
   1125            */

   \                                 In section .far_func.text, align 1
   1126          void assert_failed(u8* file, u32 line)
   1127          {
   1128            /* User can add his own implementation to report the file name and line number,
   1129               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1130          
   1131            /* Infinite loop */
   1132            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1133            {
   1134          
   1135            }
   1136          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n      ">`:
   \   000000 0A2020202020          DC8 "\012      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"
   1137          #endif
   1138          
   1139          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     result                            4
     k                                 2
     ?Subroutine25                     7
     main                            247
     ?Subroutine15                    16
     ?Subroutine14                    10
     InitI2C                          38
     ?Subroutine29                     7
     I2C_Start                        38
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine28                     9
     ?Subroutine27                    11
     ??Subroutine39_0                  7
     ReadDS1307                      104
     ?Subroutine23                    11
     ?Subroutine18                     5
     ?Subroutine33                    10
     ?Subroutine17                    13
     ?Subroutine13                     8
     Check_DS1307                     64
     Set_DS1307                      109
     ?Subroutine26                     4
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine32                     6
     Set_Clock                       399
     ?Subroutine22                     6
     ??Subroutine40_0                  5
     ?Subroutine16                    10
     ?Subroutine7                     16
     adj                              77
     key_ok_on                        41
     ?Subroutine34                     7
     key_plus_on                      37
     ?Subroutine20                     7
     ?Subroutine4                      7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine8                     26
     Set_Delay_Allarm                338
     ?Subroutine21                    15
     ?Subroutine11                    15
     ?Subroutine3                      9
     Read_Allarm                      82
     ?Subroutine2                      9
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine19                     9
     InitClk                          56
     ?Subroutine24                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine9                      7
     ??Subroutine37_0                  5
     ??Subroutine38_0                  7
     ??Subroutine36_0                  2
     InitLcd                          96
     ?Subroutine10                    17
     ?Subroutine5                      5
     ?Subroutine31                     2
     ?Subroutine0                     13
     ??Subroutine35_0                 10
     ?Subroutine12                    10
     LCDInstr                          9
     ?Subroutine6                      2
     LCDData                          11
     LCDInstrNibble                   17
     PulseEnable                      14
     ?Subroutine1                     22
     ?Subroutine30                     6
     LCD_Busy                         69
     LCD                             186
     InitDelayTimer                   29
     fputc                            18
     Delay1                           14
     Delay2                           14
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n      ">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4

 
 3 028 bytes in section .far_func.text
    89 bytes in section .near.bss
     3 bytes in section .near.data
   171 bytes in section .near.rodata
 
 3 028 bytes of CODE  memory
   171 bytes of CONST memory
    92 bytes of DATA  memory

Errors: none
Warnings: none
