###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             14/Aug/2013  18:26:41 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c                      #
#    Command line =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c -e -Ohz --debug      #
#                    --code_model medium --data_model medium -o               #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC C:\Users\Administrator\Desktop\stm8s105k-co #
#                    ntroller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S10 #
#                    5\List\ -lA C:\Users\Administrator\Desktop\stm8s105k-con #
#                    troller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S105 #
#                    \List\ -I C:\Users\Administrator\Desktop\stm8s105k-contr #
#                    oller\Project\STM8S_StdPeriph_Template\EWSTM8\..\ -I     #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Libraries\S #
#                    TM8S_StdPeriph_Driver\inc\ --vregs 16                    #
#    List file    =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\main.l #
#                    st                                                       #
#    Object file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\main.o  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59          
     60          //EEPROM Address;
     61          #define EEPROM_ADDR 0x4000
     62          #define EEPROM_ADR_STATUSH EEPROM_ADDR + 0
     63          #define EEPROM_ADR_STATUSL EEPROM_ADDR + 1
     64          #define EEPROM_ADR_TIME_ON_HOURS EEPROM_ADDR +2
     65          #define EEPROM_ADR_TIME_ON_MINUTES EEPROM_ADDR +3
     66          #define EEPROM_ADR_TIME_OFF_HOURS EEPROM_ADDR +4
     67          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     68          
     69          
     70          
     71          #ifdef __GNUC__
     72            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     73               set to 'Yes') calls __io_putchar() */
     74            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     75          #else
     76            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     77          #endif /* __GNUC__ */
     78          
     79          
     80          
     81          
     82          #define SpecialSymbol 0x1b //Esc to start message
     83          #define data_size 20
     84          #define key_time 8000
     85          #define key_time_ok 15000
     86          #define DS_Control  0x10  // Out 1s
     87          
     88          
     89          
     90          
     91          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     92          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     93          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     94          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     95          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     96          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     97          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     98          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     99          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    100          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    101          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    102          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    103          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    104          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    105          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    106          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    107          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    108          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    109          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    110          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    111          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    116          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    117          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    118          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    123          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 test2;
   \                     test2:
   \   000000                       DS8 1
    125          //u8 index=0;

   \                                 In section .near.bss, align 1
    126          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    127          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    128          
    129          
    130           struct   status_reg
    131           {
    132             unsigned on:1;
    133             unsigned timer_on:1;
    134             unsigned daily:1;

   \                                 In section .near.bss, align 1
    135           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    136             
    137          
    138          
    139          
    140          
    141          
    142          
    143          /* Private function prototypes -----------------------------------------------*/
    144          void InitHardware();
    145          void GpioConfiguration();
    146          void InitClk();
    147          void InitAdc();
    148          void InitI2C();
    149          void EEPROM_INIT();
    150          bool ReadDS1307();
    151          //void InitUart();
    152          void InitLcd();
    153          void InitDelayTimer();
    154          void Delay1( u16 Delay);
    155          void Delay2( u16 Delay);
    156          void Delay_us(u16 Delay);
    157          void LCDInstrNibble (u8 Instr);
    158          void LCDInstr(u8 Instr);
    159          void LCDDataOut(u8 data);
    160          void LCD_Busy();
    161          void PulseEnable();
    162          //void SendData();
    163          void SendChar(u8 Char);
    164          //void Send_Hello();
    165          bool Set_Clock();
    166          bool key_ok_on();
    167          bool key_plus_on();
    168          bool key_minus_on();
    169          bool key_ok_plus();
    170          bool Init_DS1307(void);
    171          bool Check_DS1307(void);
    172          bool I2C_Start(void);
    173          bool I2C_WA(u8 address);
    174          bool I2C_WD(u8 data);
    175          bool I2C_RA(u8 address);
    176          bool Set_DS1307();
    177          bool Set_Delay_Allarm();
    178          bool Read_Allarm();
    179          bool Read_DS18();
    180          bool DS18_Write( u8 data);
    181          bool DS18_Reset();
    182          bool DS18Set();
    183          u8 temperature();
    184          u8 DS18_Read();
    185          u8 convert_tobcd(u8 data);
    186          u8 I2C_RD(void);
    187          u8 adj(u8 min,u8 max,u8 now);
    188          u8 bcd2hex(u8 bcd);
    189          void Power_On(void);
    190          void Power_Off();
    191          void Save_Status();
    192          
    193          
    194          u16  Average();
    195          
    196          
    197          /* Private functions ---------------------------------------------------------*/
    198          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    199          void main(void)
    200          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    201              /*High speed internal clock prescaler: 1*/
    202              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    203          
    204              InitClk();
   \   000003 8D000000              CALLF     InitClk
    205              InitDelayTimer();
   \   000007 8D000000              CALLF     InitDelayTimer
    206              GpioConfiguration();
   \   00000B 8D000000              CALLF     GpioConfiguration
    207              //InitUart();
    208              enableInterrupts();
   \   00000F 9A                    RIM
    209              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000010 A680                  LD        A, #0x80
   \   000012 AE500F                LDW       X, #0x500f
   \   000015 8D000000              CALLF     GPIO_WriteLow
    210              InitLcd();
   \   000019 8D000000              CALLF     InitLcd
    211              //InitAdc();
    212              InitI2C();
   \   00001D 8D000000              CALLF     InitI2C
    213              //Init DS18B20
    214              DS18Set();
   \   000021 8D000000              CALLF     DS18Set
    215              line_lcd=0;
   \   000025 725F0000              CLR       L:line_lcd
    216              if (!Read_DS18())
   \   000029 8D000000              CALLF     Read_DS18
   \   00002D A100                  CP        A, #0x0
   \   00002F 260D                  JRNE      L:??main_0
    217              {
    218               printf("\nDS_Err_I");
   \   000031 AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   000034 8D000000              CALLF     printf
    219                while (!key_ok_on());
   \                     ??main_1:
   \   000038 8D000000              CALLF     ?Subroutine38
    220              }
   \                     ??CrossCallReturnLabel_120:
   \   00003C 27FA                  JREQ      L:??main_1
    221          
    222          
    223          
    224          
    225          
    226              //years=bcd2hex(13);
    227              Delay1(1000);
   \                     ??main_0:
   \   00003E AE03E8                LDW       X, #0x3e8
   \   000041 8D000000              CALLF     Delay1
    228               if (!ReadDS1307())
   \   000045 8D000000              CALLF     ReadDS1307
   \   000049 A100                  CP        A, #0x0
   \   00004B 2615                  JRNE      L:??main_2
    229               {
    230                 printf("\n E2:%d",error);
   \   00004D C60000                LD        A, L:error
   \   000050 5F                    CLRW      X
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B02                  ADD       SP, #0x2
    231                 // Reset the CPU: Enable the watchdog and wait until it expires
    232                 IWDG->KR = IWDG_KEY_ENABLE;
   \   00005C 35CC50E0              MOV       L:0x50e0, #0xcc
    233                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   000060 20FE                  JRA       L:??main_3
    234               }
    235               //Send_Hello();
    236              //line_lcd=0;
    237              //printf("\nHello");
    238          
    239          
    240              if (!Check_DS1307())
   \                     ??main_2:
   \   000062 8D000000              CALLF     Check_DS1307
   \   000066 A100                  CP        A, #0x0
   \   000068 2626                  JRNE      L:??main_4
    241              {
    242                 if (error!=0)
   \   00006A C60000                LD        A, L:error
   \   00006D 2712                  JREQ      L:??main_5
    243                 {
    244                  printf("\n E:%d",error);
   \   00006F 5F                    CLRW      X
   \   000070 97                    LD        XL, A
   \   000071 89                    PUSHW     X
   \   000072 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000075 8D000000              CALLF     printf
   \   000079 5B02                  ADD       SP, #0x2
    245                   while (!key_ok_on());
   \                     ??main_6:
   \   00007B 8D000000              CALLF     ?Subroutine38
    246          
    247                 }
   \                     ??CrossCallReturnLabel_121:
   \   00007F 27FA                  JREQ      L:??main_6
    248               line_lcd=0;
   \                     ??main_5:
   \   000081 725F0000              CLR       L:line_lcd
    249               printf("\nSetClock");
   \   000085 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000088 8D000000              CALLF     printf
    250                Set_Clock();
   \   00008C 8D000000              CALLF     Set_Clock
    251          
    252              }
    253          
    254                 //Read Status register from eepom and update it
    255                //size=sizeof(status);
    256               //u16 status
    257               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_4:
   \   000090 AE4000                LDW       X, #0x4000
   \   000093 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   000097 B700                  LD        S:?b8, A
   \   000099 AE4001                LDW       X, #0x4001
   \   00009C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   0000A0 905F                  CLRW      Y
   \   0000A2 9097                  LD        YL, A
   \   0000A4 5F                    CLRW      X
   \   0000A5 41                    EXG       A, XL
   \   0000A6 B600                  LD        A, S:?b8
   \   0000A8 41                    EXG       A, XL
   \   0000A9 4F                    CLR       A
   \   0000AA 02                    RLWA      X, A
   \   0000AB 8D000000              CALLF     ??Subroutine57_0
   \                     ??CrossCallReturnLabel_187:
   \   0000AF CF0000                LDW       L:status, X
    258                status_check = *(u16*)(&status);
   \   0000B2 CE0000                LDW       X, L:status
   \   0000B5 CF0000                LDW       L:status_check, X
    259              //When Start Check for Allarm and computing Daily_long_on
    260               if ( Read_Allarm() == TRUE)
   \   0000B8 8D000000              CALLF     Read_Allarm
   \   0000BC A101                  CP        A, #0x1
   \   0000BE 262A                  JRNE      L:??main_7
    261               {
    262                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000C0 8D000000              CALLF     ?Subroutine1
    263                 time_off= daily_hour_off*60+daily_minute_off;
    264               }
   \                     ??CrossCallReturnLabel_1:
   \   0000C4 2024                  JRA       L:??main_7
    265          
    266               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    267          
    268               // Working fuction
    269              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    270          
    271              while(1)
    272              {
    273                ADC1_Cmd (ENABLE);
    274          
    275                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    276                   Delay2(10000);
    277                  // ttimer++;
    278                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    279                   Delay2(10000);
    280                   
    281                     //status_check = *(u16*)(&status);
    282                     
    283                line_lcd=0;
    284               if (!ReadDS1307())
    285               {
    286                 printf("\n E2:%d",error);
    287                  //restart i2c
    288                // Reset the CPU: Enable the watchdog and wait until it expires
    289                 IWDG->KR = IWDG_KEY_ENABLE;
    290                 while ( 1 );    // Wait until reset occurs from IWDG
    291          
    292               }
    293                 else
    294                   //printf("\n      ");
    295               line_lcd=1;
    296               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    297               //line_lcd=2;
    298               //printf("\n Just Test:%X", timer2);
    299                   //if (rx_data==SpecialSymbol) SendData();
    300                //SendData();
    301          
    302                if (key_ok_on())
    303                {
    304                  line_lcd=0;
    305                  printf("\n%02d:%02d:%02d",years,mounts,date);
    306                  status.daily=1; //On Daily timer
    307                  Save_Status();
    308                  Delay2(50000);
    309                  //Delay2(10000);
    310                  //Delay2(10000);
    311                }
    312          
    313                if(key_ok_plus()) Set_Delay_Allarm();  //Set Daily Allarm
    314                if(key_plus_on()) Power_On();
    315                if(key_minus_on())Power_Off();
    316          
    317          
    318                //Check for Allarm
    319                    if (status.daily==1)
    320                  {
    321                u16 time_now=hours*60+minutes;
    322                status.on=0;
    323                     u16 time=time_on;
    324                     do
    325                    {
    326                       if(time==time_now)
    327                       {
    328                         status.on=1;
    329                          break ;
    330                       }
    331                        time++;
    332                         if( time==1441) time=0;
    333                    } while(!(time==time_off));
    334                   };
    335          
    336                   
    337                      //Read Temperature
    338                  // if( ttimer > 5 )
    339                   //{
    340                      result1=temperature();
    341                      result2=0;
    342                      if(result1%2!=0) result2=5;
    343                      result1/=2;
    344                     // ttimer=0;
    345                 //  }
    346          
    347                   //printf("\n%d.%d",result1,result2);
    348          
    349          
    350          
    351          
    352                      if(status.on)
    353                   {
    354                     // Allarm ON
    355                     line_lcd=0;
    356                     char result3=' ';
    357                     if (status.daily==1)  result3 ='d';
   \                     ??main_8:
   \   0000C6 90CE0000              LDW       Y, L:status
   \   0000CA 909F                  LD        A, YL
   \   0000CC A504                  BCP       A, #0x4
   \   0000CE 2704                  JREQ      L:??main_9
   \   0000D0 35640000              MOV       S:?b2, #0x64
    358                     printf("\n1 %d.%d %c",result1,result2,result3);
   \                     ??main_9:
   \   0000D4 905F                  CLRW      Y
   \   0000D6 61                    EXG       A, YL
   \   0000D7 B600                  LD        A, S:?b2
   \   0000D9 61                    EXG       A, YL
   \   0000DA 9089                  PUSHW     Y
   \   0000DC 8D000000              CALLF     L:?push_w0
   \   0000E0 89                    PUSHW     X
   \   0000E1 AE0000                LDW       X, #`?<Constant "\\n1 %d.%d %c">`
   \                     ??main_10:
   \   0000E4 8D000000              CALLF     printf
   \   0000E8 5B06                  ADD       SP, #0x6
    359                   }
   \                     ??main_7:
   \   0000EA A601                  LD        A, #0x1
   \   0000EC 8D000000              CALLF     ADC1_Cmd
   \   0000F0 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_73:
   \   0000F4 8D000000              CALLF     ?Subroutine23
   \                     ??CrossCallReturnLabel_72:
   \   0000F8 725F0000              CLR       L:line_lcd
   \   0000FC 8D000000              CALLF     ReadDS1307
   \   000100 A100                  CP        A, #0x0
   \   000102 2615                  JRNE      L:??main_11
   \   000104 C60000                LD        A, L:error
   \   000107 5F                    CLRW      X
   \   000108 97                    LD        XL, A
   \   000109 89                    PUSHW     X
   \   00010A AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00010D 8D000000              CALLF     printf
   \   000111 5B02                  ADD       SP, #0x2
   \   000113 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_12:
   \   000117 20FE                  JRA       L:??main_12
   \                     ??main_11:
   \   000119 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_60:
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:minutes
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 C60000                LD        A, L:hours
   \   000126 97                    LD        XL, A
   \   000127 89                    PUSHW     X
   \   000128 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00012B 8D000000              CALLF     printf
   \   00012F 5B06                  ADD       SP, #0x6
   \   000131 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_122:
   \   000135 272C                  JREQ      L:??main_13
   \   000137 725F0000              CLR       L:line_lcd
   \   00013B C60000                LD        A, L:`date`
   \   00013E 5F                    CLRW      X
   \   00013F 97                    LD        XL, A
   \   000140 89                    PUSHW     X
   \   000141 C60000                LD        A, L:mounts
   \   000144 97                    LD        XL, A
   \   000145 89                    PUSHW     X
   \   000146 C60000                LD        A, L:years
   \   000149 97                    LD        XL, A
   \   00014A 89                    PUSHW     X
   \   00014B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00014E 8D000000              CALLF     printf
   \   000152 5B06                  ADD       SP, #0x6
   \   000154 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_107:
   \   000158 8D000000              CALLF     Save_Status
   \   00015C AEC350                LDW       X, #0xc350
   \   00015F 8D000000              CALLF     Delay2
   \                     ??main_13:
   \   000163 8D000000              CALLF     key_ok_plus
   \   000167 A100                  CP        A, #0x0
   \   000169 2704                  JREQ      L:??main_14
   \   00016B 8D000000              CALLF     Set_Delay_Allarm
   \                     ??main_14:
   \   00016F 8D000000              CALLF     key_plus_on
   \   000173 A100                  CP        A, #0x0
   \   000175 2704                  JREQ      L:??main_15
   \   000177 8D000000              CALLF     Power_On
   \                     ??main_15:
   \   00017B 8D000000              CALLF     key_minus_on
   \   00017F A100                  CP        A, #0x0
   \   000181 2704                  JREQ      L:??main_16
   \   000183 8D000000              CALLF     Power_Off
   \                     ??main_16:
   \   000187 CE0000                LDW       X, L:status
   \   00018A 9F                    LD        A, XL
   \   00018B A504                  BCP       A, #0x4
   \   00018D 2739                  JREQ      L:??main_17
   \   00018F C60000                LD        A, L:hours
   \   000192 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_193:
   \   000196 C60000                LD        A, L:minutes
   \   000199 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_189:
   \   00019D BF00                  LDW       S:?w0, X
   \   00019F CE0000                LDW       X, L:status
   \   0001A2 01                    RRWA      X, A
   \   0001A3 A4FE                  AND       A, #0xfe
   \   0001A5 02                    RLWA      X, A
   \   0001A6 CF0000                LDW       L:status, X
   \   0001A9 CE0000                LDW       X, L:time_on
   \                     ??main_18:
   \   0001AC B300                  CPW       X, S:?w0
   \   0001AE 260C                  JRNE      L:??main_19
   \   0001B0 CE0000                LDW       X, L:status
   \   0001B3 01                    RRWA      X, A
   \   0001B4 AA01                  OR        A, #0x1
   \   0001B6 02                    RLWA      X, A
   \   0001B7 CF0000                LDW       L:status, X
   \   0001BA 200C                  JRA       L:??main_17
   \                     ??main_19:
   \   0001BC 5C                    INCW      X
   \   0001BD A305A1                CPW       X, #0x5a1
   \   0001C0 2601                  JRNE      L:??main_20
   \   0001C2 5F                    CLRW      X
   \                     ??main_20:
   \   0001C3 C30000                CPW       X, L:time_off
   \   0001C6 26E4                  JRNE      L:??main_18
   \                     ??main_17:
   \   0001C8 8D000000              CALLF     temperature
   \   0001CC C70000                LD        L:result1, A
   \   0001CF 725F0000              CLR       L:result2
   \   0001D3 7201000004            BTJF      L:result1, #0x0, L:??main_21
   \   0001D8 35050000              MOV       L:result2, #0x5
   \                     ??main_21:
   \   0001DC 44                    SRL       A
   \   0001DD C70000                LD        L:result1, A
   \   0001E0 5F                    CLRW      X
   \   0001E1 97                    LD        XL, A
   \   0001E2 C60000                LD        A, L:result2
   \   0001E5 905F                  CLRW      Y
   \   0001E7 9097                  LD        YL, A
   \   0001E9 90BF00                LDW       S:?w0, Y
   \   0001EC 90CE0000              LDW       Y, L:status
   \   0001F0 909F                  LD        A, YL
   \   0001F2 A501                  BCP       A, #0x1
   \   0001F4 35000000              MOV       L:line_lcd, #0x0
   \   0001F8 35200000              MOV       S:?b2, #0x20
   \   0001FC 2703                  JREQ      ??lb_0
   \   0001FE CC0000                JP        L:??main_8
    360          
    361                    else
    362                    {
    363                      line_lcd=0;
    364                      char result3=' ';
    365                     if (status.daily==1)   result3 ='d';
   \                     ??lb_0:
   \   000201 90CE0000              LDW       Y, L:status
   \   000205 909F                  LD        A, YL
   \   000207 A504                  BCP       A, #0x4
   \   000209 2704                  JREQ      L:??main_22
   \   00020B 35640000              MOV       S:?b2, #0x64
    366                      printf("\n0 %d.%d %c",result1,result2,result3);
   \                     ??main_22:
   \   00020F 905F                  CLRW      Y
   \   000211 61                    EXG       A, YL
   \   000212 B600                  LD        A, S:?b2
   \   000214 61                    EXG       A, YL
   \   000215 9089                  PUSHW     Y
   \   000217 8D000000              CALLF     L:?push_w0
   \   00021B 89                    PUSHW     X
   \   00021C AE0000                LDW       X, #`?<Constant "\\n0 %d.%d %c">`
   \   00021F AC000000              JPF       ??main_10
    367                    }
    368          
    369          
    370              }
    371          
    372          
    373          
    374          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine57_0
   \   000002                       ;               // Fall through to label ??Subroutine57_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine58_0
   \   000002                       ;               // Fall through to label ??Subroutine58_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine23:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE2710                LDW       X, #0x2710
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine18:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine5:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_194:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_190:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 C60000                LD        A, L:daily_hour_off
   \   000014 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_192:
   \   000018 C60000                LD        A, L:daily_minute_off
   \   00001B 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_191:
   \   00001F CF0000                LDW       L:time_off, X
   \   000022 87                    RETF
    375          

   \                                 In section .far_func.text, align 1, keep-with-next
    376          void Power_On()
    377          {
    378            status.on=1; 
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine30
    379            status.daily=0; //Off Daily timer 
    380            Save_Status();
   \                     ??CrossCallReturnLabel_88:
   \   00000A AC000000              JPF       Save_Status
    381          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    382          

   \                                 In section .far_func.text, align 1, keep-with-next
    383          void Power_Off()
    384          { 
    385            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine30
    386            status.daily=0; //Off Daily timer 
    387            Save_Status();
   \                     ??CrossCallReturnLabel_87:
   \   00000A AC000000              JPF       Save_Status
    388          }
    389          

   \                                 In section .far_func.text, align 1, keep-with-next
    390          void InitI2C(void)
    391          {
    392             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    393             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    394             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    395          }
    396          

   \                                 In section .far_func.text, align 1, keep-with-next
    397          bool I2C_Start(void)
    398          {
    399             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    400                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    401              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_138:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    402                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    403                  {
    404                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    405                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    406                  }
    407                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    408          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    409          

   \                                 In section .far_func.text, align 1, keep-with-next
    410          bool I2C_WA(u8 address)
    411          {
    412            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    413                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    414                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_137:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    415                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    416                   {
    417                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    418                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    419                   }
    420                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    421          }
    422          

   \                                 In section .far_func.text, align 1, keep-with-next
    423          bool I2C_RA(u8 address)
    424          {
    425            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    426                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    427                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_139:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    428                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    429                   {
    430                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    431                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    432                   }
    433                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    434          }
    435          
    436          

   \                                 In section .far_func.text, align 1, keep-with-next
    437          bool I2C_WD(u8 data)
    438          {
    439           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    440             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    441             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_136:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    442              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    443              {
    444                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    445                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    446              }
    447               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    448          }
    449          

   \                                 In section .far_func.text, align 1, keep-with-next
    450          u8 I2C_RD(void)
    451          {
    452           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    453            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    454           //while((!(I2C->SR1 & 0x40))&&timeout);
    455           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    456           {
    457             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    458             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    459           }
    460           u8 data=I2C_ReceiveData();
    461           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    462          }
    463          
    464            /*
    465          bool Init_DS1307(void)
    466          {
    467             // Test DS1307
    468              error=0;
    469              if (!I2C_Start()) return FALSE;
    470              if(!I2C_WA(0xD0)) return FALSE;
    471              if(!I2C_WD(0x00)) return FALSE;
    472              if(!I2C_WD(0x00)) return FALSE;
    473              I2C_GenerateSTOP(ENABLE);
    474          
    475              // timeout=100;  error=4;
    476              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    477              //    if (!timeout)return FALSE ;
    478               return TRUE;
    479          }
    480             */
    481          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine56_0
   \   000001                       ;               // Fall through to label ??Subroutine56_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    482          bool  ReadDS1307(void)
    483          {
    484                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine40
    485                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_132:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    486                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_135:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    487                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_183:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    488                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine24
    489                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_75:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    490                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    491                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine22
    492                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_71:
   \   000028 C70000                LD        L:seconds, A
    493                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine22
    494                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_70:
   \   00002F C70000                LD        L:minutes, A
    495                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine22
    496                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_69:
   \   000036 C70000                LD        L:hours, A
    497                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine22
    498                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_68:
   \   00003D C70000                LD        L:days, A
    499                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine22
    500                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_67:
   \   000044 C70000                LD        L:`date`, A
    501                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine22
    502                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_66:
   \   00004B C70000                LD        L:mounts, A
    503                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine28
    504                   I2C_GenerateSTOP(ENABLE);
    505                    years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_80:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:years, A
    506                
    507               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    508               //   u8 data1 = I2C_RD();
    509                //Last read byte by I2C slave
    510               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    511               //  I2C_GenerateSTOP(ENABLE);
    512               //  temp2= I2C_RD();
    513                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    514                    {
    515                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    516                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    517                    }
    518                    
    519                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    520          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_153:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    521          

   \                                 In section .far_func.text, align 1, keep-with-next
    522          bool Check_DS1307(void)
    523          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    524             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    525                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine40
    526                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_131:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    527                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_134:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    528                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine56_0
   \                     ??CrossCallReturnLabel_186:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    529                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine24
    530                  //Last read byte by I2C slave
    531                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_74:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    532                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    533                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine50
    534                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_154:
   \   00002E B700                  LD        S:?b8, A
    535                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine28
    536                 I2C_GenerateSTOP(ENABLE);
    537                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_81:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    538                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    539          }
    540          

   \                                 In section .far_func.text, align 1, keep-with-next
    541          bool Set_DS1307()
    542          {
    543                 // convert hex or decimal to bcd format
    544          
    545          
    546                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine40
    547                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_130:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    548                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_133:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    549                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_182:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    550                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_123:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    551                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_124:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    552                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_125:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    553                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_126:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    554                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_127:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    555                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_128:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    556                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_129:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    557                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine56_0
   \                     ??CrossCallReturnLabel_184:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    558                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine56_0
   \                     ??CrossCallReturnLabel_185:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    559                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    560          
    561          
    562             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    563          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    564          
    565          

   \                                 In section .far_func.text, align 1, keep-with-next
    566          u8 convert_tobcd(u8 data)
    567          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    568             u8 data_second_decimal=data/10;
    569             u8 data_first_decimal=data - 10*data_second_decimal;
    570             data=16*data_second_decimal + data_first_decimal;
    571            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    572          }
    573          

   \                                 In section .far_func.text, align 1, keep-with-next
    574          u8 bcd2hex(u8 bcd)
    575          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    576            u8 hex=0;
    577            hex=(bcd>>4)*10 +(bcd&0x0f);
    578            bcd=0;
    579            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    580          }
    581          
    582          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    583          bool Set_Clock()
    584          {
    585              //Clear Display
    586             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine14
    587             Delay1(1000);
    588             line_lcd=0;
    589              printf("\nYears:");
   \                     ??CrossCallReturnLabel_45:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    590                do
    591              {
    592               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine19
    593               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_61:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    594                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine55_0
    595              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_175:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_113:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    596          
    597               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    598              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    599                do
    600              {
    601               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine19
    602               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_62:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    603                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    604              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_114:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    605          
    606              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine14
    607               Delay1(1000);
    608                line_lcd=0;
    609              printf("\nDate:");
   \                     ??CrossCallReturnLabel_46:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    610                do
    611              {
    612               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine19
    613               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_63:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    614                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    615              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_115:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    616          
    617          
    618              //Clear Display
    619             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine14
    620             Delay1(1000);
    621             line_lcd=0;
    622              printf("\nDays:");
   \                     ??CrossCallReturnLabel_47:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    623                do
    624              {
    625                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    626               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    627                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    628              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_116:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    629          
    630          
    631          
    632             //Clear Display
    633             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine14
    634             Delay1(1000);
    635             line_lcd=0;
    636              printf("\nHours:");
   \                     ??CrossCallReturnLabel_48:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    637                do
    638              {
    639                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine18
    640               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_57:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    641                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine55_0
    642              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_174:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_117:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    643          
    644               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    645               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    646                do
    647              {
    648                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine18
    649               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_58:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    650                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine27
    651              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_179:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_118:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    652          
    653              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    654              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    655              do
    656              {
    657                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine18
    658               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_59:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    659                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine27
    660              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_178:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_119:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    661          
    662                // Set parameter to DS1307 + time byte
    663                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    664          
    665                //bool k=Check_DS1307();
    666          
    667            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    668          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine55_0
   \   000006                       ;               // Fall through to label ??Subroutine55_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_149:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    669          
    670          

   \                                 In section .far_func.text, align 1, keep-with-next
    671          u8 adj(u8 min,u8 max,u8 now)
    672          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    673             u8 adj=now;
    674             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    675             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    676             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    677             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    678             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    679             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    680          }
    681          
    682          

   \                                 In section .far_func.text, align 1, keep-with-next
    683          bool key_ok_on()
    684          {
    685            //Read Key OK
    686            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_157:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    687             {
    688               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    689                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_156:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    690                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    691             }
    692          
    693            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    694          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    695          

   \                                 In section .far_func.text, align 1, keep-with-next
    696           bool key_plus_on()
    697          {
    698            //Read Key OK
    699              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_98:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    700               {
    701               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    702                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_28:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_97:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    703                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_29:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    704               }
    705          
    706            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    707          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    708          

   \                                 In section .far_func.text, align 1, keep-with-next
    709            bool key_minus_on()
    710          {
    711            //Read Key OK
    712             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_100:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    713               {
    714               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    715                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_26:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine34
   \                     ??CrossCallReturnLabel_99:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    716                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_27:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    717               }
    718          
    719            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    720          }
    721          
    722          

   \                                 In section .far_func.text, align 1, keep-with-next
    723          bool  key_ok_plus()
    724          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    725            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_49:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    726            {
    727                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    728                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_30:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine15
   \                     ??CrossCallReturnLabel_50:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    729                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_31:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    730            }
    731          
    732           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    733          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_155:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    734          
    735          

   \                                 In section .far_func.text, align 1, keep-with-next
    736          bool Set_Delay_Allarm()
    737          {
    738          
    739             //clr
    740             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine14
    741             Delay1(1000);
    742             line_lcd=0;
    743             printf("\nH On:");
   \                     ??CrossCallReturnLabel_40:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    744            do
    745              {
    746               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    747               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    748                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine55_0
    749              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_177:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_108:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    750          
    751             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine14
    752             Delay1(1000);
    753             line_lcd=0;
    754             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_41:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    755            do
    756              {
    757               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    758               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    759                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine27
    760              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_181:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_109:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    761          
    762              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine14
    763              Delay1(1000);
    764              line_lcd=0;
    765              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_42:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    766            do
    767              {
    768               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    769               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    770                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine55_0
    771              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_176:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_110:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    772          
    773            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine14
    774             Delay1(1000);
    775             line_lcd=0;
    776             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_43:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    777            do
    778              {
    779               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    780               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    781                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine27
    782              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_180:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_111:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    783          
    784               //Computing time_long_on
    785          
    786               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine35
    787               u8 minute=daily_minute_on;
    788               daily_long_on=0;
    789               do
    790               {
    791                    daily_long_on++;
   \                     ??CrossCallReturnLabel_102:
   \   0000DC 8D000000              CALLF     ?Subroutine12
    792                    minute++;
    793                    if (minute==60)
   \                     ??CrossCallReturnLabel_35:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    794                    {
    795                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    796                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    797                    }
    798                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    799          
    800               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_102
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_102
    801          
    802                //Display daily_long_on
    803              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine14
    804              Delay1(1000);
    805              line_lcd=0;
    806              printf("\nLong :");
   \                     ??CrossCallReturnLabel_44:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    807          
    808                do
    809              {
    810               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    811               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    812                 //daily_long_on=adj(0,1440,daily_long_on);
    813              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_112:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    814          
    815              time_on=daily_hour_on*60+daily_minute_on;
   \   000123 8D000000              CALLF     ?Subroutine1
    816              time_off= daily_hour_off*60+daily_minute_off;
    817              //Save data to eeprom
    818                status.daily=1;
   \                     ??CrossCallReturnLabel_0:
   \   000127 8D000000              CALLF     ?Subroutine37
    819               EEPROM_INIT();
   \                     ??CrossCallReturnLabel_106:
   \   00012B 8D000000              CALLF     ?Subroutine2
    820              //u8 temp =*(u8*)(&status);
    821              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    822               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    823               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    824               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_3:
   \   00012F C60000                LD        A, L:daily_hour_on
   \   000132 AE4002                LDW       X, #0x4002
   \   000135 8D000000              CALLF     ?Subroutine6
    825               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_14:
   \   000139 C60000                LD        A, L:daily_minute_on
   \   00013C AE4003                LDW       X, #0x4003
   \   00013F 8D000000              CALLF     ?Subroutine6
    826               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_15:
   \   000143 C60000                LD        A, L:daily_hour_off
   \   000146 AE4004                LDW       X, #0x4004
   \   000149 8D000000              CALLF     ?Subroutine6
    827               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_16:
   \   00014D C60000                LD        A, L:daily_minute_off
   \   000150 AE4005                LDW       X, #0x4005
   \   000153 8D000000              CALLF     ?Subroutine6
    828               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_17:
   \   000157 A6F7                  LD        A, #0xf7
   \   000159 8D000000              CALLF     FLASH_Lock
    829          
    830             return TRUE;
   \   00015D A601                  LD        A, #0x1
   \   00015F 87                    RETF
    831          
    832          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_146:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_145:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_144:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    833          

   \                                 In section .far_func.text, align 1, keep-with-next
    834          void Save_Status()
    835          {
    836            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ?Subroutine2
    837            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    838            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    839            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_2:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    840          }
    841          

   \                                 In section .far_func.text, align 1, keep-with-next
    842          bool Read_Allarm()
    843          {
    844             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000007 C70000                LD        L:daily_hour_on, A
    845              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    846             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000017 C70000                LD        L:daily_minute_on, A
    847              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    848             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   000025 C70000                LD        L:daily_hour_off, A
    849              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    850             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000033 C70000                LD        L:daily_minute_off, A
    851              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    852               // Computting daily_long_on
    853                u8 hour=daily_hour_on;
   \   00003D 8D000000              CALLF     ?Subroutine35
    854               u8 minute=daily_minute_on;
    855               daily_long_on=0;
    856               do
    857               {
    858                    daily_long_on++;
   \                     ??CrossCallReturnLabel_101:
   \   000041 8D000000              CALLF     ?Subroutine12
    859                    minute++;
    860                    if (minute==60)
   \                     ??CrossCallReturnLabel_34:
   \   000045 2607                  JRNE      L:??Read_Allarm_2
    861                    {
    862                      minute=0;
   \   000047 3F00                  CLR       S:?b1
    863                      hour++;
   \   000049 B600                  LD        A, S:?b0
   \   00004B 4C                    INC       A
   \   00004C B700                  LD        S:?b0, A
    864                    }
    865                    if(hour==24) hour=0;
   \                     ??Read_Allarm_2:
   \   00004E B600                  LD        A, S:?b0
   \   000050 A118                  CP        A, #0x18
   \   000052 2602                  JRNE      L:??Read_Allarm_3
   \   000054 3F00                  CLR       S:?b0
    866          
    867               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_3:
   \   000056 C60000                LD        A, L:daily_hour_off
   \   000059 B100                  CP        A, S:?b0
   \   00005B 26E4                  JRNE      L:??CrossCallReturnLabel_101
   \   00005D C60000                LD        A, L:daily_minute_off
   \   000060 B100                  CP        A, S:?b1
   \   000062 26DD                  JRNE      L:??CrossCallReturnLabel_101
    868          
    869            return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    870          }
    871          

   \                                 In section .far_func.text, align 1, keep-with-next
    872          void EEPROM_INIT()
    873          {
    874            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    875            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    876            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    877          
    878          
    879          
    880          }
    881          
    882          

   \                                 In section .far_func.text, align 1, keep-with-next
    883          void GpioConfiguration()
    884          {
    885          
    886            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    887          
    888            // ADC PE6 NEW PB0
    889            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    890          
    891            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    892            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    893          
    894            //PD0 Led
    895            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     ?Subroutine32
    896            //I2C
    897            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_91:
   \   000032 A610                  LD        A, #0x10
   \   000034 AE5005                LDW       X, #0x5005
   \   000037 8D000000              CALLF     ?Subroutine32
    898            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_92:
   \   00003B A620                  LD        A, #0x20
   \   00003D AE5005                LDW       X, #0x5005
   \   000040 8D000000              CALLF     ?Subroutine33
    899            // Remap Pins pb4,pb5  sda,scl ;
    900          
    901             //Init KEY OK,PLUS,MINUS
    902            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_94:
   \   000044 A610                  LD        A, #0x10
   \   000046 AE5019                LDW       X, #0x5019
   \   000049 8D000000              CALLF     ?Subroutine33
    903            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_95:
   \   00004D A602                  LD        A, #0x2
   \   00004F AE5000                LDW       X, #0x5000
   \   000052 8D000000              CALLF     ?Subroutine33
    904            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_96:
   \   000056 A604                  LD        A, #0x4
   \   000058 AE5000                LDW       X, #0x5000
   \   00005B 8D000000              CALLF     ?Subroutine32
    905          
    906            //Init DS18b20 data pin
    907            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_93:
   \   00005F A604                  LD        A, #0x4
   \   000061 AE500F                LDW       X, #0x500f
   \   000064 AC000000              JPF       GPIO_Init
    908          
    909          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF
    910          

   \                                 In section .far_func.text, align 1, keep-with-next
    911          void InitClk()
    912          {
    913            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    914            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    915            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    916            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    917            CLK_SOURCE_HSI,       // Switch to internal timer.
    918            DISABLE,              // Disable the clock switch interrupt.
    919            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    920          
    921            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine36
    922            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_103:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine36
    923            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_104:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine36
    924            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_105:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    925          
    926          
    927          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    928          
    929          

   \                                 In section .far_func.text, align 1, keep-with-next
    930          void InitAdc()
    931          {
    932               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    933               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    934               /*
    935               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    936                          ADC1_CHANNEL_0,
    937                          ADC1_PRESSEL_FCPU_D4,
    938                           ADC1_EXTTRIG_TIM,
    939          
    940                 */
    941               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    942               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    943                                      ADC1_CHANNEL_0,
    944                                      ADC1_ALIGN_RIGHT
    945                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    946          
    947          
    948               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    949          
    950          
    951               //ADC1_Cmd (ENABLE);
    952               //ADC1->CR1 |= ADC1_CR1_ADON ;
    953               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    954               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    955          
    956          }
    957          
    958          /*
    959          void InitUart()
    960          {
    961             UART2_DeInit();
    962             UART2_Init((u32)9600,
    963                        UART2_WORDLENGTH_8D,
    964                        UART2_STOPBITS_1,
    965                        UART2_PARITY_NO,
    966                        UART2_SYNCMODE_CLOCK_DISABLE,
    967                        UART2_MODE_TXRX_ENABLE
    968                          );
    969          
    970             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    971             UART2_Cmd(ENABLE);
    972          
    973            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    974          }
    975            */
    976          

   \                                 In section .far_func.text, align 1, keep-with-next
    977          void SendChar( u8 Char)
    978          {
    979             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    980            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    981          }
   \   00000E 87                    RETF
    982            /*
    983          void Send_Hello()
    984          {
    985            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    986             Delay1(10);
    987             sprintf(data,"Hello");
    988              u8 i=0;
    989            do
    990           {
    991            SendChar(data[i++]);
    992           } while (data[i]!=0);
    993            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    994            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    995          
    996          
    997          
    998          }
    999              */
   1000          
   1001          
   1002              /*
   1003          
   1004          void SendData()
   1005          {
   1006           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1007            Delay1(10);
   1008            u8 i=0;
   1009            sprintf(data,"%d %c",adcdata,0x0d);
   1010           do
   1011           {
   1012             SendChar(data[i++]);
   1013          
   1014           } while (data[i]!=0);
   1015             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1016            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1017            rx_data=0;
   1018          }
   1019          */
   1020          

   \                                 In section .far_func.text, align 1, keep-with-next
   1021          void LCDDataOut(u8 data)
   1022          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1023            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_23:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_164
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine54_0
   1024            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_164:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_22:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_165
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine54_0
   1025            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_165:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_21:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_166
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine54_0
   1026            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_166:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_167
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine54_0
   1027          }
   \                     ??CrossCallReturnLabel_167:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_173:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1028          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine54_0
   \   000002                       ;               // Fall through to label ??Subroutine54_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1029          void InitLcd()
   1030          {
   1031           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine8
   1032            LCD_RW(0);
   1033            LCD_RS(0);
   \                     ??CrossCallReturnLabel_25:
   \   000006 8D000000              CALLF     ?Subroutine9
   1034            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_162:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine16
   1035          
   1036            LCDInstrNibble(0x03);
   1037             Delay1(10);
   1038            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_52:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1039             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine16
   1040            LCDInstrNibble(0x03);
   1041             Delay1(10);
   1042          
   1043             //Line 4
   1044            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_51:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1045            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1046            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1047            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1048          
   1049            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1050            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1051          
   1052            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine49
   1053            Delay1(250);
   \                     ??CrossCallReturnLabel_150:
   \   000048 AE00FA                LDW       X, #0xfa
   \   00004B 8D000000              CALLF     Delay1
   1054          
   1055            LCDInstr(0x06);
   \   00004F A606                  LD        A, #0x6
   \   000051 8D000000              CALLF     LCDInstr
   1056            Delay1(10);
   \   000055 AE000A                LDW       X, #0xa
   \   000058 AC000000              JPF       Delay1
   1057          
   1058          
   1059          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_171:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_170:
   \   00000A 87                    RETF
   1060          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine54_0
   \                     ??CrossCallReturnLabel_168:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_159:
   \   00000D                       REQUIRE ??Subroutine53_0
   \   00000D                       ;               // Fall through to label ??Subroutine53_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_158:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1061          void LCDInstr(u8 Instr)
   1062          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1063            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine9
   1064            LCD_RW(0);
   \                     ??CrossCallReturnLabel_160:
   \   000009 2000                  JRA       ?Subroutine0
   1065            LCDDataOut(Instr>>4);
   1066            PulseEnable();
   1067            LCDDataOut(Instr & 0x0F);
   1068            PulseEnable();
   1069          }
   1070          

   \                                 In section .far_func.text, align 1, keep-with-next
   1071          void LCDData(u8 Data)
   1072          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1073            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine7
   1074            LCD_RW(0);
   \                     ??CrossCallReturnLabel_19:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1075            LCDDataOut(Data>>4);
   1076            PulseEnable() ;
   1077            LCDDataOut(Data & 0x0F) ;
   1078            PulseEnable();
   1079          }
   1080          

   \                                 In section .far_func.text, align 1, keep-with-next
   1081          void LCDInstrNibble(u8 Instr)
   1082          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1083            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine8
   1084            LCD_RW(0);
   1085            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_24:
   \   00000B AC000000              JPF       ??Subroutine53_0
   1086            PulseEnable();
   1087          }
   1088          

   \                                 In section .far_func.text, align 1, keep-with-next
   1089          void PulseEnable(void)
   1090          {
   1091            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1092             Delay1(1);
   1093            LCD_EN(1);
   1094             Delay1(1);
   1095            LCD_EN(0);
   \                     ??CrossCallReturnLabel_6:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine54_0
   1096             Delay1(1);
   \                     ??CrossCallReturnLabel_163:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1097          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_172:
   \   000006 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_141:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_140:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1098          

   \                                 In section .far_func.text, align 1, keep-with-next
   1099          void LCD_Busy(void)
   1100          {
   1101             //set Port D7 as Input
   1102             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1103             //Set Read
   1104             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine7
   1105             LCD_RS(0);
   \                     ??CrossCallReturnLabel_18:
   \   000013 8D000000              CALLF     ?Subroutine9
   1106             // Read Busy Flag
   1107                timer2=0;
   \                     ??CrossCallReturnLabel_161:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1108             do
   1109             {
   1110             // Enable set
   1111               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1112                Delay1(1);
   1113               LCD_EN(1);
   1114                Delay1(1);
   1115             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_7:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1116                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1117                //Clear read
   1118              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine54_0
   1119             //set Port D7 as Output
   1120             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_169:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1121          
   1122          }
   1123          
   1124          

   \                                 In section .far_func.text, align 1, keep-with-next
   1125          void LCD(u8 data)
   1126           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1127             //  static u8 linet=0;
   1128          
   1129          
   1130               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_143
   1131               {
   1132          
   1133                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
   1134                   {
   1135                   case 0:
   1136                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
   1137                     count=0;
   \   00001F 725F0000              CLR       L:count
   1138                     break;
   \   000023 2022                  JRA       L:??LCD_4
   1139                   case 1:
   1140                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
   1141                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
   1142                     break;
   \   00002F 2016                  JRA       L:??LCD_4
   1143                   case 2:
   1144                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
   1145                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
   1146                     break;
   \   00003B 200A                  JRA       L:??LCD_4
   1147                   case 3:
   1148                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
   1149                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
   1150                     break;
   1151                   //default:
   1152                    //  LCDInstr(0x80 |0x40);    //Line 1
   1153                    }
   1154                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
   1155                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
   1156                   {
   1157                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
   1158                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine49
   1159                    Delay1(2500);
   \                     ??CrossCallReturnLabel_152:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
   1160                   }
   1161          
   1162                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ?Subroutine45
   1163          
   1164          
   1165               }
   1166          
   1167          
   1168               if (count==20)
   \                     ??CrossCallReturnLabel_143:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
   1169                {
   1170                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
   1171                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
   1172                }
   1173                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
   1174                  {
   1175                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
   1176                    Delay1(1);
   1177                  }
   1178                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
   1179                    {
   1180                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
   1181                      count=0;
   \   000088 725F0000              CLR       L:count
   1182                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
   1183                    }
   1184                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
   1185                        {
   1186                          count=0;
   \   000092 725F0000              CLR       L:count
   1187                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine49
   1188                          Delay1(250);
   \                     ??CrossCallReturnLabel_151:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
   1189                        }
   1190          
   1191          
   1192              /*
   1193                   line++;
   1194                   if (line>3)
   1195                   {
   1196                     line=1;  //Line 0 for Time
   1197                   }
   1198                 switch(line)
   1199                   {
   1200                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1201                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1202                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1203                   default : LCDInstr(0x80 | 0x40); // Line 1
   1204                   }
   1205                   Delay(1);
   1206                   count=0;
   1207                }
   1208          
   1209               */
   1210          
   1211               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
   1212               {
   1213                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
   1214                  Delay1(1);
   \   0000AB 8D000000              CALLF     ?Subroutine45
   1215                 count++;
   \                     ??CrossCallReturnLabel_142:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
   1216               }
   1217           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF
   1218          

   \                                 In section .far_func.text, align 1, keep-with-next
   1219          void InitDelayTimer()
   1220          {
   1221             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1222             //Tclock 16/8=2Mhz  /20 10us
   1223                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1224                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1225                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1226                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1227            //Enable TIM2
   1228                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1229          
   1230          }
   1231          

   \                                 In section .far_func.text, align 1, keep-with-next
   1232          bool DS18_Write(u8 data)
   1233          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1234            disableInterrupts();
   \   000006 9B                    SIM
   1235            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1236            {
   1237             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine11
   1238             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1239             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_33:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_56
   \   00001A 8D000000              CALLF     ?Subroutine17
   1240               //else DS18(0);
   1241             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_56:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1242             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine17
   1243             //Delay1(0);
   1244            }
   \                     ??CrossCallReturnLabel_55:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1245            enableInterrupts();
   \   000032 9A                    RIM
   1246            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1247          
   1248          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_147:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1249          
   1250          

   \                                 In section .far_func.text, align 1, keep-with-next
   1251          u8  DS18_Read()
   1252          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1253              //Init DS18b20 data pin as Input
   1254          
   1255            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1256              disableInterrupts();
   \   000006 9B                    SIM
   1257            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1258            {
   1259              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine11
   1260              Delay_us(1); //Start time slot 4,5 us
   1261              DS18(1);
   \                     ??CrossCallReturnLabel_32:
   \   00000D 8D000000              CALLF     ?Subroutine17
   1262              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_53:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1263              //Delay1(0);
   1264             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_65:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1265              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1266              //  DS18(1);  // Next bit
   1267             // Delay1(0);
   1268          
   1269            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1270              enableInterrupts();
   \   000046 9A                    RIM
   1271              //Init DS18b20 data pin
   1272             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1273             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1274          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1275          

   \                                 In section .far_func.text, align 1, keep-with-next
   1276          bool DS18_Reset()
   1277          {
   1278             //Init Reset Pulse
   1279              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine48
   1280              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_148:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1281              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine17
   1282              //Delay1(1);
   1283              timer2=0;
   \                     ??CrossCallReturnLabel_54:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1284              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_36:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_64:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1285              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_37:
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1286              // Delay1(10);
   1287              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000027 AE0014                LDW       X, #0x14
   \   00002A 8D000000              CALLF     Delay1
   1288          
   1289              return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 87                    RETF
   1290          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1291          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1292          u8 temperature ()
   1293          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1294          
   1295             //Init Reset Pulse
   1296               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_85:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1297             //Skip ROM Command 0xCC
   1298              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine26
   1299             //Function command  CONVERT T [44h]
   1300              DS18_Write(0x44);
   1301              //Wait util end convert
   1302              timer2=0;
   1303               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_79:
   \   000013 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_39:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_79
   1304                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1305               //u8 temp8=timer2;
   1306              //Init Reset Pulse
   1307              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_86:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1308              // Skip ROM Command 0xCC
   1309              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine25
   1310              //Function command READ SCRATCHPAD [BEh]
   1311              DS18_Write(0xBE);
   1312               u8 temp1=DS18_Read();
   1313               u8 temp2=DS18_Read();
   1314              DS18_Reset();
   \                     ??CrossCallReturnLabel_77:
   \   000033 8D000000              CALLF     DS18_Reset
   1315                u16 result = temp2*256+temp1;
   1316                temp1= (u8)(result>>3); 
   1317               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1318          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine57_0
   \                     ??CrossCallReturnLabel_188:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1319          

   \                                 In section .far_func.text, align 1, keep-with-next
   1320          bool Read_DS18()
   1321          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1322          
   1323             //Init Reset Pulse
   1324               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_83:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1325             //Skip ROM Command 0xCC
   1326              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine26
   1327             //Function command  CONVERT T [44h]
   1328              DS18_Write(0x44);
   1329              //Wait util end convert
   1330              timer2=0;
   1331               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_78:
   \   000013 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_38:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_78
   1332                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1333               //u8 temp8=timer2;
   1334              //Init Reset Pulse
   1335              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_84:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1336              // Skip ROM Command 0xCC
   1337              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine25
   1338              //Function command READ SCRATCHPAD [BEh]
   1339              DS18_Write(0xBE);
   1340               u8 temp1=DS18_Read();
   1341               u8 temp2=DS18_Read();
   1342               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_76:
   \   000033 8D000000              CALLF     ?Subroutine31
   1343               u8 temp4=DS18_Read();
   1344               u8 temp5=DS18_Read();
   1345               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_90:
   \   000037 8D000000              CALLF     ?Subroutine31
   1346               u8 temp7=DS18_Read();
   1347               u8 temp8=DS18_Read();
   1348               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_89:
   \   00003B 8D000000              CALLF     DS18_Read
   1349          
   1350               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1351          
   1352                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1353                result2=0;
   \   000047 725F0000              CLR       L:result2
   1354                u16 result = temp2*256+temp1;
   1355                result1= (u8)(result>>3); 
   \   00004B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   00004F C70000                LD        L:result1, A
   1356                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1357                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1358                
   1359          
   1360                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1361               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1362               //line_lcd=1;
   1363               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1364               // while (!key_ok_on());
   1365          
   1366               //u8 temp3=DS18_Read();
   1367          
   1368              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1369          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1370          

   \                                 In section .far_func.text, align 1, keep-with-next
   1371          bool DS18Set ()
   1372          {
   1373               //Init Reset Pulse
   1374              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine29
   \                     ??CrossCallReturnLabel_82:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1375             //Skip ROM Command 0xCC
   1376              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1377             //Function command  WRITE SCRATCHPAD 0x4E
   1378              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1379             //Write 3 bytes last is config reg
   1380              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1381              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1382              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1383          
   1384          
   1385          
   1386          
   1387            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1388          }
   1389          
   1390          
   1391          
   1392          
   1393           /*
   1394          u16 Average()
   1395          {
   1396           //Find average in measure
   1397            u8 i=0;
   1398            u16 Summa=0;
   1399            do
   1400            {
   1401             Summa+=measure[i++];
   1402            } while ( measure[i]!=0);
   1403             if(i!=0) Summa=Summa/i;
   1404             return Summa;
   1405          }
   1406             */
   1407          

   \                                 In section .far_func.text, align 1, keep-with-next
   1408          PUTCHAR_PROTOTYPE
   1409          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1410            /* Place your implementation of fputc here */
   1411            /* e.g. write a character to the USART */
   1412                //USART_SendData(USART3, (u8) ch);
   1413               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1414             /* Loop until the end of transmission */
   1415              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1416            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1417          }
   1418          
   1419          

   \                                 In section .far_func.text, align 1, keep-with-next
   1420          void Delay1(u16 Delay)
   1421          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1422              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1423            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1424            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1425          }
   \   00000D 87                    RETF
   1426          

   \                                 In section .far_func.text, align 1, keep-with-next
   1427           void Delay2(u16 Delay)
   1428          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1429            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1430            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1431          }
   \   00000D 87                    RETF
   1432          
   1433          

   \                                 In section .far_func.text, align 1, keep-with-next
   1434          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1435          {
   1436            //disableInterrupts();
   1437            do
   1438              {
   1439                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1440                nop();
   \   000001 9D                    NOP
   1441              }
   1442              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1443            //enableInterrupts();
   1444          }
   \   000005 87                    RETF
   1445          
   1446          
   1447          
   1448          /*
   1449          void Delay12 (u16 Delay)
   1450          {
   1451            timer2=0;
   1452            while ( timer2 < Delay); ;
   1453          }
   1454          */
   1455          
   1456          
   1457          #ifdef USE_FULL_ASSERT
   1458          
   1459          /**
   1460            * @brief  Reports the name of the source file and the source line number
   1461            *   where the assert_param error has occurred.
   1462            * @param file: pointer to the source file name
   1463            * @param line: assert_param error line source number
   1464            * @retval : None
   1465            */

   \                                 In section .far_func.text, align 1
   1466          void assert_failed(u8* file, u32 line)
   1467          {
   1468            /* User can add his own implementation to report the file name and line number,
   1469               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1470          
   1471            /* Infinite loop */
   1472            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1473            {
   1474          
   1475            }
   1476          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n1 %d.%d %c">`:
   \   000000 0A312025642E          DC8 "\0121 %d.%d %c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n0 %d.%d %c">`:
   \   000000 0A302025642E          DC8 "\0120 %d.%d %c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"
   1477          #endif
   1478          
   1479          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     result                            4
     k                                 2
     status                            2
     ?Subroutine38                     7
     main                            547
     ?Subroutine51                     2
     ??Subroutine57_0                  8
     ?Subroutine44                     2
     ??Subroutine58_0                 12
     ?Subroutine37                    11
     ?Subroutine23                    16
     ?Subroutine18                    10
     ?Subroutine5                      9
     ?Subroutine1                     35
     Power_On                         14
     ?Subroutine30                    15
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine43                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine42                     1
     ??Subroutine56_0                  7
     ?Subroutine41                     9
     ?Subroutine40                    11
     ReadDS1307                      109
     ?Subroutine28                    11
     ?Subroutine24                    13
     ?Subroutine22                     8
     ?Subroutine50                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine39                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine49                     6
     Set_Clock                       395
     ?Subroutine27                     6
     ??Subroutine55_0                  5
     ?Subroutine19                    10
     ?Subroutine14                    16
     adj                              77
     key_ok_on                        41
     ?Subroutine52                     7
     key_plus_on                      37
     ?Subroutine34                     7
     ?Subroutine10                     7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine15                    26
     Set_Delay_Allarm                352
     ?Subroutine35                    15
     ?Subroutine12                    15
     ?Subroutine6                      5
     ?Subroutine2                     29
     ?Subroutine46                     9
     Save_Status                      10
     Read_Allarm                     103
     EEPROM_INIT                      15
     GpioConfiguration               104
     ?Subroutine33                     9
     ?Subroutine32                     9
     InitClk                          56
     ?Subroutine36                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine7                      7
     ??Subroutine54_0                  5
     ?Subroutine47                     7
     ?Subroutine9                      2
     InitLcd                          92
     ?Subroutine16                    17
     ?Subroutine8                     11
     ?Subroutine0                     13
     ??Subroutine53_0                 10
     ?Subroutine21                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine4                     24
     ?Subroutine45                     6
     LCD_Busy                         69
     LCD                             186
     InitDelayTimer                   29
     DS18_Write                       57
     ?Subroutine17                     9
     ?Subroutine11                    10
     ?Subroutine48                     9
     DS18_Read                        77
     ?Subroutine20                    12
     DS18_Reset                       49
     ?Subroutine13                     7
     ?Subroutine29                     7
     temperature                      63
     ?Subroutine26                    17
     ?Subroutine25                    25
     ?Subroutine3                     21
     Read_DS18                       121
     ?Subroutine31                    12
     DS18Set                          41
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\n1 %d.%d %c">       12
     ?<Constant "\n0 %d.%d %c">       12
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4
     ?<Constant "\n%d.%d">             7

 
 4 078 bytes in section .far_func.text
   103 bytes in section .near.bss
     3 bytes in section .near.data
   204 bytes in section .near.rodata
 
 4 078 bytes of CODE  memory
   204 bytes of CONST memory
   106 bytes of DATA  memory

Errors: none
Warnings: none
