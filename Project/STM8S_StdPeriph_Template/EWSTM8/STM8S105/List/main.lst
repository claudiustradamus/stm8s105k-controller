###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             08/Jul/2013  21:55:39 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          
     14          /* Includes ------------------------------------------------------------------*/
     15          #include "stm8s.h"
     16          #include "stdio.h"
     17          #include "string.h"
     18          /* Private defines -----------------------------------------------------------*/
     19          
     20          /* ================ LCD ======================= */
     21          
     22          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     23          #define LCD_PORT (GPIOC)
     24          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     25          #define DATA4 GPIO_PIN_4
     26          #define DATA5 GPIO_PIN_5
     27          #define DATA6 GPIO_PIN_6
     28          #define DATA7 GPIO_PIN_7
     29          #define EN  GPIO_PIN_3
     30          #define RW  GPIO_PIN_1
     31          #define RS  GPIO_PIN_2
     32          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     33          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     34          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     35          
     36          
     37          #ifdef __GNUC__
     38            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     39               set to 'Yes') calls __io_putchar() */
     40            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     41          #else
     42            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     43          #endif /* __GNUC__ */
     44          
     45          
     46          
     47          
     48          #define SpecialSymbol 0x1b //Esc to start message
     49          
     50          
     51          
     52          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     53          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     54          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     55          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     56          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     57          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
     58          #define data_size 20

   \                                 In section .near.bss, align 1
     59          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     60          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     61          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     62          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     63          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     64          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     65          u8 error;
   \                     error:
   \   000000                       DS8 1
     66          //u8 index=0;

   \                                 In section .near.bss, align 1
     67          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
     68          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
     69          
     70          
     71          
     72          
     73          
     74          
     75          
     76          
     77          /* Private function prototypes -----------------------------------------------*/
     78          void InitHardware();
     79          void GpioConfiguration();
     80          void InitClk();
     81          void InitAdc();
     82          void InitI2C();
     83          bool ReadDS1307();
     84          void InitUart();
     85          void InitLcd();
     86          void InitDelayTimer();
     87          void Delay1( u16 Delay);
     88          void Delay2( u16 Delay);
     89          void LCDInstrNibble (u8 Instr);
     90          void LCDInstr(u8 Instr);
     91          void LCDDataOut(u8 data);
     92          void LCD_Busy();
     93          void PulseEnable();
     94          void SendData();
     95          void SendChar(u8 Char);
     96          void Send_Hello();
     97          bool Init_DS1307(void);
     98          bool I2C_Start(void);
     99          bool I2C_WA(u8 address);
    100          bool I2C_WD(u8 data);
    101          bool I2C_RA(u8 address);
    102          
    103          u16  Average();
    104          
    105          
    106          /* Private functions ---------------------------------------------------------*/
    107          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1, keep-with-next
    108          void main(void)
    109          {
    110              /*High speed internal clock prescaler: 1*/
    111              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    112          
    113              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    114              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    115              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    116              InitUart();
   \   00000C 8D000000              CALLF     InitUart
    117              enableInterrupts();
   \   000010 9A                    RIM
    118              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000011 8D000000              CALLF     ?Subroutine6
    119              InitLcd();
   \                     ??CrossCallReturnLabel_12:
   \   000015 8D000000              CALLF     InitLcd
    120              InitAdc();
   \   000019 8D000000              CALLF     InitAdc
    121              InitI2C();
   \   00001D 8D000000              CALLF     InitI2C
    122              //if (!Init_DS1307())printf("E1:%d",error);
    123              Send_Hello();
   \   000021 8D000000              CALLF     Send_Hello
   \   000025 202A                  JRA       L:??main_0
    124               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    125          
    126              while(1)
    127              {
    128                ADC1_Cmd (ENABLE);
    129          
    130                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    131                   Delay2(30000);
    132                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    133                   Delay2(30000);
    134          
    135                line_lcd=0;
    136               if (!ReadDS1307())
    137               {
    138                 printf("\n E2:%d",error);
    139               }
    140                 else  printf("\n      ");
   \                     ??main_1:
   \   000027 AE0000                LDW       X, #`?<Constant "\\n      ">`
   \   00002A 8D000000              CALLF     printf
    141               line_lcd=1;
   \                     ??main_2:
   \   00002E 35010000              MOV       L:line_lcd, #0x1
    142               printf("\n %02x:%02x",minutes,seconds);
   \   000032 C60000                LD        A, L:seconds
   \   000035 5F                    CLRW      X
   \   000036 97                    LD        XL, A
   \   000037 89                    PUSHW     X
   \   000038 C60000                LD        A, L:minutes
   \   00003B 97                    LD        XL, A
   \   00003C 89                    PUSHW     X
   \   00003D AE0000                LDW       X, #`?<Constant "\\n %02x:%02x">`
   \   000040 8D000000              CALLF     printf
   \   000044 5B04                  ADD       SP, #0x4
    143               //line_lcd=2;
    144               //printf("\n Just Test:%X", timer2);
    145                if (rx_data==SpecialSymbol) SendData();
   \   000046 C60000                LD        A, L:rx_data
   \   000049 A11B                  CP        A, #0x1b
   \   00004B 2604                  JRNE      L:??main_0
   \   00004D 8D000000              CALLF     SendData
   \                     ??main_0:
   \   000051 A601                  LD        A, #0x1
   \   000053 8D000000              CALLF     ADC1_Cmd
   \   000057 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_25:
   \   00005B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_24:
   \   00005F 725F0000              CLR       L:line_lcd
   \   000063 8D000000              CALLF     ReadDS1307
   \   000067 A100                  CP        A, #0x0
   \   000069 26BC                  JRNE      L:??main_1
   \   00006B C60000                LD        A, L:error
   \   00006E 5F                    CLRW      X
   \   00006F 97                    LD        XL, A
   \   000070 89                    PUSHW     X
   \   000071 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000074 8D000000              CALLF     printf
   \   000078 5B02                  ADD       SP, #0x2
   \   00007A 20B2                  JRA       L:??main_2
    146                //SendData();
    147          
    148              }
    149          
    150          
    151          
    152          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine12:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE7530                LDW       X, #0x7530
   \   00000C AC000000              JPF       Delay2
    153          

   \                                 In section .far_func.text, align 1, keep-with-next
    154          void InitI2C(void)
    155          {
    156             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    157             I2C_Init(100000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE86A0                LDW       X, #0x86a0
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 5C                    INCW      X
   \   00001A BF00                  LDW       S:?w0, X
   \   00001C 85                    POPW      X
   \   00001D 8D000000              CALLF     I2C_Init
    158             I2C_Cmd(ENABLE);
   \   000021 A601                  LD        A, #0x1
   \   000023 AC000000              JPF       I2C_Cmd
    159          }
    160          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    161          bool I2C_Start(void)
    162          {
    163             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    164                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    165              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_67:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    166                   if (!timeout)return FALSE;
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2602                  JRNE      L:??I2C_Start_2
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    167                    else return TRUE;
   \                     ??I2C_Start_2:
   \   00001F A601                  LD        A, #0x1
   \   000021 87                    RETF
    168          }
    169          

   \                                 In section .far_func.text, align 1, keep-with-next
    170          bool I2C_WA(u8 address)
    171          {
    172            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    173                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    174                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_66:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    175                   if (!timeout)return FALSE ;
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2602                  JRNE      L:??I2C_WA_2
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    176                    else return TRUE;
   \                     ??I2C_WA_2:
   \   00001F A601                  LD        A, #0x1
   \   000021 87                    RETF
    177          }
    178          

   \                                 In section .far_func.text, align 1, keep-with-next
    179          bool I2C_RA(u8 address)
    180          {
    181            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    182                 timeout=100;
   \   000008 35640000              MOV       L:timeout, #0x64
    183                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_64:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    184                   if (!timeout)return FALSE ;
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2602                  JRNE      L:??I2C_RA_2
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    185                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    186          }
    187          
    188          

   \                                 In section .far_func.text, align 1, keep-with-next
    189          bool I2C_WD(u8 data)
    190          {
    191           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    192             timeout=100;
   \   000004 35640000              MOV       L:timeout, #0x64
    193             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_65:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    194              if (!timeout)return FALSE ;
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2602                  JRNE      L:??I2C_WD_2
   \   00001B 4F                    CLR       A
   \   00001C 87                    RETF
    195               else return TRUE;
   \                     ??I2C_WD_2:
   \   00001D A601                  LD        A, #0x1
   \   00001F 87                    RETF
    196          }
    197          
    198          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 C60000                LD        A, L:error
   \   000003 4C                    INC       A
   \   000004 C70000                LD        L:error, A
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    199          bool Init_DS1307(void)
    200          {
    201             // Test DS1307
    202              error=1;
   \                     Init_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine16
    203              if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_32:
   \   000004 2602                  JRNE      L:??Init_DS1307_0
   \                     ??Init_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    204              error++;
   \                     ??Init_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine13
    205              if(!I2C_WA(0xD0)) return FALSE;
   \                     ??CrossCallReturnLabel_27:
   \   00000C 27F8                  JREQ      L:??Init_DS1307_1
    206               error++;
   \   00000E 8D000000              CALLF     ?Subroutine11
    207              if(!I2C_WD(0x00)) return FALSE;
   \                     ??CrossCallReturnLabel_22:
   \   000012 27F2                  JREQ      L:??Init_DS1307_1
    208               error++;
   \   000014 8D000000              CALLF     ?Subroutine11
    209              if(!I2C_WD(0x00)) return FALSE;
   \                     ??CrossCallReturnLabel_23:
   \   000018 27EC                  JREQ      L:??Init_DS1307_1
    210              I2C_GenerateSTOP(ENABLE);
   \   00001A A601                  LD        A, #0x1
   \   00001C 8D000000              CALLF     I2C_GenerateSTOP
    211          
    212              // timeout=100;  error=4;
    213              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    214              //    if (!timeout)return FALSE ;
    215               return TRUE;
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    216          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 35010000              MOV       L:error, #0x1
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_44:
   \   000004 A6D0                  LD        A, #0xd0
   \   000006 8D000000              CALLF     I2C_WA
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_43:
   \   000004 4F                    CLR       A
   \   000005 8D000000              CALLF     I2C_WD
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
    217          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 AE0340                LDW       X, #0x340
   \   000003                       REQUIRE ??Subroutine24_0
   \   000003                       ;               // Fall through to label ??Subroutine24_0

   \                                 In section .far_func.text, align 1, keep-with-next
    218          bool  ReadDS1307(void)
    219          {
    220          
    221                error=1;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine16
    222                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_31:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    223                error++;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine13
    224                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??CrossCallReturnLabel_26:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    225                error++;
   \   00000E 8D000000              CALLF     ?Subroutine11
    226                 if(!I2C_WD(0x00)) return FALSE;
   \                     ??CrossCallReturnLabel_21:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    227                error++;
   \   000014 8D000000              CALLF     ?Subroutine17
    228                I2C_GenerateSTOP(ENABLE);
   \                     ??CrossCallReturnLabel_33:
   \   000018 8D000000              CALLF     ?Subroutine10
    229                Delay1(1000);
    230          
    231          
    232          
    233                  if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_20:
   \   00001C 8D000000              CALLF     I2C_Start
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    234                error++;
   \   000024 8D000000              CALLF     ?Subroutine17
    235          
    236                   if(!I2C_RA(0xD0))return FALSE;
   \                     ??CrossCallReturnLabel_34:
   \   000028 A6D0                  LD        A, #0xd0
   \   00002A 8D000000              CALLF     I2C_RA
   \   00002E A100                  CP        A, #0x0
   \   000030 27D4                  JREQ      L:??ReadDS1307_1
    237                error++;
   \   000032 8D000000              CALLF     ?Subroutine17
    238          
    239          
    240                    //I2C_AcknowledgeConfig(I2C_ACK_CURR);
    241                   I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \                     ??CrossCallReturnLabel_35:
   \   000036 4F                    CLR       A
   \   000037 8D000000              CALLF     I2C_AcknowledgeConfig
    242                 timeout=100;  error=6;
   \   00003B 35640000              MOV       L:timeout, #0x64
   \   00003F 35060000              MOV       L:error, #0x6
    243                 while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_RECEIVED))&&timeout);
   \                     ??ReadDS1307_2:
   \   000043 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_62:
   \   000047 2605                  JRNE      L:??ReadDS1307_3
   \   000049 C60000                LD        A, L:timeout
   \   00004C 26F5                  JRNE      L:??ReadDS1307_2
    244                  if (!timeout)return FALSE ;
   \                     ??ReadDS1307_3:
   \   00004E C60000                LD        A, L:timeout
   \   000051 27B3                  JREQ      L:??ReadDS1307_1
    245                 seconds = I2C_ReceiveData();
   \   000053 8D000000              CALLF     I2C_ReceiveData
   \   000057 C70000                LD        L:seconds, A
    246          
    247          
    248                    I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00005A 4F                    CLR       A
   \   00005B 8D000000              CALLF     I2C_AcknowledgeConfig
    249                timeout=100;  error=7;
   \   00005F 35640000              MOV       L:timeout, #0x64
   \   000063 35070000              MOV       L:error, #0x7
    250                 while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_RECEIVED))&&timeout);
   \                     ??ReadDS1307_4:
   \   000067 8D000000              CALLF     ?Subroutine14
   \                     ??CrossCallReturnLabel_63:
   \   00006B 2605                  JRNE      L:??ReadDS1307_5
   \   00006D C60000                LD        A, L:timeout
   \   000070 26F5                  JRNE      L:??ReadDS1307_4
    251                  if (!timeout)return FALSE ;
   \                     ??ReadDS1307_5:
   \   000072 C60000                LD        A, L:timeout
   \   000075 278F                  JREQ      L:??ReadDS1307_1
    252                    minutes = I2C_ReceiveData();
   \   000077 8D000000              CALLF     I2C_ReceiveData
   \   00007B C70000                LD        L:minutes, A
    253          
    254          
    255                I2C_GenerateSTOP(ENABLE);
   \   00007E 8D000000              CALLF     ?Subroutine10
    256                     Delay1(1000);
    257                return TRUE;
   \                     ??CrossCallReturnLabel_19:
   \   000082 A601                  LD        A, #0x1
   \   000084 87                    RETF
    258          
    259          
    260          
    261          
    262          
    263          
    264          
    265          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_45:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 AE03E8                LDW       X, #0x3e8
   \   000009 AC000000              JPF       Delay1
    266          

   \                                 In section .far_func.text, align 1, keep-with-next
    267          void GpioConfiguration()
    268          {
    269          
    270            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    271          
    272            // ADC PE6 NEW PB0
    273            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    274          
    275            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    276            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    277          
    278            //PD0 Led
    279            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     GPIO_Init
    280            //I2C
    281            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000032 35B00000              MOV       S:?b0, #0xb0
   \   000036 A610                  LD        A, #0x10
   \   000038 AE5005                LDW       X, #0x5005
   \   00003B 8D000000              CALLF     GPIO_Init
    282            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00003F 35B00000              MOV       S:?b0, #0xb0
   \   000043 A620                  LD        A, #0x20
   \   000045 AE5005                LDW       X, #0x5005
   \   000048 AC000000              JPF       GPIO_Init
    283            // Remap Pins pb4,pb5  sda,scl ;
    284          
    285          
    286          }
    287          

   \                                 In section .far_func.text, align 1, keep-with-next
    288          void InitClk()
    289          {
    290            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    291            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    292            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    293            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    294            CLK_SOURCE_HSI,       // Switch to internal timer.
    295            DISABLE,              // Disable the clock switch interrupt.
    296            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    297          
    298            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine15
    299            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_28:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine15
    300            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_29:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine15
    301            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_30:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    302          
    303          
    304          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    305          
    306          

   \                                 In section .far_func.text, align 1, keep-with-next
    307          void InitAdc()
    308          {
    309               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    310               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    311               /*
    312               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    313                          ADC1_CHANNEL_0,
    314                          ADC1_PRESSEL_FCPU_D4,
    315                           ADC1_EXTTRIG_TIM,
    316          
    317                 */
    318               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    319               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    320                                      ADC1_CHANNEL_0,
    321                                      ADC1_ALIGN_RIGHT
    322                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    323          
    324          
    325               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    326          
    327          
    328               //ADC1_Cmd (ENABLE);
    329               //ADC1->CR1 |= ADC1_CR1_ADON ;
    330               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    331               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    332          
    333          }
    334          

   \                                 In section .far_func.text, align 1, keep-with-next
    335          void InitUart()
    336          {
    337             UART2_DeInit();
   \                     InitUart:
   \   000000 8D000000              CALLF     UART2_DeInit
    338             UART2_Init((u32)9600,
    339                        UART2_WORDLENGTH_8D,
    340                        UART2_STOPBITS_1,
    341                        UART2_PARITY_NO,
    342                        UART2_SYNCMODE_CLOCK_DISABLE,
    343                        UART2_MODE_TXRX_ENABLE
    344                          );
   \   000004 350C0000              MOV       S:?b7, #0xc
   \   000008 35800000              MOV       S:?b6, #0x80
   \   00000C 3F00                  CLR       S:?b5
   \   00000E 3F00                  CLR       S:?b4
   \   000010 4F                    CLR       A
   \   000011 AE2580                LDW       X, #0x2580
   \   000014 BF00                  LDW       S:?w1, X
   \   000016 5F                    CLRW      X
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 8D000000              CALLF     UART2_Init
    345          
    346             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   \   00001D A601                  LD        A, #0x1
   \   00001F AE0255                LDW       X, #0x255
   \   000022 8D000000              CALLF     UART2_ITConfig
    347             UART2_Cmd(ENABLE);
   \   000026 A601                  LD        A, #0x1
   \   000028 AC000000              JPF       UART2_Cmd
    348          
    349            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    350          }
    351          

   \                                 In section .far_func.text, align 1, keep-with-next
    352          void SendChar( u8 Char)
    353          {
    354             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    355            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    356          }
   \   00000E 87                    RETF
    357          

   \                                 In section .far_func.text, align 1, keep-with-next
    358          void Send_Hello()
    359          {
   \                     Send_Hello:
   \   000000 3B0000                PUSH      S:?b8
    360            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine8
    361             Delay1(10);
    362             sprintf(data,"Hello");
   \                     ??CrossCallReturnLabel_18:
   \   000007 90AE0000              LDW       Y, #`?<Constant "Hello">`
   \   00000B AE0000                LDW       X, #data
   \   00000E 8D000000              CALLF     sprintf
    363              u8 i=0;
   \   000012 3F00                  CLR       S:?b8
    364            do
    365           {
    366            SendChar(data[i++]);
   \                     ??Send_Hello_0:
   \   000014 8D000000              CALLF     ?Subroutine2
    367           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_3:
   \   000018 26FA                  JRNE      L:??Send_Hello_0
    368            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??Send_Hello_1:
   \   00001A AE0040                LDW       X, #0x40
   \   00001D 8D000000              CALLF     UART2_GetFlagStatus
   \   000021 A100                  CP        A, #0x0
   \   000023 27F5                  JREQ      L:??Send_Hello_1
    369            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000025 8D000000              CALLF     ?Subroutine6
    370          
    371          
    372          
    373          }
   \                     ??CrossCallReturnLabel_13:
   \   000029 320000                POP       S:?b8
   \   00002C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteHigh
   \   000009 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_40:
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 AE000A                LDW       X, #0xa
   \   000003 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 D60000                LD        A, (L:data,X)
   \   000008 8D000000              CALLF     SendChar
   \   00000C B600                  LD        A, S:?b8
   \   00000E 4C                    INC       A
   \   00000F B700                  LD        S:?b8, A
   \   000011 5F                    CLRW      X
   \   000012 41                    EXG       A, XL
   \   000013 B600                  LD        A, S:?b8
   \   000015 724D0000              TNZ       (L:data,X)
   \   000019 87                    RETF
    374          
    375          
    376          
    377          
    378          

   \                                 In section .far_func.text, align 1, keep-with-next
    379          void SendData()
    380          {
   \                     SendData:
   \   000000 3B0000                PUSH      S:?b8
    381           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine8
    382            Delay1(10);
    383            u8 i=0;
   \                     ??CrossCallReturnLabel_17:
   \   000007 3F00                  CLR       S:?b8
    384            sprintf(data,"%d %c",adcdata,0x0d);
   \   000009 4B0D                  PUSH      #0xd
   \   00000B 4B00                  PUSH      #0x0
   \   00000D 3B0000                PUSH      L:adcdata + 1
   \   000010 3B0000                PUSH      L:adcdata
   \   000013 90AE0000              LDW       Y, #`?<Constant "%d %c">`
   \   000017 AE0000                LDW       X, #data
   \   00001A 8D000000              CALLF     sprintf
   \   00001E 5B04                  ADD       SP, #0x4
    385           do
    386           {
    387             SendChar(data[i++]);
   \                     ??SendData_0:
   \   000020 8D000000              CALLF     ?Subroutine2
    388          
    389           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_2:
   \   000024 26FA                  JRNE      L:??SendData_0
    390             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??SendData_1:
   \   000026 AE0040                LDW       X, #0x40
   \   000029 8D000000              CALLF     UART2_GetFlagStatus
   \   00002D A100                  CP        A, #0x0
   \   00002F 27F5                  JREQ      L:??SendData_1
    391            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000031 8D000000              CALLF     ?Subroutine6
    392            rx_data=0;
   \                     ??CrossCallReturnLabel_14:
   \   000035 725F0000              CLR       L:rx_data
    393          }
   \   000039 320000                POP       S:?b8
   \   00003C 87                    RETF
    394          

   \                                 In section .far_func.text, align 1, keep-with-next
    395          void LCDDataOut(u8 data)
    396          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    397            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_52
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine23_0
    398            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_52:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_53
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine23_0
    399            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_53:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_54
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine23_0
    400            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_54:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_55
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine23_0
    401          }
   \                     ??CrossCallReturnLabel_55:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_61:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    402          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine23_0
   \   000002                       ;               // Fall through to label ??Subroutine23_0

   \                                 In section .far_func.text, align 1, keep-with-next
    403          void InitLcd()
    404          {
    405           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine4
    406            LCD_RW(0);
    407            LCD_RS(0);
   \                     ??CrossCallReturnLabel_11:
   \   000006 8D000000              CALLF     ?Subroutine5
    408            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_50:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine7
    409          
    410            LCDInstrNibble(0x03);
    411             Delay1(10);
    412            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_15:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    413             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine7
    414            LCDInstrNibble(0x03);
    415             Delay1(10);
    416          
    417             //Line 4
    418            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_16:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    419            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    420            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    421            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    422          
    423            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    424            Delay1(10);
   \   00003D 8D000000              CALLF     ?Subroutine20
    425          
    426            LCDInstr(0x01) ;
   \                     ??CrossCallReturnLabel_42:
   \   000041 A601                  LD        A, #0x1
   \   000043 8D000000              CALLF     LCDInstr
    427            Delay1(250);
   \   000047 AE00FA                LDW       X, #0xfa
   \   00004A 8D000000              CALLF     Delay1
    428          
    429            LCDInstr(0x06);
   \   00004E A606                  LD        A, #0x6
   \   000050 8D000000              CALLF     LCDInstr
    430            Delay1(10);
   \   000054 AE000A                LDW       X, #0xa
   \   000057 AC000000              JPF       Delay1
    431          
    432          
    433          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_41:
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_59:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_58:
   \   00000A 87                    RETF
    434          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine23_0
   \                     ??CrossCallReturnLabel_56:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_47:
   \   00000D                       REQUIRE ??Subroutine22_0
   \   00000D                       ;               // Fall through to label ??Subroutine22_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_46:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    435          void LCDInstr(u8 Instr)
    436          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    437            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine5
    438            LCD_RW(0);
   \                     ??CrossCallReturnLabel_48:
   \   000009 2000                  JRA       ?Subroutine0
    439            LCDDataOut(Instr>>4);
    440            PulseEnable();
    441            LCDDataOut(Instr & 0x0F);
    442            PulseEnable();
    443          }
    444          

   \                                 In section .far_func.text, align 1, keep-with-next
    445          void LCDData(u8 Data)
    446          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    447            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine3
    448            LCD_RW(0);
   \                     ??CrossCallReturnLabel_5:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    449            LCDDataOut(Data>>4);
    450            PulseEnable() ;
    451            LCDDataOut(Data & 0x0F) ;
    452            PulseEnable();
    453          }
    454          

   \                                 In section .far_func.text, align 1, keep-with-next
    455          void LCDInstrNibble(u8 Instr)
    456          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    457            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine4
    458            LCD_RW(0);
    459            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_10:
   \   00000B AC000000              JPF       ??Subroutine22_0
    460            PulseEnable();
    461          }
    462          

   \                                 In section .far_func.text, align 1, keep-with-next
    463          void PulseEnable(void)
    464          {
    465            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine1
    466             Delay1(1);
    467            LCD_EN(1);
    468             Delay1(1);
    469            LCD_EN(0);
   \                     ??CrossCallReturnLabel_0:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine23_0
    470             Delay1(1);
   \                     ??CrossCallReturnLabel_51:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
    471          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_60:
   \   000006 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_37:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_36:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
    472          

   \                                 In section .far_func.text, align 1, keep-with-next
    473          void LCD_Busy(void)
    474          {
    475             //set Port D7 as Input
    476             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    477             //Set Read
    478             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine3
    479             LCD_RS(0);
   \                     ??CrossCallReturnLabel_4:
   \   000013 8D000000              CALLF     ?Subroutine5
    480             // Read Busy Flag
    481                timer2=0;
   \                     ??CrossCallReturnLabel_49:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
    482             do
    483             {
    484             // Enable set
    485               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine1
    486                Delay1(1);
    487               LCD_EN(1);
    488                Delay1(1);
    489             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_1:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
    490                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
    491                //Clear read
    492              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine23_0
    493             //set Port D7 as Output
    494             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_57:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
    495          
    496          }
    497          
    498          

   \                                 In section .far_func.text, align 1, keep-with-next
    499          void LCD(u8 data)
    500           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    501             //  static u8 linet=0;
    502          
    503          
    504               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265E                  JRNE      L:??CrossCallReturnLabel_39
    505               {
    506          
    507                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
    508                   {
    509                   case 0:
    510                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
    511                     count=0;
   \   00001F 725F0000              CLR       L:count
    512                     break;
   \   000023 2022                  JRA       L:??LCD_4
    513                   case 1:
    514                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
    515                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
    516                     break;
   \   00002F 2016                  JRA       L:??LCD_4
    517                   case 2:
    518                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
    519                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
    520                     break;
   \   00003B 200A                  JRA       L:??LCD_4
    521                   case 3:
    522                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
    523                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
    524                     break;
    525                   //default:
    526                    //  LCDInstr(0x80 |0x40);    //Line 1
    527                    }
    528                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
    529                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 2511                  JRC       L:??LCD_5
    530                   {
    531                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
    532                    LCDInstr(0x01); //Clear LCD
   \   000056 A601                  LD        A, #0x1
   \   000058 8D000000              CALLF     LCDInstr
    533                    Delay1(2500);
   \   00005C AE09C4                LDW       X, #0x9c4
   \   00005F 8D000000              CALLF     Delay1
    534                   }
    535          
    536                   Delay1(1);
   \                     ??LCD_5:
   \   000063 8D000000              CALLF     ?Subroutine19
    537          
    538          
    539               }
    540          
    541          
    542               if (count==20)
   \                     ??CrossCallReturnLabel_39:
   \   000067 C60000                LD        A, L:count
   \   00006A A114                  CP        A, #0x14
   \   00006C 260A                  JRNE      L:??LCD_6
    543                {
    544                  LCDInstr(0x80 | 0x40);
   \   00006E A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   000070 8D000000              CALLF     LCDInstr
    545                  Delay1(1);
   \                     ??LCD_8:
   \   000074 5F                    CLRW      X
   \   000075 5C                    INCW      X
   \   000076 2029                  JRA       ??LCD_9
    546                }
    547                   else if(count==40)
   \                     ??LCD_6:
   \   000078 A128                  CP        A, #0x28
   \   00007A 2604                  JRNE      L:??LCD_10
    548                  {
    549                    LCDInstr(0x80 | 0x14);
   \   00007C A694                  LD        A, #0x94
   \   00007E 20F0                  JRA       ??LCD_7
    550                    Delay1(1);
    551                  }
    552                    else if(count==60)
   \                     ??LCD_10:
   \   000080 A13C                  CP        A, #0x3c
   \   000082 260C                  JRNE      L:??LCD_11
    553                    {
    554                      LCDInstr(0x80 | 0x54);
   \   000084 A6D4                  LD        A, #0xd4
   \   000086 8D000000              CALLF     LCDInstr
    555                      count=0;
   \   00008A 725F0000              CLR       L:count
    556                      Delay1(1);
   \   00008E 20E4                  JRA       ??LCD_8
    557                    }
    558                      else if(count >80)
   \                     ??LCD_11:
   \   000090 A151                  CP        A, #0x51
   \   000092 2511                  JRC       L:??LCD_12
    559                        {
    560                          count=0;
   \   000094 725F0000              CLR       L:count
    561                          LCDInstr(0x01); //Clear LCD
   \   000098 A601                  LD        A, #0x1
   \   00009A 8D000000              CALLF     LCDInstr
    562                          Delay1(250);
   \   00009E AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   0000A1 8D000000              CALLF     Delay1
    563                        }
    564          
    565          
    566              /*
    567                   line++;
    568                   if (line>3)
    569                   {
    570                     line=1;  //Line 0 for Time
    571                   }
    572                 switch(line)
    573                   {
    574                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
    575                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
    576                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
    577                   default : LCDInstr(0x80 | 0x40); // Line 1
    578                   }
    579                   Delay(1);
    580                   count=0;
    581                }
    582          
    583               */
    584          
    585               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A5 B600                  LD        A, S:?b8
   \   0000A7 A11C                  CP        A, #0x1c
   \   0000A9 250F                  JRC       L:??LCD_13
    586               {
    587                 LCDData(data);
   \   0000AB 8D000000              CALLF     LCDData
    588                  Delay1(1);
   \   0000AF 8D000000              CALLF     ?Subroutine19
    589                 count++;
   \                     ??CrossCallReturnLabel_38:
   \   0000B3 C60000                LD        A, L:count
   \   0000B6 4C                    INC       A
   \   0000B7 C70000                LD        L:count, A
    590               }
    591           }
   \                     ??LCD_13:
   \   0000BA 320000                POP       S:?b8
   \   0000BD 87                    RETF
    592          

   \                                 In section .far_func.text, align 1, keep-with-next
    593          void InitDelayTimer()
    594          {
    595             //Timer 2 use for Delay  long Delay is 40ms for lcd
    596             //Tclock 16/8=2Mhz  /20 10us
    597                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
    598                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
    599                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
    600                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
    601            //Enable TIM2
    602                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
    603          
    604          }
    605          
    606          

   \                                 In section .far_func.text, align 1, keep-with-next
    607          u16 Average()
    608          {
    609           //Find average in measure
    610            u8 i=0;
   \                     Average:
   \   000000 3F00                  CLR       S:?b0
    611            u16 Summa=0;
   \   000002 3F00                  CLR       S:?b3
   \   000004 3F00                  CLR       S:?b2
    612            do
    613            {
    614             Summa+=measure[i++];
   \                     ??Average_0:
   \   000006 5F                    CLRW      X
   \   000007 41                    EXG       A, XL
   \   000008 B600                  LD        A, S:?b0
   \   00000A 41                    EXG       A, XL
   \   00000B 58                    SLLW      X
   \   00000C DE0000                LDW       X, (L:measure,X)
   \   00000F 72BB0000              ADDW      X, S:?w1
   \   000013 BF00                  LDW       S:?w1, X
   \   000015 B600                  LD        A, S:?b0
   \   000017 4C                    INC       A
   \   000018 B700                  LD        S:?b0, A
    615            } while ( measure[i]!=0);
   \   00001A 5F                    CLRW      X
   \   00001B 41                    EXG       A, XL
   \   00001C B600                  LD        A, S:?b0
   \   00001E 58                    SLLW      X
   \   00001F DE0000                LDW       X, (L:measure,X)
   \   000022 26E2                  JRNE      L:??Average_0
    616             if(i!=0) Summa=Summa/i;
   \   000024 3D00                  TNZ       S:?b0
   \   000026 2708                  JREQ      L:??Average_1
   \   000028 905F                  CLRW      Y
   \   00002A 61                    EXG       A, YL
   \   00002B BE00                  LDW       X, S:?w1
   \   00002D 65                    DIVW      X, Y
   \   00002E BF00                  LDW       S:?w1, X
    617             return Summa;
   \                     ??Average_1:
   \   000030 BE00                  LDW       X, S:?w1
   \   000032 87                    RETF
    618          }
    619          

   \                                 In section .far_func.text, align 1, keep-with-next
    620          PUTCHAR_PROTOTYPE
    621          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
    622            /* Place your implementation of fputc here */
    623            /* e.g. write a character to the USART */
    624                //USART_SendData(USART3, (u8) ch);
    625               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
    626             /* Loop until the end of transmission */
    627              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
    628            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
    629          }
    630          
    631          

   \                                 In section .far_func.text, align 1, keep-with-next
    632          void Delay1(u16 Delay)
    633          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
    634            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
    635            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
    636          }
   \   00000D 87                    RETF
    637          

   \                                 In section .far_func.text, align 1, keep-with-next
    638           void Delay2(u16 Delay)
    639          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
    640            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
    641            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
    642          }
   \   00000D 87                    RETF
    643          
    644          
    645          
    646          /*
    647          void Delay12 (u16 Delay)
    648          {
    649            timer2=0;
    650            while ( timer2 < Delay); ;
    651          }
    652          */
    653          
    654          
    655          #ifdef USE_FULL_ASSERT
    656          
    657          /**
    658            * @brief  Reports the name of the source file and the source line number
    659            *   where the assert_param error has occurred.
    660            * @param file: pointer to the source file name
    661            * @param line: assert_param error line source number
    662            * @retval : None
    663            */

   \                                 In section .far_func.text, align 1
    664          void assert_failed(u8* file, u32 line)
    665          {
    666            /* User can add his own implementation to report the file name and line number,
    667               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    668          
    669            /* Infinite loop */
    670            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
    671            {
    672          
    673            }
    674          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n      ">`:
   \   000000 0A2020202020          DC8 "\012      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n %02x:%02x">`:
   \   000000 0A2025303278          DC8 "\012 %02x:%02x"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "Hello">`:
   \   000000 48656C6C6F00          DC8 "Hello"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d %c">`:
   \   000000 256420256300          DC8 "%d %c"
    675          #endif
    676          
    677          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label             Bytes
     --------------             -----
     timer1                        2
     timer2                        2
     timeout                       1
     adcdata                       2
     rx_data                       1
     data                         20
     measure                      40
     line_lcd                      1
     count                         1
     seconds                       1
     minutes                       1
     error                         1
     result                        4
     k                             2
     ?Subroutine6                  9
     main                        124
     ?Subroutine12                16
     InitI2C                      39
     ??Subroutine24_0              7
     I2C_Start                    34
     I2C_WA                       34
     I2C_RA                       36
     I2C_WD                       32
     ?Subroutine21                 8
     Init_DS1307                  35
     ?Subroutine16                11
     ?Subroutine13                13
     ?Subroutine11                12
     ?Subroutine14                 3
     ReadDS1307                  133
     ?Subroutine17                 5
     ?Subroutine10                13
     GpioConfiguration            76
     InitClk                      56
     ?Subroutine15                 9
     InitAdc                      45
     InitUart                     44
     SendChar                     15
     Send_Hello                   45
     ?Subroutine8                 14
     ?Subroutine20                 7
     ?Subroutine2                 26
     SendData                     61
     LCDDataOut                   87
     ?Subroutine3                  7
     ??Subroutine23_0              5
     ?Subroutine18                 7
     ?Subroutine5                  2
     InitLcd                      91
     ?Subroutine7                 15
     ?Subroutine4                 11
     ?Subroutine0                 13
     ??Subroutine22_0             10
     ?Subroutine9                 10
     LCDInstr                     11
     LCDData                      11
     LCDInstrNibble               15
     PulseEnable                  16
     ?Subroutine1                 24
     ?Subroutine19                 6
     LCD_Busy                     69
     LCD                         190
     InitDelayTimer               29
     Average                      51
     fputc                        18
     Delay1                       14
     Delay2                       14
     assert_failed                 2
     ?<Constant "\n E2:%d">        8
     ?<Constant "\n      ">        8
     ?<Constant "\n %02x:%02x">   12
     ?<Constant "Hello">           6
     ?<Constant "%d %c">           6

 
 1 690 bytes in section .far_func.text
    79 bytes in section .near.bss
    40 bytes in section .near.rodata
 
 1 690 bytes of CODE  memory
    40 bytes of CONST memory
    79 bytes of DATA  memory

Errors: none
Warnings: none
