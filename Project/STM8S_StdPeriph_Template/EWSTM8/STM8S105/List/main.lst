###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             15/Aug/2013  00:28:42 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c                      #
#    Command line =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c -e -Ohz --debug      #
#                    --code_model medium --data_model medium -o               #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC C:\Users\Administrator\Desktop\stm8s105k-co #
#                    ntroller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S10 #
#                    5\List\ -lA C:\Users\Administrator\Desktop\stm8s105k-con #
#                    troller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S105 #
#                    \List\ -I C:\Users\Administrator\Desktop\stm8s105k-contr #
#                    oller\Project\STM8S_StdPeriph_Template\EWSTM8\..\ -I     #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Libraries\S #
#                    TM8S_StdPeriph_Driver\inc\ --vregs 16                    #
#    List file    =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\main.l #
#                    st                                                       #
#    Object file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\main.o  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59            //Power 
     60          #define power_pin GPIO_PIN_3
     61          
     62          
     63          
     64          //EEPROM Address;
     65          #define EEPROM_ADDR 0x4000
     66          #define EEPROM_ADR_STATUSH EEPROM_ADDR + 0
     67          #define EEPROM_ADR_STATUSL EEPROM_ADDR + 1
     68          #define EEPROM_ADR_TIME_ON_HOURS EEPROM_ADDR +2
     69          #define EEPROM_ADR_TIME_ON_MINUTES EEPROM_ADDR +3
     70          #define EEPROM_ADR_TIME_OFF_HOURS EEPROM_ADDR +4
     71          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     72          
     73          
     74          
     75          #ifdef __GNUC__
     76            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     77               set to 'Yes') calls __io_putchar() */
     78            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     79          #else
     80            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     81          #endif /* __GNUC__ */
     82          
     83          
     84          
     85          
     86          #define SpecialSymbol 0x1b //Esc to start message
     87          //#define data_size 20
     88          #define key_time 8000
     89          #define key_time_ok 15000
     90          #define DS_Control  0x10  // Out 1s
     91          
     92          
     93          
     94          
     95          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     96          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     97          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     98          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     99          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    100          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    101          //char data[data_size];
    102          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    103          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    104          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    105          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    106          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    107          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    108          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    109          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    110          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    111          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    120          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    121          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    122          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    127          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          char line1[];
   \                     line1:
   \   000000                       DS8 1
    130          //u8 index=0;

   \                                 In section .near.bss, align 1
    131          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    132          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    133          
    134          
    135           struct   status_reg
    136           {
    137             unsigned on:1;
    138             unsigned timer_on:1;
    139             unsigned daily:1;

   \                                 In section .near.bss, align 1
    140           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    141             
    142          
    143          
    144          
    145          
    146          
    147          
    148          /* Private function prototypes -----------------------------------------------*/
    149          void InitHardware();
    150          void GpioConfiguration();
    151          void InitClk();
    152          void InitAdc();
    153          void InitI2C();
    154          void EEPROM_INIT();
    155          bool ReadDS1307();
    156          //void InitUart();
    157          void InitLcd();
    158          void InitDelayTimer();
    159          void Delay1( u16 Delay);
    160          void Delay2( u16 Delay);
    161          void Delay_us(u16 Delay);
    162          void LCDInstrNibble (u8 Instr);
    163          void LCDInstr(u8 Instr);
    164          void LCDDataOut(u8 data);
    165          void LCD_Busy();
    166          void PulseEnable();
    167          //void SendData();
    168          void SendChar(u8 Char);
    169          //void Send_Hello();
    170          bool Set_Clock();
    171          bool key_ok_on();
    172          bool key_plus_on();
    173          bool key_minus_on();
    174          bool key_ok_plus();
    175          bool Init_DS1307(void);
    176          bool Check_DS1307(void);
    177          bool I2C_Start(void);
    178          bool I2C_WA(u8 address);
    179          bool I2C_WD(u8 data);
    180          bool I2C_RA(u8 address);
    181          bool Set_DS1307();
    182          bool Set_Delay_Allarm();
    183          bool Read_Allarm();
    184          bool Read_DS18();
    185          bool DS18_Write( u8 data);
    186          bool DS18_Reset();
    187          bool DS18Set();
    188          u8 temperature();
    189          u8 DS18_Read();
    190          u8 convert_tobcd(u8 data);
    191          u8 I2C_RD(void);
    192          u8 adj(u8 min,u8 max,u8 now);
    193          u8 bcd2hex(u8 bcd);
    194          void Power_On(void);
    195          void Power_Off();
    196          void Save_Status();
    197          void Rotate_Line( char * line);
    198          void Display_Line(char * line);
    199          
    200          u16  Average();
    201          
    202          
    203          /* Private functions ---------------------------------------------------------*/
    204          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    205          void main(void)
    206          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    207              /*High speed internal clock prescaler: 1*/
    208              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    209          
    210              InitClk();
   \   000003 8D000000              CALLF     InitClk
    211              InitDelayTimer();
   \   000007 8D000000              CALLF     InitDelayTimer
    212              GpioConfiguration();
   \   00000B 8D000000              CALLF     GpioConfiguration
    213              //InitUart();
    214              enableInterrupts();
   \   00000F 9A                    RIM
    215              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000010 A680                  LD        A, #0x80
   \   000012 8D000000              CALLF     ?Subroutine16
    216              InitLcd();
   \                     ??CrossCallReturnLabel_44:
   \   000016 8D000000              CALLF     InitLcd
    217              //InitAdc();
    218              InitI2C();
   \   00001A 8D000000              CALLF     InitI2C
    219              //Init DS18B20
    220              DS18Set();
   \   00001E 8D000000              CALLF     DS18Set
    221              line_lcd=0;
   \   000022 725F0000              CLR       L:line_lcd
    222              if (!Read_DS18())
   \   000026 8D000000              CALLF     Read_DS18
   \   00002A A100                  CP        A, #0x0
   \   00002C 260D                  JRNE      L:??main_0
    223              {
    224               printf("\nDS_Err_I");
   \   00002E AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   000031 8D000000              CALLF     printf
    225                while (!key_ok_on());
   \                     ??main_1:
   \   000035 8D000000              CALLF     ?Subroutine41
    226              }
   \                     ??CrossCallReturnLabel_125:
   \   000039 27FA                  JREQ      L:??main_1
    227          
    228          
    229          
    230          
    231          
    232              //years=bcd2hex(13);
    233              Delay1(1000);
   \                     ??main_0:
   \   00003B AE03E8                LDW       X, #0x3e8
   \   00003E 8D000000              CALLF     Delay1
    234               if (!ReadDS1307())
   \   000042 8D000000              CALLF     ReadDS1307
   \   000046 A100                  CP        A, #0x0
   \   000048 2615                  JRNE      L:??main_2
    235               {
    236                 printf("\n E2:%d",error);
   \   00004A C60000                LD        A, L:error
   \   00004D 5F                    CLRW      X
   \   00004E 97                    LD        XL, A
   \   00004F 89                    PUSHW     X
   \   000050 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000053 8D000000              CALLF     printf
   \   000057 5B02                  ADD       SP, #0x2
    237                 // Reset the CPU: Enable the watchdog and wait until it expires
    238                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000059 35CC50E0              MOV       L:0x50e0, #0xcc
    239                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   00005D 20FE                  JRA       L:??main_3
    240               }
    241               //Send_Hello();
    242              //line_lcd=0;
    243              //printf("\nHello");
    244          
    245          
    246              if (!Check_DS1307())
   \                     ??main_2:
   \   00005F 8D000000              CALLF     Check_DS1307
   \   000063 A100                  CP        A, #0x0
   \   000065 2626                  JRNE      L:??main_4
    247              {
    248                 if (error!=0)
   \   000067 C60000                LD        A, L:error
   \   00006A 2712                  JREQ      L:??main_5
    249                 {
    250                  printf("\n E:%d",error);
   \   00006C 5F                    CLRW      X
   \   00006D 97                    LD        XL, A
   \   00006E 89                    PUSHW     X
   \   00006F AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000072 8D000000              CALLF     printf
   \   000076 5B02                  ADD       SP, #0x2
    251                   while (!key_ok_on());
   \                     ??main_6:
   \   000078 8D000000              CALLF     ?Subroutine41
    252          
    253                 }
   \                     ??CrossCallReturnLabel_126:
   \   00007C 27FA                  JREQ      L:??main_6
    254               line_lcd=0;
   \                     ??main_5:
   \   00007E 725F0000              CLR       L:line_lcd
    255               printf("\nSetClock");
   \   000082 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000085 8D000000              CALLF     printf
    256                Set_Clock();
   \   000089 8D000000              CALLF     Set_Clock
    257          
    258              }
    259          
    260                 //Read Status register from eepom and update it
    261                //size=sizeof(status);
    262               //u16 status
    263               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_4:
   \   00008D AE4000                LDW       X, #0x4000
   \   000090 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_5:
   \   000094 B700                  LD        S:?b8, A
   \   000096 AE4001                LDW       X, #0x4001
   \   000099 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_4:
   \   00009D 905F                  CLRW      Y
   \   00009F 9097                  LD        YL, A
   \   0000A1 5F                    CLRW      X
   \   0000A2 41                    EXG       A, XL
   \   0000A3 B600                  LD        A, S:?b8
   \   0000A5 41                    EXG       A, XL
   \   0000A6 4F                    CLR       A
   \   0000A7 02                    RLWA      X, A
   \   0000A8 8D000000              CALLF     ??Subroutine61_0
   \                     ??CrossCallReturnLabel_191:
   \   0000AC CF0000                LDW       L:status, X
    264                status_check = *(u16*)(&status);
   \   0000AF CE0000                LDW       X, L:status
   \   0000B2 CF0000                LDW       L:status_check, X
    265              //When Start Check for Allarm and computing Daily_long_on
    266               if ( Read_Allarm() == TRUE)
   \   0000B5 8D000000              CALLF     Read_Allarm
   \   0000B9 A101                  CP        A, #0x1
   \   0000BB 260F                  JRNE      L:??main_7
    267               {
    268                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000BD 8D000000              CALLF     ?Subroutine1
    269                 time_off= daily_hour_off*60+daily_minute_off;
    270               }
   \                     ??CrossCallReturnLabel_1:
   \   0000C1 2009                  JRA       L:??main_7
    271          
    272               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    273          
    274               // Working fuction
    275              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    276               
    277               
    278               
    279              // strcpy(line1,"Hello I am here! ");
    280              //  while(1)
    281              //  {
    282              //     Display_Line(line1);
    283              //     Delay2(20000);
    284              //  }
    285              //  while (!key_ok_on());
    286          
    287              while(1)
    288              {
    289                ADC1_Cmd (ENABLE);
    290          
    291                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    292                   Delay2(23437);
    293                  // ttimer++;
    294                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    295                   Delay2(23437);
    296                   
    297                     //status_check = *(u16*)(&status);
    298                     
    299                line_lcd=0;
    300               if (!ReadDS1307())
    301               {
    302                 printf("\n E2:%d",error);
    303                  //restart i2c
    304                // Reset the CPU: Enable the watchdog and wait until it expires
    305                 IWDG->KR = IWDG_KEY_ENABLE;
    306                 while ( 1 );    // Wait until reset occurs from IWDG
    307          
    308               }
    309                 else
    310                   //printf("\n      ");
    311              
    312               //line_lcd=2;
    313               //printf("\n Just Test:%X", timer2);
    314                   //if (rx_data==SpecialSymbol) SendData();
    315                //SendData();
    316          
    317                if (key_ok_on())
    318                {
    319                  line_lcd=0;
    320                  printf("\n%02d:%02d:%02d",years,mounts,date);
    321                  status.daily=1; //On Daily timer
    322                  Save_Status();
    323                  Delay2(50000);
    324                  //Delay2(10000);
    325                  //Delay2(10000);
    326                }
    327          
    328                if(key_ok_plus()) Set_Delay_Allarm();  //Set Daily Allarm
    329                if(key_plus_on()) Power_On();
    330                if(key_minus_on())Power_Off();
    331          
    332          
    333                //Check for Allarm
    334                    if (status.daily==1)
    335                  {
    336                u16 time_now=hours*60+minutes;
    337                status.on=0;
    338                     u16 time=time_on;
    339                     do
    340                    {
    341                       if(time==time_now)
    342                       {
    343                         status.on=1;
    344                          break ;
    345                       }
    346                        time++;
    347                         if( time==1441) time=0;
    348                    } while(!(time==time_off));
    349                   };
    350          
    351                   
    352                      //Read Temperature
    353                  // if( ttimer > 5 )
    354                   //{
    355                      result1=temperature();
    356                      result2=0;
    357                      if(result1%2!=0) result2=5;
    358                      result1/=2;
    359                      char result3;
    360                     // ttimer=0;
    361                 //  }
    362          
    363                   //printf("\n%d.%d",result1,result2);
    364          
    365                     //Display
    366                     // line_lcd=0;
    367                      if (status.daily==1)  result3 ='d';
    368                       else result3=' ';
    369                      sprintf(line1,"%d.%d %c",result1,result2,result3);
    370                      Display_Line(line1);
    371                    line_lcd=1;
    372                    printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    373          
    374          
    375                     if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_8:
   \   0000C3 A608                  LD        A, #0x8
   \   0000C5 AE500F                LDW       X, #0x500f
   \   0000C8 8D000000              CALLF     GPIO_WriteHigh
   \                     ??main_7:
   \   0000CC A601                  LD        A, #0x1
   \   0000CE 8D000000              CALLF     ADC1_Cmd
   \   0000D2 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_75:
   \   0000D6 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_74:
   \   0000DA 725F0000              CLR       L:line_lcd
   \   0000DE 8D000000              CALLF     ReadDS1307
   \   0000E2 A100                  CP        A, #0x0
   \   0000E4 2615                  JRNE      L:??main_9
   \   0000E6 C60000                LD        A, L:error
   \   0000E9 5F                    CLRW      X
   \   0000EA 97                    LD        XL, A
   \   0000EB 89                    PUSHW     X
   \   0000EC AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   0000EF 8D000000              CALLF     printf
   \   0000F3 5B02                  ADD       SP, #0x2
   \   0000F5 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_10:
   \   0000F9 20FE                  JRA       L:??main_10
   \                     ??main_9:
   \   0000FB 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_127:
   \   0000FF 272C                  JREQ      L:??main_11
   \   000101 725F0000              CLR       L:line_lcd
   \   000105 C60000                LD        A, L:`date`
   \   000108 5F                    CLRW      X
   \   000109 97                    LD        XL, A
   \   00010A 89                    PUSHW     X
   \   00010B C60000                LD        A, L:mounts
   \   00010E 97                    LD        XL, A
   \   00010F 89                    PUSHW     X
   \   000110 C60000                LD        A, L:years
   \   000113 97                    LD        XL, A
   \   000114 89                    PUSHW     X
   \   000115 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000118 8D000000              CALLF     printf
   \   00011C 5B06                  ADD       SP, #0x6
   \   00011E 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_112:
   \   000122 8D000000              CALLF     Save_Status
   \   000126 AEC350                LDW       X, #0xc350
   \   000129 8D000000              CALLF     Delay2
   \                     ??main_11:
   \   00012D 8D000000              CALLF     key_ok_plus
   \   000131 A100                  CP        A, #0x0
   \   000133 2704                  JREQ      L:??main_12
   \   000135 8D000000              CALLF     Set_Delay_Allarm
   \                     ??main_12:
   \   000139 8D000000              CALLF     key_plus_on
   \   00013D A100                  CP        A, #0x0
   \   00013F 2704                  JREQ      L:??main_13
   \   000141 8D000000              CALLF     Power_On
   \                     ??main_13:
   \   000145 8D000000              CALLF     key_minus_on
   \   000149 A100                  CP        A, #0x0
   \   00014B 2704                  JREQ      L:??main_14
   \   00014D 8D000000              CALLF     Power_Off
   \                     ??main_14:
   \   000151 CE0000                LDW       X, L:status
   \   000154 9F                    LD        A, XL
   \   000155 A504                  BCP       A, #0x4
   \   000157 2739                  JREQ      L:??main_15
   \   000159 C60000                LD        A, L:hours
   \   00015C 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_197:
   \   000160 C60000                LD        A, L:minutes
   \   000163 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_193:
   \   000167 BF00                  LDW       S:?w0, X
   \   000169 CE0000                LDW       X, L:status
   \   00016C 01                    RRWA      X, A
   \   00016D A4FE                  AND       A, #0xfe
   \   00016F 02                    RLWA      X, A
   \   000170 CF0000                LDW       L:status, X
   \   000173 CE0000                LDW       X, L:time_on
   \                     ??main_16:
   \   000176 B300                  CPW       X, S:?w0
   \   000178 260C                  JRNE      L:??main_17
   \   00017A CE0000                LDW       X, L:status
   \   00017D 01                    RRWA      X, A
   \   00017E AA01                  OR        A, #0x1
   \   000180 02                    RLWA      X, A
   \   000181 CF0000                LDW       L:status, X
   \   000184 200C                  JRA       L:??main_15
   \                     ??main_17:
   \   000186 5C                    INCW      X
   \   000187 A305A1                CPW       X, #0x5a1
   \   00018A 2601                  JRNE      L:??main_18
   \   00018C 5F                    CLRW      X
   \                     ??main_18:
   \   00018D C30000                CPW       X, L:time_off
   \   000190 26E4                  JRNE      L:??main_16
   \                     ??main_15:
   \   000192 8D000000              CALLF     temperature
   \   000196 C70000                LD        L:result1, A
   \   000199 725F0000              CLR       L:result2
   \   00019D 7201000004            BTJF      L:result1, #0x0, L:??main_19
   \   0001A2 35050000              MOV       L:result2, #0x5
   \                     ??main_19:
   \   0001A6 44                    SRL       A
   \   0001A7 C70000                LD        L:result1, A
   \   0001AA CE0000                LDW       X, L:status
   \   0001AD 9F                    LD        A, XL
   \   0001AE A504                  BCP       A, #0x4
   \   0001B0 2704                  JREQ      L:??main_20
   \   0001B2 A664                  LD        A, #0x64
   \   0001B4 2002                  JRA       L:??main_21
   \                     ??main_20:
   \   0001B6 A620                  LD        A, #0x20
   \                     ??main_21:
   \   0001B8 5F                    CLRW      X
   \   0001B9 97                    LD        XL, A
   \   0001BA 89                    PUSHW     X
   \   0001BB C60000                LD        A, L:result2
   \   0001BE 97                    LD        XL, A
   \   0001BF 89                    PUSHW     X
   \   0001C0 C60000                LD        A, L:result1
   \   0001C3 97                    LD        XL, A
   \   0001C4 89                    PUSHW     X
   \   0001C5 90AE0000              LDW       Y, #`?<Constant "%d.%d %c">`
   \   0001C9 AE0000                LDW       X, #line1
   \   0001CC 8D000000              CALLF     sprintf
   \   0001D0 5B06                  ADD       SP, #0x6
   \   0001D2 AE0000                LDW       X, #line1
   \   0001D5 8D000000              CALLF     Display_Line
   \   0001D9 8D000000              CALLF     ?Subroutine24
   \                     ??CrossCallReturnLabel_73:
   \   0001DD 89                    PUSHW     X
   \   0001DE C60000                LD        A, L:minutes
   \   0001E1 97                    LD        XL, A
   \   0001E2 89                    PUSHW     X
   \   0001E3 C60000                LD        A, L:hours
   \   0001E6 97                    LD        XL, A
   \   0001E7 89                    PUSHW     X
   \   0001E8 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0001EB 8D000000              CALLF     printf
   \   0001EF 5B06                  ADD       SP, #0x6
   \   0001F1 CE0000                LDW       X, L:status
   \   0001F4 9F                    LD        A, XL
   \   0001F5 A501                  BCP       A, #0x1
   \   0001F7 2703                  JREQ      ??lb_0
   \   0001F9 CC0000                JP        L:??main_8
    376                       else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??lb_0:
   \   0001FC A608                  LD        A, #0x8
   \   0001FE 8D000000              CALLF     ?Subroutine16
    377                   
    378          
    379          
    380              }
   \                     ??CrossCallReturnLabel_43:
   \   000202 CC0000                JP        L:??main_7
    381          
    382          
    383          
    384          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine61_0
   \   000002                       ;               // Fall through to label ??Subroutine61_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine62_0
   \   000002                       ;               // Fall through to label ??Subroutine62_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine25:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE5B8D                LDW       X, #0x5b8d
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine24:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine16:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_198:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_194:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 C60000                LD        A, L:daily_hour_off
   \   000014 8D000000              CALLF     ??Subroutine62_0
   \                     ??CrossCallReturnLabel_196:
   \   000018 C60000                LD        A, L:daily_minute_off
   \   00001B 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_195:
   \   00001F CF0000                LDW       L:time_off, X
   \   000022 87                    RETF
    385          

   \                                 In section .far_func.text, align 1, keep-with-next
    386          void Power_On()
    387          {
    388            status.on=1; 
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine34
    389            status.daily=0; //Off Daily timer 
    390            Save_Status();
   \                     ??CrossCallReturnLabel_95:
   \   00000A AC000000              JPF       Save_Status
    391          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    392          

   \                                 In section .far_func.text, align 1, keep-with-next
    393          void Power_Off()
    394          { 
    395            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine34
    396            status.daily=0; //Off Daily timer 
    397            Save_Status();
   \                     ??CrossCallReturnLabel_94:
   \   00000A AC000000              JPF       Save_Status
    398          }
    399          

   \                                 In section .far_func.text, align 1, keep-with-next
    400          void InitI2C(void)
    401          {
    402             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    403             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    404             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    405          }
    406          

   \                                 In section .far_func.text, align 1, keep-with-next
    407          bool I2C_Start(void)
    408          {
    409             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    410                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    411              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_143:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    412                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    413                  {
    414                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    415                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    416                  }
    417                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    418          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    419          

   \                                 In section .far_func.text, align 1, keep-with-next
    420          bool I2C_WA(u8 address)
    421          {
    422            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    423                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    424                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_142:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    425                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    426                   {
    427                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    428                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    429                   }
    430                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    431          }
    432          

   \                                 In section .far_func.text, align 1, keep-with-next
    433          bool I2C_RA(u8 address)
    434          {
    435            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    436                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    437                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_144:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    438                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    439                   {
    440                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    441                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    442                   }
    443                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    444          }
    445          
    446          

   \                                 In section .far_func.text, align 1, keep-with-next
    447          bool I2C_WD(u8 data)
    448          {
    449           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    450             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    451             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_141:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    452              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    453              {
    454                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    455                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    456              }
    457               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    458          }
    459          

   \                                 In section .far_func.text, align 1, keep-with-next
    460          u8 I2C_RD(void)
    461          {
    462           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    463            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    464           //while((!(I2C->SR1 & 0x40))&&timeout);
    465           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    466           {
    467             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    468             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    469           }
    470           u8 data=I2C_ReceiveData();
    471           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    472          }
    473          
    474            /*
    475          bool Init_DS1307(void)
    476          {
    477             // Test DS1307
    478              error=0;
    479              if (!I2C_Start()) return FALSE;
    480              if(!I2C_WA(0xD0)) return FALSE;
    481              if(!I2C_WD(0x00)) return FALSE;
    482              if(!I2C_WD(0x00)) return FALSE;
    483              I2C_GenerateSTOP(ENABLE);
    484          
    485              // timeout=100;  error=4;
    486              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    487              //    if (!timeout)return FALSE ;
    488               return TRUE;
    489          }
    490             */
    491          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine60_0
   \   000001                       ;               // Fall through to label ??Subroutine60_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    492          bool  ReadDS1307(void)
    493          {
    494                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine43
    495                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_137:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    496                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_140:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    497                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_187:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    498                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine27
    499                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_80:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    500                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    501                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine23
    502                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_69:
   \   000028 C70000                LD        L:seconds, A
    503                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine23
    504                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_68:
   \   00002F C70000                LD        L:minutes, A
    505                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine23
    506                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_67:
   \   000036 C70000                LD        L:hours, A
    507                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine23
    508                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_66:
   \   00003D C70000                LD        L:days, A
    509                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine23
    510                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_65:
   \   000044 C70000                LD        L:`date`, A
    511                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine23
    512                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_64:
   \   00004B C70000                LD        L:mounts, A
    513                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine32
    514                   I2C_GenerateSTOP(ENABLE);
    515                    years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_87:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:years, A
    516                
    517               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    518               //   u8 data1 = I2C_RD();
    519                //Last read byte by I2C slave
    520               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    521               //  I2C_GenerateSTOP(ENABLE);
    522               //  temp2= I2C_RD();
    523                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    524                    {
    525                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    526                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    527                    }
    528                    
    529                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    530          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_152:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    531          

   \                                 In section .far_func.text, align 1, keep-with-next
    532          bool Check_DS1307(void)
    533          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    534             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    535                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine43
    536                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_136:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    537                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_139:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    538                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine60_0
   \                     ??CrossCallReturnLabel_190:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    539                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine27
    540                  //Last read byte by I2C slave
    541                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_79:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    542                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    543                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine51
    544                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_153:
   \   00002E B700                  LD        S:?b8, A
    545                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine32
    546                 I2C_GenerateSTOP(ENABLE);
    547                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_88:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    548                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    549          }
    550          

   \                                 In section .far_func.text, align 1, keep-with-next
    551          bool Set_DS1307()
    552          {
    553                 // convert hex or decimal to bcd format
    554          
    555          
    556                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine43
    557                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_135:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    558                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_138:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    559                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_186:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    560                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_128:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    561                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_129:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    562                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_130:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    563                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_131:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    564                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_132:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    565                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_133:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    566                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_134:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    567                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine60_0
   \                     ??CrossCallReturnLabel_188:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    568                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine60_0
   \                     ??CrossCallReturnLabel_189:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    569                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    570          
    571          
    572             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    573          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    574          
    575          

   \                                 In section .far_func.text, align 1, keep-with-next
    576          u8 convert_tobcd(u8 data)
    577          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    578             u8 data_second_decimal=data/10;
    579             u8 data_first_decimal=data - 10*data_second_decimal;
    580             data=16*data_second_decimal + data_first_decimal;
    581            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    582          }
    583          

   \                                 In section .far_func.text, align 1, keep-with-next
    584          u8 bcd2hex(u8 bcd)
    585          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    586            u8 hex=0;
    587            hex=(bcd>>4)*10 +(bcd&0x0f);
    588            bcd=0;
    589            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    590          }
    591          
    592          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    593          bool Set_Clock()
    594          {
    595              //Clear Display
    596             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine11
    597             Delay1(1000);
    598             line_lcd=0;
    599              printf("\nYears:");
   \                     ??CrossCallReturnLabel_27:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    600                do
    601              {
    602               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine26
    603               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_76:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    604                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine59_0
    605              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_179:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_118:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    606          
    607               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    608              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    609                do
    610              {
    611               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine26
    612               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_77:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    613                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    614              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_119:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    615          
    616              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine11
    617               Delay1(1000);
    618                line_lcd=0;
    619              printf("\nDate:");
   \                     ??CrossCallReturnLabel_28:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    620                do
    621              {
    622               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine26
    623               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_78:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    624                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    625              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_120:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    626          
    627          
    628              //Clear Display
    629             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine11
    630             Delay1(1000);
    631             line_lcd=0;
    632              printf("\nDays:");
   \                     ??CrossCallReturnLabel_29:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    633                do
    634              {
    635                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    636               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    637                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    638              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_121:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    639          
    640          
    641          
    642             //Clear Display
    643             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine11
    644             Delay1(1000);
    645             line_lcd=0;
    646              printf("\nHours:");
   \                     ??CrossCallReturnLabel_30:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    647                do
    648              {
    649                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine24
    650               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_70:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    651                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine59_0
    652              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_178:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_122:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    653          
    654               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    655               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    656                do
    657              {
    658                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine24
    659               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_71:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    660                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine31
    661              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_183:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_123:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    662          
    663              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    664              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    665              do
    666              {
    667                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine24
    668               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_72:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    669                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine31
    670              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_182:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_124:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    671          
    672                // Set parameter to DS1307 + time byte
    673                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    674          
    675                //bool k=Check_DS1307();
    676          
    677            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    678          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine59_0
   \   000006                       ;               // Fall through to label ??Subroutine59_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_148:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    679          
    680          

   \                                 In section .far_func.text, align 1, keep-with-next
    681          u8 adj(u8 min,u8 max,u8 now)
    682          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    683             u8 adj=now;
    684             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    685             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    686             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    687             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    688             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    689             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    690          }
    691          
    692          

   \                                 In section .far_func.text, align 1, keep-with-next
    693          bool key_ok_on()
    694          {
    695            //Read Key OK
    696            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_156:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    697             {
    698               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    699                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_155:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    700                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    701             }
    702          
    703            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    704          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    705          

   \                                 In section .far_func.text, align 1, keep-with-next
    706           bool key_plus_on()
    707          {
    708            //Read Key OK
    709              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_108:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    710               {
    711               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    712                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_56:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_107:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    713                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_57:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    714               }
    715          
    716            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    717          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    718          

   \                                 In section .far_func.text, align 1, keep-with-next
    719            bool key_minus_on()
    720          {
    721            //Read Key OK
    722             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_110:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    723               {
    724               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    725                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_54:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_109:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    726                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_55:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    727               }
    728          
    729            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    730          }
    731          
    732          

   \                                 In section .far_func.text, align 1, keep-with-next
    733          bool  key_ok_plus()
    734          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    735            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_46:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    736            {
    737                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    738                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_58:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_47:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    739                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_59:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    740            }
    741          
    742           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    743          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_154:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    744          
    745          

   \                                 In section .far_func.text, align 1, keep-with-next
    746          bool Set_Delay_Allarm()
    747          {
    748          
    749             //clr
    750             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine11
    751             Delay1(1000);
    752             line_lcd=0;
    753             printf("\nH On:");
   \                     ??CrossCallReturnLabel_22:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    754            do
    755              {
    756               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    757               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    758                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine59_0
    759              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_181:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_113:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    760          
    761             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine11
    762             Delay1(1000);
    763             line_lcd=0;
    764             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_23:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    765            do
    766              {
    767               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    768               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    769                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine31
    770              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_185:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_114:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    771          
    772              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine11
    773              Delay1(1000);
    774              line_lcd=0;
    775              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_24:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    776            do
    777              {
    778               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    779               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    780                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine59_0
    781              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_180:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_115:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    782          
    783            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine11
    784             Delay1(1000);
    785             line_lcd=0;
    786             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_25:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    787            do
    788              {
    789               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    790               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    791                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine31
    792              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_184:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_116:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    793          
    794               //Computing time_long_on
    795          
    796               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine4
    797               u8 minute=daily_minute_on;
    798               daily_long_on=0;
    799               do
    800               {
    801                    daily_long_on++;
   \                     ??CrossCallReturnLabel_11:
   \   0000DC 8D000000              CALLF     ?Subroutine15
    802                    minute++;
    803                    if (minute==60)
   \                     ??CrossCallReturnLabel_42:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    804                    {
    805                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    806                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    807                    }
    808                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    809          
    810               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_11
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_11
    811          
    812                //Display daily_long_on
    813              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine11
    814              Delay1(1000);
    815              line_lcd=0;
    816              printf("\nLong :");
   \                     ??CrossCallReturnLabel_26:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    817          
    818                do
    819              {
    820               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    821               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    822                 //daily_long_on=adj(0,1440,daily_long_on);
    823              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_117:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    824          
    825              time_on=daily_hour_on*60+daily_minute_on;
   \   000123 8D000000              CALLF     ?Subroutine1
    826              time_off= daily_hour_off*60+daily_minute_off;
    827              //Save data to eeprom
    828                status.daily=1;
   \                     ??CrossCallReturnLabel_0:
   \   000127 8D000000              CALLF     ?Subroutine40
    829               EEPROM_INIT();
   \                     ??CrossCallReturnLabel_111:
   \   00012B 8D000000              CALLF     ?Subroutine2
    830              //u8 temp =*(u8*)(&status);
    831              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    832               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    833               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    834               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_3:
   \   00012F C60000                LD        A, L:daily_hour_on
   \   000132 AE4002                LDW       X, #0x4002
   \   000135 8D000000              CALLF     ?Subroutine5
    835               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_12:
   \   000139 C60000                LD        A, L:daily_minute_on
   \   00013C AE4003                LDW       X, #0x4003
   \   00013F 8D000000              CALLF     ?Subroutine5
    836               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_13:
   \   000143 C60000                LD        A, L:daily_hour_off
   \   000146 AE4004                LDW       X, #0x4004
   \   000149 8D000000              CALLF     ?Subroutine5
    837               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_14:
   \   00014D C60000                LD        A, L:daily_minute_off
   \   000150 AE4005                LDW       X, #0x4005
   \   000153 8D000000              CALLF     ?Subroutine5
    838               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_15:
   \   000157 A6F7                  LD        A, #0xf7
   \   000159 8D000000              CALLF     FLASH_Lock
    839          
    840             return TRUE;
   \   00015D A601                  LD        A, #0x1
   \   00015F 87                    RETF
    841          
    842          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_147:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_146:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_145:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    843          

   \                                 In section .far_func.text, align 1, keep-with-next
    844          void Save_Status()
    845          {
    846            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ?Subroutine2
    847            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    848            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    849            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_2:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    850          }
    851          

   \                                 In section .far_func.text, align 1, keep-with-next
    852          bool Read_Allarm()
    853          {
    854             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   000007 C70000                LD        L:daily_hour_on, A
    855              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    856             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000017 C70000                LD        L:daily_minute_on, A
    857              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    858             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000025 C70000                LD        L:daily_hour_off, A
    859              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    860             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   000033 C70000                LD        L:daily_minute_off, A
    861              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    862               // Computting daily_long_on
    863                u8 hour=daily_hour_on;
   \   00003D 8D000000              CALLF     ?Subroutine4
    864               u8 minute=daily_minute_on;
    865               daily_long_on=0;
    866               do
    867               {
    868                    daily_long_on++;
   \                     ??CrossCallReturnLabel_10:
   \   000041 8D000000              CALLF     ?Subroutine15
    869                    minute++;
    870                    if (minute==60)
   \                     ??CrossCallReturnLabel_41:
   \   000045 2607                  JRNE      L:??Read_Allarm_2
    871                    {
    872                      minute=0;
   \   000047 3F00                  CLR       S:?b1
    873                      hour++;
   \   000049 B600                  LD        A, S:?b0
   \   00004B 4C                    INC       A
   \   00004C B700                  LD        S:?b0, A
    874                    }
    875                    if(hour==24) hour=0;
   \                     ??Read_Allarm_2:
   \   00004E B600                  LD        A, S:?b0
   \   000050 A118                  CP        A, #0x18
   \   000052 2602                  JRNE      L:??Read_Allarm_3
   \   000054 3F00                  CLR       S:?b0
    876          
    877               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_3:
   \   000056 C60000                LD        A, L:daily_hour_off
   \   000059 B100                  CP        A, S:?b0
   \   00005B 26E4                  JRNE      L:??CrossCallReturnLabel_10
   \   00005D C60000                LD        A, L:daily_minute_off
   \   000060 B100                  CP        A, S:?b1
   \   000062 26DD                  JRNE      L:??CrossCallReturnLabel_10
    878          
    879            return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    880          }
    881          

   \                                 In section .far_func.text, align 1, keep-with-next
    882          void EEPROM_INIT()
    883          {
    884            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    885            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    886            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    887          
    888          
    889          
    890          }
    891          
    892          

   \                                 In section .far_func.text, align 1, keep-with-next
    893          void GpioConfiguration()
    894          {
    895          
    896            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    897          
    898            // ADC PE6 NEW PB0
    899            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    900          
    901            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    902            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine28
    903          
    904            //PD0 Led
    905            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_81:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine36
    906            //I2C
    907            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_98:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine36
    908            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_99:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine37
    909            // Remap Pins pb4,pb5  sda,scl ;
    910          
    911             //Init KEY OK,PLUS,MINUS
    912            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_101:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine37
    913            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_102:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine37
    914            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_103:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine36
    915          
    916            //Init DS18b20 data pin
    917            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_100:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine28
    918            
    919            // Power Pin 
    920             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_82:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
    921          
    922          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
    923          

   \                                 In section .far_func.text, align 1, keep-with-next
    924          void InitClk()
    925          {
    926            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    927            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    928            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    929            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    930            CLK_SOURCE_HSI,       // Switch to internal timer.
    931            DISABLE,              // Disable the clock switch interrupt.
    932            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    933          
    934            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine38
    935            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_104:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine38
    936            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_105:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine38
    937            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_106:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    938          
    939          
    940          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    941          
    942          

   \                                 In section .far_func.text, align 1, keep-with-next
    943          void InitAdc()
    944          {
    945               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    946               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    947               /*
    948               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    949                          ADC1_CHANNEL_0,
    950                          ADC1_PRESSEL_FCPU_D4,
    951                           ADC1_EXTTRIG_TIM,
    952          
    953                 */
    954               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    955               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    956                                      ADC1_CHANNEL_0,
    957                                      ADC1_ALIGN_RIGHT
    958                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    959          
    960          
    961               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    962          
    963          
    964               //ADC1_Cmd (ENABLE);
    965               //ADC1->CR1 |= ADC1_CR1_ADON ;
    966               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    967               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    968          
    969          }
    970          
    971          /*
    972          void InitUart()
    973          {
    974             UART2_DeInit();
    975             UART2_Init((u32)9600,
    976                        UART2_WORDLENGTH_8D,
    977                        UART2_STOPBITS_1,
    978                        UART2_PARITY_NO,
    979                        UART2_SYNCMODE_CLOCK_DISABLE,
    980                        UART2_MODE_TXRX_ENABLE
    981                          );
    982          
    983             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    984             UART2_Cmd(ENABLE);
    985          
    986            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    987          }
    988            */
    989          

   \                                 In section .far_func.text, align 1, keep-with-next
    990          void SendChar( u8 Char)
    991          {
    992             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    993            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    994          }
   \   00000E 87                    RETF
    995            /*
    996          void Send_Hello()
    997          {
    998            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    999             Delay1(10);
   1000             sprintf(data,"Hello");
   1001              u8 i=0;
   1002            do
   1003           {
   1004            SendChar(data[i++]);
   1005           } while (data[i]!=0);
   1006            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1007            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1008          
   1009          
   1010          
   1011          }
   1012              */
   1013          
   1014          
   1015              /*
   1016          
   1017          void SendData()
   1018          {
   1019           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1020            Delay1(10);
   1021            u8 i=0;
   1022            sprintf(data,"%d %c",adcdata,0x0d);
   1023           do
   1024           {
   1025             SendChar(data[i++]);
   1026          
   1027           } while (data[i]!=0);
   1028             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1029            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1030            rx_data=0;
   1031          }
   1032          */
   1033          

   \                                 In section .far_func.text, align 1, keep-with-next
   1034          void LCDDataOut(u8 data)
   1035          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1036            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_36:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_167
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine57_0
   1037            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_167:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_35:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_168
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine57_0
   1038            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_168:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_34:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_169
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine57_0
   1039            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_169:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_170
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine57_0
   1040          }
   \                     ??CrossCallReturnLabel_170:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_175:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1041          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine57_0
   \   000002                       ;               // Fall through to label ??Subroutine57_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1042          void InitLcd()
   1043          {
   1044           LCD_EN(0);
   \                     InitLcd:
   \   000000 8D000000              CALLF     ?Subroutine9
   1045            LCD_RW(0);
   \                     ??CrossCallReturnLabel_21:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ??Subroutine57_0
   1046            LCD_RS(0);
   \                     ??CrossCallReturnLabel_174:
   \   00000A 8D000000              CALLF     ??Subroutine56_0
   1047            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_166:
   \   00000E AE0FA0                LDW       X, #0xfa0
   \   000011 8D000000              CALLF     ?Subroutine13
   1048          
   1049            LCDInstrNibble(0x03);
   1050             Delay1(10);
   1051            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_38:
   \   000015 A603                  LD        A, #0x3
   \   000017 8D000000              CALLF     LCDInstrNibble
   1052             Delay1(10);
   \   00001B AE000A                LDW       X, #0xa
   \   00001E 8D000000              CALLF     ?Subroutine13
   1053            LCDInstrNibble(0x03);
   1054             Delay1(10);
   1055          
   1056             //Line 4
   1057            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_37:
   \   000022 A602                  LD        A, #0x2
   \   000024 8D000000              CALLF     LCDInstrNibble
   1058            LCDInstrNibble(0x02);
   \   000028 A602                  LD        A, #0x2
   \   00002A 8D000000              CALLF     LCDInstrNibble
   1059            LCDInstrNibble(0x08);
   \   00002E A608                  LD        A, #0x8
   \   000030 8D000000              CALLF     LCDInstrNibble
   1060            Delay1(100);
   \   000034 AE0064                LDW       X, #0x64
   \   000037 8D000000              CALLF     Delay1
   1061          
   1062            LCDInstr(0x0C);
   \   00003B A60C                  LD        A, #0xc
   \   00003D 8D000000              CALLF     LCDInstr
   1063            Delay1(10);
   \   000041 AE000A                LDW       X, #0xa
   \   000044 8D000000              CALLF     Delay1
   1064          
   1065            LCDInstr(0x01) ;
   \   000048 8D000000              CALLF     ?Subroutine50
   1066            Delay1(250);
   \                     ??CrossCallReturnLabel_149:
   \   00004C AE00FA                LDW       X, #0xfa
   \   00004F 8D000000              CALLF     Delay1
   1067          
   1068            LCDInstr(0x06);
   \   000053 A606                  LD        A, #0x6
   \   000055 8D000000              CALLF     LCDInstr
   1069            Delay1(10);
   \   000059 AE000A                LDW       X, #0xa
   \   00005C AC000000              JPF       Delay1
   1070          
   1071          
   1072          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_176:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 A608                  LD        A, #0x8
   \   000002                       REQUIRE ??Subroutine58_0
   \   000002                       ;               // Fall through to label ??Subroutine58_0
   1073          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine57_0
   \                     ??CrossCallReturnLabel_171:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_158:
   \   00000D                       REQUIRE ??Subroutine54_0
   \   00000D                       ;               // Fall through to label ??Subroutine54_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_157:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1074          void LCDInstr(u8 Instr)
   1075          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine10
   1076            LCD_RS(0);
   1077            LCD_RW(0);
   \                     ??CrossCallReturnLabel_163:
   \   000007 2000                  JRA       ?Subroutine0
   1078            LCDDataOut(Instr>>4);
   1079            PulseEnable();
   1080            LCDDataOut(Instr & 0x0F);
   1081            PulseEnable();
   1082          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 B700                  LD        S:?b8, A
   \   000002                       REQUIRE ??Subroutine56_0
   \   000002                       ;               // Fall through to label ??Subroutine56_0
   1083          

   \                                 In section .far_func.text, align 1, keep-with-next
   1084          void LCDData(u8 Data)
   1085          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1086            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1087            LCD_RW(0);
   \                     ??CrossCallReturnLabel_32:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1088            LCDDataOut(Data>>4);
   1089            PulseEnable() ;
   1090            LCDDataOut(Data & 0x0F) ;
   1091            PulseEnable();
   1092          }
   1093          

   \                                 In section .far_func.text, align 1, keep-with-next
   1094          void LCDInstrNibble(u8 Instr)
   1095          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine10
   1096            LCD_RS(0);
   1097            LCD_RW(0);
   \                     ??CrossCallReturnLabel_164:
   \   000007 A602                  LD        A, #0x2
   \   000009 8D000000              CALLF     ??Subroutine57_0
   1098            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_173:
   \   00000D AC000000              JPF       ??Subroutine54_0
   1099            PulseEnable();
   1100          }
   1101          

   \                                 In section .far_func.text, align 1, keep-with-next
   1102          void PulseEnable(void)
   1103          {
   1104            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine6
   1105             Delay1(1);
   1106            LCD_EN(1);
   1107             Delay1(1);
   1108            LCD_EN(0);
   \                     ??CrossCallReturnLabel_17:
   \   000004 8D000000              CALLF     ?Subroutine9
   1109             Delay1(1);
   \                     ??CrossCallReturnLabel_20:
   \   000008 5F                    CLRW      X
   \   000009 5C                    INCW      X
   \   00000A AC000000              JPF       Delay1
   1110          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_177:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 8D000000              CALLF     Delay1
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 5F                    CLRW      X
   \   000014 5C                    INCW      X
   \   000015 AC000000              JPF       Delay1
   1111          

   \                                 In section .far_func.text, align 1, keep-with-next
   1112          void LCD_Busy(void)
   1113          {
   1114             //set Port D7 as Input
   1115             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1116             //Set Read
   1117             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1118             LCD_RS(0);
   \                     ??CrossCallReturnLabel_31:
   \   000013 8D000000              CALLF     ??Subroutine56_0
   1119             // Read Busy Flag
   1120                timer2=0;
   \                     ??CrossCallReturnLabel_165:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1121             do
   1122             {
   1123             // Enable set
   1124               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine6
   1125                Delay1(1);
   1126               LCD_EN(1);
   1127                Delay1(1);
   1128             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_16:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1129                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1130                //Clear read
   1131              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine57_0
   1132             //set Port D7 as Output
   1133             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_172:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1134          
   1135          }
   1136          
   1137          

   \                                 In section .far_func.text, align 1, keep-with-next
   1138          void LCD(u8 data)
   1139           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1140             //  static u8 linet=0;
   1141          
   1142          
   1143               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_159
   1144               {
   1145          
   1146                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
   1147                   {
   1148                   case 0:
   1149                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
   1150                     count=0;
   \   00001F 725F0000              CLR       L:count
   1151                     break;
   \   000023 2022                  JRA       L:??LCD_4
   1152                   case 1:
   1153                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
   1154                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
   1155                     break;
   \   00002F 2016                  JRA       L:??LCD_4
   1156                   case 2:
   1157                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
   1158                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
   1159                     break;
   \   00003B 200A                  JRA       L:??LCD_4
   1160                   case 3:
   1161                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
   1162                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
   1163                     break;
   1164                   //default:
   1165                    //  LCDInstr(0x80 |0x40);    //Line 1
   1166                    }
   1167                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
   1168                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
   1169                   {
   1170                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
   1171                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine50
   1172                    Delay1(2500);
   \                     ??CrossCallReturnLabel_151:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
   1173                   }
   1174          
   1175                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ??Subroutine55_0
   1176          
   1177          
   1178               }
   1179          
   1180          
   1181               if (count==20)
   \                     ??CrossCallReturnLabel_159:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
   1182                {
   1183                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
   1184                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
   1185                }
   1186                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
   1187                  {
   1188                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
   1189                    Delay1(1);
   1190                  }
   1191                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
   1192                    {
   1193                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
   1194                      count=0;
   \   000088 725F0000              CLR       L:count
   1195                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
   1196                    }
   1197                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
   1198                        {
   1199                          count=0;
   \   000092 725F0000              CLR       L:count
   1200                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine50
   1201                          Delay1(250);
   \                     ??CrossCallReturnLabel_150:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
   1202                        }
   1203          
   1204          
   1205              /*
   1206                   line++;
   1207                   if (line>3)
   1208                   {
   1209                     line=1;  //Line 0 for Time
   1210                   }
   1211                 switch(line)
   1212                   {
   1213                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1214                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1215                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1216                   default : LCDInstr(0x80 | 0x40); // Line 1
   1217                   }
   1218                   Delay(1);
   1219                   count=0;
   1220                }
   1221          
   1222               */
   1223          
   1224               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250B                  JRC       L:??LCD_13
   1225               {
   1226                 LCDData(data);
   \   0000A7 8D000000              CALLF     ?Subroutine8
   1227                  Delay1(1);
   1228                 count++;
   \                     ??CrossCallReturnLabel_161:
   \   0000AB C60000                LD        A, L:count
   \   0000AE 4C                    INC       A
   \   0000AF C70000                LD        L:count, A
   1229               }
   1230           }
   \                     ??LCD_13:
   \   0000B2 320000                POP       S:?b8
   \   0000B5 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine55_0
   \   000004                       ;               // Fall through to label ??Subroutine55_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1231          

   \                                 In section .far_func.text, align 1, keep-with-next
   1232          void InitDelayTimer()
   1233          {
   1234             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1235             //Tclock 16/8=2Mhz  /20 10us
   1236                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1237                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1238                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1239                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1240            //Enable TIM2
   1241                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1242          
   1243          }
   1244          

   \                                 In section .far_func.text, align 1, keep-with-next
   1245          bool DS18_Write(u8 data)
   1246          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1247            disableInterrupts();
   \   000006 9B                    SIM
   1248            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1249            {
   1250             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine14
   1251             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1252             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_40:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_51
   \   00001A 8D000000              CALLF     ?Subroutine18
   1253               //else DS18(0);
   1254             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_51:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1255             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine18
   1256             //Delay1(0);
   1257            }
   \                     ??CrossCallReturnLabel_50:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1258            enableInterrupts();
   \   000032 9A                    RIM
   1259            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1260          
   1261          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteLow
   \   000009 5F                    CLRW      X
   \   00000A 5C                    INCW      X
   \   00000B AC000000              JPF       Delay_us
   1262          
   1263          

   \                                 In section .far_func.text, align 1, keep-with-next
   1264          u8  DS18_Read()
   1265          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1266              //Init DS18b20 data pin as Input
   1267          
   1268            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1269              disableInterrupts();
   \   000006 9B                    SIM
   1270            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1271            {
   1272              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine14
   1273              Delay_us(1); //Start time slot 4,5 us
   1274              DS18(1);
   \                     ??CrossCallReturnLabel_39:
   \   00000D 8D000000              CALLF     ?Subroutine18
   1275              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_48:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1276              //Delay1(0);
   1277             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_53:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1278              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1279              //  DS18(1);  // Next bit
   1280             // Delay1(0);
   1281          
   1282            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1283              enableInterrupts();
   \   000046 9A                    RIM
   1284              //Init DS18b20 data pin
   1285             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1286             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1287          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1288          

   \                                 In section .far_func.text, align 1, keep-with-next
   1289          bool DS18_Reset()
   1290          {
   1291             //Init Reset Pulse
   1292              DS18(0);
   \                     DS18_Reset:
   \   000000 A604                  LD        A, #0x4
   \   000002 8D000000              CALLF     ?Subroutine16
   1293              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_45:
   \   000006 AE0019                LDW       X, #0x19
   \   000009 8D000000              CALLF     Delay1
   1294              DS18(1);
   \   00000D 8D000000              CALLF     ?Subroutine18
   1295              //Delay1(1);
   1296              timer2=0;
   \                     ??CrossCallReturnLabel_49:
   \   000011 5F                    CLRW      X
   \   000012 CF0000                LDW       L:timer2, X
   1297              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000015 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_60:
   \   000019 2406                  JRNC      L:??DS18_Reset_1
   \   00001B 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_52:
   \   00001F 26F4                  JRNE      L:??DS18_Reset_0
   1298              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   000021 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_61:
   \   000025 2502                  JRC       L:??DS18_Reset_2
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
   1299              // Delay1(10);
   1300              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000029 AE0014                LDW       X, #0x14
   \   00002C 8D000000              CALLF     Delay1
   1301          
   1302              return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 87                    RETF
   1303          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1304          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1305          u8 temperature ()
   1306          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1307          
   1308             //Init Reset Pulse
   1309               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_92:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1310             //Skip ROM Command 0xCC
   1311              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine30
   1312             //Function command  CONVERT T [44h]
   1313              DS18_Write(0x44);
   1314              //Wait util end convert
   1315              timer2=0;
   1316               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_86:
   \   000013 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_63:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_86
   1317                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1318               //u8 temp8=timer2;
   1319              //Init Reset Pulse
   1320              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_93:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1321              // Skip ROM Command 0xCC
   1322              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine29
   1323              //Function command READ SCRATCHPAD [BEh]
   1324              DS18_Write(0xBE);
   1325               u8 temp1=DS18_Read();
   1326               u8 temp2=DS18_Read();
   1327              DS18_Reset();
   \                     ??CrossCallReturnLabel_84:
   \   000033 8D000000              CALLF     DS18_Reset
   1328                u16 result = temp2*256+temp1;
   1329                temp1= (u8)(result>>3); 
   1330               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_19:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1331          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine61_0
   \                     ??CrossCallReturnLabel_192:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1332          

   \                                 In section .far_func.text, align 1, keep-with-next
   1333          bool Read_DS18()
   1334          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1335          
   1336             //Init Reset Pulse
   1337               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_90:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1338             //Skip ROM Command 0xCC
   1339              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine30
   1340             //Function command  CONVERT T [44h]
   1341              DS18_Write(0x44);
   1342              //Wait util end convert
   1343              timer2=0;
   1344               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_85:
   \   000013 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_62:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_85
   1345                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1346               //u8 temp8=timer2;
   1347              //Init Reset Pulse
   1348              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_91:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1349              // Skip ROM Command 0xCC
   1350              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine29
   1351              //Function command READ SCRATCHPAD [BEh]
   1352              DS18_Write(0xBE);
   1353               u8 temp1=DS18_Read();
   1354               u8 temp2=DS18_Read();
   1355               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_83:
   \   000033 8D000000              CALLF     ?Subroutine35
   1356               u8 temp4=DS18_Read();
   1357               u8 temp5=DS18_Read();
   1358               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_97:
   \   000037 8D000000              CALLF     ?Subroutine35
   1359               u8 temp7=DS18_Read();
   1360               u8 temp8=DS18_Read();
   1361               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_96:
   \   00003B 8D000000              CALLF     DS18_Read
   1362          
   1363               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1364          
   1365                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1366                result2=0;
   \   000047 725F0000              CLR       L:result2
   1367                u16 result = temp2*256+temp1;
   1368                result1= (u8)(result>>3); 
   \   00004B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_18:
   \   00004F C70000                LD        L:result1, A
   1369                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1370                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1371                
   1372          
   1373                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1374               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1375               //line_lcd=1;
   1376               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1377               // while (!key_ok_on());
   1378          
   1379               //u8 temp3=DS18_Read();
   1380          
   1381              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1382          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1383          

   \                                 In section .far_func.text, align 1, keep-with-next
   1384          bool DS18Set ()
   1385          {
   1386               //Init Reset Pulse
   1387              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_89:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1388             //Skip ROM Command 0xCC
   1389              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1390             //Function command  WRITE SCRATCHPAD 0x4E
   1391              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1392             //Write 3 bytes last is config reg
   1393              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1394              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1395              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1396          
   1397          
   1398          
   1399          
   1400            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1401          }
   1402          
   1403          
   1404          
   1405          
   1406           /*
   1407          u16 Average()
   1408          {
   1409           //Find average in measure
   1410            u8 i=0;
   1411            u16 Summa=0;
   1412            do
   1413            {
   1414             Summa+=measure[i++];
   1415            } while ( measure[i]!=0);
   1416             if(i!=0) Summa=Summa/i;
   1417             return Summa;
   1418          }
   1419             */
   1420          

   \                                 In section .far_func.text, align 1, keep-with-next
   1421          PUTCHAR_PROTOTYPE
   1422          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1423            /* Place your implementation of fputc here */
   1424            /* e.g. write a character to the USART */
   1425                //USART_SendData(USART3, (u8) ch);
   1426               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1427             /* Loop until the end of transmission */
   1428              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1429            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1430          }
   1431          
   1432          

   \                                 In section .far_func.text, align 1, keep-with-next
   1433          void Delay1(u16 Delay)
   1434          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1435              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1436            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1437            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1438          }
   \   00000D 87                    RETF
   1439          

   \                                 In section .far_func.text, align 1, keep-with-next
   1440           void Delay2(u16 Delay)
   1441          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1442            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1443            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1444          }
   \   00000D 87                    RETF
   1445          
   1446          

   \                                 In section .far_func.text, align 1, keep-with-next
   1447          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1448          {
   1449            //disableInterrupts();
   1450            do
   1451              {
   1452                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1453                nop();
   \   000001 9D                    NOP
   1454              }
   1455              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1456            //enableInterrupts();
   1457          }
   \   000005 87                    RETF
   1458          
   1459          
   1460          
   1461          /*
   1462          void Delay12 (u16 Delay)
   1463          {
   1464            timer2=0;
   1465            while ( timer2 < Delay); ;
   1466          }
   1467          */
   1468          
   1469          
   1470          #ifdef USE_FULL_ASSERT
   1471          
   1472          /**
   1473            * @brief  Reports the name of the source file and the source line number
   1474            *   where the assert_param error has occurred.
   1475            * @param file: pointer to the source file name
   1476            * @param line: assert_param error line source number
   1477            * @retval : None
   1478            */

   \                                 In section .far_func.text, align 1, keep-with-next
   1479          void assert_failed(u8* file, u32 line)
   1480          {
   1481            /* User can add his own implementation to report the file name and line number,
   1482               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1483          
   1484            /* Infinite loop */
   1485            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1486            {
   1487          
   1488            }
   1489          }
   1490          #endif
   1491          
   1492          

   \                                 In section .far_func.text, align 1, keep-with-next
   1493          void Display_Line(char* line)
   1494          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1495            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1496            u8 count;
   1497              //Set Cursor to First Line
   1498             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1499             count=0;
   \   000010 3F00                  CLR       S:?b10
   1500             Delay1(1);           
   \   000012 8D000000              CALLF     ??Subroutine55_0
   1501            do
   1502            {
   1503              
   1504              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_160:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1505               {
   1506                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine8
   1507                  Delay1(1);
   1508                 count++;
   \                     ??CrossCallReturnLabel_162:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1509               } 
   1510               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1511            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_160
   1512            
   1513             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1514            
   1515          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1516          

   \                                 In section .far_func.text, align 1
   1517          void Rotate_Line( char * line)
   1518          {
   1519             
   1520             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1521             char temp_next;
   1522            
   1523             do 
   1524             {
   1525                temp_next=*(line+1);
   1526               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1527                //line++;
   1528                //temp_next=*line;
   1529               //*line=*line++;    
   1530             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1531             line--;
   1532             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1533             
   1534          }
   \   000012 87                    RETF

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d.%d %c">`:
   \   000000 25642E256420          DC8 "%d.%d %c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"
   1535          
   1536          
   1537          
   1538          
   1539          
   1540          
   1541          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     line1                             1
     result                            4
     k                                 2
     status                            2
     ?Subroutine41                     7
     main                            517
     ?Subroutine52                     2
     ??Subroutine61_0                  8
     ?Subroutine47                     2
     ??Subroutine62_0                 12
     ?Subroutine40                    11
     ?Subroutine25                    16
     ?Subroutine24                    10
     ?Subroutine16                     7
     ?Subroutine3                      9
     ?Subroutine1                     35
     Power_On                         14
     ?Subroutine34                    15
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine46                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine45                     1
     ??Subroutine60_0                  7
     ?Subroutine44                     9
     ?Subroutine43                    11
     ReadDS1307                      109
     ?Subroutine32                    11
     ?Subroutine27                    13
     ?Subroutine23                     8
     ?Subroutine51                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine42                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine50                     6
     Set_Clock                       395
     ?Subroutine31                     6
     ??Subroutine59_0                  5
     ?Subroutine26                    10
     ?Subroutine11                    16
     adj                              77
     key_ok_on                        41
     ?Subroutine53                     7
     key_plus_on                      37
     ?Subroutine39                     7
     ?Subroutine20                     7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine17                    26
     Set_Delay_Allarm                352
     ?Subroutine15                    15
     ?Subroutine5                      5
     ?Subroutine4                     15
     ?Subroutine2                     29
     ?Subroutine48                     9
     Save_Status                      10
     Read_Allarm                     103
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine37                     9
     ?Subroutine36                     9
     ?Subroutine28                    12
     InitClk                          56
     ?Subroutine38                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine57_0                  5
     ??Subroutine58_0                  7
     ??Subroutine56_0                  2
     InitLcd                          96
     ?Subroutine13                    17
     ?Subroutine9                      5
     ?Subroutine49                     2
     ?Subroutine0                     13
     ??Subroutine54_0                 10
     ?Subroutine21                    10
     LCDInstr                          9
     ?Subroutine10                     2
     LCDData                          11
     LCDInstrNibble                   17
     PulseEnable                      14
     ?Subroutine6                     25
     LCD_Busy                         69
     LCD                             182
     ?Subroutine8                      4
     ??Subroutine55_0                  6
     InitDelayTimer                   29
     DS18_Write                       57
     ?Subroutine18                     9
     ?Subroutine14                    15
     DS18_Read                        77
     ?Subroutine19                    12
     DS18_Reset                       51
     ?Subroutine22                     7
     ?Subroutine33                     7
     temperature                      63
     ?Subroutine30                    17
     ?Subroutine29                    25
     ?Subroutine7                     21
     Read_DS18                       121
     ?Subroutine35                    12
     DS18Set                          41
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     Display_Line                     68
     Rotate_Line                      19
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "%d.%d %c">            9
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4
     ?<Constant "\n%d.%d">             7

 
 4 152 bytes in section .far_func.text
    44 bytes in section .near.bss
     3 bytes in section .near.data
   189 bytes in section .near.rodata
 
 4 152 bytes of CODE  memory
   189 bytes of CONST memory
    47 bytes of DATA  memory

Errors: none
Warnings: none
