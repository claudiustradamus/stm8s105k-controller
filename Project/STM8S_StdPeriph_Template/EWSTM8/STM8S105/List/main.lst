###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             07/Jul/2013  22:58:26 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          
     14          /* Includes ------------------------------------------------------------------*/
     15          #include "stm8s.h"
     16          #include "stdio.h"
     17          #include "string.h"
     18          /* Private defines -----------------------------------------------------------*/
     19          
     20          /* ================ LCD ======================= */
     21          
     22          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     23          #define LCD_PORT (GPIOC)
     24          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     25          #define DATA4 GPIO_PIN_4
     26          #define DATA5 GPIO_PIN_5
     27          #define DATA6 GPIO_PIN_6
     28          #define DATA7 GPIO_PIN_7
     29          #define EN  GPIO_PIN_3
     30          #define RW  GPIO_PIN_1
     31          #define RS  GPIO_PIN_2
     32          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     33          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     34          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     35          
     36          
     37          #ifdef __GNUC__
     38            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     39               set to 'Yes') calls __io_putchar() */
     40            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     41          #else
     42            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     43          #endif /* __GNUC__ */
     44          
     45          
     46          
     47          
     48          #define SpecialSymbol 0x1b //Esc to start message
     49          
     50          
     51          
     52          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     53          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     54          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     55          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     56          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     57          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
     58          #define data_size 20

   \                                 In section .near.bss, align 1
     59          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     60          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     61          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     62          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     63          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     64          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     65          u8 error;
   \                     error:
   \   000000                       DS8 1
     66          //u8 index=0;

   \                                 In section .near.bss, align 1
     67          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
     68          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
     69          
     70          
     71          
     72          
     73          
     74          
     75          
     76          
     77          /* Private function prototypes -----------------------------------------------*/
     78          void InitHardware();
     79          void GpioConfiguration();
     80          void InitClk();
     81          void InitAdc();
     82          void InitI2C();
     83          bool ReadDS1307();
     84          void InitUart();
     85          void InitLcd();
     86          void InitDelayTimer();
     87          void Delay1( u16 Delay);
     88          void Delay2( u16 Delay);
     89          void LCDInstrNibble (u8 Instr);
     90          void LCDInstr(u8 Instr);
     91          void LCDDataOut(u8 data);
     92          void LCD_Busy();
     93          void PulseEnable();
     94          void SendData();
     95          void SendChar(u8 Char);
     96          void Send_Hello();
     97          bool Init_DS1307(void);
     98          u16  Average();
     99          
    100          /* Private functions ---------------------------------------------------------*/
    101          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1, keep-with-next
    102          void main(void)
    103          {
    104              /*High speed internal clock prescaler: 1*/
    105              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    106          
    107              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
    108              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
    109              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    110              InitUart();
   \   00000C 8D000000              CALLF     InitUart
    111              enableInterrupts();
   \   000010 9A                    RIM
    112              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000011 8D000000              CALLF     ?Subroutine6
    113              InitLcd();
   \                     ??CrossCallReturnLabel_12:
   \   000015 8D000000              CALLF     InitLcd
    114              InitAdc();
   \   000019 8D000000              CALLF     InitAdc
    115              InitI2C();
   \   00001D 8D000000              CALLF     InitI2C
    116              if (!Init_DS1307())printf("E1:%d",error);
   \   000021 8D000000              CALLF     Init_DS1307
   \   000025 A100                  CP        A, #0x0
   \   000027 260F                  JRNE      L:??main_0
   \   000029 C60000                LD        A, L:error
   \   00002C 5F                    CLRW      X
   \   00002D 97                    LD        XL, A
   \   00002E 89                    PUSHW     X
   \   00002F AE0000                LDW       X, #`?<Constant "E1:%d">`
   \   000032 8D000000              CALLF     printf
   \   000036 5B02                  ADD       SP, #0x2
    117              Send_Hello();
   \                     ??main_0:
   \   000038 8D000000              CALLF     Send_Hello
    118               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    119          
    120              while(1)
    121              {
    122                ADC1_Cmd (ENABLE);
   \                     ??main_1:
   \   00003C A601                  LD        A, #0x1
   \   00003E 8D000000              CALLF     ADC1_Cmd
    123          
    124                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \   000042 8D000000              CALLF     ?Subroutine11
    125                   Delay2(30000);
    126                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \                     ??CrossCallReturnLabel_22:
   \   000046 8D000000              CALLF     ?Subroutine11
    127                   Delay2(30000);
    128          
    129                line_lcd=0;
   \                     ??CrossCallReturnLabel_21:
   \   00004A 725F0000              CLR       L:line_lcd
    130               if (!ReadDS1307())printf("\n E2:%d",error);
   \   00004E 8D000000              CALLF     ReadDS1307
   \   000052 A100                  CP        A, #0x0
   \   000054 260F                  JRNE      L:??main_2
   \   000056 C60000                LD        A, L:error
   \   000059 5F                    CLRW      X
   \   00005A 97                    LD        XL, A
   \   00005B 89                    PUSHW     X
   \   00005C AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00005F 8D000000              CALLF     printf
   \   000063 5B02                  ADD       SP, #0x2
    131          
    132               line_lcd=1;
   \                     ??main_2:
   \   000065 35010000              MOV       L:line_lcd, #0x1
    133               printf("\n %d:%d",minutes,seconds);
   \   000069 C60000                LD        A, L:seconds
   \   00006C 5F                    CLRW      X
   \   00006D 97                    LD        XL, A
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:minutes
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 AE0000                LDW       X, #`?<Constant "\\n %d:%d">`
   \   000077 8D000000              CALLF     printf
   \   00007B 5B04                  ADD       SP, #0x4
    134               //line_lcd=2;
    135               //printf("\n Just Test:%X", timer2);
    136                if (rx_data==SpecialSymbol) SendData();
   \   00007D C60000                LD        A, L:rx_data
   \   000080 A11B                  CP        A, #0x1b
   \   000082 26B8                  JRNE      L:??main_1
   \   000084 8D000000              CALLF     SendData
   \   000088 20B2                  JRA       L:??main_1
    137                //SendData();
    138          
    139              }
    140          
    141          
    142          
    143          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine11:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE7530                LDW       X, #0x7530
   \   00000C AC000000              JPF       Delay2
    144          

   \                                 In section .far_func.text, align 1, keep-with-next
    145          void InitI2C(void)
    146          {
    147             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    148             I2C_Init(100000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE86A0                LDW       X, #0x86a0
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 5C                    INCW      X
   \   00001A BF00                  LDW       S:?w0, X
   \   00001C 85                    POPW      X
   \   00001D 8D000000              CALLF     I2C_Init
    149             I2C_Cmd(ENABLE);
   \   000021 A601                  LD        A, #0x1
   \   000023 AC000000              JPF       I2C_Cmd
    150          }
    151          

   \                                 In section .far_func.text, align 1, keep-with-next
    152          bool Init_DS1307(void)
    153          {
    154             // Test DS1307
    155              I2C_GenerateSTART(ENABLE);
   \                     Init_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine13
    156                 timeout=100; error=1;
    157              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??CrossCallReturnLabel_26:
   \   000004 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_61:
   \   000008 2605                  JRNE      L:??Init_DS1307_0
   \   00000A C60000                LD        A, L:timeout
   \   00000D 26F5                  JRNE      L:??CrossCallReturnLabel_26
    158                   if (!timeout)return FALSE ;
   \                     ??Init_DS1307_0:
   \   00000F C60000                LD        A, L:timeout
   \   000012 2602                  JRNE      L:??Init_DS1307_1
   \                     ??Init_DS1307_2:
   \   000014 4F                    CLR       A
   \   000015 87                    RETF
    159              //while(!I2C_CheckEvent(I2C_EVENT_MASTER_START_SENT));
    160              I2C_Send7bitAddress(0xD0, I2C_DIRECTION_TX);
   \                     ??Init_DS1307_1:
   \   000016 8D000000              CALLF     ?Subroutine12
    161                 timeout=100; error=2;
    162                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??CrossCallReturnLabel_24:
   \   00001A AE0782                LDW       X, #0x782
   \   00001D 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_67:
   \   000021 2605                  JRNE      L:??Init_DS1307_3
   \   000023 C60000                LD        A, L:timeout
   \   000026 26F2                  JRNE      L:??CrossCallReturnLabel_24
    163                   if (!timeout)return FALSE ;
   \                     ??Init_DS1307_3:
   \   000028 C60000                LD        A, L:timeout
   \   00002B 27E7                  JREQ      L:??Init_DS1307_2
    164              I2C_SendData(0x00);   // set register pointer 00h
   \   00002D 8D000000              CALLF     ?Subroutine14
    165                 timeout=100;  error=3;
    166                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??CrossCallReturnLabel_28:
   \   000031 AE0784                LDW       X, #0x784
   \   000034 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_68:
   \   000038 2605                  JRNE      L:??Init_DS1307_4
   \   00003A C60000                LD        A, L:timeout
   \   00003D 26F2                  JRNE      L:??CrossCallReturnLabel_28
    167                   if (!timeout)return FALSE ;
   \                     ??Init_DS1307_4:
   \   00003F C60000                LD        A, L:timeout
   \   000042 27D0                  JREQ      L:??Init_DS1307_2
    168              I2C_SendData(0x00);   // write 0x00 to 00h (oscillator enabled)
   \   000044 4F                    CLR       A
   \   000045 8D000000              CALLF     I2C_SendData
    169                 timeout=100;  error=4;
   \   000049 35640000              MOV       L:timeout, #0x64
   \   00004D 35040000              MOV       L:error, #0x4
    170                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??Init_DS1307_5:
   \   000051 AE0784                LDW       X, #0x784
   \   000054 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_69:
   \   000058 2605                  JRNE      L:??Init_DS1307_6
   \   00005A C60000                LD        A, L:timeout
   \   00005D 26F2                  JRNE      L:??Init_DS1307_5
    171                   if (!timeout)return FALSE ;
   \                     ??Init_DS1307_6:
   \   00005F C60000                LD        A, L:timeout
   \   000062 27B0                  JREQ      L:??Init_DS1307_2
    172              I2C_GenerateSTOP(ENABLE);
   \   000064 A601                  LD        A, #0x1
   \   000066 8D000000              CALLF     I2C_GenerateSTOP
    173          
    174              // timeout=100;  error=4;
    175              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    176              //    if (!timeout)return FALSE ;
    177               return TRUE;
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    178          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 AE0301                LDW       X, #0x301
   \   000003                       REQUIRE ??Subroutine24_0
   \   000003                       ;               // Fall through to label ??Subroutine24_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_SendData
   \   000005 35640000              MOV       L:timeout, #0x64
   \   000009 35030000              MOV       L:error, #0x3
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_37:
   \   000004 35010000              MOV       L:error, #0x1
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
   \   000006 35640000              MOV       L:timeout, #0x64
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_42:
   \   000006 35020000              MOV       L:error, #0x2
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
   \   000006 35640000              MOV       L:timeout, #0x64
   \   00000A 87                    RETF
    179          

   \                                 In section .far_func.text, align 1, keep-with-next
    180          bool  ReadDS1307(void)
    181          {
    182          
    183               I2C_GenerateSTART(ENABLE);
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine13
    184                 timeout=100; error=1;
    185              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??CrossCallReturnLabel_25:
   \   000004 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_59:
   \   000008 2605                  JRNE      L:??ReadDS1307_0
   \   00000A C60000                LD        A, L:timeout
   \   00000D 26F5                  JRNE      L:??CrossCallReturnLabel_25
    186                   if (!timeout)return FALSE ;
   \                     ??ReadDS1307_0:
   \   00000F C60000                LD        A, L:timeout
   \   000012 2602                  JRNE      L:??ReadDS1307_1
   \                     ??ReadDS1307_2:
   \   000014 4F                    CLR       A
   \   000015 87                    RETF
    187               I2C_Send7bitAddress(0xD0, I2C_DIRECTION_TX);
   \                     ??ReadDS1307_1:
   \   000016 8D000000              CALLF     ?Subroutine12
    188                 timeout=100; error=2;
    189                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??CrossCallReturnLabel_23:
   \   00001A AE0782                LDW       X, #0x782
   \   00001D 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_62:
   \   000021 2605                  JRNE      L:??ReadDS1307_3
   \   000023 C60000                LD        A, L:timeout
   \   000026 26F2                  JRNE      L:??CrossCallReturnLabel_23
    190                   if (!timeout)return FALSE ;
   \                     ??ReadDS1307_3:
   \   000028 C60000                LD        A, L:timeout
   \   00002B 27E7                  JREQ      L:??ReadDS1307_2
    191               I2C_SendData(0x00);   // set register pointer 00h
   \   00002D 8D000000              CALLF     ?Subroutine14
    192                   timeout=100;  error=3;
    193                    while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??CrossCallReturnLabel_27:
   \   000031 AE0784                LDW       X, #0x784
   \   000034 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_63:
   \   000038 2605                  JRNE      L:??ReadDS1307_4
   \   00003A C60000                LD        A, L:timeout
   \   00003D 26F2                  JRNE      L:??CrossCallReturnLabel_27
    194                     if (!timeout)return FALSE ;
   \                     ??ReadDS1307_4:
   \   00003F C60000                LD        A, L:timeout
   \   000042 27D0                  JREQ      L:??ReadDS1307_2
    195               I2C_GenerateSTOP(ENABLE);
   \   000044 8D000000              CALLF     ?Subroutine10
    196                     Delay1(1000);
    197          
    198          
    199          
    200               I2C_GenerateSTART(ENABLE);
   \                     ??CrossCallReturnLabel_20:
   \   000048 8D000000              CALLF     ?Subroutine19
    201                 timeout=100; error=4;
   \                     ??CrossCallReturnLabel_36:
   \   00004C 35040000              MOV       L:error, #0x4
    202              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??ReadDS1307_5:
   \   000050 8D000000              CALLF     ?Subroutine16
   \                     ??CrossCallReturnLabel_60:
   \   000054 2605                  JRNE      L:??ReadDS1307_6
   \   000056 C60000                LD        A, L:timeout
   \   000059 26F5                  JRNE      L:??ReadDS1307_5
    203                   if (!timeout)return FALSE ;
   \                     ??ReadDS1307_6:
   \   00005B C60000                LD        A, L:timeout
   \   00005E 27B4                  JREQ      L:??ReadDS1307_2
    204               I2C_Send7bitAddress(0xD0, I2C_DIRECTION_RX);
   \   000060 35010000              MOV       S:?b0, #0x1
   \   000064 8D000000              CALLF     ?Subroutine21
    205                 timeout=100; error=5;
   \                     ??CrossCallReturnLabel_41:
   \   000068 35050000              MOV       L:error, #0x5
    206                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??ReadDS1307_7:
   \   00006C AE0302                LDW       X, #0x302
   \   00006F 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_64:
   \   000073 2605                  JRNE      L:??ReadDS1307_8
   \   000075 C60000                LD        A, L:timeout
   \   000078 26F2                  JRNE      L:??ReadDS1307_7
    207                   if (!timeout)return FALSE ;
   \                     ??ReadDS1307_8:
   \   00007A C60000                LD        A, L:timeout
   \   00007D 2795                  JREQ      L:??ReadDS1307_2
    208               I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00007F A601                  LD        A, #0x1
   \   000081 8D000000              CALLF     I2C_AcknowledgeConfig
    209                seconds = I2C_ReceiveData();
   \   000085 8D000000              CALLF     I2C_ReceiveData
   \   000089 C70000                LD        L:seconds, A
    210                 timeout=100;  error=6;
   \   00008C 35640000              MOV       L:timeout, #0x64
   \   000090 35060000              MOV       L:error, #0x6
    211                 while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_RECEIVED))&&timeout);
   \                     ??ReadDS1307_9:
   \   000094 AE0340                LDW       X, #0x340
   \   000097 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_65:
   \   00009B 2605                  JRNE      L:??ReadDS1307_10
   \   00009D C60000                LD        A, L:timeout
   \   0000A0 26F2                  JRNE      L:??ReadDS1307_9
    212                  if (!timeout)return FALSE ;
   \                     ??ReadDS1307_10:
   \   0000A2 C60000                LD        A, L:timeout
   \   0000A5 2603                  JRNE      ??lb_0
   \   0000A7 CC0000                JP        L:??ReadDS1307_2
    213              I2C_AcknowledgeConfig(I2C_ACK_NEXT);
   \                     ??lb_0:
   \   0000AA A602                  LD        A, #0x2
   \   0000AC 8D000000              CALLF     I2C_AcknowledgeConfig
    214               minutes = I2C_ReceiveData();
   \   0000B0 8D000000              CALLF     I2C_ReceiveData
   \   0000B4 C70000                LD        L:minutes, A
    215                timeout=100;  error=7;
   \   0000B7 35640000              MOV       L:timeout, #0x64
   \   0000BB 35070000              MOV       L:error, #0x7
    216                 while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_RECEIVED))&&timeout);
   \                     ??ReadDS1307_11:
   \   0000BF AE0340                LDW       X, #0x340
   \   0000C2 8D000000              CALLF     ??Subroutine24_0
   \                     ??CrossCallReturnLabel_66:
   \   0000C6 2605                  JRNE      L:??ReadDS1307_12
   \   0000C8 C60000                LD        A, L:timeout
   \   0000CB 26F2                  JRNE      L:??ReadDS1307_11
    217                  if (!timeout)return FALSE ;
   \                     ??ReadDS1307_12:
   \   0000CD C60000                LD        A, L:timeout
   \   0000D0 2603                  JRNE      ??lb_1
   \   0000D2 CC0000                JP        L:??ReadDS1307_2
    218                I2C_GenerateSTOP(ENABLE);
   \                     ??lb_1:
   \   0000D5 8D000000              CALLF     ?Subroutine10
    219                     Delay1(1000);
    220                return TRUE;
   \                     ??CrossCallReturnLabel_19:
   \   0000D9 A601                  LD        A, #0x1
   \   0000DB 87                    RETF
    221          
    222          
    223          
    224          
    225          
    226          
    227          
    228          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 AE03E8                LDW       X, #0x3e8
   \   000009 AC000000              JPF       Delay1
    229          

   \                                 In section .far_func.text, align 1, keep-with-next
    230          void GpioConfiguration()
    231          {
    232          
    233            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    234          
    235            // ADC PE6 NEW PB0
    236            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    237          
    238            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    239            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    240          
    241            //PD0 Led
    242            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E 8D000000              CALLF     GPIO_Init
    243            //I2C
    244            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   000032 35B00000              MOV       S:?b0, #0xb0
   \   000036 A610                  LD        A, #0x10
   \   000038 AE5005                LDW       X, #0x5005
   \   00003B 8D000000              CALLF     GPIO_Init
    245            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00003F 35B00000              MOV       S:?b0, #0xb0
   \   000043 A620                  LD        A, #0x20
   \   000045 AE5005                LDW       X, #0x5005
   \   000048 AC000000              JPF       GPIO_Init
    246            // Remap Pins pb4,pb5  sda,scl ;
    247          
    248          
    249          }
    250          

   \                                 In section .far_func.text, align 1, keep-with-next
    251          void InitClk()
    252          {
    253            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    254            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    255            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    256            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    257            CLK_SOURCE_HSI,       // Switch to internal timer.
    258            DISABLE,              // Disable the clock switch interrupt.
    259            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    260          
    261            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine15
    262            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_29:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine15
    263            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_30:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine15
    264            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_31:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    265          
    266          
    267          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    268          
    269          

   \                                 In section .far_func.text, align 1, keep-with-next
    270          void InitAdc()
    271          {
    272               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    273               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    274               /*
    275               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    276                          ADC1_CHANNEL_0,
    277                          ADC1_PRESSEL_FCPU_D4,
    278                           ADC1_EXTTRIG_TIM,
    279          
    280                 */
    281               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    282               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    283                                      ADC1_CHANNEL_0,
    284                                      ADC1_ALIGN_RIGHT
    285                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    286          
    287          
    288               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    289          
    290          
    291               //ADC1_Cmd (ENABLE);
    292               //ADC1->CR1 |= ADC1_CR1_ADON ;
    293               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    294               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    295          
    296          }
    297          

   \                                 In section .far_func.text, align 1, keep-with-next
    298          void InitUart()
    299          {
    300             UART2_DeInit();
   \                     InitUart:
   \   000000 8D000000              CALLF     UART2_DeInit
    301             UART2_Init((u32)9600,
    302                        UART2_WORDLENGTH_8D,
    303                        UART2_STOPBITS_1,
    304                        UART2_PARITY_NO,
    305                        UART2_SYNCMODE_CLOCK_DISABLE,
    306                        UART2_MODE_TXRX_ENABLE
    307                          );
   \   000004 350C0000              MOV       S:?b7, #0xc
   \   000008 35800000              MOV       S:?b6, #0x80
   \   00000C 3F00                  CLR       S:?b5
   \   00000E 3F00                  CLR       S:?b4
   \   000010 4F                    CLR       A
   \   000011 AE2580                LDW       X, #0x2580
   \   000014 BF00                  LDW       S:?w1, X
   \   000016 5F                    CLRW      X
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 8D000000              CALLF     UART2_Init
    308          
    309             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   \   00001D A601                  LD        A, #0x1
   \   00001F AE0255                LDW       X, #0x255
   \   000022 8D000000              CALLF     UART2_ITConfig
    310             UART2_Cmd(ENABLE);
   \   000026 A601                  LD        A, #0x1
   \   000028 AC000000              JPF       UART2_Cmd
    311          
    312            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    313          }
    314          

   \                                 In section .far_func.text, align 1, keep-with-next
    315          void SendChar( u8 Char)
    316          {
    317             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    318            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    319          }
   \   00000E 87                    RETF
    320          

   \                                 In section .far_func.text, align 1, keep-with-next
    321          void Send_Hello()
    322          {
   \                     Send_Hello:
   \   000000 3B0000                PUSH      S:?b8
    323            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine8
    324             Delay1(10);
    325             sprintf(data,"Hello");
   \                     ??CrossCallReturnLabel_18:
   \   000007 90AE0000              LDW       Y, #`?<Constant "Hello">`
   \   00000B AE0000                LDW       X, #data
   \   00000E 8D000000              CALLF     sprintf
    326              u8 i=0;
   \   000012 3F00                  CLR       S:?b8
    327            do
    328           {
    329            SendChar(data[i++]);
   \                     ??Send_Hello_0:
   \   000014 8D000000              CALLF     ?Subroutine2
    330           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_3:
   \   000018 26FA                  JRNE      L:??Send_Hello_0
    331            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??Send_Hello_1:
   \   00001A AE0040                LDW       X, #0x40
   \   00001D 8D000000              CALLF     UART2_GetFlagStatus
   \   000021 A100                  CP        A, #0x0
   \   000023 27F5                  JREQ      L:??Send_Hello_1
    332            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000025 8D000000              CALLF     ?Subroutine6
    333          
    334          
    335          
    336          }
   \                     ??CrossCallReturnLabel_13:
   \   000029 320000                POP       S:?b8
   \   00002C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteHigh
   \   000009 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_38:
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 AE000A                LDW       X, #0xa
   \   000003 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 D60000                LD        A, (L:data,X)
   \   000008 8D000000              CALLF     SendChar
   \   00000C B600                  LD        A, S:?b8
   \   00000E 4C                    INC       A
   \   00000F B700                  LD        S:?b8, A
   \   000011 5F                    CLRW      X
   \   000012 41                    EXG       A, XL
   \   000013 B600                  LD        A, S:?b8
   \   000015 724D0000              TNZ       (L:data,X)
   \   000019 87                    RETF
    337          
    338          
    339          
    340          
    341          

   \                                 In section .far_func.text, align 1, keep-with-next
    342          void SendData()
    343          {
   \                     SendData:
   \   000000 3B0000                PUSH      S:?b8
    344           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine8
    345            Delay1(10);
    346            u8 i=0;
   \                     ??CrossCallReturnLabel_17:
   \   000007 3F00                  CLR       S:?b8
    347            sprintf(data,"%d %c",adcdata,0x0d);
   \   000009 4B0D                  PUSH      #0xd
   \   00000B 4B00                  PUSH      #0x0
   \   00000D 3B0000                PUSH      L:adcdata + 1
   \   000010 3B0000                PUSH      L:adcdata
   \   000013 90AE0000              LDW       Y, #`?<Constant "%d %c">`
   \   000017 AE0000                LDW       X, #data
   \   00001A 8D000000              CALLF     sprintf
   \   00001E 5B04                  ADD       SP, #0x4
    348           do
    349           {
    350             SendChar(data[i++]);
   \                     ??SendData_0:
   \   000020 8D000000              CALLF     ?Subroutine2
    351          
    352           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_2:
   \   000024 26FA                  JRNE      L:??SendData_0
    353             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??SendData_1:
   \   000026 AE0040                LDW       X, #0x40
   \   000029 8D000000              CALLF     UART2_GetFlagStatus
   \   00002D A100                  CP        A, #0x0
   \   00002F 27F5                  JREQ      L:??SendData_1
    354            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000031 8D000000              CALLF     ?Subroutine6
    355            rx_data=0;
   \                     ??CrossCallReturnLabel_14:
   \   000035 725F0000              CLR       L:rx_data
    356          }
   \   000039 320000                POP       S:?b8
   \   00003C 87                    RETF
    357          

   \                                 In section .far_func.text, align 1, keep-with-next
    358          void LCDDataOut(u8 data)
    359          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    360            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_49
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine23_0
    361            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_49:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_50
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine23_0
    362            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_50:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_51
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine23_0
    363            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_51:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_52
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine23_0
    364          }
   \                     ??CrossCallReturnLabel_52:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_58:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    365          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine23_0
   \   000002                       ;               // Fall through to label ??Subroutine23_0

   \                                 In section .far_func.text, align 1, keep-with-next
    366          void InitLcd()
    367          {
    368           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine4
    369            LCD_RW(0);
    370            LCD_RS(0);
   \                     ??CrossCallReturnLabel_11:
   \   000006 8D000000              CALLF     ?Subroutine5
    371            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_47:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine7
    372          
    373            LCDInstrNibble(0x03);
    374             Delay1(10);
    375            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_15:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    376             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine7
    377            LCDInstrNibble(0x03);
    378             Delay1(10);
    379          
    380             //Line 4
    381            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_16:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    382            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    383            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    384            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    385          
    386            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    387            Delay1(10);
   \   00003D 8D000000              CALLF     ?Subroutine20
    388          
    389            LCDInstr(0x01) ;
   \                     ??CrossCallReturnLabel_40:
   \   000041 A601                  LD        A, #0x1
   \   000043 8D000000              CALLF     LCDInstr
    390            Delay1(250);
   \   000047 AE00FA                LDW       X, #0xfa
   \   00004A 8D000000              CALLF     Delay1
    391          
    392            LCDInstr(0x06);
   \   00004E A606                  LD        A, #0x6
   \   000050 8D000000              CALLF     LCDInstr
    393            Delay1(10);
   \   000054 AE000A                LDW       X, #0xa
   \   000057 AC000000              JPF       Delay1
    394          
    395          
    396          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_39:
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_56:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_55:
   \   00000A 87                    RETF
    397          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine23_0
   \                     ??CrossCallReturnLabel_53:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_44:
   \   00000D                       REQUIRE ??Subroutine22_0
   \   00000D                       ;               // Fall through to label ??Subroutine22_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_43:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    398          void LCDInstr(u8 Instr)
    399          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    400            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine5
    401            LCD_RW(0);
   \                     ??CrossCallReturnLabel_45:
   \   000009 2000                  JRA       ?Subroutine0
    402            LCDDataOut(Instr>>4);
    403            PulseEnable();
    404            LCDDataOut(Instr & 0x0F);
    405            PulseEnable();
    406          }
    407          

   \                                 In section .far_func.text, align 1, keep-with-next
    408          void LCDData(u8 Data)
    409          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    410            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine3
    411            LCD_RW(0);
   \                     ??CrossCallReturnLabel_5:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
    412            LCDDataOut(Data>>4);
    413            PulseEnable() ;
    414            LCDDataOut(Data & 0x0F) ;
    415            PulseEnable();
    416          }
    417          

   \                                 In section .far_func.text, align 1, keep-with-next
    418          void LCDInstrNibble(u8 Instr)
    419          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    420            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine4
    421            LCD_RW(0);
    422            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_10:
   \   00000B AC000000              JPF       ??Subroutine22_0
    423            PulseEnable();
    424          }
    425          

   \                                 In section .far_func.text, align 1, keep-with-next
    426          void PulseEnable(void)
    427          {
    428            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine1
    429             Delay1(1);
    430            LCD_EN(1);
    431             Delay1(1);
    432            LCD_EN(0);
   \                     ??CrossCallReturnLabel_0:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine23_0
    433             Delay1(1);
   \                     ??CrossCallReturnLabel_48:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
    434          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_57:
   \   000006 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_33:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine18
   \                     ??CrossCallReturnLabel_32:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
    435          

   \                                 In section .far_func.text, align 1, keep-with-next
    436          void LCD_Busy(void)
    437          {
    438             //set Port D7 as Input
    439             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    440             //Set Read
    441             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine3
    442             LCD_RS(0);
   \                     ??CrossCallReturnLabel_4:
   \   000013 8D000000              CALLF     ?Subroutine5
    443             // Read Busy Flag
    444                timer2=0;
   \                     ??CrossCallReturnLabel_46:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
    445             do
    446             {
    447             // Enable set
    448               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine1
    449                Delay1(1);
    450               LCD_EN(1);
    451                Delay1(1);
    452             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_1:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
    453                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
    454                //Clear read
    455              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine23_0
    456             //set Port D7 as Output
    457             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_54:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
    458          
    459          }
    460          
    461          

   \                                 In section .far_func.text, align 1, keep-with-next
    462          void LCD(u8 data)
    463           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    464             //  static u8 linet=0;
    465          
    466          
    467               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265E                  JRNE      L:??CrossCallReturnLabel_35
    468               {
    469          
    470                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
    471                   {
    472                   case 0:
    473                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
    474                     count=0;
   \   00001F 725F0000              CLR       L:count
    475                     break;
   \   000023 2022                  JRA       L:??LCD_4
    476                   case 1:
    477                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
    478                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
    479                     break;
   \   00002F 2016                  JRA       L:??LCD_4
    480                   case 2:
    481                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
    482                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
    483                     break;
   \   00003B 200A                  JRA       L:??LCD_4
    484                   case 3:
    485                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
    486                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
    487                     break;
    488                   //default:
    489                    //  LCDInstr(0x80 |0x40);    //Line 1
    490                    }
    491                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
    492                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 2511                  JRC       L:??LCD_5
    493                   {
    494                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
    495                    LCDInstr(0x01); //Clear LCD
   \   000056 A601                  LD        A, #0x1
   \   000058 8D000000              CALLF     LCDInstr
    496                    Delay1(2500);
   \   00005C AE09C4                LDW       X, #0x9c4
   \   00005F 8D000000              CALLF     Delay1
    497                   }
    498          
    499                   Delay1(1);
   \                     ??LCD_5:
   \   000063 8D000000              CALLF     ?Subroutine18
    500          
    501          
    502               }
    503          
    504          
    505               if (count==20)
   \                     ??CrossCallReturnLabel_35:
   \   000067 C60000                LD        A, L:count
   \   00006A A114                  CP        A, #0x14
   \   00006C 260A                  JRNE      L:??LCD_6
    506                {
    507                  LCDInstr(0x80 | 0x40);
   \   00006E A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   000070 8D000000              CALLF     LCDInstr
    508                  Delay1(1);
   \                     ??LCD_8:
   \   000074 5F                    CLRW      X
   \   000075 5C                    INCW      X
   \   000076 2029                  JRA       ??LCD_9
    509                }
    510                   else if(count==40)
   \                     ??LCD_6:
   \   000078 A128                  CP        A, #0x28
   \   00007A 2604                  JRNE      L:??LCD_10
    511                  {
    512                    LCDInstr(0x80 | 0x14);
   \   00007C A694                  LD        A, #0x94
   \   00007E 20F0                  JRA       ??LCD_7
    513                    Delay1(1);
    514                  }
    515                    else if(count==60)
   \                     ??LCD_10:
   \   000080 A13C                  CP        A, #0x3c
   \   000082 260C                  JRNE      L:??LCD_11
    516                    {
    517                      LCDInstr(0x80 | 0x54);
   \   000084 A6D4                  LD        A, #0xd4
   \   000086 8D000000              CALLF     LCDInstr
    518                      count=0;
   \   00008A 725F0000              CLR       L:count
    519                      Delay1(1);
   \   00008E 20E4                  JRA       ??LCD_8
    520                    }
    521                      else if(count >80)
   \                     ??LCD_11:
   \   000090 A151                  CP        A, #0x51
   \   000092 2511                  JRC       L:??LCD_12
    522                        {
    523                          count=0;
   \   000094 725F0000              CLR       L:count
    524                          LCDInstr(0x01); //Clear LCD
   \   000098 A601                  LD        A, #0x1
   \   00009A 8D000000              CALLF     LCDInstr
    525                          Delay1(250);
   \   00009E AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   0000A1 8D000000              CALLF     Delay1
    526                        }
    527          
    528          
    529              /*
    530                   line++;
    531                   if (line>3)
    532                   {
    533                     line=1;  //Line 0 for Time
    534                   }
    535                 switch(line)
    536                   {
    537                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
    538                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
    539                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
    540                   default : LCDInstr(0x80 | 0x40); // Line 1
    541                   }
    542                   Delay(1);
    543                   count=0;
    544                }
    545          
    546               */
    547          
    548               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A5 B600                  LD        A, S:?b8
   \   0000A7 A11C                  CP        A, #0x1c
   \   0000A9 250F                  JRC       L:??LCD_13
    549               {
    550                 LCDData(data);
   \   0000AB 8D000000              CALLF     LCDData
    551                  Delay1(1);
   \   0000AF 8D000000              CALLF     ?Subroutine18
    552                 count++;
   \                     ??CrossCallReturnLabel_34:
   \   0000B3 C60000                LD        A, L:count
   \   0000B6 4C                    INC       A
   \   0000B7 C70000                LD        L:count, A
    553               }
    554           }
   \                     ??LCD_13:
   \   0000BA 320000                POP       S:?b8
   \   0000BD 87                    RETF
    555          

   \                                 In section .far_func.text, align 1, keep-with-next
    556          void InitDelayTimer()
    557          {
    558             //Timer 2 use for Delay  long Delay is 40ms for lcd
    559             //Tclock 16/8=2Mhz  /20 10us
    560                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
    561                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
    562                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
    563                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
    564            //Enable TIM2
    565                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
    566          
    567          }
    568          
    569          

   \                                 In section .far_func.text, align 1, keep-with-next
    570          u16 Average()
    571          {
    572           //Find average in measure
    573            u8 i=0;
   \                     Average:
   \   000000 3F00                  CLR       S:?b0
    574            u16 Summa=0;
   \   000002 3F00                  CLR       S:?b3
   \   000004 3F00                  CLR       S:?b2
    575            do
    576            {
    577             Summa+=measure[i++];
   \                     ??Average_0:
   \   000006 5F                    CLRW      X
   \   000007 41                    EXG       A, XL
   \   000008 B600                  LD        A, S:?b0
   \   00000A 41                    EXG       A, XL
   \   00000B 58                    SLLW      X
   \   00000C DE0000                LDW       X, (L:measure,X)
   \   00000F 72BB0000              ADDW      X, S:?w1
   \   000013 BF00                  LDW       S:?w1, X
   \   000015 B600                  LD        A, S:?b0
   \   000017 4C                    INC       A
   \   000018 B700                  LD        S:?b0, A
    578            } while ( measure[i]!=0);
   \   00001A 5F                    CLRW      X
   \   00001B 41                    EXG       A, XL
   \   00001C B600                  LD        A, S:?b0
   \   00001E 58                    SLLW      X
   \   00001F DE0000                LDW       X, (L:measure,X)
   \   000022 26E2                  JRNE      L:??Average_0
    579             if(i!=0) Summa=Summa/i;
   \   000024 3D00                  TNZ       S:?b0
   \   000026 2708                  JREQ      L:??Average_1
   \   000028 905F                  CLRW      Y
   \   00002A 61                    EXG       A, YL
   \   00002B BE00                  LDW       X, S:?w1
   \   00002D 65                    DIVW      X, Y
   \   00002E BF00                  LDW       S:?w1, X
    580             return Summa;
   \                     ??Average_1:
   \   000030 BE00                  LDW       X, S:?w1
   \   000032 87                    RETF
    581          }
    582          

   \                                 In section .far_func.text, align 1, keep-with-next
    583          PUTCHAR_PROTOTYPE
    584          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
    585            /* Place your implementation of fputc here */
    586            /* e.g. write a character to the USART */
    587                //USART_SendData(USART3, (u8) ch);
    588               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
    589             /* Loop until the end of transmission */
    590              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
    591            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
    592          }
    593          
    594          

   \                                 In section .far_func.text, align 1, keep-with-next
    595          void Delay1(u16 Delay)
    596          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
    597            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
    598            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
    599          }
   \   00000D 87                    RETF
    600          

   \                                 In section .far_func.text, align 1, keep-with-next
    601           void Delay2(u16 Delay)
    602          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
    603            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
    604            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
    605          }
   \   00000D 87                    RETF
    606          
    607          
    608          
    609          /*
    610          void Delay12 (u16 Delay)
    611          {
    612            timer2=0;
    613            while ( timer2 < Delay); ;
    614          }
    615          */
    616          
    617          
    618          #ifdef USE_FULL_ASSERT
    619          
    620          /**
    621            * @brief  Reports the name of the source file and the source line number
    622            *   where the assert_param error has occurred.
    623            * @param file: pointer to the source file name
    624            * @param line: assert_param error line source number
    625            * @retval : None
    626            */

   \                                 In section .far_func.text, align 1
    627          void assert_failed(u8* file, u32 line)
    628          {
    629            /* User can add his own implementation to report the file name and line number,
    630               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    631          
    632            /* Infinite loop */
    633            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
    634            {
    635          
    636            }
    637          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "E1:%d">`:
   \   000000 45313A256400          DC8 "E1:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n %d:%d">`:
   \   000000 0A2025643A25          DC8 "\012 %d:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "Hello">`:
   \   000000 48656C6C6F00          DC8 "Hello"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d %c">`:
   \   000000 256420256300          DC8 "%d %c"
    638          #endif
    639          
    640          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label         Bytes
     --------------         -----
     timer1                    2
     timer2                    2
     timeout                   1
     adcdata                   2
     rx_data                   1
     data                     20
     measure                  40
     line_lcd                  1
     count                     1
     seconds                   1
     minutes                   1
     error                     1
     result                    4
     k                         2
     ?Subroutine6              9
     main                    138
     ?Subroutine11            16
     InitI2C                  39
     Init_DS1307             109
     ?Subroutine16             3
     ??Subroutine24_0          7
     ?Subroutine14            14
     ?Subroutine13             9
     ?Subroutine19            11
     ?Subroutine12            11
     ?Subroutine21            11
     ReadDS1307              220
     ?Subroutine10            13
     GpioConfiguration        76
     InitClk                  56
     ?Subroutine15             9
     InitAdc                  45
     InitUart                 44
     SendChar                 15
     Send_Hello               45
     ?Subroutine8             14
     ?Subroutine20             7
     ?Subroutine2             26
     SendData                 61
     LCDDataOut               87
     ?Subroutine3              7
     ??Subroutine23_0          5
     ?Subroutine17             7
     ?Subroutine5              2
     InitLcd                  91
     ?Subroutine7             15
     ?Subroutine4             11
     ?Subroutine0             13
     ??Subroutine22_0         10
     ?Subroutine9             10
     LCDInstr                 11
     LCDData                  11
     LCDInstrNibble           15
     PulseEnable              16
     ?Subroutine1             24
     ?Subroutine18             6
     LCD_Busy                 69
     LCD                     190
     InitDelayTimer           29
     Average                  51
     fputc                    18
     Delay1                   14
     Delay2                   14
     assert_failed             2
     ?<Constant "E1:%d">       6
     ?<Constant "\n E2:%d">    8
     ?<Constant "\n %d:%d">    8
     ?<Constant "Hello">       6
     ?<Constant "%d %c">       6

 
 1 736 bytes in section .far_func.text
    79 bytes in section .near.bss
    34 bytes in section .near.rodata
 
 1 736 bytes of CODE  memory
    34 bytes of CONST memory
    79 bytes of DATA  memory

Errors: none
Warnings: none
