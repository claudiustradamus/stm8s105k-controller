###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             05/Jul/2013  11:02:31 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /** Controller LCD DS1307,DS18B20
     12          
     13          
     14          /* Includes ------------------------------------------------------------------*/
                 ^
Warning[Pe009]: nested comment is not allowed
     15          #include "stm8s.h"
     16          #include "stdio.h"
     17          #include "string.h"
     18          /* Private defines -----------------------------------------------------------*/
     19          
     20          /* ================ LCD ======================= */
     21          
     22          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     23          #define LCD_PORT (GPIOC)
     24          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_5 |GPIO_PIN_7)
     25          #define DATA4 GPIO_PIN_1
     26          #define DATA5 GPIO_PIN_2
     27          #define DATA6 GPIO_PIN_4
     28          #define DATA7 GPIO_PIN_6
     29          #define EN  GPIO_PIN_3
     30          #define RW  GPIO_PIN_1
     31          #define RS  GPIO_PIN_2
     32          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     33          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     34          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     35          
     36          
     37          #ifdef __GNUC__
     38            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     39               set to 'Yes') calls __io_putchar() */
     40            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     41          #else
     42            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     43          #endif /* __GNUC__ */
     44          
     45          
     46          
     47          
     48          #define SpecialSymbol 0x1b //Esc to start message
     49          
     50          
     51          
     52          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     53          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     54          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     55          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     56          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
     57          #define data_size 20

   \                                 In section .near.bss, align 1
     58          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
     59          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
     60          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     61          u8 count;
   \                     count:
   \   000000                       DS8 1
     62          //u8 index=0;

   \                                 In section .near.bss, align 1
     63          float  result;
   \                     result:
   \   000000                       DS8 4
     64          
     65          
     66          
     67          
     68          
     69          
     70          
     71          
     72          /* Private function prototypes -----------------------------------------------*/
     73          void InitHardware();
     74          void GpioConfiguration();
     75          void InitClk();
     76          void InitAdc();
     77          void InitUart();
     78          void InitLcd();
     79          void InitDelayTimer();
     80          void Delay1( u16 Delay);
     81          void LCDInstrNibble (u8 Instr);
     82          void LCDInstr(u8 Instr);
     83          void LCDDataOut(u8 data);
     84          void PulseEnable();
     85          void SendData();
     86          void SendChar(u8 Char);
     87          void Send_Hello();
     88          u16  Average();
     89          
     90          /* Private functions ---------------------------------------------------------*/
     91          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
     92          void main(void)
     93          {
     94              /*High speed internal clock prescaler: 1*/
     95              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
     96          
     97              InitClk();
   \                     main:
   \   000000 8D000000              CALLF     InitClk
     98              InitDelayTimer();
   \   000004 8D000000              CALLF     InitDelayTimer
     99              GpioConfiguration();
   \   000008 8D000000              CALLF     GpioConfiguration
    100              InitUart();
   \   00000C 8D000000              CALLF     InitUart
    101              enableInterrupts();
   \   000010 9A                    RIM
    102              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000011 8D000000              CALLF     ?Subroutine8
    103              InitLcd();
   \                     ??CrossCallReturnLabel_12:
   \   000015 8D000000              CALLF     InitLcd
    104              InitAdc();
   \   000019 8D000000              CALLF     InitAdc
    105              printf("\n   Hello I am here!");
   \   00001D AE0000                LDW       X, #`?<Constant "\\n   Hello I am here!">`
   \   000020 8D000000              CALLF     printf
    106              Send_Hello();
   \   000024 8D000000              CALLF     Send_Hello
    107               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    108          
    109              while(1)
    110              {
    111                ADC1_Cmd (ENABLE);
   \                     ??main_0:
   \   000028 A601                  LD        A, #0x1
   \   00002A 8D000000              CALLF     ADC1_Cmd
    112          
    113              Delay1(500);
   \   00002E AE01F4                LDW       X, #0x1f4
   \   000031 8D000000              CALLF     Delay1
    114          
    115               GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
   \   000035 A601                  LD        A, #0x1
   \   000037 AE500F                LDW       X, #0x500f
   \   00003A 8D000000              CALLF     GPIO_WriteReverse
    116          
    117               result= Average()*(5.00/1024.0);
   \   00003E 8D000000              CALLF     Average
   \   000042 8D000000              CALLF     L:?fcastf32u16_l0_x
   \   000046 8D000000              CALLF     L:?fmul32_l0_l0_dc32
   \   00004A 3BA00000              DC32      0x3ba00000
   \   00004E AE0000                LDW       X, #result
   \   000051 8D000000              CALLF     L:?load32_0x_l0
    118          
    119               //result= adcdata*(5.00/1024.0);
    120               //sprintf(data, "%1.4f", result);
    121               line_lcd=1;
   \   000055 35010000              MOV       L:line_lcd, #0x1
    122               printf("\n Voltage:%1.3f  ",result);
   \   000059 CE0000                LDW       X, L:result + 2
   \   00005C 89                    PUSHW     X
   \   00005D 3B0000                PUSH      L:result + 1
   \   000060 3B0000                PUSH      L:result
   \   000063 AE0000                LDW       X, #`?<Constant "\\n Voltage:%1.3f  ">`
   \   000066 8D000000              CALLF     printf
   \   00006A 5B04                  ADD       SP, #0x4
    123               //line_lcd=2;
    124               //printf("\n Just Test:%X", timer2);
    125                if (rx_data==SpecialSymbol) SendData();
   \   00006C C60000                LD        A, L:rx_data
   \   00006F A11B                  CP        A, #0x1b
   \   000071 26B5                  JRNE      L:??main_0
   \   000073 8D000000              CALLF     SendData
   \   000077 20AF                  JRA       L:??main_0
    126                //SendData();
    127          
    128              }
    129          
    130          
    131          
    132          }
    133          
    134          
    135          

   \                                 In section .far_func.text, align 1
    136          void GpioConfiguration()
    137          {
    138          
    139            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    140          
    141            // ADC PE6 NEW PB0
    142            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    143          
    144            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    145            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E AE500F                LDW       X, #0x500f
   \   000021 8D000000              CALLF     GPIO_Init
    146          
    147            //PD0 Led
    148            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000025 35F00000              MOV       S:?b0, #0xf0
   \   000029 A601                  LD        A, #0x1
   \   00002B AE500F                LDW       X, #0x500f
   \   00002E AC000000              JPF       GPIO_Init
    149          }
    150          

   \                                 In section .far_func.text, align 1
    151          void InitClk()
    152          {
    153            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    154            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    155            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    156            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    157            CLK_SOURCE_HSI,       // Switch to internal timer.
    158            DISABLE,              // Disable the clock switch interrupt.
    159            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    160          
    161            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     CLK_PeripheralClockConfig
    162            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \   000027 35010000              MOV       S:?b0, #0x1
   \   00002B A603                  LD        A, #0x3
   \   00002D 8D000000              CALLF     CLK_PeripheralClockConfig
    163            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \   000031 35010000              MOV       S:?b0, #0x1
   \   000035 A613                  LD        A, #0x13
   \   000037 AC000000              JPF       CLK_PeripheralClockConfig
    164          
    165          }
    166          
    167          

   \                                 In section .far_func.text, align 1
    168          void InitAdc()
    169          {
    170               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    171               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    172               /*
    173               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    174                          ADC1_CHANNEL_0,
    175                          ADC1_PRESSEL_FCPU_D4,
    176                           ADC1_EXTTRIG_TIM,
    177          
    178                 */
    179               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    180               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    181                                      ADC1_CHANNEL_0,
    182                                      ADC1_ALIGN_RIGHT
    183                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    184          
    185          
    186               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    187          
    188          
    189               //ADC1_Cmd (ENABLE);
    190               //ADC1->CR1 |= ADC1_CR1_ADON ;
    191               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    192               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    193          
    194          }
    195          

   \                                 In section .far_func.text, align 1
    196          void InitUart()
    197          {
    198             UART2_DeInit();
   \                     InitUart:
   \   000000 8D000000              CALLF     UART2_DeInit
    199             UART2_Init((u32)9600,
    200                        UART2_WORDLENGTH_8D,
    201                        UART2_STOPBITS_1,
    202                        UART2_PARITY_NO,
    203                        UART2_SYNCMODE_CLOCK_DISABLE,
    204                        UART2_MODE_TXRX_ENABLE
    205                          );
   \   000004 350C0000              MOV       S:?b7, #0xc
   \   000008 35800000              MOV       S:?b6, #0x80
   \   00000C 3F00                  CLR       S:?b5
   \   00000E 3F00                  CLR       S:?b4
   \   000010 4F                    CLR       A
   \   000011 AE2580                LDW       X, #0x2580
   \   000014 BF00                  LDW       S:?w1, X
   \   000016 5F                    CLRW      X
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 8D000000              CALLF     UART2_Init
    206          
    207             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   \   00001D A601                  LD        A, #0x1
   \   00001F AE0255                LDW       X, #0x255
   \   000022 8D000000              CALLF     UART2_ITConfig
    208             UART2_Cmd(ENABLE);
   \   000026 A601                  LD        A, #0x1
   \   000028 AC000000              JPF       UART2_Cmd
    209          
    210            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    211          }
    212          

   \                                 In section .far_func.text, align 1, keep-with-next
    213          void SendChar( u8 Char)
    214          {
    215             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    216            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    217          }
   \   00000E 87                    RETF
    218          

   \                                 In section .far_func.text, align 1, keep-with-next
    219          void Send_Hello()
    220          {
   \                     Send_Hello:
   \   000000 3B0000                PUSH      S:?b8
    221            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine6
    222             Delay1(10);
    223             sprintf(data,"Hello");
   \                     ??CrossCallReturnLabel_7:
   \   000007 90AE0000              LDW       Y, #`?<Constant "Hello">`
   \   00000B AE0000                LDW       X, #data
   \   00000E 8D000000              CALLF     sprintf
    224              u8 i=0;
   \   000012 3F00                  CLR       S:?b8
    225            do
    226           {
    227            SendChar(data[i++]);
   \                     ??Send_Hello_0:
   \   000014 8D000000              CALLF     ?Subroutine1
    228           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_1:
   \   000018 26FA                  JRNE      L:??Send_Hello_0
    229            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??Send_Hello_1:
   \   00001A AE0040                LDW       X, #0x40
   \   00001D 8D000000              CALLF     UART2_GetFlagStatus
   \   000021 A100                  CP        A, #0x0
   \   000023 27F5                  JREQ      L:??Send_Hello_1
    230            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000025 8D000000              CALLF     ?Subroutine8
    231          
    232          
    233          
    234          }
   \                     ??CrossCallReturnLabel_13:
   \   000029 320000                POP       S:?b8
   \   00002C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 A680                  LD        A, #0x80
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteHigh
   \   000009 8D000000              CALLF     ?Subroutine11
   \                     ??CrossCallReturnLabel_15:
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine11:
   \   000000 AE000A                LDW       X, #0xa
   \   000003 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b8
   \   000004 41                    EXG       A, XL
   \   000005 D60000                LD        A, (L:data,X)
   \   000008 8D000000              CALLF     SendChar
   \   00000C B600                  LD        A, S:?b8
   \   00000E 4C                    INC       A
   \   00000F B700                  LD        S:?b8, A
   \   000011 5F                    CLRW      X
   \   000012 41                    EXG       A, XL
   \   000013 B600                  LD        A, S:?b8
   \   000015 724D0000              TNZ       (L:data,X)
   \   000019 87                    RETF
    235          
    236          
    237          
    238          
    239          

   \                                 In section .far_func.text, align 1, keep-with-next
    240          void SendData()
    241          {
   \                     SendData:
   \   000000 3B0000                PUSH      S:?b8
    242           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   \   000003 8D000000              CALLF     ?Subroutine6
    243            Delay1(10);
    244            u8 i=0;
   \                     ??CrossCallReturnLabel_6:
   \   000007 3F00                  CLR       S:?b8
    245            sprintf(data,"%d %c",adcdata,0x0d);
   \   000009 4B0D                  PUSH      #0xd
   \   00000B 4B00                  PUSH      #0x0
   \   00000D 3B0000                PUSH      L:adcdata + 1
   \   000010 3B0000                PUSH      L:adcdata
   \   000013 90AE0000              LDW       Y, #`?<Constant "%d %c">`
   \   000017 AE0000                LDW       X, #data
   \   00001A 8D000000              CALLF     sprintf
   \   00001E 5B04                  ADD       SP, #0x4
    246           do
    247           {
    248             SendChar(data[i++]);
   \                     ??SendData_0:
   \   000020 8D000000              CALLF     ?Subroutine1
    249          
    250           } while (data[i]!=0);
   \                     ??CrossCallReturnLabel_0:
   \   000024 26FA                  JRNE      L:??SendData_0
    251             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   \                     ??SendData_1:
   \   000026 AE0040                LDW       X, #0x40
   \   000029 8D000000              CALLF     UART2_GetFlagStatus
   \   00002D A100                  CP        A, #0x0
   \   00002F 27F5                  JREQ      L:??SendData_1
    252            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   \   000031 8D000000              CALLF     ?Subroutine8
    253            rx_data=0;
   \                     ??CrossCallReturnLabel_14:
   \   000035 725F0000              CLR       L:rx_data
    254          }
   \   000039 320000                POP       S:?b8
   \   00003C 87                    RETF
    255          

   \                                 In section .far_func.text, align 1, keep-with-next
    256          void LCDDataOut(u8 data)
    257          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    258            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A602                  LD        A, #0x2
   \   00000B 8D000000              CALLF     ??Subroutine12_0
   \                     ??CrossCallReturnLabel_20:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_31
   \                     ??LCDDataOut_0:
   \   000011 A602                  LD        A, #0x2
   \   000013 8D000000              CALLF     ??Subroutine14_0
    259            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_31:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2706                  JREQ      L:??LCDDataOut_1
   \   00001D 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_23:
   \   000021 2004                  JRA       L:??CrossCallReturnLabel_26
   \                     ??LCDDataOut_1:
   \   000023 8D000000              CALLF     ?Subroutine5
    260            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_26:
   \   000027 B600                  LD        A, S:?b8
   \   000029 A504                  BCP       A, #0x4
   \   00002B 2708                  JREQ      L:??LCDDataOut_2
   \   00002D A610                  LD        A, #0x10
   \   00002F 8D000000              CALLF     ??Subroutine12_0
   \                     ??CrossCallReturnLabel_19:
   \   000033 2006                  JRA       L:??CrossCallReturnLabel_32
   \                     ??LCDDataOut_2:
   \   000035 A610                  LD        A, #0x10
   \   000037 8D000000              CALLF     ??Subroutine14_0
    261            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_32:
   \   00003B B600                  LD        A, S:?b8
   \   00003D A508                  BCP       A, #0x8
   \   00003F 2708                  JREQ      L:??LCDDataOut_3
   \   000041 A640                  LD        A, #0x40
   \   000043 8D000000              CALLF     ??Subroutine12_0
   \                     ??CrossCallReturnLabel_18:
   \   000047 2006                  JRA       L:??CrossCallReturnLabel_33
   \                     ??LCDDataOut_3:
   \   000049 A640                  LD        A, #0x40
   \   00004B 8D000000              CALLF     ??Subroutine14_0
    262          }
   \                     ??CrossCallReturnLabel_33:
   \   00004F 320000                POP       S:?b8
   \   000052 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine12_0
   \   000002                       ;               // Fall through to label ??Subroutine12_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine14_0
   \   000002                       ;               // Fall through to label ??Subroutine14_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_37:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
    263          

   \                                 In section .far_func.text, align 1, keep-with-next
    264          void InitLcd()
    265          {
    266            LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine4
    267            LCD_RW(0);
    268            LCD_RS(0);
   \                     ??CrossCallReturnLabel_5:
   \   000006 8D000000              CALLF     ?Subroutine5
    269            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_28:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine3
    270          
    271            LCDInstrNibble(0x03);
    272             Delay1(10);
    273            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_2:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
    274             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine3
    275            LCDInstrNibble(0x03);
    276             Delay1(10);
    277          
    278             //Line 4
    279            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_3:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
    280            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
    281            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
    282            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
    283          
    284            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
    285            Delay1(10);
   \   00003D 8D000000              CALLF     ?Subroutine11
    286          
    287            LCDInstr(0x01) ;
   \                     ??CrossCallReturnLabel_17:
   \   000041 A601                  LD        A, #0x1
   \   000043 8D000000              CALLF     LCDInstr
    288            Delay1(250);
   \   000047 AE00FA                LDW       X, #0xfa
   \   00004A 8D000000              CALLF     Delay1
    289          
    290            LCDInstr(0x06);
   \   00004E A606                  LD        A, #0x6
   \   000050 8D000000              CALLF     LCDInstr
    291            Delay1(10);
   \   000054 AE000A                LDW       X, #0xa
   \   000057 AC000000              JPF       Delay1
    292          
    293          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_36:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_35:
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A 8D000000              CALLF     ?Subroutine11
   \                     ??CrossCallReturnLabel_16:
   \   00000E 87                    RETF
    294          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine14_0
   \                     ??CrossCallReturnLabel_34:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_25:
   \   00000D                       REQUIRE ??Subroutine13_0
   \   00000D                       ;               // Fall through to label ??Subroutine13_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_24:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
    295          void LCDInstr(u8 Instr)
    296          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    297            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine5
    298            LCD_RW(0);
   \                     ??CrossCallReturnLabel_27:
   \   000009 2000                  JRA       ?Subroutine0
    299            LCDDataOut(Instr>>4);
    300            PulseEnable();
    301            LCDDataOut(Instr & 0x0F);
    302            PulseEnable();
    303          }
    304          

   \                                 In section .far_func.text, align 1, keep-with-next
    305          void LCDData(u8 Data)
    306          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    307            LCD_RS(1);
   \   000005 8D000000              CALLF     ?Subroutine2
    308            LCD_RW(0);
   \                     ??CrossCallReturnLabel_22:
   \   000009                       REQUIRE ?Subroutine0
   \   000009                       ;               // Fall through to label ?Subroutine0
    309            LCDDataOut(Data>>4);
    310            PulseEnable() ;
    311            LCDDataOut(Data & 0x0F) ;
    312            PulseEnable();
    313          }
    314          

   \                                 In section .far_func.text, align 1, keep-with-next
    315          void LCDInstrNibble(u8 Instr)
    316          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    317            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine4
    318            LCD_RW(0);
    319            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_4:
   \   00000B AC000000              JPF       ??Subroutine13_0
    320            PulseEnable();
    321          }
    322          

   \                                 In section .far_func.text, align 1, keep-with-next
    323          void PulseEnable(void)
    324          {
    325            LCD_EN(0);
   \                     PulseEnable:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ??Subroutine14_0
    326             Delay1(1);
   \                     ??CrossCallReturnLabel_29:
   \   000006 8D000000              CALLF     ?Subroutine7
    327            LCD_EN(1);
   \                     ??CrossCallReturnLabel_11:
   \   00000A A608                  LD        A, #0x8
   \   00000C 8D000000              CALLF     ??Subroutine12_0
    328             Delay1(1);
   \                     ??CrossCallReturnLabel_21:
   \   000010 8D000000              CALLF     ?Subroutine7
    329            LCD_EN(0);
   \                     ??CrossCallReturnLabel_10:
   \   000014 A608                  LD        A, #0x8
   \   000016 8D000000              CALLF     ??Subroutine14_0
    330             Delay1(1);
   \                     ??CrossCallReturnLabel_30:
   \   00001A 5F                    CLRW      X
   \   00001B 5C                    INCW      X
   \   00001C AC000000              JPF       Delay1
    331          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
    332          
    333          

   \                                 In section .far_func.text, align 1, keep-with-next
    334          void LCD(u8 data)
    335           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
    336             //  static u8 linet=0;
    337          
    338          
    339               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265E                  JRNE      L:??CrossCallReturnLabel_9
    340               {
    341          
    342                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
    343                   {
    344                   case 0:
    345                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
    346                     count=0;
   \   00001F 725F0000              CLR       L:count
    347                     break;
   \   000023 2022                  JRA       L:??LCD_4
    348                   case 1:
    349                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
    350                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
    351                     break;
   \   00002F 2016                  JRA       L:??LCD_4
    352                   case 2:
    353                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
    354                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
    355                     break;
   \   00003B 200A                  JRA       L:??LCD_4
    356                   case 3:
    357                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
    358                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
    359                     break;
    360                   //default:
    361                    //  LCDInstr(0x80 |0x40);    //Line 1
    362                    }
    363                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
    364                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 2511                  JRC       L:??LCD_5
    365                   {
    366                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
    367                    LCDInstr(0x01); //Clear LCD
   \   000056 A601                  LD        A, #0x1
   \   000058 8D000000              CALLF     LCDInstr
    368                    Delay1(2500);
   \   00005C AE09C4                LDW       X, #0x9c4
   \   00005F 8D000000              CALLF     Delay1
    369                   }
    370          
    371                   Delay1(1);
   \                     ??LCD_5:
   \   000063 8D000000              CALLF     ?Subroutine7
    372          
    373          
    374               }
    375          
    376          
    377               if (count==20)
   \                     ??CrossCallReturnLabel_9:
   \   000067 C60000                LD        A, L:count
   \   00006A A114                  CP        A, #0x14
   \   00006C 260A                  JRNE      L:??LCD_6
    378                {
    379                  LCDInstr(0x80 | 0x40);
   \   00006E A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   000070 8D000000              CALLF     LCDInstr
    380                  Delay1(1);
   \                     ??LCD_8:
   \   000074 5F                    CLRW      X
   \   000075 5C                    INCW      X
   \   000076 2029                  JRA       ??LCD_9
    381                }
    382                   else if(count==40)
   \                     ??LCD_6:
   \   000078 A128                  CP        A, #0x28
   \   00007A 2604                  JRNE      L:??LCD_10
    383                  {
    384                    LCDInstr(0x80 | 0x14);
   \   00007C A694                  LD        A, #0x94
   \   00007E 20F0                  JRA       ??LCD_7
    385                    Delay1(1);
    386                  }
    387                    else if(count==60)
   \                     ??LCD_10:
   \   000080 A13C                  CP        A, #0x3c
   \   000082 260C                  JRNE      L:??LCD_11
    388                    {
    389                      LCDInstr(0x80 | 0x54);
   \   000084 A6D4                  LD        A, #0xd4
   \   000086 8D000000              CALLF     LCDInstr
    390                      count=0;
   \   00008A 725F0000              CLR       L:count
    391                      Delay1(1);
   \   00008E 20E4                  JRA       ??LCD_8
    392                    }
    393                      else if(count >80)
   \                     ??LCD_11:
   \   000090 A151                  CP        A, #0x51
   \   000092 2511                  JRC       L:??LCD_12
    394                        {
    395                          count=0;
   \   000094 725F0000              CLR       L:count
    396                          LCDInstr(0x01); //Clear LCD
   \   000098 A601                  LD        A, #0x1
   \   00009A 8D000000              CALLF     LCDInstr
    397                          Delay1(250);
   \   00009E AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   0000A1 8D000000              CALLF     Delay1
    398                        }
    399          
    400          
    401              /*
    402                   line++;
    403                   if (line>3)
    404                   {
    405                     line=1;  //Line 0 for Time
    406                   }
    407                 switch(line)
    408                   {
    409                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
    410                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
    411                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
    412                   default : LCDInstr(0x80 | 0x40); // Line 1
    413                   }
    414                   Delay(1);
    415                   count=0;
    416                }
    417          
    418               */
    419          
    420               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A5 B600                  LD        A, S:?b8
   \   0000A7 A11C                  CP        A, #0x1c
   \   0000A9 250F                  JRC       L:??LCD_13
    421               {
    422                 LCDData(data);
   \   0000AB 8D000000              CALLF     LCDData
    423                  Delay1(1);
   \   0000AF 8D000000              CALLF     ?Subroutine7
    424                 count++;
   \                     ??CrossCallReturnLabel_8:
   \   0000B3 C60000                LD        A, L:count
   \   0000B6 4C                    INC       A
   \   0000B7 C70000                LD        L:count, A
    425               }
    426           }
   \                     ??LCD_13:
   \   0000BA 320000                POP       S:?b8
   \   0000BD 87                    RETF
    427          

   \                                 In section .far_func.text, align 1, keep-with-next
    428          void InitDelayTimer()
    429          {
    430             //Timer 2 use for Delay  long Delay is 40ms for lcd
    431             //Tclock 16/8=2Mhz  /20 10us
    432                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
    433                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
    434                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
    435                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
    436            //Enable TIM2
    437                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
    438          
    439          }
    440          
    441          

   \                                 In section .far_func.text, align 1, keep-with-next
    442          u16 Average()
    443          {
    444           //Find average in measure
    445            u8 i=0;
   \                     Average:
   \   000000 3F00                  CLR       S:?b0
    446            u16 Summa=0;
   \   000002 3F00                  CLR       S:?b3
   \   000004 3F00                  CLR       S:?b2
    447            do
    448            {
    449             Summa+=measure[i++];
   \                     ??Average_0:
   \   000006 5F                    CLRW      X
   \   000007 41                    EXG       A, XL
   \   000008 B600                  LD        A, S:?b0
   \   00000A 41                    EXG       A, XL
   \   00000B 58                    SLLW      X
   \   00000C DE0000                LDW       X, (L:measure,X)
   \   00000F 72BB0000              ADDW      X, S:?w1
   \   000013 BF00                  LDW       S:?w1, X
   \   000015 B600                  LD        A, S:?b0
   \   000017 4C                    INC       A
   \   000018 B700                  LD        S:?b0, A
    450            } while ( measure[i]!=0);
   \   00001A 5F                    CLRW      X
   \   00001B 41                    EXG       A, XL
   \   00001C B600                  LD        A, S:?b0
   \   00001E 58                    SLLW      X
   \   00001F DE0000                LDW       X, (L:measure,X)
   \   000022 26E2                  JRNE      L:??Average_0
    451             if(i!=0) Summa=Summa/i;
   \   000024 3D00                  TNZ       S:?b0
   \   000026 2708                  JREQ      L:??Average_1
   \   000028 905F                  CLRW      Y
   \   00002A 61                    EXG       A, YL
   \   00002B BE00                  LDW       X, S:?w1
   \   00002D 65                    DIVW      X, Y
   \   00002E BF00                  LDW       S:?w1, X
    452             return Summa;
   \                     ??Average_1:
   \   000030 BE00                  LDW       X, S:?w1
   \   000032 87                    RETF
    453          }
    454          

   \                                 In section .far_func.text, align 1, keep-with-next
    455          PUTCHAR_PROTOTYPE
    456          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
    457            /* Place your implementation of fputc here */
    458            /* e.g. write a character to the USART */
    459                //USART_SendData(USART3, (u8) ch);
    460               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
    461             /* Loop until the end of transmission */
    462              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
    463            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
    464          }
    465          
    466          

   \                                 In section .far_func.text, align 1, keep-with-next
    467          void Delay1(u16 Delay)
    468          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
    469            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
    470            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
    471          }
   \   00000D 87                    RETF
    472          
    473          /*
    474          void Delay12 (u16 Delay)
    475          {
    476            timer2=0;
    477            while ( timer2 < Delay); ;
    478          }
    479          */
    480          
    481          
    482          #ifdef USE_FULL_ASSERT
    483          
    484          /**
    485            * @brief  Reports the name of the source file and the source line number
    486            *   where the assert_param error has occurred.
    487            * @param file: pointer to the source file name
    488            * @param line: assert_param error line source number
    489            * @retval : None
    490            */

   \                                 In section .far_func.text, align 1
    491          void assert_failed(u8* file, u32 line)
    492          {
    493            /* User can add his own implementation to report the file name and line number,
    494               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    495          
    496            /* Infinite loop */
    497            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
    498            {
    499          
    500            }
    501          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n   Hello I am here!">`:
   \   000000 0A2020204865          DC8 "\012   Hello I am here!"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n Voltage:%1.3f  ">`:
   \   000000 0A20566F6C74          DC8 "\012 Voltage:%1.3f  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "Hello">`:
   \   000000 48656C6C6F00          DC8 "Hello"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d %c">`:
   \   000000 256420256300          DC8 "%d %c"
    502          #endif
    503          
    504          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                      Bytes
     --------------                      -----
     timer1                                 2
     timer2                                 2
     adcdata                                2
     rx_data                                1
     data                                  20
     measure                               40
     line_lcd                               1
     count                                  1
     result                                 4
     ?Subroutine8                           9
     main                                 121
     GpioConfiguration                     50
     InitClk                               59
     InitAdc                               45
     InitUart                              44
     SendChar                              15
     Send_Hello                            45
     ?Subroutine6                          14
     ?Subroutine11                          7
     ?Subroutine1                          26
     SendData                              61
     LCDDataOut                            83
     ?Subroutine2                           2
     ??Subroutine12_0                       7
     ?Subroutine5                           2
     ??Subroutine14_0                       5
     ?Subroutine10                          7
     InitLcd                               91
     ?Subroutine4                          11
     ?Subroutine3                          15
     ?Subroutine0                          13
     ??Subroutine13_0                      10
     ?Subroutine9                          10
     LCDInstr                              11
     LCDData                                9
     LCDInstrNibble                        15
     PulseEnable                           32
     ?Subroutine7                           6
     LCD                                  190
     InitDelayTimer                        29
     Average                               51
     fputc                                 18
     Delay1                                14
     assert_failed                          2
     ?<Constant "\n   Hello I am here!">   21
     ?<Constant "\n Voltage:%1.3f  ">      18
     ?<Constant "Hello">                    6
     ?<Constant "%d %c">                    6

 
 1 129 bytes in section .far_func.text
    73 bytes in section .near.bss
    51 bytes in section .near.rodata
 
 1 129 bytes of CODE  memory
    51 bytes of CONST memory
    73 bytes of DATA  memory

Errors: none
Warnings: 1
