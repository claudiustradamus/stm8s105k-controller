###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             14/Aug/2013  22:25:31 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c                      #
#    Command line =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\main.c -e -Ohz --debug      #
#                    --code_model medium --data_model medium -o               #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC C:\Users\Administrator\Desktop\stm8s105k-co #
#                    ntroller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S10 #
#                    5\List\ -lA C:\Users\Administrator\Desktop\stm8s105k-con #
#                    troller\Project\STM8S_StdPeriph_Template\EWSTM8\STM8S105 #
#                    \List\ -I C:\Users\Administrator\Desktop\stm8s105k-contr #
#                    oller\Project\STM8S_StdPeriph_Template\EWSTM8\..\ -I     #
#                    C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\..\..\Libraries\S #
#                    TM8S_StdPeriph_Driver\inc\ --vregs 16                    #
#    List file    =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\main.l #
#                    st                                                       #
#    Object file  =  C:\Users\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\Obj\main.o  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          #include "string.h"
     35          /* Private defines -----------------------------------------------------------*/
     36          
     37          /* ================ LCD ======================= */
     38          
     39          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     40          #define LCD_PORT (GPIOC)
     41          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     42          #define DATA4 GPIO_PIN_4
     43          #define DATA5 GPIO_PIN_5
     44          #define DATA6 GPIO_PIN_6
     45          #define DATA7 GPIO_PIN_7
     46          #define EN  GPIO_PIN_3
     47          #define RW  GPIO_PIN_1
     48          #define RS  GPIO_PIN_2
     49          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     50          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     51          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     52          
     53          #define key_ok    GPIO_PIN_4
     54          #define key_plus  GPIO_PIN_1
     55          #define key_minus GPIO_PIN_2
     56            //DS18B20  Temp Sensor
     57          #define ds18_data GPIO_PIN_2 //2
     58          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     59            //Power 
     60          #define power_pin GPIO_PIN_3
     61          
     62          
     63          
     64          //EEPROM Address;
     65          #define EEPROM_ADDR 0x4000
     66          #define EEPROM_ADR_STATUSH EEPROM_ADDR + 0
     67          #define EEPROM_ADR_STATUSL EEPROM_ADDR + 1
     68          #define EEPROM_ADR_TIME_ON_HOURS EEPROM_ADDR +2
     69          #define EEPROM_ADR_TIME_ON_MINUTES EEPROM_ADDR +3
     70          #define EEPROM_ADR_TIME_OFF_HOURS EEPROM_ADDR +4
     71          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     72          
     73          
     74          
     75          #ifdef __GNUC__
     76            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     77               set to 'Yes') calls __io_putchar() */
     78            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     79          #else
     80            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     81          #endif /* __GNUC__ */
     82          
     83          
     84          
     85          
     86          #define SpecialSymbol 0x1b //Esc to start message
     87          #define data_size 20
     88          #define key_time 8000
     89          #define key_time_ok 15000
     90          #define DS_Control  0x10  // Out 1s
     91          
     92          
     93          
     94          
     95          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     96          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     97          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
     98          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
     99          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    100          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    101          char data[data_size];
   \                     data:
   \   000000                       DS8 20

   \                                 In section .near.bss, align 1
    102          u16  measure[data_size];
   \                     measure:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
    103          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    104          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    105          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    106          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    107          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    108          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    109          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    110          u8 mounts=1;
   \                     mounts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    111          u8 years;
   \                     years:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    120          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    121          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    122          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    127          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 test2;
   \                     test2:
   \   000000                       DS8 1
    129          //u8 index=0;

   \                                 In section .near.bss, align 1
    130          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    131          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    132          
    133          
    134           struct   status_reg
    135           {
    136             unsigned on:1;
    137             unsigned timer_on:1;
    138             unsigned daily:1;

   \                                 In section .near.bss, align 1
    139           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    140             
    141          
    142          
    143          
    144          
    145          
    146          
    147          /* Private function prototypes -----------------------------------------------*/
    148          void InitHardware();
    149          void GpioConfiguration();
    150          void InitClk();
    151          void InitAdc();
    152          void InitI2C();
    153          void EEPROM_INIT();
    154          bool ReadDS1307();
    155          //void InitUart();
    156          void InitLcd();
    157          void InitDelayTimer();
    158          void Delay1( u16 Delay);
    159          void Delay2( u16 Delay);
    160          void Delay_us(u16 Delay);
    161          void LCDInstrNibble (u8 Instr);
    162          void LCDInstr(u8 Instr);
    163          void LCDDataOut(u8 data);
    164          void LCD_Busy();
    165          void PulseEnable();
    166          //void SendData();
    167          void SendChar(u8 Char);
    168          //void Send_Hello();
    169          bool Set_Clock();
    170          bool key_ok_on();
    171          bool key_plus_on();
    172          bool key_minus_on();
    173          bool key_ok_plus();
    174          bool Init_DS1307(void);
    175          bool Check_DS1307(void);
    176          bool I2C_Start(void);
    177          bool I2C_WA(u8 address);
    178          bool I2C_WD(u8 data);
    179          bool I2C_RA(u8 address);
    180          bool Set_DS1307();
    181          bool Set_Delay_Allarm();
    182          bool Read_Allarm();
    183          bool Read_DS18();
    184          bool DS18_Write( u8 data);
    185          bool DS18_Reset();
    186          bool DS18Set();
    187          u8 temperature();
    188          u8 DS18_Read();
    189          u8 convert_tobcd(u8 data);
    190          u8 I2C_RD(void);
    191          u8 adj(u8 min,u8 max,u8 now);
    192          u8 bcd2hex(u8 bcd);
    193          void Power_On(void);
    194          void Power_Off();
    195          void Save_Status();
    196          void Rotate_Line( char * line);
    197          
    198          u16  Average();
    199          
    200          
    201          /* Private functions ---------------------------------------------------------*/
    202          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    203          void main(void)
    204          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    205              /*High speed internal clock prescaler: 1*/
    206              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    207          
    208              InitClk();
   \   000003 8D000000              CALLF     InitClk
    209              InitDelayTimer();
   \   000007 8D000000              CALLF     InitDelayTimer
    210              GpioConfiguration();
   \   00000B 8D000000              CALLF     GpioConfiguration
    211              //InitUart();
    212              enableInterrupts();
   \   00000F 9A                    RIM
    213              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000010 A680                  LD        A, #0x80
   \   000012 8D000000              CALLF     ?Subroutine18
    214              InitLcd();
   \                     ??CrossCallReturnLabel_54:
   \   000016 8D000000              CALLF     InitLcd
    215              //InitAdc();
    216              InitI2C();
   \   00001A 8D000000              CALLF     InitI2C
    217              //Init DS18B20
    218              DS18Set();
   \   00001E 8D000000              CALLF     DS18Set
    219              line_lcd=0;
   \   000022 725F0000              CLR       L:line_lcd
    220              if (!Read_DS18())
   \   000026 8D000000              CALLF     Read_DS18
   \   00002A A100                  CP        A, #0x0
   \   00002C 260D                  JRNE      L:??main_0
    221              {
    222               printf("\nDS_Err_I");
   \   00002E AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   000031 8D000000              CALLF     printf
    223                while (!key_ok_on());
   \                     ??main_1:
   \   000035 8D000000              CALLF     ?Subroutine40
    224              }
   \                     ??CrossCallReturnLabel_121:
   \   000039 27FA                  JREQ      L:??main_1
    225          
    226          
    227          
    228          
    229          
    230              //years=bcd2hex(13);
    231              Delay1(1000);
   \                     ??main_0:
   \   00003B AE03E8                LDW       X, #0x3e8
   \   00003E 8D000000              CALLF     Delay1
    232               if (!ReadDS1307())
   \   000042 8D000000              CALLF     ReadDS1307
   \   000046 A100                  CP        A, #0x0
   \   000048 2615                  JRNE      L:??main_2
    233               {
    234                 printf("\n E2:%d",error);
   \   00004A C60000                LD        A, L:error
   \   00004D 5F                    CLRW      X
   \   00004E 97                    LD        XL, A
   \   00004F 89                    PUSHW     X
   \   000050 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000053 8D000000              CALLF     printf
   \   000057 5B02                  ADD       SP, #0x2
    235                 // Reset the CPU: Enable the watchdog and wait until it expires
    236                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000059 35CC50E0              MOV       L:0x50e0, #0xcc
    237                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   00005D 20FE                  JRA       L:??main_3
    238               }
    239               //Send_Hello();
    240              //line_lcd=0;
    241              //printf("\nHello");
    242          
    243          
    244              if (!Check_DS1307())
   \                     ??main_2:
   \   00005F 8D000000              CALLF     Check_DS1307
   \   000063 A100                  CP        A, #0x0
   \   000065 2626                  JRNE      L:??main_4
    245              {
    246                 if (error!=0)
   \   000067 C60000                LD        A, L:error
   \   00006A 2712                  JREQ      L:??main_5
    247                 {
    248                  printf("\n E:%d",error);
   \   00006C 5F                    CLRW      X
   \   00006D 97                    LD        XL, A
   \   00006E 89                    PUSHW     X
   \   00006F AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000072 8D000000              CALLF     printf
   \   000076 5B02                  ADD       SP, #0x2
    249                   while (!key_ok_on());
   \                     ??main_6:
   \   000078 8D000000              CALLF     ?Subroutine40
    250          
    251                 }
   \                     ??CrossCallReturnLabel_122:
   \   00007C 27FA                  JREQ      L:??main_6
    252               line_lcd=0;
   \                     ??main_5:
   \   00007E 725F0000              CLR       L:line_lcd
    253               printf("\nSetClock");
   \   000082 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   000085 8D000000              CALLF     printf
    254                Set_Clock();
   \   000089 8D000000              CALLF     Set_Clock
    255          
    256              }
    257          
    258                 //Read Status register from eepom and update it
    259                //size=sizeof(status);
    260               //u16 status
    261               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_4:
   \   00008D AE4000                LDW       X, #0x4000
   \   000090 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_7:
   \   000094 B700                  LD        S:?b8, A
   \   000096 AE4001                LDW       X, #0x4001
   \   000099 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_6:
   \   00009D 905F                  CLRW      Y
   \   00009F 9097                  LD        YL, A
   \   0000A1 5F                    CLRW      X
   \   0000A2 41                    EXG       A, XL
   \   0000A3 B600                  LD        A, S:?b8
   \   0000A5 41                    EXG       A, XL
   \   0000A6 4F                    CLR       A
   \   0000A7 02                    RLWA      X, A
   \   0000A8 8D000000              CALLF     ??Subroutine59_0
   \                     ??CrossCallReturnLabel_191:
   \   0000AC CF0000                LDW       L:status, X
    262                status_check = *(u16*)(&status);
   \   0000AF CE0000                LDW       X, L:status
   \   0000B2 CF0000                LDW       L:status_check, X
    263              //When Start Check for Allarm and computing Daily_long_on
    264               if ( Read_Allarm() == TRUE)
   \   0000B5 8D000000              CALLF     Read_Allarm
   \   0000B9 A101                  CP        A, #0x1
   \   0000BB 260C                  JRNE      L:??CrossCallReturnLabel_159
    265               {
    266                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000BD 8D000000              CALLF     ?Subroutine1
    267                 time_off= daily_hour_off*60+daily_minute_off;
    268               }
   \                     ??CrossCallReturnLabel_1:
   \   0000C1 2006                  JRA       L:??CrossCallReturnLabel_159
    269          
    270               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    271          
    272               // Working fuction
    273              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 mounts,u8 hours,u8 minutes,u8 seconds)
    274          
    275              while(1)
    276              {
    277                ADC1_Cmd (ENABLE);
    278          
    279                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    280                   Delay2(23437);
    281                  // ttimer++;
    282                 GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    283                   Delay2(23437);
    284                   
    285                     //status_check = *(u16*)(&status);
    286                     
    287                line_lcd=0;
    288               if (!ReadDS1307())
    289               {
    290                 printf("\n E2:%d",error);
    291                  //restart i2c
    292                // Reset the CPU: Enable the watchdog and wait until it expires
    293                 IWDG->KR = IWDG_KEY_ENABLE;
    294                 while ( 1 );    // Wait until reset occurs from IWDG
    295          
    296               }
    297                 else
    298                   //printf("\n      ");
    299              
    300               //line_lcd=2;
    301               //printf("\n Just Test:%X", timer2);
    302                   //if (rx_data==SpecialSymbol) SendData();
    303                //SendData();
    304          
    305                if (key_ok_on())
    306                {
    307                  line_lcd=0;
    308                  printf("\n%02d:%02d:%02d",years,mounts,date);
    309                  status.daily=1; //On Daily timer
    310                  Save_Status();
    311                  Delay2(50000);
    312                  //Delay2(10000);
    313                  //Delay2(10000);
    314                }
    315          
    316                if(key_ok_plus()) Set_Delay_Allarm();  //Set Daily Allarm
    317                if(key_plus_on()) Power_On();
    318                if(key_minus_on())Power_Off();
    319          
    320          
    321                //Check for Allarm
    322                    if (status.daily==1)
    323                  {
    324                u16 time_now=hours*60+minutes;
    325                status.on=0;
    326                     u16 time=time_on;
    327                     do
    328                    {
    329                       if(time==time_now)
    330                       {
    331                         status.on=1;
    332                          break ;
    333                       }
    334                        time++;
    335                         if( time==1441) time=0;
    336                    } while(!(time==time_off));
    337                   };
    338          
    339                   
    340                      //Read Temperature
    341                  // if( ttimer > 5 )
    342                   //{
    343                      result1=temperature();
    344                      result2=0;
    345                      if(result1%2!=0) result2=5;
    346                      result1/=2;
    347                      char result3;
    348                     // ttimer=0;
    349                 //  }
    350          
    351                   //printf("\n%d.%d",result1,result2);
    352          
    353                     //Display
    354                    line_lcd=0;
    355                    if (status.daily==1)  result3 ='d';
    356                    printf("\n %d.%d %c",result1,result2,result3);
    357                    line_lcd=1;
    358                    printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    359          
    360          
    361                     if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_7:
   \   0000C3 A608                  LD        A, #0x8
   \   0000C5 8D000000              CALLF     ??Subroutine55_0
   \                     ??CrossCallReturnLabel_159:
   \   0000C9 A601                  LD        A, #0x1
   \   0000CB 8D000000              CALLF     ADC1_Cmd
   \   0000CF 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_74:
   \   0000D3 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_73:
   \   0000D7 725F0000              CLR       L:line_lcd
   \   0000DB 8D000000              CALLF     ReadDS1307
   \   0000DF A100                  CP        A, #0x0
   \   0000E1 2615                  JRNE      L:??main_8
   \   0000E3 C60000                LD        A, L:error
   \   0000E6 5F                    CLRW      X
   \   0000E7 97                    LD        XL, A
   \   0000E8 89                    PUSHW     X
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   0000EC 8D000000              CALLF     printf
   \   0000F0 5B02                  ADD       SP, #0x2
   \   0000F2 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_9:
   \   0000F6 20FE                  JRA       L:??main_9
   \                     ??main_8:
   \   0000F8 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_123:
   \   0000FC 272C                  JREQ      L:??main_10
   \   0000FE 725F0000              CLR       L:line_lcd
   \   000102 C60000                LD        A, L:`date`
   \   000105 5F                    CLRW      X
   \   000106 97                    LD        XL, A
   \   000107 89                    PUSHW     X
   \   000108 C60000                LD        A, L:mounts
   \   00010B 97                    LD        XL, A
   \   00010C 89                    PUSHW     X
   \   00010D C60000                LD        A, L:years
   \   000110 97                    LD        XL, A
   \   000111 89                    PUSHW     X
   \   000112 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000115 8D000000              CALLF     printf
   \   000119 5B06                  ADD       SP, #0x6
   \   00011B 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_108:
   \   00011F 8D000000              CALLF     Save_Status
   \   000123 AEC350                LDW       X, #0xc350
   \   000126 8D000000              CALLF     Delay2
   \                     ??main_10:
   \   00012A 8D000000              CALLF     key_ok_plus
   \   00012E A100                  CP        A, #0x0
   \   000130 2704                  JREQ      L:??main_11
   \   000132 8D000000              CALLF     Set_Delay_Allarm
   \                     ??main_11:
   \   000136 8D000000              CALLF     key_plus_on
   \   00013A A100                  CP        A, #0x0
   \   00013C 2704                  JREQ      L:??main_12
   \   00013E 8D000000              CALLF     Power_On
   \                     ??main_12:
   \   000142 8D000000              CALLF     key_minus_on
   \   000146 A100                  CP        A, #0x0
   \   000148 2704                  JREQ      L:??main_13
   \   00014A 8D000000              CALLF     Power_Off
   \                     ??main_13:
   \   00014E CE0000                LDW       X, L:status
   \   000151 9F                    LD        A, XL
   \   000152 A504                  BCP       A, #0x4
   \   000154 2739                  JREQ      L:??main_14
   \   000156 C60000                LD        A, L:hours
   \   000159 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_197:
   \   00015D C60000                LD        A, L:minutes
   \   000160 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_193:
   \   000164 BF00                  LDW       S:?w0, X
   \   000166 CE0000                LDW       X, L:status
   \   000169 01                    RRWA      X, A
   \   00016A A4FE                  AND       A, #0xfe
   \   00016C 02                    RLWA      X, A
   \   00016D CF0000                LDW       L:status, X
   \   000170 CE0000                LDW       X, L:time_on
   \                     ??main_15:
   \   000173 B300                  CPW       X, S:?w0
   \   000175 260C                  JRNE      L:??main_16
   \   000177 CE0000                LDW       X, L:status
   \   00017A 01                    RRWA      X, A
   \   00017B AA01                  OR        A, #0x1
   \   00017D 02                    RLWA      X, A
   \   00017E CF0000                LDW       L:status, X
   \   000181 200C                  JRA       L:??main_14
   \                     ??main_16:
   \   000183 5C                    INCW      X
   \   000184 A305A1                CPW       X, #0x5a1
   \   000187 2601                  JRNE      L:??main_17
   \   000189 5F                    CLRW      X
   \                     ??main_17:
   \   00018A C30000                CPW       X, L:time_off
   \   00018D 26E4                  JRNE      L:??main_15
   \                     ??main_14:
   \   00018F 8D000000              CALLF     temperature
   \   000193 C70000                LD        L:result1, A
   \   000196 725F0000              CLR       L:result2
   \   00019A 7201000004            BTJF      L:result1, #0x0, L:??main_18
   \   00019F 35050000              MOV       L:result2, #0x5
   \                     ??main_18:
   \   0001A3 44                    SRL       A
   \   0001A4 C70000                LD        L:result1, A
   \   0001A7 725F0000              CLR       L:line_lcd
   \   0001AB CE0000                LDW       X, L:status
   \   0001AE 9F                    LD        A, XL
   \   0001AF A504                  BCP       A, #0x4
   \   0001B1 2704                  JREQ      L:??main_19
   \   0001B3 35640000              MOV       S:?b0, #0x64
   \                     ??main_19:
   \   0001B7 5F                    CLRW      X
   \   0001B8 41                    EXG       A, XL
   \   0001B9 B600                  LD        A, S:?b0
   \   0001BB 41                    EXG       A, XL
   \   0001BC 89                    PUSHW     X
   \   0001BD C60000                LD        A, L:result2
   \   0001C0 97                    LD        XL, A
   \   0001C1 89                    PUSHW     X
   \   0001C2 C60000                LD        A, L:result1
   \   0001C5 97                    LD        XL, A
   \   0001C6 89                    PUSHW     X
   \   0001C7 AE0000                LDW       X, #`?<Constant "\\n %d.%d %c">`
   \   0001CA 8D000000              CALLF     printf
   \   0001CE 5B06                  ADD       SP, #0x6
   \   0001D0 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_63:
   \   0001D4 89                    PUSHW     X
   \   0001D5 C60000                LD        A, L:minutes
   \   0001D8 97                    LD        XL, A
   \   0001D9 89                    PUSHW     X
   \   0001DA C60000                LD        A, L:hours
   \   0001DD 97                    LD        XL, A
   \   0001DE 89                    PUSHW     X
   \   0001DF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0001E2 8D000000              CALLF     printf
   \   0001E6 5B06                  ADD       SP, #0x6
   \   0001E8 CE0000                LDW       X, L:status
   \   0001EB 9F                    LD        A, XL
   \   0001EC A501                  BCP       A, #0x1
   \   0001EE 2703                  JREQ      ??lb_0
   \   0001F0 CC0000                JP        L:??main_7
    362                       else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??lb_0:
   \   0001F3 A608                  LD        A, #0x8
   \   0001F5 8D000000              CALLF     ?Subroutine18
    363                   
    364          
    365          
    366              }
   \                     ??CrossCallReturnLabel_53:
   \   0001F9 CC0000                JP        L:??CrossCallReturnLabel_159
    367          
    368          
    369          
    370          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine59_0
   \   000002                       ;               // Fall through to label ??Subroutine59_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine60_0
   \   000002                       ;               // Fall through to label ??Subroutine60_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine25:
   \   000000 A601                  LD        A, #0x1
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteReverse
   \   000009 AE5B8D                LDW       X, #0x5b8d
   \   00000C AC000000              JPF       Delay2

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine22:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine18:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine4:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_198:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_194:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 C60000                LD        A, L:daily_hour_off
   \   000014 8D000000              CALLF     ??Subroutine60_0
   \                     ??CrossCallReturnLabel_196:
   \   000018 C60000                LD        A, L:daily_minute_off
   \   00001B 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_195:
   \   00001F CF0000                LDW       L:time_off, X
   \   000022 87                    RETF
    371          

   \                                 In section .far_func.text, align 1, keep-with-next
    372          void Power_On()
    373          {
    374            status.on=1; 
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine33
    375            status.daily=0; //Off Daily timer 
    376            Save_Status();
   \                     ??CrossCallReturnLabel_91:
   \   00000A AC000000              JPF       Save_Status
    377          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 87                    RETF
    378          

   \                                 In section .far_func.text, align 1, keep-with-next
    379          void Power_Off()
    380          { 
    381            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine33
    382            status.daily=0; //Off Daily timer 
    383            Save_Status();
   \                     ??CrossCallReturnLabel_90:
   \   00000A AC000000              JPF       Save_Status
    384          }
    385          

   \                                 In section .far_func.text, align 1, keep-with-next
    386          void InitI2C(void)
    387          {
    388             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    389             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    390             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    391          }
    392          

   \                                 In section .far_func.text, align 1, keep-with-next
    393          bool I2C_Start(void)
    394          {
    395             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    396                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    397              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_139:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    398                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    399                  {
    400                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    401                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    402                  }
    403                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    404          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    405          

   \                                 In section .far_func.text, align 1, keep-with-next
    406          bool I2C_WA(u8 address)
    407          {
    408            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    409                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    410                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_138:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    411                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    412                   {
    413                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    414                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    415                   }
    416                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    417          }
    418          

   \                                 In section .far_func.text, align 1, keep-with-next
    419          bool I2C_RA(u8 address)
    420          {
    421            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    422                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    423                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_140:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    424                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    425                   {
    426                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    427                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    428                   }
    429                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    430          }
    431          
    432          

   \                                 In section .far_func.text, align 1, keep-with-next
    433          bool I2C_WD(u8 data)
    434          {
    435           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    436             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    437             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_137:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    438              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    439              {
    440                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    441                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    442              }
    443               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    444          }
    445          

   \                                 In section .far_func.text, align 1, keep-with-next
    446          u8 I2C_RD(void)
    447          {
    448           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    449            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    450           //while((!(I2C->SR1 & 0x40))&&timeout);
    451           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    452           {
    453             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    454             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    455           }
    456           u8 data=I2C_ReceiveData();
    457           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    458          }
    459          
    460            /*
    461          bool Init_DS1307(void)
    462          {
    463             // Test DS1307
    464              error=0;
    465              if (!I2C_Start()) return FALSE;
    466              if(!I2C_WA(0xD0)) return FALSE;
    467              if(!I2C_WD(0x00)) return FALSE;
    468              if(!I2C_WD(0x00)) return FALSE;
    469              I2C_GenerateSTOP(ENABLE);
    470          
    471              // timeout=100;  error=4;
    472              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    473              //    if (!timeout)return FALSE ;
    474               return TRUE;
    475          }
    476             */
    477          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine58_0
   \   000001                       ;               // Fall through to label ??Subroutine58_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    478          bool  ReadDS1307(void)
    479          {
    480                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine42
    481                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_133:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    482                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_136:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    483                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_187:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    484                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine26
    485                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_76:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    486                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    487                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine24
    488                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_72:
   \   000028 C70000                LD        L:seconds, A
    489                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine24
    490                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_71:
   \   00002F C70000                LD        L:minutes, A
    491                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine24
    492                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_70:
   \   000036 C70000                LD        L:hours, A
    493                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine24
    494                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_69:
   \   00003D C70000                LD        L:days, A
    495                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine24
    496                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_68:
   \   000044 C70000                LD        L:`date`, A
    497                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine24
    498                 mounts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_67:
   \   00004B C70000                LD        L:mounts, A
    499                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine31
    500                   I2C_GenerateSTOP(ENABLE);
    501                    years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_83:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:years, A
    502                
    503               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    504               //   u8 data1 = I2C_RD();
    505                //Last read byte by I2C slave
    506               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    507               //  I2C_GenerateSTOP(ENABLE);
    508               //  temp2= I2C_RD();
    509                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    510                    {
    511                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    512                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    513                    }
    514                    
    515                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    516          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_152:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    517          

   \                                 In section .far_func.text, align 1, keep-with-next
    518          bool Check_DS1307(void)
    519          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    520             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    521                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine42
    522                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_132:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    523                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_135:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    524                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_190:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    525                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine26
    526                  //Last read byte by I2C slave
    527                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_75:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    528                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    529                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine51
    530                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_153:
   \   00002E B700                  LD        S:?b8, A
    531                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine31
    532                 I2C_GenerateSTOP(ENABLE);
    533                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_84:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    534                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    535          }
    536          

   \                                 In section .far_func.text, align 1, keep-with-next
    537          bool Set_DS1307()
    538          {
    539                 // convert hex or decimal to bcd format
    540          
    541          
    542                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine42
    543                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_131:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    544                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_134:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    545                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_186:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    546                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_124:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    547                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_125:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    548                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_126:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    549                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_127:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    550                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_128:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    551                 if(!I2C_WD(convert_tobcd(mounts))) return FALSE;
   \   000041 C60000                LD        A, L:mounts
   \   000044 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_129:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    552                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A C60000                LD        A, L:years
   \   00004D 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_130:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    553                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_188:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    554                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine58_0
   \                     ??CrossCallReturnLabel_189:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    555                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    556          
    557          
    558             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    559          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    560          
    561          

   \                                 In section .far_func.text, align 1, keep-with-next
    562          u8 convert_tobcd(u8 data)
    563          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    564             u8 data_second_decimal=data/10;
    565             u8 data_first_decimal=data - 10*data_second_decimal;
    566             data=16*data_second_decimal + data_first_decimal;
    567            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    568          }
    569          

   \                                 In section .far_func.text, align 1, keep-with-next
    570          u8 bcd2hex(u8 bcd)
    571          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    572            u8 hex=0;
    573            hex=(bcd>>4)*10 +(bcd&0x0f);
    574            bcd=0;
    575            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    576          }
    577          
    578          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
    579          bool Set_Clock()
    580          {
    581              //Clear Display
    582             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine11
    583             Delay1(1000);
    584             line_lcd=0;
    585              printf("\nYears:");
   \                     ??CrossCallReturnLabel_37:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 8D000000              CALLF     printf
    586                do
    587              {
    588               line_lcd=1;
   \                     ??Set_Clock_0:
   \   00000B 8D000000              CALLF     ?Subroutine23
    589               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_64:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:mounts
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:years
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B06                  ADD       SP, #0x6
    590                 years=adj(0,99,years);
   \   000023 C60000                LD        A, L:years
   \   000026 B700                  LD        S:?b1, A
   \   000028 35630000              MOV       S:?b0, #0x63
   \   00002C 8D000000              CALLF     ??Subroutine57_0
    591              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_179:
   \   000030 C70000                LD        L:years, A
   \   000033 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_114:
   \   000037 27D2                  JREQ      L:??Set_Clock_0
    592          
    593               line_lcd=0;
   \   000039 725F0000              CLR       L:line_lcd
    594              printf("\nMounts:");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMounts:">`
   \   000040 8D000000              CALLF     printf
    595                do
    596              {
    597               line_lcd=1;
   \                     ??Set_Clock_1:
   \   000044 8D000000              CALLF     ?Subroutine23
    598               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_65:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:mounts
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:years
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B06                  ADD       SP, #0x6
    599                 mounts=adj(1,12,mounts);
   \   00005C C60000                LD        A, L:mounts
   \   00005F B700                  LD        S:?b1, A
   \   000061 350C0000              MOV       S:?b0, #0xc
   \   000065 A601                  LD        A, #0x1
   \   000067 8D000000              CALLF     adj
   \   00006B C70000                LD        L:mounts, A
    600              } while (!key_ok_on());
   \   00006E 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_115:
   \   000072 27D0                  JREQ      L:??Set_Clock_1
    601          
    602              LCDInstr(0x01);
   \   000074 8D000000              CALLF     ?Subroutine11
    603               Delay1(1000);
    604                line_lcd=0;
    605              printf("\nDate:");
   \                     ??CrossCallReturnLabel_38:
   \   000078 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   00007B 8D000000              CALLF     printf
    606                do
    607              {
    608               line_lcd=1;
   \                     ??Set_Clock_2:
   \   00007F 8D000000              CALLF     ?Subroutine23
    609               printf("\n%02d:%02d:%02d",years,mounts,date);
   \                     ??CrossCallReturnLabel_66:
   \   000083 89                    PUSHW     X
   \   000084 C60000                LD        A, L:mounts
   \   000087 97                    LD        XL, A
   \   000088 89                    PUSHW     X
   \   000089 C60000                LD        A, L:years
   \   00008C 97                    LD        XL, A
   \   00008D 89                    PUSHW     X
   \   00008E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000091 8D000000              CALLF     printf
   \   000095 5B06                  ADD       SP, #0x6
    610                 date=adj(1,31,date);
   \   000097 C60000                LD        A, L:`date`
   \   00009A B700                  LD        S:?b1, A
   \   00009C 351F0000              MOV       S:?b0, #0x1f
   \   0000A0 A601                  LD        A, #0x1
   \   0000A2 8D000000              CALLF     adj
   \   0000A6 C70000                LD        L:`date`, A
    611              } while (!key_ok_on());
   \   0000A9 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_116:
   \   0000AD 27D0                  JREQ      L:??Set_Clock_2
    612          
    613          
    614              //Clear Display
    615             LCDInstr(0x01);
   \   0000AF 8D000000              CALLF     ?Subroutine11
    616             Delay1(1000);
    617             line_lcd=0;
    618              printf("\nDays:");
   \                     ??CrossCallReturnLabel_39:
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   0000B6 8D000000              CALLF     printf
    619                do
    620              {
    621                line_lcd=1;
   \                     ??Set_Clock_3:
   \   0000BA 35010000              MOV       L:line_lcd, #0x1
    622               printf("\n%02d",days);
   \   0000BE C60000                LD        A, L:days
   \   0000C1 5F                    CLRW      X
   \   0000C2 97                    LD        XL, A
   \   0000C3 89                    PUSHW     X
   \   0000C4 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000C7 8D000000              CALLF     printf
   \   0000CB 5B02                  ADD       SP, #0x2
    623                 days=adj(1,7,days);
   \   0000CD C60000                LD        A, L:days
   \   0000D0 B700                  LD        S:?b1, A
   \   0000D2 35070000              MOV       S:?b0, #0x7
   \   0000D6 A601                  LD        A, #0x1
   \   0000D8 8D000000              CALLF     adj
   \   0000DC C70000                LD        L:days, A
    624              } while (!key_ok_on());
   \   0000DF 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_117:
   \   0000E3 27D5                  JREQ      L:??Set_Clock_3
    625          
    626          
    627          
    628             //Clear Display
    629             LCDInstr(0x01);
   \   0000E5 8D000000              CALLF     ?Subroutine11
    630             Delay1(1000);
    631             line_lcd=0;
    632              printf("\nHours:");
   \                     ??CrossCallReturnLabel_40:
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000EC 8D000000              CALLF     printf
    633                do
    634              {
    635                line_lcd=1;
   \                     ??Set_Clock_4:
   \   0000F0 8D000000              CALLF     ?Subroutine22
    636               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_60:
   \   0000F4 89                    PUSHW     X
   \   0000F5 C60000                LD        A, L:minutes
   \   0000F8 97                    LD        XL, A
   \   0000F9 89                    PUSHW     X
   \   0000FA C60000                LD        A, L:hours
   \   0000FD 97                    LD        XL, A
   \   0000FE 89                    PUSHW     X
   \   0000FF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000102 8D000000              CALLF     printf
   \   000106 5B06                  ADD       SP, #0x6
    637                 hours=adj(0,23,hours);
   \   000108 C60000                LD        A, L:hours
   \   00010B B700                  LD        S:?b1, A
   \   00010D 35170000              MOV       S:?b0, #0x17
   \   000111 8D000000              CALLF     ??Subroutine57_0
    638              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_178:
   \   000115 C70000                LD        L:hours, A
   \   000118 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_118:
   \   00011C 27D2                  JREQ      L:??Set_Clock_4
    639          
    640               line_lcd=0;
   \   00011E 725F0000              CLR       L:line_lcd
    641               printf("\nMinutes:");
   \   000122 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   000125 8D000000              CALLF     printf
    642                do
    643              {
    644                line_lcd=1;
   \                     ??Set_Clock_5:
   \   000129 8D000000              CALLF     ?Subroutine22
    645               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_61:
   \   00012D 89                    PUSHW     X
   \   00012E C60000                LD        A, L:minutes
   \   000131 97                    LD        XL, A
   \   000132 89                    PUSHW     X
   \   000133 C60000                LD        A, L:hours
   \   000136 97                    LD        XL, A
   \   000137 89                    PUSHW     X
   \   000138 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00013B 8D000000              CALLF     printf
   \   00013F 5B06                  ADD       SP, #0x6
    646                 minutes=adj(0,59,minutes);
   \   000141 C60000                LD        A, L:minutes
   \   000144 8D000000              CALLF     ?Subroutine30
    647              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_183:
   \   000148 C70000                LD        L:minutes, A
   \   00014B 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_119:
   \   00014F 27D8                  JREQ      L:??Set_Clock_5
    648          
    649              line_lcd=0;
   \   000151 725F0000              CLR       L:line_lcd
    650              printf("\nSeconds:");
   \   000155 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   000158 8D000000              CALLF     printf
    651              do
    652              {
    653                line_lcd=1;
   \                     ??Set_Clock_6:
   \   00015C 8D000000              CALLF     ?Subroutine22
    654               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_62:
   \   000160 89                    PUSHW     X
   \   000161 C60000                LD        A, L:minutes
   \   000164 97                    LD        XL, A
   \   000165 89                    PUSHW     X
   \   000166 C60000                LD        A, L:hours
   \   000169 97                    LD        XL, A
   \   00016A 89                    PUSHW     X
   \   00016B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00016E 8D000000              CALLF     printf
   \   000172 5B06                  ADD       SP, #0x6
    655                 seconds=adj(0,59,seconds);
   \   000174 C60000                LD        A, L:seconds
   \   000177 8D000000              CALLF     ?Subroutine30
    656              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_182:
   \   00017B C70000                LD        L:seconds, A
   \   00017E 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_120:
   \   000182 27D8                  JREQ      L:??Set_Clock_6
    657          
    658                // Set parameter to DS1307 + time byte
    659                Set_DS1307();
   \   000184 8D000000              CALLF     Set_DS1307
    660          
    661                //bool k=Check_DS1307();
    662          
    663            return TRUE;
   \   000188 A601                  LD        A, #0x1
   \   00018A 87                    RETF
    664          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine57_0
   \   000006                       ;               // Fall through to label ??Subroutine57_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_148:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF
    665          
    666          

   \                                 In section .far_func.text, align 1, keep-with-next
    667          u8 adj(u8 min,u8 max,u8 now)
    668          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    669             u8 adj=now;
    670             if (key_plus_on()) adj ++;
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2705                  JREQ      L:??adj_0
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    671             if (adj >max) adj = min;
   \                     ??adj_0:
   \   00001C B600                  LD        A, S:?b8
   \   00001E B100                  CP        A, S:?b9
   \   000020 2403                  JRNC      L:??adj_1
   \   000022 450000                MOV       S:?b9, S:?b10
    672             if (key_minus_on()) adj --;
   \                     ??adj_1:
   \   000025 8D000000              CALLF     key_minus_on
   \   000029 A100                  CP        A, #0x0
   \   00002B 2705                  JREQ      L:??adj_2
   \   00002D B600                  LD        A, S:?b9
   \   00002F 4A                    DEC       A
   \   000030 B700                  LD        S:?b9, A
    673             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   000032 B600                  LD        A, S:?b9
   \   000034 A1FF                  CP        A, #0xff
   \   000036 2603                  JRNE      L:??adj_3
   \   000038 450000                MOV       S:?b9, S:?b8
    674             if (adj < min) adj=max;
   \                     ??adj_3:
   \   00003B B600                  LD        A, S:?b9
   \   00003D B100                  CP        A, S:?b10
   \   00003F 2403                  JRNC      L:??adj_4
   \   000041 450000                MOV       S:?b9, S:?b8
    675             return adj ;
   \                     ??adj_4:
   \   000044 B600                  LD        A, S:?b9
   \   000046 320000                POP       S:?b10
   \   000049 AC000000              JPF       L:?epilogue_w4
    676          }
    677          
    678          

   \                                 In section .far_func.text, align 1, keep-with-next
    679          bool key_ok_on()
    680          {
    681            //Read Key OK
    682            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_156:
   \   000004 A510                  BCP       A, #0x10
   \   000006 261F                  JRNE      L:??key_ok_on_0
    683             {
    684               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    685                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000C CE0000                LDW       X, L:timer2
   \   00000F A33A98                CPW       X, #0x3a98
   \   000012 2408                  JRNC      L:??key_ok_on_2
   \   000014 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_155:
   \   000018 A510                  BCP       A, #0x10
   \   00001A 27F0                  JREQ      L:??key_ok_on_1
    686                  if (timer2>=key_time_ok) return TRUE;
   \                     ??key_ok_on_2:
   \   00001C CE0000                LDW       X, L:timer2
   \   00001F A33A98                CPW       X, #0x3a98
   \   000022 2503                  JRC       L:??key_ok_on_0
   \   000024 A601                  LD        A, #0x1
   \   000026 87                    RETF
    687             }
    688          
    689            return FALSE;
   \                     ??key_ok_on_0:
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
    690          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 AC000000              JPF       GPIO_ReadInputData
    691          

   \                                 In section .far_func.text, align 1, keep-with-next
    692           bool key_plus_on()
    693          {
    694            //Read Key OK
    695              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_104:
   \   000004 A502                  BCP       A, #0x2
   \   000006 261B                  JRNE      L:??key_plus_on_0
    696               {
    697               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    698                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_24:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_103:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    699                  if (timer2>=key_time) return TRUE;
   \                     ??key_plus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_25:
   \   00001E 2503                  JRC       L:??key_plus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    700               }
    701          
    702            return FALSE;
   \                     ??key_plus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    703          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    704          

   \                                 In section .far_func.text, align 1, keep-with-next
    705            bool key_minus_on()
    706          {
    707            //Read Key OK
    708             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_106:
   \   000004 A504                  BCP       A, #0x4
   \   000006 261B                  JRNE      L:??key_minus_on_0
    709               {
    710               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    711                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_22:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_105:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    712                  if (timer2>=key_time) return TRUE;
   \                     ??key_minus_on_2:
   \   00001A 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_23:
   \   00001E 2503                  JRC       L:??key_minus_on_0
   \   000020 A601                  LD        A, #0x1
   \   000022 87                    RETF
    713               }
    714          
    715            return FALSE;
   \                     ??key_minus_on_0:
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    716          }
    717          
    718          

   \                                 In section .far_func.text, align 1, keep-with-next
    719          bool  key_ok_plus()
    720          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    721            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_56:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    722            {
    723                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    724                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_26:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine19
   \                     ??CrossCallReturnLabel_57:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    725                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine9
   \                     ??CrossCallReturnLabel_27:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    726            }
    727          
    728           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    729          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine53
   \                     ??CrossCallReturnLabel_154:
   \   000004 B700                  LD        S:?b8, A
   \   000006 AE5000                LDW       X, #0x5000
   \   000009 8D000000              CALLF     GPIO_ReadInputData
   \   00000D A402                  AND       A, #0x2
   \   00000F 88                    PUSH      A
   \   000010 B600                  LD        A, S:?b8
   \   000012 A410                  AND       A, #0x10
   \   000014 B700                  LD        S:?b1, A
   \   000016 84                    POP       A
   \   000017 BA00                  OR        A, S:?b1
   \   000019 87                    RETF
    730          
    731          

   \                                 In section .far_func.text, align 1, keep-with-next
    732          bool Set_Delay_Allarm()
    733          {
    734          
    735             //clr
    736             LCDInstr(0x01);
   \                     Set_Delay_Allarm:
   \   000000 8D000000              CALLF     ?Subroutine11
    737             Delay1(1000);
    738             line_lcd=0;
    739             printf("\nH On:");
   \                     ??CrossCallReturnLabel_32:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     printf
    740            do
    741              {
    742               line_lcd=1;
   \                     ??Set_Delay_Allarm_0:
   \   00000B 35010000              MOV       L:line_lcd, #0x1
    743               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
    744                 daily_hour_on=adj(0,23,daily_hour_on);
   \   000023 C60000                LD        A, L:daily_hour_on
   \   000026 B700                  LD        S:?b1, A
   \   000028 35170000              MOV       S:?b0, #0x17
   \   00002C 8D000000              CALLF     ??Subroutine57_0
    745              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_181:
   \   000030 C70000                LD        L:daily_hour_on, A
   \   000033 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_109:
   \   000037 27D2                  JREQ      L:??Set_Delay_Allarm_0
    746          
    747             LCDInstr(0x01);
   \   000039 8D000000              CALLF     ?Subroutine11
    748             Delay1(1000);
    749             line_lcd=0;
    750             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_33:
   \   00003D AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000040 8D000000              CALLF     printf
    751            do
    752              {
    753               line_lcd=1;
   \                     ??Set_Delay_Allarm_1:
   \   000044 35010000              MOV       L:line_lcd, #0x1
    754               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \   000048 C60000                LD        A, L:daily_minute_on
   \   00004B 5F                    CLRW      X
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E C60000                LD        A, L:daily_hour_on
   \   000051 97                    LD        XL, A
   \   000052 89                    PUSHW     X
   \   000053 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000056 8D000000              CALLF     printf
   \   00005A 5B04                  ADD       SP, #0x4
    755                 daily_minute_on=adj(0,59,daily_minute_on);
   \   00005C C60000                LD        A, L:daily_minute_on
   \   00005F 8D000000              CALLF     ?Subroutine30
    756              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_185:
   \   000063 C70000                LD        L:daily_minute_on, A
   \   000066 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_110:
   \   00006A 27D8                  JREQ      L:??Set_Delay_Allarm_1
    757          
    758              LCDInstr(0x01);
   \   00006C 8D000000              CALLF     ?Subroutine11
    759              Delay1(1000);
    760              line_lcd=0;
    761              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_34:
   \   000070 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000073 8D000000              CALLF     printf
    762            do
    763              {
    764               line_lcd=1;
   \                     ??Set_Delay_Allarm_2:
   \   000077 35010000              MOV       L:line_lcd, #0x1
    765               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   00007B C60000                LD        A, L:daily_minute_off
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:daily_hour_off
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B04                  ADD       SP, #0x4
    766                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00008F C60000                LD        A, L:daily_hour_off
   \   000092 B700                  LD        S:?b1, A
   \   000094 35170000              MOV       S:?b0, #0x17
   \   000098 8D000000              CALLF     ??Subroutine57_0
    767              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_180:
   \   00009C C70000                LD        L:daily_hour_off, A
   \   00009F 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_111:
   \   0000A3 27D2                  JREQ      L:??Set_Delay_Allarm_2
    768          
    769            LCDInstr(0x01);
   \   0000A5 8D000000              CALLF     ?Subroutine11
    770             Delay1(1000);
    771             line_lcd=0;
    772             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_35:
   \   0000A9 AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   0000AC 8D000000              CALLF     printf
    773            do
    774              {
    775               line_lcd=1;
   \                     ??Set_Delay_Allarm_3:
   \   0000B0 35010000              MOV       L:line_lcd, #0x1
    776               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \   0000B4 C60000                LD        A, L:daily_minute_off
   \   0000B7 5F                    CLRW      X
   \   0000B8 97                    LD        XL, A
   \   0000B9 89                    PUSHW     X
   \   0000BA C60000                LD        A, L:daily_hour_off
   \   0000BD 97                    LD        XL, A
   \   0000BE 89                    PUSHW     X
   \   0000BF AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000C2 8D000000              CALLF     printf
   \   0000C6 5B04                  ADD       SP, #0x4
    777                 daily_minute_off=adj(0,59,daily_minute_off);
   \   0000C8 C60000                LD        A, L:daily_minute_off
   \   0000CB 8D000000              CALLF     ?Subroutine30
    778              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_184:
   \   0000CF C70000                LD        L:daily_minute_off, A
   \   0000D2 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_112:
   \   0000D6 27D8                  JREQ      L:??Set_Delay_Allarm_3
    779          
    780               //Computing time_long_on
    781          
    782               u8 hour=daily_hour_on;
   \   0000D8 8D000000              CALLF     ?Subroutine5
    783               u8 minute=daily_minute_on;
    784               daily_long_on=0;
    785               do
    786               {
    787                    daily_long_on++;
   \                     ??CrossCallReturnLabel_13:
   \   0000DC 8D000000              CALLF     ?Subroutine6
    788                    minute++;
    789                    if (minute==60)
   \                     ??CrossCallReturnLabel_15:
   \   0000E0 2607                  JRNE      L:??Set_Delay_Allarm_4
    790                    {
    791                      minute=0;
   \   0000E2 3F00                  CLR       S:?b1
    792                      hour++;
   \   0000E4 B600                  LD        A, S:?b0
   \   0000E6 4C                    INC       A
   \   0000E7 B700                  LD        S:?b0, A
    793                    }
    794                    if(hour==24) hour=0;
   \                     ??Set_Delay_Allarm_4:
   \   0000E9 B600                  LD        A, S:?b0
   \   0000EB A118                  CP        A, #0x18
   \   0000ED 2602                  JRNE      L:??Set_Delay_Allarm_5
   \   0000EF 3F00                  CLR       S:?b0
    795          
    796               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Set_Delay_Allarm_5:
   \   0000F1 C60000                LD        A, L:daily_hour_off
   \   0000F4 B100                  CP        A, S:?b0
   \   0000F6 26E4                  JRNE      L:??CrossCallReturnLabel_13
   \   0000F8 C60000                LD        A, L:daily_minute_off
   \   0000FB B100                  CP        A, S:?b1
   \   0000FD 26DD                  JRNE      L:??CrossCallReturnLabel_13
    797          
    798                //Display daily_long_on
    799              LCDInstr(0x01);
   \   0000FF 8D000000              CALLF     ?Subroutine11
    800              Delay1(1000);
    801              line_lcd=0;
    802              printf("\nLong :");
   \                     ??CrossCallReturnLabel_36:
   \   000103 AE0000                LDW       X, #`?<Constant "\\nLong :">`
   \   000106 8D000000              CALLF     printf
    803          
    804                do
    805              {
    806               line_lcd=1;
   \                     ??Set_Delay_Allarm_6:
   \   00010A 35010000              MOV       L:line_lcd, #0x1
    807               printf("\n%d",daily_long_on);
   \   00010E 3B0000                PUSH      L:daily_long_on + 1
   \   000111 3B0000                PUSH      L:daily_long_on
   \   000114 AE0000                LDW       X, #`?<Constant "\\n%d">`
   \   000117 8D000000              CALLF     printf
   \   00011B 5B02                  ADD       SP, #0x2
    808                 //daily_long_on=adj(0,1440,daily_long_on);
    809              } while (!key_ok_on());
   \   00011D 8D000000              CALLF     ?Subroutine40
   \                     ??CrossCallReturnLabel_113:
   \   000121 27E7                  JREQ      L:??Set_Delay_Allarm_6
    810          
    811              time_on=daily_hour_on*60+daily_minute_on;
   \   000123 8D000000              CALLF     ?Subroutine1
    812              time_off= daily_hour_off*60+daily_minute_off;
    813              //Save data to eeprom
    814                status.daily=1;
   \                     ??CrossCallReturnLabel_0:
   \   000127 8D000000              CALLF     ?Subroutine39
    815               EEPROM_INIT();
   \                     ??CrossCallReturnLabel_107:
   \   00012B 8D000000              CALLF     ?Subroutine2
    816              //u8 temp =*(u8*)(&status);
    817              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    818               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    819               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    820               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_3:
   \   00012F C60000                LD        A, L:daily_hour_on
   \   000132 AE4002                LDW       X, #0x4002
   \   000135 8D000000              CALLF     ?Subroutine7
    821               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_16:
   \   000139 C60000                LD        A, L:daily_minute_on
   \   00013C AE4003                LDW       X, #0x4003
   \   00013F 8D000000              CALLF     ?Subroutine7
    822               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_17:
   \   000143 C60000                LD        A, L:daily_hour_off
   \   000146 AE4004                LDW       X, #0x4004
   \   000149 8D000000              CALLF     ?Subroutine7
    823               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_18:
   \   00014D C60000                LD        A, L:daily_minute_off
   \   000150 AE4005                LDW       X, #0x4005
   \   000153 8D000000              CALLF     ?Subroutine7
    824               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_19:
   \   000157 A6F7                  LD        A, #0xf7
   \   000159 8D000000              CALLF     FLASH_Lock
    825          
    826             return TRUE;
   \   00015D A601                  LD        A, #0x1
   \   00015F 87                    RETF
    827          
    828          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_147:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 CE0000                LDW       X, L:daily_long_on
   \   000003 5C                    INCW      X
   \   000004 CF0000                LDW       L:daily_long_on, X
   \   000007 B600                  LD        A, S:?b1
   \   000009 4C                    INC       A
   \   00000A B700                  LD        S:?b1, A
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 B700                  LD        S:?b0, A
   \   000005 C60000                LD        A, L:daily_minute_on
   \   000008 B700                  LD        S:?b1, A
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:daily_long_on, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_146:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_145:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    829          

   \                                 In section .far_func.text, align 1, keep-with-next
    830          void Save_Status()
    831          {
    832            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ?Subroutine2
    833            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    834            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    835            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_2:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    836          }
    837          

   \                                 In section .far_func.text, align 1, keep-with-next
    838          bool Read_Allarm()
    839          {
    840             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   000007 C70000                LD        L:daily_hour_on, A
    841              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    842             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   000017 C70000                LD        L:daily_minute_on, A
    843              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    844             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_9:
   \   000025 C70000                LD        L:daily_hour_off, A
    845              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    846             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   000033 C70000                LD        L:daily_minute_off, A
    847              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    848               // Computting daily_long_on
    849                u8 hour=daily_hour_on;
   \   00003D 8D000000              CALLF     ?Subroutine5
    850               u8 minute=daily_minute_on;
    851               daily_long_on=0;
    852               do
    853               {
    854                    daily_long_on++;
   \                     ??CrossCallReturnLabel_12:
   \   000041 8D000000              CALLF     ?Subroutine6
    855                    minute++;
    856                    if (minute==60)
   \                     ??CrossCallReturnLabel_14:
   \   000045 2607                  JRNE      L:??Read_Allarm_2
    857                    {
    858                      minute=0;
   \   000047 3F00                  CLR       S:?b1
    859                      hour++;
   \   000049 B600                  LD        A, S:?b0
   \   00004B 4C                    INC       A
   \   00004C B700                  LD        S:?b0, A
    860                    }
    861                    if(hour==24) hour=0;
   \                     ??Read_Allarm_2:
   \   00004E B600                  LD        A, S:?b0
   \   000050 A118                  CP        A, #0x18
   \   000052 2602                  JRNE      L:??Read_Allarm_3
   \   000054 3F00                  CLR       S:?b0
    862          
    863               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_3:
   \   000056 C60000                LD        A, L:daily_hour_off
   \   000059 B100                  CP        A, S:?b0
   \   00005B 26E4                  JRNE      L:??CrossCallReturnLabel_12
   \   00005D C60000                LD        A, L:daily_minute_off
   \   000060 B100                  CP        A, S:?b1
   \   000062 26DD                  JRNE      L:??CrossCallReturnLabel_12
    864          
    865            return TRUE;
   \   000064 A601                  LD        A, #0x1
   \   000066 87                    RETF
    866          }
    867          

   \                                 In section .far_func.text, align 1, keep-with-next
    868          void EEPROM_INIT()
    869          {
    870            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    871            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    872            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    873          
    874          
    875          
    876          }
    877          
    878          

   \                                 In section .far_func.text, align 1, keep-with-next
    879          void GpioConfiguration()
    880          {
    881          
    882            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    883          
    884            // ADC PE6 NEW PB0
    885            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    886          
    887            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    888            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine27
    889          
    890            //PD0 Led
    891            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_77:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine35
    892            //I2C
    893            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_94:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine35
    894            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_95:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine36
    895            // Remap Pins pb4,pb5  sda,scl ;
    896          
    897             //Init KEY OK,PLUS,MINUS
    898            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_97:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine36
    899            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_98:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine36
    900            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_99:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine35
    901          
    902            //Init DS18b20 data pin
    903            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_96:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine27
    904            
    905            // Power Pin 
    906             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_78:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
    907          
    908          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
    909          

   \                                 In section .far_func.text, align 1, keep-with-next
    910          void InitClk()
    911          {
    912            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    913            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
    914            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
    915            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
    916            CLK_SOURCE_HSI,       // Switch to internal timer.
    917            DISABLE,              // Disable the clock switch interrupt.
    918            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
    919          
    920            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine37
    921            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_100:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine37
    922            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_101:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine37
    923            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_102:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
    924          
    925          
    926          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
    927          
    928          

   \                                 In section .far_func.text, align 1, keep-with-next
    929          void InitAdc()
    930          {
    931               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
    932               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
    933               /*
    934               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
    935                          ADC1_CHANNEL_0,
    936                          ADC1_PRESSEL_FCPU_D4,
    937                           ADC1_EXTTRIG_TIM,
    938          
    939                 */
    940               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
    941               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
    942                                      ADC1_CHANNEL_0,
    943                                      ADC1_ALIGN_RIGHT
    944                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
    945          
    946          
    947               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
    948          
    949          
    950               //ADC1_Cmd (ENABLE);
    951               //ADC1->CR1 |= ADC1_CR1_ADON ;
    952               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
    953               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
    954          
    955          }
    956          
    957          /*
    958          void InitUart()
    959          {
    960             UART2_DeInit();
    961             UART2_Init((u32)9600,
    962                        UART2_WORDLENGTH_8D,
    963                        UART2_STOPBITS_1,
    964                        UART2_PARITY_NO,
    965                        UART2_SYNCMODE_CLOCK_DISABLE,
    966                        UART2_MODE_TXRX_ENABLE
    967                          );
    968          
    969             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
    970             UART2_Cmd(ENABLE);
    971          
    972            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
    973          }
    974            */
    975          

   \                                 In section .far_func.text, align 1, keep-with-next
    976          void SendChar( u8 Char)
    977          {
    978             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
    979            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
    980          }
   \   00000E 87                    RETF
    981            /*
    982          void Send_Hello()
    983          {
    984            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
    985             Delay1(10);
    986             sprintf(data,"Hello");
    987              u8 i=0;
    988            do
    989           {
    990            SendChar(data[i++]);
    991           } while (data[i]!=0);
    992            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
    993            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
    994          
    995          
    996          
    997          }
    998              */
    999          
   1000          
   1001              /*
   1002          
   1003          void SendData()
   1004          {
   1005           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1006            Delay1(10);
   1007            u8 i=0;
   1008            sprintf(data,"%d %c",adcdata,0x0d);
   1009           do
   1010           {
   1011             SendChar(data[i++]);
   1012          
   1013           } while (data[i]!=0);
   1014             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1015            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1016            rx_data=0;
   1017          }
   1018          */
   1019          

   \                                 In section .far_func.text, align 1, keep-with-next
   1020          void LCDDataOut(u8 data)
   1021          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1022            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_46:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_168
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine56_0
   1023            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_168:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_45:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_169
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine56_0
   1024            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_169:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_44:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_170
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine56_0
   1025            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_170:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_43:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_171
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine56_0
   1026          }
   \                     ??CrossCallReturnLabel_171:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_177:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1027          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine56_0
   \   000002                       ;               // Fall through to label ??Subroutine56_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1028          void InitLcd()
   1029          {
   1030           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine14
   1031            LCD_RW(0);
   1032            LCD_RS(0);
   \                     ??CrossCallReturnLabel_50:
   \   000006 8D000000              CALLF     ?Subroutine15
   1033            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_166:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine13
   1034          
   1035            LCDInstrNibble(0x03);
   1036             Delay1(10);
   1037            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_48:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1038             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine13
   1039            LCDInstrNibble(0x03);
   1040             Delay1(10);
   1041          
   1042             //Line 4
   1043            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_47:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1044            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1045            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1046            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1047          
   1048            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1049            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1050          
   1051            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine50
   1052            Delay1(250);
   \                     ??CrossCallReturnLabel_149:
   \   000048 AE00FA                LDW       X, #0xfa
   \   00004B 8D000000              CALLF     Delay1
   1053          
   1054            LCDInstr(0x06);
   \   00004F A606                  LD        A, #0x6
   \   000051 8D000000              CALLF     LCDInstr
   1055            Delay1(10);
   \   000055 AE000A                LDW       X, #0xa
   \   000058 AC000000              JPF       Delay1
   1056          
   1057          
   1058          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_175:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_174:
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1
   1059          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine56_0
   \                     ??CrossCallReturnLabel_172:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_158:
   \   00000D                       REQUIRE ??Subroutine54_0
   \   00000D                       ;               // Fall through to label ??Subroutine54_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_157:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1060          void LCDInstr(u8 Instr)
   1061          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1062            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine15
   1063            LCD_RW(0);
   \                     ??CrossCallReturnLabel_164:
   \   000009 2000                  JRA       ?Subroutine0
   1064            LCDDataOut(Instr>>4);
   1065            PulseEnable();
   1066            LCDDataOut(Instr & 0x0F);
   1067            PulseEnable();
   1068          }
   1069          

   \                                 In section .far_func.text, align 1, keep-with-next
   1070          void LCDData(u8 Data)
   1071          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1072            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1073            LCD_RW(0);
   \                     ??CrossCallReturnLabel_42:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1074            LCDDataOut(Data>>4);
   1075            PulseEnable() ;
   1076            LCDDataOut(Data & 0x0F) ;
   1077            PulseEnable();
   1078          }
   1079          

   \                                 In section .far_func.text, align 1, keep-with-next
   1080          void LCDInstrNibble(u8 Instr)
   1081          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1082            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine14
   1083            LCD_RW(0);
   1084            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_49:
   \   00000B AC000000              JPF       ??Subroutine54_0
   1085            PulseEnable();
   1086          }
   1087          

   \                                 In section .far_func.text, align 1, keep-with-next
   1088          void PulseEnable(void)
   1089          {
   1090            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine3
   1091             Delay1(1);
   1092            LCD_EN(1);
   1093             Delay1(1);
   1094            LCD_EN(0);
   \                     ??CrossCallReturnLabel_4:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine56_0
   1095             Delay1(1);
   \                     ??CrossCallReturnLabel_167:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1096          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_176:
   \   000006 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_142:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_141:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1097          

   \                                 In section .far_func.text, align 1, keep-with-next
   1098          void LCD_Busy(void)
   1099          {
   1100             //set Port D7 as Input
   1101             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1102             //Set Read
   1103             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1104             LCD_RS(0);
   \                     ??CrossCallReturnLabel_41:
   \   000013 8D000000              CALLF     ?Subroutine15
   1105             // Read Busy Flag
   1106                timer2=0;
   \                     ??CrossCallReturnLabel_165:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1107             do
   1108             {
   1109             // Enable set
   1110               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine3
   1111                Delay1(1);
   1112               LCD_EN(1);
   1113                Delay1(1);
   1114             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_5:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1115                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1116                //Clear read
   1117              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine56_0
   1118             //set Port D7 as Output
   1119             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_173:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1120          
   1121          }
   1122          
   1123          

   \                                 In section .far_func.text, align 1, keep-with-next
   1124          void LCD(u8 data)
   1125           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1126             //  static u8 linet=0;
   1127          
   1128          
   1129               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 265C                  JRNE      L:??CrossCallReturnLabel_144
   1130               {
   1131          
   1132                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2714                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 271D                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2726                  JREQ      L:??LCD_3
   \   000017 202E                  JRA       L:??LCD_4
   1133                   {
   1134                   case 0:
   1135                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     LCDInstr
   1136                     count=0;
   \   00001F 725F0000              CLR       L:count
   1137                     break;
   \   000023 2022                  JRA       L:??LCD_4
   1138                   case 1:
   1139                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000025 A6C0                  LD        A, #0xc0
   \   000027 8D000000              CALLF     LCDInstr
   1140                     count=20;
   \   00002B 35140000              MOV       L:count, #0x14
   1141                     break;
   \   00002F 2016                  JRA       L:??LCD_4
   1142                   case 2:
   1143                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   000031 A694                  LD        A, #0x94
   \   000033 8D000000              CALLF     LCDInstr
   1144                     count=40;
   \   000037 35280000              MOV       L:count, #0x28
   1145                     break;
   \   00003B 200A                  JRA       L:??LCD_4
   1146                   case 3:
   1147                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   00003D A6D4                  LD        A, #0xd4
   \   00003F 8D000000              CALLF     LCDInstr
   1148                     count=60;
   \   000043 353C0000              MOV       L:count, #0x3c
   1149                     break;
   1150                   //default:
   1151                    //  LCDInstr(0x80 |0x40);    //Line 1
   1152                    }
   1153                   line_lcd++;
   \                     ??LCD_4:
   \   000047 C60000                LD        A, L:line_lcd
   \   00004A 4C                    INC       A
   \   00004B C70000                LD        L:line_lcd, A
   1154                   if (line_lcd>=5)
   \   00004E A105                  CP        A, #0x5
   \   000050 250F                  JRC       L:??LCD_5
   1155                   {
   1156                    line_lcd=1;   //line >=5
   \   000052 35010000              MOV       L:line_lcd, #0x1
   1157                    LCDInstr(0x01); //Clear LCD
   \   000056 8D000000              CALLF     ?Subroutine50
   1158                    Delay1(2500);
   \                     ??CrossCallReturnLabel_151:
   \   00005A AE09C4                LDW       X, #0x9c4
   \   00005D 8D000000              CALLF     Delay1
   1159                   }
   1160          
   1161                   Delay1(1);
   \                     ??LCD_5:
   \   000061 8D000000              CALLF     ?Subroutine47
   1162          
   1163          
   1164               }
   1165          
   1166          
   1167               if (count==20)
   \                     ??CrossCallReturnLabel_144:
   \   000065 C60000                LD        A, L:count
   \   000068 A114                  CP        A, #0x14
   \   00006A 260A                  JRNE      L:??LCD_6
   1168                {
   1169                  LCDInstr(0x80 | 0x40);
   \   00006C A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006E 8D000000              CALLF     LCDInstr
   1170                  Delay1(1);
   \                     ??LCD_8:
   \   000072 5F                    CLRW      X
   \   000073 5C                    INCW      X
   \   000074 2027                  JRA       ??LCD_9
   1171                }
   1172                   else if(count==40)
   \                     ??LCD_6:
   \   000076 A128                  CP        A, #0x28
   \   000078 2604                  JRNE      L:??LCD_10
   1173                  {
   1174                    LCDInstr(0x80 | 0x14);
   \   00007A A694                  LD        A, #0x94
   \   00007C 20F0                  JRA       ??LCD_7
   1175                    Delay1(1);
   1176                  }
   1177                    else if(count==60)
   \                     ??LCD_10:
   \   00007E A13C                  CP        A, #0x3c
   \   000080 260C                  JRNE      L:??LCD_11
   1178                    {
   1179                      LCDInstr(0x80 | 0x54);
   \   000082 A6D4                  LD        A, #0xd4
   \   000084 8D000000              CALLF     LCDInstr
   1180                      count=0;
   \   000088 725F0000              CLR       L:count
   1181                      Delay1(1);
   \   00008C 20E4                  JRA       ??LCD_8
   1182                    }
   1183                      else if(count >80)
   \                     ??LCD_11:
   \   00008E A151                  CP        A, #0x51
   \   000090 250F                  JRC       L:??LCD_12
   1184                        {
   1185                          count=0;
   \   000092 725F0000              CLR       L:count
   1186                          LCDInstr(0x01); //Clear LCD
   \   000096 8D000000              CALLF     ?Subroutine50
   1187                          Delay1(250);
   \                     ??CrossCallReturnLabel_150:
   \   00009A AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   00009D 8D000000              CALLF     Delay1
   1188                        }
   1189          
   1190          
   1191              /*
   1192                   line++;
   1193                   if (line>3)
   1194                   {
   1195                     line=1;  //Line 0 for Time
   1196                   }
   1197                 switch(line)
   1198                   {
   1199                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1200                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1201                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1202                   default : LCDInstr(0x80 | 0x40); // Line 1
   1203                   }
   1204                   Delay(1);
   1205                   count=0;
   1206                }
   1207          
   1208               */
   1209          
   1210               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000A1 B600                  LD        A, S:?b8
   \   0000A3 A11C                  CP        A, #0x1c
   \   0000A5 250F                  JRC       L:??LCD_13
   1211               {
   1212                 LCDData(data);
   \   0000A7 8D000000              CALLF     LCDData
   1213                  Delay1(1);
   \   0000AB 8D000000              CALLF     ?Subroutine47
   1214                 count++;
   \                     ??CrossCallReturnLabel_143:
   \   0000AF C60000                LD        A, L:count
   \   0000B2 4C                    INC       A
   \   0000B3 C70000                LD        L:count, A
   1215               }
   1216           }
   \                     ??LCD_13:
   \   0000B6 320000                POP       S:?b8
   \   0000B9 87                    RETF
   1217          

   \                                 In section .far_func.text, align 1, keep-with-next
   1218          void InitDelayTimer()
   1219          {
   1220             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1221             //Tclock 16/8=2Mhz  /20 10us
   1222                 TIM2_DeInit();
   \                     InitDelayTimer:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1223                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1224                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1225                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1226            //Enable TIM2
   1227                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1228          
   1229          }
   1230          

   \                                 In section .far_func.text, align 1, keep-with-next
   1231          bool DS18_Write(u8 data)
   1232          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1233            disableInterrupts();
   \   000006 9B                    SIM
   1234            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1235            {
   1236             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1237             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1238             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_52:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_163
   \   00001A 8D000000              CALLF     ?Subroutine17
   1239               //else DS18(0);
   1240             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_163:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1241             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine17
   1242             //Delay1(0);
   1243            }
   \                     ??CrossCallReturnLabel_162:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1244            enableInterrupts();
   \   000032 9A                    RIM
   1245            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1246          
   1247          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine55_0
   \   000002                       ;               // Fall through to label ??Subroutine55_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_WriteLow
   \   000009 5F                    CLRW      X
   \   00000A 5C                    INCW      X
   \   00000B AC000000              JPF       Delay_us
   1248          
   1249          

   \                                 In section .far_func.text, align 1, keep-with-next
   1250          u8  DS18_Read()
   1251          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1252              //Init DS18b20 data pin as Input
   1253          
   1254            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1255              disableInterrupts();
   \   000006 9B                    SIM
   1256            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1257            {
   1258              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine16
   1259              Delay_us(1); //Start time slot 4,5 us
   1260              DS18(1);
   \                     ??CrossCallReturnLabel_51:
   \   00000D 8D000000              CALLF     ?Subroutine17
   1261              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_160:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1262              //Delay1(0);
   1263             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_59:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1264              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1265              //  DS18(1);  // Next bit
   1266             // Delay1(0);
   1267          
   1268            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1269              enableInterrupts();
   \   000046 9A                    RIM
   1270              //Init DS18b20 data pin
   1271             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1272             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1273          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1274          

   \                                 In section .far_func.text, align 1, keep-with-next
   1275          bool DS18_Reset()
   1276          {
   1277             //Init Reset Pulse
   1278              DS18(0);
   \                     DS18_Reset:
   \   000000 A604                  LD        A, #0x4
   \   000002 8D000000              CALLF     ?Subroutine18
   1279              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_55:
   \   000006 AE0019                LDW       X, #0x19
   \   000009 8D000000              CALLF     Delay1
   1280              DS18(1);
   \   00000D 8D000000              CALLF     ?Subroutine17
   1281              //Delay1(1);
   1282              timer2=0;
   \                     ??CrossCallReturnLabel_161:
   \   000011 5F                    CLRW      X
   \   000012 CF0000                LDW       L:timer2, X
   1283              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000015 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_28:
   \   000019 2406                  JRNC      L:??DS18_Reset_1
   \   00001B 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_58:
   \   00001F 26F4                  JRNE      L:??DS18_Reset_0
   1284              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   000021 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_29:
   \   000025 2502                  JRC       L:??DS18_Reset_2
   \   000027 4F                    CLR       A
   \   000028 87                    RETF
   1285              // Delay1(10);
   1286              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000029 AE0014                LDW       X, #0x14
   \   00002C 8D000000              CALLF     Delay1
   1287          
   1288              return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 87                    RETF
   1289          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1290          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1291          u8 temperature ()
   1292          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1293          
   1294             //Init Reset Pulse
   1295               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_88:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1296             //Skip ROM Command 0xCC
   1297              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine29
   1298             //Function command  CONVERT T [44h]
   1299              DS18_Write(0x44);
   1300              //Wait util end convert
   1301              timer2=0;
   1302               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_82:
   \   000013 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_31:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_82
   1303                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1304               //u8 temp8=timer2;
   1305              //Init Reset Pulse
   1306              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_89:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1307              // Skip ROM Command 0xCC
   1308              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine28
   1309              //Function command READ SCRATCHPAD [BEh]
   1310              DS18_Write(0xBE);
   1311               u8 temp1=DS18_Read();
   1312               u8 temp2=DS18_Read();
   1313              DS18_Reset();
   \                     ??CrossCallReturnLabel_80:
   \   000033 8D000000              CALLF     DS18_Reset
   1314                u16 result = temp2*256+temp1;
   1315                temp1= (u8)(result>>3); 
   1316               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_21:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1317          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine59_0
   \                     ??CrossCallReturnLabel_192:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1318          

   \                                 In section .far_func.text, align 1, keep-with-next
   1319          bool Read_DS18()
   1320          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1321          
   1322             //Init Reset Pulse
   1323               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_86:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1324             //Skip ROM Command 0xCC
   1325              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine29
   1326             //Function command  CONVERT T [44h]
   1327              DS18_Write(0x44);
   1328              //Wait util end convert
   1329              timer2=0;
   1330               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_81:
   \   000013 8D000000              CALLF     ?Subroutine10
   \                     ??CrossCallReturnLabel_30:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_81
   1331                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1332               //u8 temp8=timer2;
   1333              //Init Reset Pulse
   1334              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_87:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1335              // Skip ROM Command 0xCC
   1336              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine28
   1337              //Function command READ SCRATCHPAD [BEh]
   1338              DS18_Write(0xBE);
   1339               u8 temp1=DS18_Read();
   1340               u8 temp2=DS18_Read();
   1341               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_79:
   \   000033 8D000000              CALLF     ?Subroutine34
   1342               u8 temp4=DS18_Read();
   1343               u8 temp5=DS18_Read();
   1344               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_93:
   \   000037 8D000000              CALLF     ?Subroutine34
   1345               u8 temp7=DS18_Read();
   1346               u8 temp8=DS18_Read();
   1347               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_92:
   \   00003B 8D000000              CALLF     DS18_Read
   1348          
   1349               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1350          
   1351                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1352                result2=0;
   \   000047 725F0000              CLR       L:result2
   1353                u16 result = temp2*256+temp1;
   1354                result1= (u8)(result>>3); 
   \   00004B 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_20:
   \   00004F C70000                LD        L:result1, A
   1355                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1356                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1357                
   1358          
   1359                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1360               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1361               //line_lcd=1;
   1362               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1363               // while (!key_ok_on());
   1364          
   1365               //u8 temp3=DS18_Read();
   1366          
   1367              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1368          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1369          

   \                                 In section .far_func.text, align 1, keep-with-next
   1370          bool DS18Set ()
   1371          {
   1372               //Init Reset Pulse
   1373              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine32
   \                     ??CrossCallReturnLabel_85:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1374             //Skip ROM Command 0xCC
   1375              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1376             //Function command  WRITE SCRATCHPAD 0x4E
   1377              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1378             //Write 3 bytes last is config reg
   1379              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1380              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1381              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1382          
   1383          
   1384          
   1385          
   1386            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1387          }
   1388          
   1389          
   1390          
   1391          
   1392           /*
   1393          u16 Average()
   1394          {
   1395           //Find average in measure
   1396            u8 i=0;
   1397            u16 Summa=0;
   1398            do
   1399            {
   1400             Summa+=measure[i++];
   1401            } while ( measure[i]!=0);
   1402             if(i!=0) Summa=Summa/i;
   1403             return Summa;
   1404          }
   1405             */
   1406          

   \                                 In section .far_func.text, align 1, keep-with-next
   1407          PUTCHAR_PROTOTYPE
   1408          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1409            /* Place your implementation of fputc here */
   1410            /* e.g. write a character to the USART */
   1411                //USART_SendData(USART3, (u8) ch);
   1412               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1413             /* Loop until the end of transmission */
   1414              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1415            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1416          }
   1417          
   1418          

   \                                 In section .far_func.text, align 1, keep-with-next
   1419          void Delay1(u16 Delay)
   1420          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1421              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1422            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1423            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1424          }
   \   00000D 87                    RETF
   1425          

   \                                 In section .far_func.text, align 1, keep-with-next
   1426           void Delay2(u16 Delay)
   1427          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1428            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1429            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1430          }
   \   00000D 87                    RETF
   1431          
   1432          

   \                                 In section .far_func.text, align 1, keep-with-next
   1433          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1434          {
   1435            //disableInterrupts();
   1436            do
   1437              {
   1438                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1439                nop();
   \   000001 9D                    NOP
   1440              }
   1441              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1442            //enableInterrupts();
   1443          }
   \   000005 87                    RETF
   1444          
   1445          
   1446          
   1447          /*
   1448          void Delay12 (u16 Delay)
   1449          {
   1450            timer2=0;
   1451            while ( timer2 < Delay); ;
   1452          }
   1453          */
   1454          
   1455          
   1456          #ifdef USE_FULL_ASSERT
   1457          
   1458          /**
   1459            * @brief  Reports the name of the source file and the source line number
   1460            *   where the assert_param error has occurred.
   1461            * @param file: pointer to the source file name
   1462            * @param line: assert_param error line source number
   1463            * @retval : None
   1464            */

   \                                 In section .far_func.text, align 1
   1465          void assert_failed(u8* file, u32 line)
   1466          {
   1467            /* User can add his own implementation to report the file name and line number,
   1468               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1469          
   1470            /* Infinite loop */
   1471            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1472            {
   1473          
   1474            }
   1475          }
   1476          #endif
   1477          
   1478          

   \                                 In section .far_func.text, align 1
   1479          void Rotate_Line( char * line)
   1480          {
   1481            
   1482             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1483             char temp_next=*line++;
   \   000003 5C                    INCW      X
   1484             do 
   1485             {
   1486               *line=temp_next;
   \                     ??Rotate_Line_0:
   \   000004 F7                    LD        (X), A
   1487                line++;
   \   000005 5C                    INCW      X
   1488                temp_next=*line++;
   \   000006 F6                    LD        A, (X)
   \   000007 5C                    INCW      X
   1489              //*line=*line++;    
   1490             } while (temp_next!=0x0d);
   \   000008 A10D                  CP        A, #0xd
   \   00000A 26F8                  JRNE      L:??Rotate_Line_0
   1491             line--;
   1492             *line=temp_first;
   \   00000C 5A                    DECW      X
   \   00000D B600                  LD        A, S:?b0
   \   00000F F7                    LD        (X), A
   1493            
   1494            
   1495            
   1496          }
   \   000010 87                    RETF

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n %d.%d %c">`:
   \   000000 0A2025642E25          DC8 "\012 %d.%d %c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMounts:">`:
   \   000000 0A4D6F756E74          DC8 "\012Mounts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nLong :">`:
   \   000000 0A4C6F6E6720          DC8 "\012Long :"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d">`:
   \   000000 0A256400              DC8 "\012%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"
   1497          
   1498          
   1499          
   1500          
   1501          
   1502          
   1503          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     data                             20
     measure                          40
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     mounts                            1
     years                             1
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     result                            4
     k                                 2
     status                            2
     ??Subroutine55_0                  7
     ?Subroutine40                     7
     main                            508
     ?Subroutine52                     2
     ??Subroutine59_0                  8
     ?Subroutine46                     2
     ??Subroutine60_0                 12
     ?Subroutine39                    11
     ?Subroutine25                    16
     ?Subroutine22                    10
     ?Subroutine18                     7
     ?Subroutine4                      9
     ?Subroutine1                     35
     Power_On                         14
     ?Subroutine33                    15
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine45                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine44                     1
     ??Subroutine58_0                  7
     ?Subroutine43                     9
     ?Subroutine42                    11
     ReadDS1307                      109
     ?Subroutine31                    11
     ?Subroutine26                    13
     ?Subroutine24                     8
     ?Subroutine51                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine41                    11
     convert_tobcd                    23
     bcd2hex                          23
     ?Subroutine50                     6
     Set_Clock                       395
     ?Subroutine30                     6
     ??Subroutine57_0                  5
     ?Subroutine23                    10
     ?Subroutine11                    16
     adj                              77
     key_ok_on                        41
     ?Subroutine53                     7
     key_plus_on                      37
     ?Subroutine38                     7
     ?Subroutine9                      7
     key_minus_on                     37
     key_ok_plus                      40
     ?Subroutine19                    26
     Set_Delay_Allarm                352
     ?Subroutine7                      5
     ?Subroutine6                     15
     ?Subroutine5                     15
     ?Subroutine2                     29
     ?Subroutine48                     9
     Save_Status                      10
     Read_Allarm                     103
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine36                     9
     ?Subroutine35                     9
     ?Subroutine27                    12
     InitClk                          56
     ?Subroutine37                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine56_0                  5
     ?Subroutine49                     7
     ?Subroutine15                     2
     InitLcd                          92
     ?Subroutine14                    11
     ?Subroutine13                    17
     ?Subroutine0                     13
     ??Subroutine54_0                 10
     ?Subroutine21                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine3                     24
     ?Subroutine47                     6
     LCD_Busy                         69
     LCD                             186
     InitDelayTimer                   29
     DS18_Write                       57
     ?Subroutine17                     2
     ?Subroutine16                    15
     DS18_Read                        77
     ?Subroutine20                    12
     DS18_Reset                       51
     ?Subroutine10                     7
     ?Subroutine32                     7
     temperature                      63
     ?Subroutine29                    17
     ?Subroutine28                    25
     ?Subroutine8                     21
     Read_DS18                       121
     ?Subroutine34                    12
     DS18Set                          41
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     Rotate_Line                      17
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\n %d.%d %c">        11
     ?<Constant "\nYears:">            8
     ?<Constant "\nMounts:">           9
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\nLong :">            8
     ?<Constant "\n%d">                4
     ?<Constant "\n%d.%d">             7

 
 4 072 bytes in section .far_func.text
   103 bytes in section .near.bss
     3 bytes in section .near.data
   191 bytes in section .near.rodata
 
 4 072 bytes of CODE  memory
   191 bytes of CONST memory
   106 bytes of DATA  memory

Errors: none
Warnings: none
