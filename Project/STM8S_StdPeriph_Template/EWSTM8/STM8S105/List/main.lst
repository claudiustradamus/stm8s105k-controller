###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             01/Oct/2013  21:33:54 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     52          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     53          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     54          
     55          #define key_ok    GPIO_PIN_4
     56          #define key_plus  GPIO_PIN_1
     57          #define key_minus GPIO_PIN_2
     58            //DS18B20  Temp Sensor
     59          #define ds18_data GPIO_PIN_2 //2
     60          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     61            //Power
     62          #define power_pin GPIO_PIN_3
     63          
     64          
     65          
     66          //EEPROM Address;
     67          #define EEPROM_ADDR 0x4000
     68          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     69          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     70          #define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     71          #define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     72          #define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     73          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     74          #define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     75          #define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     76          #define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     77          
     78          #ifdef __GNUC__
     79            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     80               set to 'Yes') calls __io_putchar() */
     81            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     82          #else
     83            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     84          #endif /* __GNUC__ */
     85          
     86          
     87          
     88          
     89          #define SpecialSymbol 0x1b //Esc to start message
     90          //#define data_size 20
     91          #define key_time 8000
     92          #define key_time_ok 15000
     93          #define key_time_press 4000
     94          #define key_time_release 400
     95          #define DS_Control  0x10  // Out 1s
     96          #define time_menu 10  // 5s
     97          #define TIMEOUT_DS18B20 1000
     98          //#define sync_time 30 // 30s
     99          
    100          
    101          
    102          
    103          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    104          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    105          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    106          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    107          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    108          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    109          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    110          //char data[data_size];
    111          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    112          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    114          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    115          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    116          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    117          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    118          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    119          u8 month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    120          u8 year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    132          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    133          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    134          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    135          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    137          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    138          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    139          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    141          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    142          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    143          char  daily_dispaly,month_display,sync_display;
   \                     daily_dispaly:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     month_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    144          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    145          bool  ds_temperature;
   \                     ds_temperature:
   \   000000                       DS8 1
    146          
    147          
    148          

   \                                 In section .near.bss, align 1
    149          char line1[8];
   \                     line1:
   \   000000                       DS8 8
    150          //char string1[10];
    151          //char string2[10];

   \                                 In section .near.bss, align 1
    152          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    153          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    154          
    155          //u8 index=0;

   \                                 In section .near.bss, align 1
    156          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    157          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    158          
    159          
    160           struct   status_reg
    161           {
    162             unsigned on:1;
    163             unsigned timer_on:1;
    164             unsigned daily:1;
    165             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    166           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    167          
    168          //time_t  ltime;
    169          //struct tm ptim;
    170          
    171          
    172          
    173          
    174          
    175          /* Private function prototypes -----------------------------------------------*/
    176          void InitHardware();
    177          void GpioConfiguration();
    178          void InitClk();
    179          void InitAdc();
    180          void InitI2C();
    181          void EEPROM_INIT();
    182          bool ReadDS1307();
    183          //void InitUart();
    184          void InitLcd();
    185          void InitDelayTimer2();
    186          void InitDelayTimer3();
    187          void Delay1( u16 Delay);
    188          void Delay2( u16 Delay);
    189          void Delay_us(u16 Delay);
    190          void LCDInstrNibble (u8 Instr);
    191          void LCDInstr(u8 Instr);
    192          void LCDDataOut(u8 data);
    193          void LCD_Busy();
    194          void PulseEnable();
    195          //void SendData();
    196          void SendChar(u8 Char);
    197          //void Send_Hello();
    198          bool Set_Clock();
    199          bool key_ok_on();
    200          bool key_plus_on();
    201          bool key_minus_on();
    202          bool key_ok_plus();
    203          bool Init_DS1307(void);
    204          bool Check_DS1307(void);
    205          bool I2C_Start(void);
    206          bool I2C_WA(u8 address);
    207          bool I2C_WD(u8 data);
    208          bool I2C_RA(u8 address);
    209          bool Set_DS1307();
    210          //bool Set_Delay_Allarm();
    211          bool Set_Timer_On();
    212          bool Set_Timer_Off();
    213          bool Read_Allarm();
    214          bool Read_DS18();
    215          bool DS18_Write( u8 data);
    216          bool DS18_Reset();
    217          bool DS18Set();
    218          u8 temperature();
    219          u8 DS18_Read();
    220          u8 convert_tobcd(u8 data);
    221          u8 I2C_RD(void);
    222          u8 adj(u8 min,u8 max,u8 now);
    223          u8 bcd2hex(u8 bcd);
    224          void Power_On(void);
    225          void Power_Off();
    226          void Save_Status();
    227          void Rotate_Line( char * line);
    228          void Display_Line(char * line);
    229          void Clear_Line1(void);
    230          void Clear_Line2(void);
    231          void Menu(void);
    232          u8 Key_Press(void);
    233          void Display(void);
    234          bool Set_Date(void);
    235          
    236          
    237          
    238          u16  Average();
    239          
    240          
    241          /* Private functions ---------------------------------------------------------*/
    242          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1
    243          void main(void)
    244          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    245              /*High speed internal clock prescaler: 1*/
    246              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    247          
    248              InitClk();
   \   000003 8D000000              CALLF     InitClk
    249              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    250              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    251              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    252              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine16
    253              //InitUart();
    254               enableInterrupts();
   \                     ??CrossCallReturnLabel_39:
   \   000017 9A                    RIM
    255              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    256               InitLcd();
   \   000018 8D000000              CALLF     InitLcd
    257              //InitAdc();
    258              InitI2C();
   \   00001C 8D000000              CALLF     InitI2C
    259          
    260              //year=bcd2hex(13);
    261              Delay1(1000);
   \   000020 AE03E8                LDW       X, #0x3e8
   \   000023 8D000000              CALLF     Delay1
    262               if (!ReadDS1307())
   \   000027 8D000000              CALLF     ReadDS1307
   \   00002B A100                  CP        A, #0x0
   \   00002D 2615                  JRNE      L:??main_0
    263               {
    264                 printf("\n E2:%d",error);
   \   00002F C60000                LD        A, L:error
   \   000032 5F                    CLRW      X
   \   000033 97                    LD        XL, A
   \   000034 89                    PUSHW     X
   \   000035 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000038 8D000000              CALLF     printf
   \   00003C 5B02                  ADD       SP, #0x2
    265                 // Reset the CPU: Enable the watchdog and wait until it expires
    266                 IWDG->KR = IWDG_KEY_ENABLE;
   \   00003E 35CC50E0              MOV       L:0x50e0, #0xcc
    267                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_1:
   \   000042 20FE                  JRA       L:??main_1
    268               }
    269               //Send_Hello();
    270              //line_lcd=0;
    271              //printf("\nHello");
    272          
    273          
    274              if (!Check_DS1307())
   \                     ??main_0:
   \   000044 8D000000              CALLF     Check_DS1307
   \   000048 A100                  CP        A, #0x0
   \   00004A 2626                  JRNE      L:??main_2
    275              {
    276                 if (error!=0)
   \   00004C C60000                LD        A, L:error
   \   00004F 2712                  JREQ      L:??main_3
    277                 {
    278                  printf("\n E:%d",error);
   \   000051 5F                    CLRW      X
   \   000052 97                    LD        XL, A
   \   000053 89                    PUSHW     X
   \   000054 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000057 8D000000              CALLF     printf
   \   00005B 5B02                  ADD       SP, #0x2
    279                   while (!key_ok_on());
   \                     ??main_4:
   \   00005D 8D000000              CALLF     ?Subroutine42
    280          
    281                 }
   \                     ??CrossCallReturnLabel_125:
   \   000061 27FA                  JREQ      L:??main_4
    282               line_lcd=0;
   \                     ??main_3:
   \   000063 725F0000              CLR       L:line_lcd
    283               printf("\nSetClock");
   \   000067 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00006A 8D000000              CALLF     printf
    284                Set_Clock();
   \   00006E 8D000000              CALLF     Set_Clock
    285          
    286              }
    287          
    288          
    289                 //Read Status register from eepom and update it
    290                //size=sizeof(status);
    291               //u16 status
    292               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_2:
   \   000072 AE4000                LDW       X, #0x4000
   \   000075 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   000079 B700                  LD        S:?b8, A
   \   00007B AE4001                LDW       X, #0x4001
   \   00007E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   000082 905F                  CLRW      Y
   \   000084 9097                  LD        YL, A
   \   000086 5F                    CLRW      X
   \   000087 41                    EXG       A, XL
   \   000088 B600                  LD        A, S:?b8
   \   00008A 41                    EXG       A, XL
   \   00008B 4F                    CLR       A
   \   00008C 02                    RLWA      X, A
   \   00008D 8D000000              CALLF     ??Subroutine77_0
   \                     ??CrossCallReturnLabel_251:
   \   000091 CF0000                LDW       L:status, X
    293                status_check = *(u16*)(&status);
   \   000094 CE0000                LDW       X, L:status
   \   000097 CF0000                LDW       L:status_check, X
    294              //When Start Check for Allarm and computing Daily_long_on
    295               if ( Read_Allarm() == TRUE)
   \   00009A 8D000000              CALLF     Read_Allarm
   \   00009E A101                  CP        A, #0x1
   \   0000A0 260B                  JRNE      L:??CrossCallReturnLabel_1
    296               {
    297                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000A2 8D000000              CALLF     ?Subroutine3
    298                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_3:
   \   0000A6 C60000                LD        A, L:daily_hour_off
   \   0000A9 8D000000              CALLF     ?Subroutine2
    299               }
    300          
    301          
    302                // Enable Timer3
    303                 TIM3_Cmd(ENABLE);
   \                     ??CrossCallReturnLabel_1:
   \   0000AD A601                  LD        A, #0x1
   \   0000AF 8D000000              CALLF     TIM3_Cmd
    304          
    305                     //Init DS18B20
    306              DS18Set();
   \   0000B3 8D000000              CALLF     DS18Set
    307              line_lcd=0;
   \   0000B7 725F0000              CLR       L:line_lcd
    308              if (!Read_DS18())
   \   0000BB 8D000000              CALLF     Read_DS18
   \   0000BF A100                  CP        A, #0x0
   \   0000C1 2613                  JRNE      L:??main_5
    309              {
    310               printf("\nDS_Err_T");
   \   0000C3 AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000C6 8D000000              CALLF     printf
    311                 ds_temperature=FALSE;
   \   0000CA 725F0000              CLR       L:ds_temperature
    312                while (!key_ok_on());
   \                     ??main_6:
   \   0000CE 8D000000              CALLF     ?Subroutine42
    313              }
   \                     ??CrossCallReturnLabel_126:
   \   0000D2 2606                  JRNE      L:??main_7
   \   0000D4 20F8                  JRA       L:??main_6
    314               else ds_temperature=TRUE;
   \                     ??main_5:
   \   0000D6 35010000              MOV       L:ds_temperature, #0x1
    315          
    316              daily_dispaly=' ';
   \                     ??main_7:
   \   0000DA 35200000              MOV       L:daily_dispaly, #0x20
    317              month_display=' ';
   \   0000DE 35200000              MOV       L:month_display, #0x20
    318              sync_time_ds1307= TRUE;
   \   0000E2 35010000              MOV       L:sync_time_ds1307, #0x1
   \   0000E6 2006                  JRA       L:??CrossCallReturnLabel_227
    319          
    320               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    321          
    322               // Working fuction
    323              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 month,u8 hours,u8 minutes,u8 seconds)
    324          
    325          
    326          
    327              // strcpy(line1,"Hello I am here! ");
    328              //  while(1)
    329              //  {
    330              //     Display_Line(line1);
    331              //     Delay2(20000);
    332              //  }
    333              //  while (!key_ok_on());
    334                 //sprintf(line1,"TIMER ON ");
    335              while(1)
    336              {
    337          
    338          
    339                if(key_ok_on()) Menu();
    340                if(key_plus_on()) Power_On();
    341                if(key_minus_on())Power_Off();
    342                if(Time_Display) Display();  //
    343                if(sync_time_ds1307)  // Sync local time with DS1307
    344                   {
    345                    if (!ReadDS1307())
    346                        {
    347                       printf("\n E2:%d",error);
    348                       //restart i2c
    349                       // Reset the CPU: Enable the watchdog and wait until it expires
    350                       IWDG->KR = IWDG_KEY_ENABLE;
    351                       while ( 1 );    // Wait until reset occurs from IWDG
    352                        }
    353                   sync_time_ds1307=FALSE;
    354                   sync_display='S';
    355                   }
    356          
    357                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_8:
   \   0000E8 A608                  LD        A, #0x8
   \   0000EA 8D000000              CALLF     ??Subroutine74_0
   \                     ??CrossCallReturnLabel_227:
   \   0000EE 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_127:
   \   0000F2 2704                  JREQ      L:??main_9
   \   0000F4 8D000000              CALLF     Menu
   \                     ??main_9:
   \   0000F8 8D000000              CALLF     key_plus_on
   \   0000FC A100                  CP        A, #0x0
   \   0000FE 2704                  JREQ      L:??main_10
   \   000100 8D000000              CALLF     Power_On
   \                     ??main_10:
   \   000104 8D000000              CALLF     key_minus_on
   \   000108 A100                  CP        A, #0x0
   \   00010A 2704                  JREQ      L:??main_11
   \   00010C 8D000000              CALLF     Power_Off
   \                     ??main_11:
   \   000110 C60000                LD        A, L:Time_Display
   \   000113 2704                  JREQ      L:??main_12
   \   000115 8D000000              CALLF     Display
   \                     ??main_12:
   \   000119 C60000                LD        A, L:sync_time_ds1307
   \   00011C 2725                  JREQ      L:??main_13
   \   00011E 8D000000              CALLF     ReadDS1307
   \   000122 A100                  CP        A, #0x0
   \   000124 2615                  JRNE      L:??main_14
   \   000126 C60000                LD        A, L:error
   \   000129 5F                    CLRW      X
   \   00012A 97                    LD        XL, A
   \   00012B 89                    PUSHW     X
   \   00012C AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00012F 8D000000              CALLF     printf
   \   000133 5B02                  ADD       SP, #0x2
   \   000135 35CC50E0              MOV       L:0x50e0, #0xcc
   \                     ??main_15:
   \   000139 20FE                  JRA       L:??main_15
   \                     ??main_14:
   \   00013B 725F0000              CLR       L:sync_time_ds1307
   \   00013F 35530000              MOV       L:sync_display, #0x53
   \                     ??main_13:
   \   000143 CE0000                LDW       X, L:status
   \   000146 9F                    LD        A, XL
   \   000147 A501                  BCP       A, #0x1
   \   000149 269D                  JRNE      L:??main_8
    358                 else   GPIO_WriteLow(GPIOD, power_pin );
   \   00014B 8D000000              CALLF     ?Subroutine16
    359          
    360          
    361          
    362              }
   \                     ??CrossCallReturnLabel_38:
   \   00014F 209D                  JRA       L:??CrossCallReturnLabel_227
    363          
    364          
    365          
    366          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine16:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine5:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 905F                  CLRW      Y
   \   000005 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_188:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_254:
   \   000010 CF0000                LDW       L:time_on, X
   \   000013 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine77_0
   \   000002                       ;               // Fall through to label ??Subroutine77_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine77_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_187:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_253:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine67:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0
    367          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine72_0
   \   000004                       ;               // Fall through to label ??Subroutine72_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1
    368          void Display(void)
    369          {
    370             //Clear_Line1 ();
    371              result1=temperature();
   \                     Display:
   \   000000 8D000000              CALLF     temperature
   \   000004 C70000                LD        L:result1, A
    372               result2=0;
   \   000007 725F0000              CLR       L:result2
    373                if(result1%2!=0) result2=5;
   \   00000B 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000010 35050000              MOV       L:result2, #0x5
    374                 result1/=2;
   \                     ??Display_0:
   \   000014 44                    SRL       A
   \   000015 C70000                LD        L:result1, A
    375          
    376          
    377          
    378             if (status.monthly) month_display='M';
   \   000018 CE0000                LDW       X, L:status
   \   00001B 9F                    LD        A, XL
   \   00001C A508                  BCP       A, #0x8
   \   00001E 2706                  JREQ      L:??Display_1
   \   000020 354D0000              MOV       L:month_display, #0x4d
   \   000024 2004                  JRA       L:??Display_2
    379               else month_display=' ';
   \                     ??Display_1:
   \   000026 35200000              MOV       L:month_display, #0x20
    380               //Blink D
    381             if (status.on && status.daily)
   \                     ??Display_2:
   \   00002A CE0000                LDW       X, L:status
   \   00002D 9F                    LD        A, XL
   \   00002E A501                  BCP       A, #0x1
   \   000030 274A                  JREQ      L:??Display_3
   \   000032 CE0000                LDW       X, L:status
   \   000035 9F                    LD        A, XL
   \   000036 A504                  BCP       A, #0x4
   \   000038 2742                  JREQ      L:??Display_3
    382             {
    383               if (daily_dispaly=='D') daily_dispaly=' ';
   \   00003A C60000                LD        A, L:daily_dispaly
   \   00003D A144                  CP        A, #0x44
   \   00003F 2643                  JRNE      L:??Display_4
   \                     ??Display_5:
   \   000041 35200000              MOV       L:daily_dispaly, #0x20
    384                else daily_dispaly='D';
    385             }
    386              else if (status.daily) daily_dispaly='D';
    387               else daily_dispaly=' ';
    388               if(ds_temperature)sprintf(line1,"\n%d.%dC%c%c%c",result1,result2,sync_display,daily_dispaly,month_display);
   \                     ??Display_6:
   \   000045 C60000                LD        A, L:sync_display
   \   000048 905F                  CLRW      Y
   \   00004A 9097                  LD        YL, A
   \   00004C C60000                LD        A, L:daily_dispaly
   \   00004F 5F                    CLRW      X
   \   000050 97                    LD        XL, A
   \   000051 BF00                  LDW       S:?w0, X
   \   000053 C60000                LD        A, L:month_display
   \   000056 97                    LD        XL, A
   \   000057 C60000                LD        A, L:ds_temperature
   \   00005A 89                    PUSHW     X
   \   00005B 272D                  JREQ      L:??Display_7
   \   00005D 8D000000              CALLF     L:?push_w0
   \   000061 9089                  PUSHW     Y
   \   000063 C60000                LD        A, L:result2
   \   000066 97                    LD        XL, A
   \   000067 89                    PUSHW     X
   \   000068 C60000                LD        A, L:result1
   \   00006B 97                    LD        XL, A
   \   00006C 89                    PUSHW     X
   \   00006D 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c">`
   \   000071 AE0000                LDW       X, #line1
   \   000074 8D000000              CALLF     sprintf
   \   000078 5B0A                  ADD       SP, #0xa
   \   00007A 2021                  JRA       L:??Display_8
   \                     ??Display_3:
   \   00007C CE0000                LDW       X, L:status
   \   00007F 9F                    LD        A, XL
   \   000080 A504                  BCP       A, #0x4
   \   000082 27BD                  JREQ      L:??Display_5
   \                     ??Display_4:
   \   000084 35440000              MOV       L:daily_dispaly, #0x44
   \   000088 20BB                  JRA       L:??Display_6
    389                else sprintf(line1,"\n%c%c%c",sync_display,daily_dispaly,month_display);
   \                     ??Display_7:
   \   00008A 8D000000              CALLF     L:?push_w0
   \   00008E 9089                  PUSHW     Y
   \   000090 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c">`
   \   000094 AE0000                LDW       X, #line1
   \   000097 8D000000              CALLF     sprintf
   \   00009B 5B06                  ADD       SP, #0x6
    390          
    391             line_lcd=0;
   \                     ??Display_8:
   \   00009D 725F0000              CLR       L:line_lcd
    392             printf(line1);
   \   0000A1 AE0000                LDW       X, #line1
   \   0000A4 8D000000              CALLF     ?Subroutine27
    393          
    394             line_lcd=1;
    395             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_213:
   \   0000A8 89                    PUSHW     X
   \   0000A9 C60000                LD        A, L:minutes
   \   0000AC 97                    LD        XL, A
   \   0000AD 89                    PUSHW     X
   \   0000AE C60000                LD        A, L:hours
   \   0000B1 97                    LD        XL, A
   \   0000B2 89                    PUSHW     X
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B6 8D000000              CALLF     printf
   \   0000BA 5B06                  ADD       SP, #0x6
    396          
    397          
    398             Time_Display=FALSE;
   \   0000BC 725F0000              CLR       L:Time_Display
    399             sync_display=' ';
   \   0000C0 35200000              MOV       L:sync_display, #0x20
    400          }
   \   0000C4 87                    RETF
    401          

   \                                 In section .far_func.text, align 1
    402          void Power_On()
    403          {
    404            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine44
    405            status.daily=0; //Off Daily timer
    406            status.monthly=0; //Off Monthly alarm
    407            Save_Status();
   \                     ??CrossCallReturnLabel_134:
   \   00000A AC000000              JPF       Save_Status
    408          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine44:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_186:
   \   000004 A4F7                  AND       A, #0xf7
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine65:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E CE0000                LDW       X, L:status
   \   000011 01                    RRWA      X, A
   \   000012 87                    RETF
    409          

   \                                 In section .far_func.text, align 1, keep-with-next
    410          void Power_Off()
    411          {
    412            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine44
    413            status.daily=0; //Off Daily alarm
    414            status.monthly=0; //Off Monthly alarm
    415            Save_Status();
   \                     ??CrossCallReturnLabel_133:
   \   00000A AC000000              JPF       Save_Status
    416          
    417          }
    418          

   \                                 In section .far_func.text, align 1, keep-with-next
    419          void InitI2C(void)
    420          {
    421             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    422             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    423             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    424          }
    425          

   \                                 In section .far_func.text, align 1, keep-with-next
    426          bool I2C_Start(void)
    427          {
    428             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    429                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    430              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_137:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    431                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    432                  {
    433                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    434                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    435                  }
    436                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    437          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    438          

   \                                 In section .far_func.text, align 1, keep-with-next
    439          bool I2C_WA(u8 address)
    440          {
    441            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    442                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    443                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_136:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    444                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    445                   {
    446                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    447                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    448                   }
    449                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    450          }
    451          

   \                                 In section .far_func.text, align 1, keep-with-next
    452          bool I2C_RA(u8 address)
    453          {
    454            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    455                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    456                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_138:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    457                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    458                   {
    459                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    460                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    461                   }
    462                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    463          }
    464          
    465          

   \                                 In section .far_func.text, align 1, keep-with-next
    466          bool I2C_WD(u8 data)
    467          {
    468           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    469             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    470             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_135:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    471              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    472              {
    473                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    474                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    475              }
    476               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    477          }
    478          

   \                                 In section .far_func.text, align 1, keep-with-next
    479          u8 I2C_RD(void)
    480          {
    481           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    482            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    483           //while((!(I2C->SR1 & 0x40))&&timeout);
    484           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    485           {
    486             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    487             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    488           }
    489           u8 data=I2C_ReceiveData();
    490           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    491          }
    492          
    493            /*
    494          bool Init_DS1307(void)
    495          {
    496             // Test DS1307
    497              error=0;
    498              if (!I2C_Start()) return FALSE;
    499              if(!I2C_WA(0xD0)) return FALSE;
    500              if(!I2C_WD(0x00)) return FALSE;
    501              if(!I2C_WD(0x00)) return FALSE;
    502              I2C_GenerateSTOP(ENABLE);
    503          
    504              // timeout=100;  error=4;
    505              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    506              //    if (!timeout)return FALSE ;
    507               return TRUE;
    508          }
    509             */
    510          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine76_0
   \   000001                       ;               // Fall through to label ??Subroutine76_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    511          bool  ReadDS1307(void)
    512          {
    513                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine47
    514                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_148:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    515                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_151:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    516                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_247:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    517                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine34
    518                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_87:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    519                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    520                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine32
    521                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_80:
   \   000028 C70000                LD        L:seconds, A
    522                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine32
    523                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_79:
   \   00002F C70000                LD        L:minutes, A
    524                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine32
    525                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_78:
   \   000036 C70000                LD        L:hours, A
    526                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine32
    527                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_77:
   \   00003D C70000                LD        L:days, A
    528                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine32
    529                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_76:
   \   000044 C70000                LD        L:`date`, A
    530                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine32
    531                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_75:
   \   00004B C70000                LD        L:month, A
    532                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine37
    533                   I2C_GenerateSTOP(ENABLE);
    534                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_94:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A C70000                LD        L:year, A
    535          
    536               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    537               //   u8 data1 = I2C_RD();
    538                //Last read byte by I2C slave
    539               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    540               //  I2C_GenerateSTOP(ENABLE);
    541               //  temp2= I2C_RD();
    542                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005D 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    543                    {
    544                      seconds &= 0x7f;
   \   000062 721F0000              BRES      L:seconds, #0x7
    545                      Set_DS1307();
   \   000066 8D000000              CALLF     Set_DS1307
    546                    }
    547          
    548                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    549          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_183:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    550          

   \                                 In section .far_func.text, align 1, keep-with-next
    551          bool Check_DS1307(void)
    552          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    553             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    554                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine47
    555                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_147:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    556                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_150:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    557                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine76_0
   \                     ??CrossCallReturnLabel_250:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    558                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine34
    559                  //Last read byte by I2C slave
    560                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_86:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    561                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    562                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine64
    563                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_184:
   \   00002E B700                  LD        S:?b8, A
    564                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine37
    565                 I2C_GenerateSTOP(ENABLE);
    566                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_95:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    567                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    568          }
    569          

   \                                 In section .far_func.text, align 1, keep-with-next
    570          bool Set_DS1307()
    571          {
    572                 // convert hex or decimal to bcd format
    573          
    574          
    575                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine47
    576                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_146:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    577                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_149:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    578                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_246:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    579                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_139:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    580                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_140:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    581                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_141:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    582                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_142:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    583                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_143:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    584                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_144:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    585                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_145:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    586                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine76_0
   \                     ??CrossCallReturnLabel_248:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    587                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine76_0
   \                     ??CrossCallReturnLabel_249:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    588                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    589          
    590          
    591             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    592          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    593          
    594          

   \                                 In section .far_func.text, align 1, keep-with-next
    595          u8 convert_tobcd(u8 data)
    596          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    597             u8 data_second_decimal=data/10;
    598             u8 data_first_decimal=data - 10*data_second_decimal;
    599             data=16*data_second_decimal + data_first_decimal;
    600            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    601          }
    602          

   \                                 In section .far_func.text, align 1, keep-with-next
    603          u8 bcd2hex(u8 bcd)
    604          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    605            u8 hex=0;
    606            hex=(bcd>>4)*10 +(bcd&0x0f);
    607            bcd=0;
    608            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    609          }
    610          
    611          

   \                                 In section .far_func.text, align 1, keep-with-next
    612          bool Set_Clock()
    613          {
    614              //Clear Display
    615             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine19
    616             Delay1(1000);
    617             line_lcd=0;
    618              printf("\nYear>");
    619                do
    620              {
    621               line_lcd=1;
   \                     ??CrossCallReturnLabel_44:
   \   000004 8D000000              CALLF     ?Subroutine28
    622               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_62:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    623                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine70_0
    624              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_198:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_114:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_44
    625          
    626               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine41
    627              printf("\nMonth>");
    628                do
    629              {
    630               line_lcd=1;
   \                     ??CrossCallReturnLabel_108:
   \   000036 8D000000              CALLF     ?Subroutine28
    631               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_63:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    632                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    633              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_115:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_108
    634          
    635              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine20
    636               Delay1(1000);
    637                line_lcd=0;
    638              printf("\nDate>");
    639                do
    640              {
    641               line_lcd=1;
   \                     ??CrossCallReturnLabel_46:
   \   00006A 8D000000              CALLF     ?Subroutine28
    642               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_64:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    643                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    644              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_116:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_46
    645          
    646          
    647              //Clear Display
    648             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine21
    649             Delay1(1000);
    650             line_lcd=0;
    651              printf("\nDays>");
   \                     ??CrossCallReturnLabel_48:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    652                do
    653              {
    654                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    655               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    656                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    657              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_117:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    658          
    659          
    660          
    661             //Clear Display
    662             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine21
    663             Delay1(1000);
    664             line_lcd=0;
    665              printf("\nHour>");
   \                     ??CrossCallReturnLabel_49:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    666                do
    667              {
    668                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine72_0
    669               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_214:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    670                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 B700                  LD        S:?b1, A
   \   0000F8 35170000              MOV       S:?b0, #0x17
   \   0000FC 8D000000              CALLF     ??Subroutine70_0
    671              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_197:
   \   000100 C70000                LD        L:hours, A
   \   000103 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_118:
   \   000107 27D2                  JREQ      L:??Set_Clock_1
    672          
    673               line_lcd=0;
   \   000109 725F0000              CLR       L:line_lcd
    674               printf("\nMinute>");
   \   00010D AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   000110 8D000000              CALLF     printf
    675                do
    676              {
    677                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000114 8D000000              CALLF     ??Subroutine72_0
    678               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_215:
   \   000118 89                    PUSHW     X
   \   000119 C60000                LD        A, L:minutes
   \   00011C 97                    LD        XL, A
   \   00011D 89                    PUSHW     X
   \   00011E C60000                LD        A, L:hours
   \   000121 97                    LD        XL, A
   \   000122 89                    PUSHW     X
   \   000123 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000126 8D000000              CALLF     printf
   \   00012A 5B06                  ADD       SP, #0x6
    679                 minutes=adj(0,59,minutes);
   \   00012C C60000                LD        A, L:minutes
   \   00012F 8D000000              CALLF     ?Subroutine36
    680              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_203:
   \   000133 C70000                LD        L:minutes, A
   \   000136 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_119:
   \   00013A 27D8                  JREQ      L:??Set_Clock_2
    681          
    682              line_lcd=0;
   \   00013C 725F0000              CLR       L:line_lcd
    683              printf("\nSeconds>");
   \   000140 AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000143 8D000000              CALLF     printf
    684              do
    685              {
    686                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000147 8D000000              CALLF     ??Subroutine72_0
    687               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_216:
   \   00014B 89                    PUSHW     X
   \   00014C C60000                LD        A, L:minutes
   \   00014F 97                    LD        XL, A
   \   000150 89                    PUSHW     X
   \   000151 C60000                LD        A, L:hours
   \   000154 97                    LD        XL, A
   \   000155 89                    PUSHW     X
   \   000156 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000159 8D000000              CALLF     printf
   \   00015D 5B06                  ADD       SP, #0x6
    688                 seconds=adj(0,59,seconds);
   \   00015F C60000                LD        A, L:seconds
   \   000162 8D000000              CALLF     ?Subroutine36
    689              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_202:
   \   000166 C70000                LD        L:seconds, A
   \   000169 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_120:
   \   00016D 27D8                  JREQ      L:??Set_Clock_3
    690          
    691                // Set parameter to DS1307 + time byte
    692                Set_DS1307();
   \   00016F 8D000000              CALLF     Set_DS1307
    693          
    694                //bool k=Check_DS1307();
    695          
    696            return TRUE;
   \   000173 A601                  LD        A, #0x1
   \   000175 87                    RETF
    697          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_177:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_178:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine70_0
   \   000006                       ;               // Fall through to label ??Subroutine70_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_179:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_190:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    698          
    699          

   \                                 In section .far_func.text, align 1, keep-with-next
    700          u8 adj(u8 min,u8 max,u8 now)
    701          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    702             u8 adj=now;
    703             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    704             {
    705               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    706               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    707             }
    708             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    709             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    710             {
    711               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    712               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    713             }
    714             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    715             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    716          
    717             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    718          }
    719          
    720          

   \                                 In section .far_func.text, align 1, keep-with-next
    721          bool key_ok_on()
    722          {
    723            //Read Key OK
    724            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_81:
   \   000004 2627                  JRNE      L:??key_ok_on_0
    725             {
    726               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    727                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_82:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    728                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 250D                  JRC       L:??key_ok_on_0
    729                 {
    730                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    731                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;   //if realease retrun true
   \   000024 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_83:
   \   000028 2703                  JREQ      L:??key_ok_on_0
   \   00002A A601                  LD        A, #0x1
   \   00002C 87                    RETF
    732                 }
    733             }
    734          
    735            return FALSE;
   \                     ??key_ok_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    736          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    737          
    738          
    739          

   \                                 In section .far_func.text, align 1, keep-with-next
    740           bool key_plus_on()
    741          {
    742            //Read Key OK
    743              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_101:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2623                  JRNE      L:??key_plus_on_0
    744               {
    745               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    746                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_97:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_100:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    747                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_plus_on_0
    748                  {
    749                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_85:
   \   000026 2703                  JREQ      L:??key_plus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    750                  }
    751               }
    752          
    753            return FALSE;
   \                     ??key_plus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    754          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    755          
    756          

   \                                 In section .far_func.text, align 1, keep-with-next
    757            bool key_minus_on()
    758          {
    759            //Read Key OK
    760             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_103:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2623                  JRNE      L:??key_minus_on_0
    761               {
    762               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    763                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_96:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine39
   \                     ??CrossCallReturnLabel_102:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    764                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_minus_on_0
    765                  {
    766                   if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine33
   \                     ??CrossCallReturnLabel_84:
   \   000026 2703                  JREQ      L:??key_minus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    767                  }
    768               }
    769          
    770            return FALSE;
   \                     ??key_minus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    771          }
    772          
    773          

   \                                 In section .far_func.text, align 1, keep-with-next
    774          bool  key_ok_plus()
    775          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    776            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_40:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    777            {
    778                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    779                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_98:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine17
   \                     ??CrossCallReturnLabel_41:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    780                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_99:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    781            }
    782          
    783           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    784          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    785          
    786          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    787          bool Set_Timer_On()
    788          {
    789          
    790             //clr
    791             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine21
    792             Delay1(1000);
    793             line_lcd=0;
    794             printf("\nH On>");
   \                     ??CrossCallReturnLabel_52:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On>">`
   \   000007 8D000000              CALLF     ?Subroutine40
    795              timer3=0;
    796            do
    797              {
    798               line_lcd=1;
   \                     ??CrossCallReturnLabel_106:
   \   00000B 8D000000              CALLF     ?Subroutine31
    799               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_72:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    800                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine70_0
    801              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_195:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_131:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_123:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_106
    802          
    803             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    804             Delay1(1000);
    805             line_lcd=0;
    806             printf("\nMin On>");
   \                     ??CrossCallReturnLabel_53:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On>">`
   \   000041 8D000000              CALLF     ?Subroutine40
    807              timer3=0;
    808            do
    809              {
    810               line_lcd=1;
   \                     ??CrossCallReturnLabel_107:
   \   000045 8D000000              CALLF     ?Subroutine31
    811               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_73:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    812                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine36
    813              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_200:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_132:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_124:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_107
    814          
    815             //Save data to eeprom
    816               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_On_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_On_3
    817                 else status.daily=0;
   \                     ??Set_Timer_On_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_On_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    818               EEPROM_INIT();
    819              //u8 temp =*(u8*)(&status);
    820              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    821               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    822               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    823               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_205:
   \   000088 C60000                LD        A, L:daily_hour_on
   \   00008B AE4002                LDW       X, #0x4002
   \   00008E 8D000000              CALLF     ?Subroutine6
    824               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_17:
   \   000092 C60000                LD        A, L:daily_minute_on
   \   000095 AE4003                LDW       X, #0x4003
   \   000098 8D000000              CALLF     ?Subroutine4
    825               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    826                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_5:
   \   00009C 8D000000              CALLF     ?Subroutine3
    827                 change=TRUE;
   \                     ??CrossCallReturnLabel_2:
   \   0000A0 35010000              MOV       L:change, #0x1
    828          
    829             return TRUE;
   \   0000A4 A601                  LD        A, #0x1
   \   0000A6 87                    RETF
    830          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_211:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_210:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004                       REQUIRE ??Subroutine71_0
   \   000004                       ;               // Fall through to label ??Subroutine71_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_209:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_208:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    831          

   \                                 In section .far_func.text, align 1, keep-with-next
    832          bool Set_Timer_Off()
    833          {
    834          
    835              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine21
    836              Delay1(1000);
    837              line_lcd=0;
    838              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_50:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine40
    839               timer3=0;
    840            do
    841              {
    842               line_lcd=1;
   \                     ??CrossCallReturnLabel_104:
   \   00000B 8D000000              CALLF     ?Subroutine30
    843               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_69:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    844                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine70_0
    845              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_196:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_129:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_121:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_104
    846          
    847            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine21
    848             Delay1(1000);
    849             line_lcd=0;
    850             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_51:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   000041 8D000000              CALLF     ?Subroutine40
    851             timer3=0;
    852            do
    853              {
    854               line_lcd=1;
   \                     ??CrossCallReturnLabel_105:
   \   000045 8D000000              CALLF     ?Subroutine30
    855               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_70:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    856                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine36
    857              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_201:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_130:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_122:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_105
    858          
    859            //Save data to eeprom
    860               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E CE0000                LDW       X, L:status
   \   000071 9F                    LD        A, XL
   \   000072 A408                  AND       A, #0x8
   \   000074 2608                  JRNE      L:??Set_Timer_Off_2
   \   000076 CE0000                LDW       X, L:status
   \   000079 01                    RRWA      X, A
   \   00007A AA04                  OR        A, #0x4
   \   00007C 2006                  JRA       ??Set_Timer_Off_3
    861                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007E CE0000                LDW       X, L:status
   \   000081 01                    RRWA      X, A
   \   000082 A4FB                  AND       A, #0xfb
   \                     ??Set_Timer_Off_3:
   \   000084 8D000000              CALLF     ?Subroutine1
    862               EEPROM_INIT();
    863              //u8 temp =*(u8*)(&status);
    864              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    865               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    866               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    867               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_204:
   \   000088 C60000                LD        A, L:daily_hour_off
   \   00008B AE4004                LDW       X, #0x4004
   \   00008E 8D000000              CALLF     ?Subroutine6
    868               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_16:
   \   000092 C60000                LD        A, L:daily_minute_off
   \   000095 AE4005                LDW       X, #0x4005
   \   000098 8D000000              CALLF     ?Subroutine4
    869               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    870                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_6:
   \   00009C C60000                LD        A, L:daily_hour_off
   \   00009F 905F                  CLRW      Y
   \   0000A1 8D000000              CALLF     ?Subroutine2
    871                 change=TRUE;
   \                     ??CrossCallReturnLabel_0:
   \   0000A5 35010000              MOV       L:change, #0x1
    872               return TRUE;
   \   0000A9 A601                  LD        A, #0x1
   \   0000AB 87                    RETF
    873          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    874          
    875          /*
    876               //Computing time_long_on
    877          
    878               u8 hour=daily_hour_on;
    879               u8 minute=daily_minute_on;
    880               daily_long_on=0;
    881               do
    882               {
    883                    daily_long_on++;
    884                    minute++;
    885                    if (minute==60)
    886                    {
    887                      minute=0;
    888                      hour++;
    889                    }
    890                    if(hour==24) hour=0;
    891          
    892               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
    893          
    894                //Display daily_long_on
    895              LCDInstr(0x01);
    896              Delay1(1000);
    897              line_lcd=0;
    898              printf("\nLong :");
    899          
    900                do
    901              {
    902               line_lcd=1;
    903               printf("\n%d",daily_long_on);
    904                 //daily_long_on=adj(0,1440,daily_long_on);
    905              } while (!key_ok_on());
    906          
    907              time_on=daily_hour_on*60+daily_minute_on;
    908              time_off= daily_hour_off*60+daily_minute_off;
    909              //Save data to eeprom
    910                status.daily=1;
    911               EEPROM_INIT();
    912              //u8 temp =*(u8*)(&status);
    913              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    914               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    915               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    916               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    917               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    918               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    919               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    920               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    921          
    922             return TRUE;
    923          
    924          }
    925            */
    926          

   \                                 In section .far_func.text, align 1, keep-with-next
    927          void Save_Status()
    928          {
    929            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ??Subroutine71_0
    930            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    931            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    932            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_207:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    933          }
    934          

   \                                 In section .far_func.text, align 1
    935          bool Read_Allarm()
    936          {
    937             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_15:
   \   000007 C70000                LD        L:daily_hour_on, A
    938              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    939             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000017 C70000                LD        L:daily_minute_on, A
    940              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    941             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000025 C70000                LD        L:daily_hour_off, A
    942              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    943             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000033 C70000                LD        L:daily_minute_off, A
    944              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    945             monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   \   00003D AE4006                LDW       X, #0x4006
   \   000040 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   000044 C70000                LD        L:monthly_year, A
    946              if(monthly_year >99) return FALSE;
   \   000047 A164                  CP        A, #0x64
   \   000049 24C3                  JRNC      L:??Read_Allarm_1
    947             monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   \   00004B AE4007                LDW       X, #0x4007
   \   00004E 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_10:
   \   000052 C70000                LD        L:monthly_month, A
    948              if(monthly_month>12) return FALSE;
   \   000055 A10D                  CP        A, #0xd
   \   000057 24B5                  JRNC      L:??Read_Allarm_1
    949             monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   \   000059 AE4008                LDW       X, #0x4008
   \   00005C 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_9:
   \   000060 C70000                LD        L:monthly_date, A
    950              if(monthly_date >31) return FALSE;
   \   000063 A120                  CP        A, #0x20
   \   000065 24A7                  JRNC      L:??Read_Allarm_1
    951            return TRUE;
   \   000067 A601                  LD        A, #0x1
   \   000069 87                    RETF
    952          }
    953          

   \                                 In section .far_func.text, align 1, keep-with-next
    954          void EEPROM_INIT()
    955          {
    956            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    957            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    958            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    959          
    960          
    961          
    962          }
    963          
    964          

   \                                 In section .far_func.text, align 1
    965          void GpioConfiguration()
    966          {
    967          
    968            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    969          
    970            // ADC PE6 NEW PB0
    971            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
    972          
    973            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
    974            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine50
    975          
    976            //PD0 Led
    977            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_152:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine55
    978            //I2C
    979            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_165:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine55
    980            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_166:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine56
    981            // Remap Pins pb4,pb5  sda,scl ;
    982          
    983             //Init KEY OK,PLUS,MINUS
    984            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_168:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine56
    985            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_169:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine56
    986            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_170:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine55
    987          
    988            //Init DS18b20 data pin
    989            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_167:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine50
    990          
    991            // Power Pin
    992             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_153:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
    993          
    994          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine55:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine50:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
    995          

   \                                 In section .far_func.text, align 1
    996          void InitClk()
    997          {
    998            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
    999            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1000            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1001            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1002            CLK_SOURCE_HSI,       // Switch to internal timer.
   1003            DISABLE,              // Disable the clock switch interrupt.
   1004            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1005          
   1006            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine57
   1007            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_171:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine57
   1008            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_172:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine57
   1009            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_173:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine57
   1010            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_174:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1011          
   1012          
   1013          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1014          
   1015          
   1016          /*
   1017          void InitAdc()
   1018          {
   1019               ADC1_DeInit();
   1020               ADC1_StartConversion();
   1021          
   1022               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1023               //           ADC1_CHANNEL_0,
   1024               //           ADC1_PRESSEL_FCPU_D4,
   1025               //            ADC1_EXTTRIG_TIM,
   1026          
   1027          
   1028               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1029               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1030                                      ADC1_CHANNEL_0,
   1031                                      ADC1_ALIGN_RIGHT
   1032                                     );
   1033          
   1034          
   1035               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1036          
   1037          
   1038               //ADC1_Cmd (ENABLE);
   1039               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1040               ADC1_StartConversion();
   1041               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1042          
   1043          }
   1044          */
   1045          
   1046          
   1047          
   1048          /*
   1049          void InitUart()
   1050          {
   1051             UART2_DeInit();
   1052             UART2_Init((u32)9600,
   1053                        UART2_WORDLENGTH_8D,
   1054                        UART2_STOPBITS_1,
   1055                        UART2_PARITY_NO,
   1056                        UART2_SYNCMODE_CLOCK_DISABLE,
   1057                        UART2_MODE_TXRX_ENABLE
   1058                          );
   1059          
   1060             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1061             UART2_Cmd(ENABLE);
   1062          
   1063            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1064          }
   1065            */
   1066          
   1067          
   1068          /*
   1069          void SendChar( u8 Char)
   1070          {
   1071             UART2->DR = Char;
   1072            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1073          }
   1074          
   1075           */
   1076          
   1077           /*
   1078          void Send_Hello()
   1079          {
   1080            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1081             Delay1(10);
   1082             sprintf(data,"Hello");
   1083              u8 i=0;
   1084            do
   1085           {
   1086            SendChar(data[i++]);
   1087           } while (data[i]!=0);
   1088            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1089            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1090          
   1091          
   1092          
   1093          }
   1094          
   1095          
   1096          
   1097          
   1098          
   1099          void SendData()
   1100          {
   1101           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1102            Delay1(10);
   1103            u8 i=0;
   1104            sprintf(data,"%d %c",adcdata,0x0d);
   1105           do
   1106           {
   1107             SendChar(data[i++]);
   1108          
   1109           } while (data[i]!=0);
   1110             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1111            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1112            rx_data=0;
   1113          }
   1114          */
   1115          
   1116          
   1117           /*
   1118          u16 Average()
   1119          {
   1120           //Find average in measure
   1121            u8 i=0;
   1122            u16 Summa=0;
   1123            do
   1124            {
   1125             Summa+=measure[i++];
   1126            } while ( measure[i]!=0);
   1127             if(i!=0) Summa=Summa/i;
   1128             return Summa;
   1129          }
   1130             */
   1131          

   \                                 In section .far_func.text, align 1, keep-with-next
   1132          void LCDDataOut(u8 data)
   1133          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1134            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_236
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine75_0
   1135            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_236:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_32:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_237
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine75_0
   1136            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_237:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_31:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_238
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine75_0
   1137            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_238:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine12
   \                     ??CrossCallReturnLabel_30:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_239
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine75_0
   1138          }
   \                     ??CrossCallReturnLabel_239:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_245:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine60:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1139          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine75_0
   \   000002                       ;               // Fall through to label ??Subroutine75_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1140          void InitLcd()
   1141          {
   1142           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine13
   1143            LCD_RW(0);
   1144            LCD_RS(0);
   \                     ??CrossCallReturnLabel_35:
   \   000006 8D000000              CALLF     ?Subroutine14
   1145            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_234:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine18
   1146          
   1147            LCDInstrNibble(0x03);
   1148             Delay1(10);
   1149            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_43:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1150             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine18
   1151            LCDInstrNibble(0x03);
   1152             Delay1(10);
   1153          
   1154             //Line 4
   1155            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_42:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1156            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1157            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1158            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1159          
   1160            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1161            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1162          
   1163            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine24
   1164            Delay1(250);
   1165          
   1166            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_57:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1167            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1168          
   1169          
   1170          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_189:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine18:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_243:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_242:
   \   00000A 87                    RETF
   1171          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine75_0
   \                     ??CrossCallReturnLabel_240:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_194:
   \   00000D                       REQUIRE ??Subroutine69_0
   \   00000D                       ;               // Fall through to label ??Subroutine69_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine26
   \                     ??CrossCallReturnLabel_193:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1172          void LCDInstr(u8 Instr)
   1173          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1174            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine14
   1175            LCD_RW(0);
   \                     ??CrossCallReturnLabel_232:
   \   000009 2000                  JRA       ?Subroutine0
   1176            LCDDataOut(Instr>>4);
   1177            PulseEnable();
   1178            LCDDataOut(Instr & 0x0F);
   1179            PulseEnable();
   1180          }
   1181          

   \                                 In section .far_func.text, align 1, keep-with-next
   1182          void LCDData(u8 Data)
   1183          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1184            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine12
   1185            LCD_RW(0);
   \                     ??CrossCallReturnLabel_29:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1186            LCDDataOut(Data>>4);
   1187            PulseEnable() ;
   1188            LCDDataOut(Data & 0x0F) ;
   1189            PulseEnable();
   1190          }
   1191          

   \                                 In section .far_func.text, align 1, keep-with-next
   1192          void LCDInstrNibble(u8 Instr)
   1193          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1194            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine13
   1195            LCD_RW(0);
   1196            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_34:
   \   00000B AC000000              JPF       ??Subroutine69_0
   1197            PulseEnable();
   1198          }
   1199          

   \                                 In section .far_func.text, align 1, keep-with-next
   1200          void PulseEnable(void)
   1201          {
   1202            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine8
   1203             Delay1(1);
   1204            LCD_EN(1);
   1205             Delay1(1);
   1206            LCD_EN(0);
   \                     ??CrossCallReturnLabel_22:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine75_0
   1207             Delay1(1);
   \                     ??CrossCallReturnLabel_235:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1208          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_244:
   \   000006 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_223:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_222:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1209          

   \                                 In section .far_func.text, align 1, keep-with-next
   1210          void LCD_Busy(void)
   1211          {
   1212             //set Port D7 as Input
   1213             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1214             //Set Read
   1215             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine12
   1216             LCD_RS(0);
   \                     ??CrossCallReturnLabel_28:
   \   000013 8D000000              CALLF     ?Subroutine14
   1217             // Read Busy Flag
   1218                timer2=0;
   \                     ??CrossCallReturnLabel_233:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1219             do
   1220             {
   1221             // Enable set
   1222               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine8
   1223                Delay1(1);
   1224               LCD_EN(1);
   1225                Delay1(1);
   1226             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_23:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1227                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1228                //Clear read
   1229              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine75_0
   1230             //set Port D7 as Output
   1231             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_241:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1232          
   1233          }
   1234          
   1235          

   \                                 In section .far_func.text, align 1, keep-with-next
   1236          void LCD(u8 data)
   1237           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1238             //  static u8 linet=0;
   1239          
   1240          
   1241               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2674                  JRNE      L:??CrossCallReturnLabel_220
   1242               {
   1243          
   1244                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 272C                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2735                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 273E                  JREQ      L:??LCD_3
   \   000018 2046                  JRA       L:??LCD_4
   1245                   {
   1246                   case 0:
   1247                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1248                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1249                      {
   1250                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1251                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     ?Subroutine11
   1252                         Delay1(1);
   1253                      }
   \                     ??CrossCallReturnLabel_217:
   \   000030 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_54:
   \   000034 25EC                  JRC       L:??LCD_5
   1254                     LCDInstr(0x80 | 0x00);
   \   000036 A680                  LD        A, #0x80
   \   000038 8D000000              CALLF     ?Subroutine63
   1255                     count=0;
   1256                     break;
   \                     ??CrossCallReturnLabel_180:
   \   00003C 2022                  JRA       L:??LCD_4
   1257                   case 1:
   1258                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00003E A6C0                  LD        A, #0xc0
   \   000040 8D000000              CALLF     LCDInstr
   1259                     count=20;
   \   000044 35140000              MOV       L:count, #0x14
   1260                     break;
   \   000048 2016                  JRA       L:??LCD_4
   1261                   case 2:
   1262                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004A A694                  LD        A, #0x94
   \   00004C 8D000000              CALLF     LCDInstr
   1263                     count=40;
   \   000050 35280000              MOV       L:count, #0x28
   1264                     break;
   \   000054 200A                  JRA       L:??LCD_4
   1265                   case 3:
   1266                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000056 A6D4                  LD        A, #0xd4
   \   000058 8D000000              CALLF     LCDInstr
   1267                     count=60;
   \   00005C 353C0000              MOV       L:count, #0x3c
   1268                     break;
   1269                   //default:
   1270                    //  LCDInstr(0x80 |0x40);    //Line 1
   1271                    }
   1272                   line_lcd++;
   \                     ??LCD_4:
   \   000060 C60000                LD        A, L:line_lcd
   \   000063 4C                    INC       A
   \   000064 C70000                LD        L:line_lcd, A
   1273                   if (line_lcd>=5)
   \   000067 A105                  CP        A, #0x5
   \   000069 250F                  JRC       L:??LCD_6
   1274                   {
   1275                    line_lcd=1;   //line >=5
   \   00006B 35010000              MOV       L:line_lcd, #0x1
   1276                    LCDInstr(0x01); //Clear LCD
   \   00006F 8D000000              CALLF     ?Subroutine68
   1277                    Delay1(2500);
   \                     ??CrossCallReturnLabel_192:
   \   000073 AE09C4                LDW       X, #0x9c4
   \   000076 8D000000              CALLF     Delay1
   1278                   }
   1279          
   1280                   Delay1(1);
   \                     ??LCD_6:
   \   00007A 8D000000              CALLF     ??Subroutine73_0
   1281          
   1282          
   1283               }
   1284          
   1285          
   1286               if (count==20)
   \                     ??CrossCallReturnLabel_220:
   \   00007E C60000                LD        A, L:count
   \   000081 A114                  CP        A, #0x14
   \   000083 260A                  JRNE      L:??LCD_7
   1287                {
   1288                  LCDInstr(0x80 | 0x40);
   \   000085 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   000087 8D000000              CALLF     LCDInstr
   1289                  Delay1(1);
   \                     ??LCD_9:
   \   00008B 5F                    CLRW      X
   \   00008C 5C                    INCW      X
   \   00008D 2023                  JRA       ??LCD_10
   1290                }
   1291                   else if(count==40)
   \                     ??LCD_7:
   \   00008F A128                  CP        A, #0x28
   \   000091 2604                  JRNE      L:??LCD_11
   1292                  {
   1293                    LCDInstr(0x80 | 0x14);
   \   000093 A694                  LD        A, #0x94
   \   000095 20F0                  JRA       ??LCD_8
   1294                    Delay1(1);
   1295                  }
   1296                    else if(count==60)
   \                     ??LCD_11:
   \   000097 A13C                  CP        A, #0x3c
   \   000099 2608                  JRNE      L:??LCD_12
   1297                    {
   1298                      LCDInstr(0x80 | 0x54);
   \   00009B A6D4                  LD        A, #0xd4
   \   00009D 8D000000              CALLF     ?Subroutine63
   1299                      count=0;
   1300                      Delay1(1);
   \                     ??CrossCallReturnLabel_181:
   \   0000A1 20E8                  JRA       ??LCD_9
   1301                    }
   1302                      else if(count >80)
   \                     ??LCD_12:
   \   0000A3 A151                  CP        A, #0x51
   \   0000A5 250F                  JRC       L:??LCD_13
   1303                        {
   1304                          count=0;
   \   0000A7 725F0000              CLR       L:count
   1305                          LCDInstr(0x01); //Clear LCD
   \   0000AB 8D000000              CALLF     ?Subroutine68
   1306                          Delay1(250);
   \                     ??CrossCallReturnLabel_191:
   \   0000AF AE00FA                LDW       X, #0xfa
   \                     ??LCD_10:
   \   0000B2 8D000000              CALLF     Delay1
   1307                        }
   1308          
   1309               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_13:
   \   0000B6 B600                  LD        A, S:?b9
   \   0000B8 A11C                  CP        A, #0x1c
   \   0000BA 250B                  JRC       L:??LCD_14
   1310               {
   1311                 LCDData(data);
   \   0000BC 8D000000              CALLF     ?Subroutine11
   1312                  Delay1(1);
   1313                 count++;
   \                     ??CrossCallReturnLabel_218:
   \   0000C0 C60000                LD        A, L:count
   \   0000C3 4C                    INC       A
   \   0000C4 C70000                LD        L:count, A
   1314               }
   1315           }
   \                     ??LCD_14:
   \   0000C7 AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine73_0
   \   000004                       ;               // Fall through to label ??Subroutine73_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_224:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1316          

   \                                 In section .far_func.text, align 1, keep-with-next
   1317          void InitDelayTimer2()
   1318          {
   1319             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1320             //Tclock 16/8=2Mhz  /20 10us
   1321                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1322                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1323                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1324                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1325                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1326          
   1327          }
   1328          

   \                                 In section .far_func.text, align 1, keep-with-next
   1329          void InitDelayTimer3()
   1330          {
   1331             //Timer 3 use for 1s Delay
   1332             //Tclock 16000000/1024=15626
   1333                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1334                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1335                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1336                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1337          
   1338               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1339          
   1340          }
   1341          
   1342          
   1343          
   1344          

   \                                 In section .far_func.text, align 1, keep-with-next
   1345          bool DS18_Write(u8 data)
   1346          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1347            disableInterrupts();
   \   000006 9B                    SIM
   1348            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1349            {
   1350             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine15
   1351             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1352             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_37:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_231
   \   00001A 8D000000              CALLF     ?Subroutine23
   1353               //else DS18(0);
   1354             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_231:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1355             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine23
   1356             //Delay1(0);
   1357            }
   \                     ??CrossCallReturnLabel_230:
   \   000029 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_55:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1358            enableInterrupts();
   \   00002F 9A                    RIM
   1359            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1360          
   1361          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine74_0
   \   000002                       ;               // Fall through to label ??Subroutine74_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_175:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1362          
   1363          

   \                                 In section .far_func.text, align 1, keep-with-next
   1364          u8  DS18_Read()
   1365          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1366              //Init DS18b20 data pin as Input
   1367          
   1368            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1369              disableInterrupts();
   \   000006 9B                    SIM
   1370            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1371            {
   1372              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine15
   1373              Delay_us(1); //Start time slot 4,5 us
   1374              DS18(1);
   \                     ??CrossCallReturnLabel_36:
   \   00000D 8D000000              CALLF     ?Subroutine23
   1375              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_228:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1376              //Delay1(0);
   1377             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_61:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1378              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1379              //  DS18(1);  // Next bit
   1380             // Delay1(0);
   1381          
   1382            }
   \   00003D 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_56:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1383              enableInterrupts();
   \   000043 9A                    RIM
   1384              //Init DS18b20 data pin
   1385             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1386             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1387          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1388          

   \                                 In section .far_func.text, align 1, keep-with-next
   1389          bool DS18_Reset()
   1390          {
   1391             //Init Reset Pulse
   1392              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine61
   1393              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_176:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1394              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine23
   1395              //Delay1(1);
   1396              timer2=0;
   \                     ??CrossCallReturnLabel_229:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1397              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_88:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_59:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1398              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_89:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1399              {
   1400                ds_temperature=FALSE;
   \                     ??DS18_Reset_3:
   \   000025 725F0000              CLR       L:ds_temperature
   1401                return FALSE;
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1402              }
   1403          
   1404              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1405               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_90:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine25
   \                     ??CrossCallReturnLabel_60:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1406                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_91:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1407                 {
   1408                  ds_temperature=FALSE;
   1409                  return FALSE;
   1410                 }
   1411          
   1412              // Delay1(10);
   1413              //Delay1(20);    //25=524us
   1414               ds_temperature=TRUE;
   \   000041 35010000              MOV       L:ds_temperature, #0x1
   1415              return TRUE;
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1416          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1417          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1418          u8 temperature ()
   1419          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1420          
   1421             //Init Reset Pulse
   1422               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_163:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1423             //Skip ROM Command 0xCC
   1424              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine52
   1425             //Function command  CONVERT T [44h]
   1426              DS18_Write(0x44);
   1427              //Wait util end convert
   1428              timer2=0;
   1429               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_157:
   \   000013 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_93:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_157
   1430                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1431               //u8 temp8=timer2;
   1432              //Init Reset Pulse
   1433              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_164:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1434              // Skip ROM Command 0xCC
   1435              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine51
   1436              //Function command READ SCRATCHPAD [BEh]
   1437              DS18_Write(0xBE);
   1438               u8 temp1=DS18_Read();
   1439               u8 temp2=DS18_Read();
   1440              DS18_Reset();
   \                     ??CrossCallReturnLabel_155:
   \   000033 8D000000              CALLF     DS18_Reset
   1441                u16 result = temp2*256+temp1;
   1442                temp1= (u8)(result>>3);
   1443               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_21:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1444          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine77_0
   \                     ??CrossCallReturnLabel_252:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1445          

   \                                 In section .far_func.text, align 1, keep-with-next
   1446          bool Read_DS18()
   1447          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1448          
   1449             //Init Reset Pulse
   1450               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_161:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1451             //Skip ROM Command 0xCC
   1452              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine52
   1453             //Function command  CONVERT T [44h]
   1454              DS18_Write(0x44);
   1455              //Wait util end convert
   1456              timer2=0;
   1457               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_156:
   \   000013 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_92:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_156
   1458                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1459               //u8 temp8=timer2;
   1460              //Init Reset Pulse
   1461              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_162:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1462              // Skip ROM Command 0xCC
   1463              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine51
   1464              //Function command READ SCRATCHPAD [BEh]
   1465              DS18_Write(0xBE);
   1466               u8 temp1=DS18_Read();
   1467               u8 temp2=DS18_Read();
   1468               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_154:
   \   000033 8D000000              CALLF     ?Subroutine53
   1469               u8 temp4=DS18_Read();
   1470               u8 temp5=DS18_Read();
   1471               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_159:
   \   000037 8D000000              CALLF     ?Subroutine53
   1472               u8 temp7=DS18_Read();
   1473               u8 temp8=DS18_Read();
   1474               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_158:
   \   00003B 8D000000              CALLF     DS18_Read
   1475          
   1476               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1477          
   1478                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1479                result2=0;
   \   000047 725F0000              CLR       L:result2
   1480                u16 result = temp2*256+temp1;
   1481                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   00004F C70000                LD        L:result1, A
   1482                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1483                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1484          
   1485          
   1486                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1487               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1488               //line_lcd=1;
   1489               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1490               // while (!key_ok_on());
   1491          
   1492               //u8 temp3=DS18_Read();
   1493          
   1494              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1495          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1496          

   \                                 In section .far_func.text, align 1, keep-with-next
   1497          bool DS18Set ()
   1498          {
   1499               //Init Reset Pulse
   1500              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine54
   \                     ??CrossCallReturnLabel_160:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1501             //Skip ROM Command 0xCC
   1502              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1503             //Function command  WRITE SCRATCHPAD 0x4E
   1504              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1505             //Write 3 bytes last is config reg
   1506              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1507              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1508              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1509          
   1510          
   1511          
   1512          
   1513            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1514          }
   1515          
   1516          
   1517          
   1518          
   1519          
   1520          
   1521          
   1522          

   \                                 In section .far_func.text, align 1, keep-with-next
   1523          void Delay1(u16 Delay)
   1524          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1525              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1526            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1527            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1528          }
   \   00000D 87                    RETF
   1529          

   \                                 In section .far_func.text, align 1, keep-with-next
   1530           void Delay2(u16 Delay)
   1531          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1532            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1533            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1534          }
   \   00000D 87                    RETF
   1535          
   1536          

   \                                 In section .far_func.text, align 1, keep-with-next
   1537          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1538          {
   1539            //disableInterrupts();
   1540            do
   1541              {
   1542                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1543                nop();
   \   000001 9D                    NOP
   1544              }
   1545              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1546            //enableInterrupts();
   1547          }
   \   000005 87                    RETF
   1548          
   1549          

   \                                 In section .far_func.text, align 1, keep-with-next
   1550          void Display_Line(char* line)
   1551          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1552            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1553            u8 count;
   1554              //Set Cursor to First Line
   1555             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1556             count=0;
   \   000010 3F00                  CLR       S:?b10
   1557             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine73_0
   1558            do
   1559            {
   1560          
   1561              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_221:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1562               {
   1563                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine11
   1564                  Delay1(1);
   1565                 count++;
   \                     ??CrossCallReturnLabel_219:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1566               }
   1567               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1568            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_221
   1569          
   1570             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1571          
   1572          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1573          

   \                                 In section .far_func.text, align 1, keep-with-next
   1574          void Rotate_Line( char * line)
   1575          {
   1576          
   1577             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1578             char temp_next;
   1579          
   1580             do
   1581             {
   1582                temp_next=*(line+1);
   1583               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1584                //line++;
   1585                //temp_next=*line;
   1586               //*line=*line++;
   1587             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1588             line--;
   1589             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1590          
   1591          }
   \   000012 87                    RETF
   1592          

   \                                 In section .far_func.text, align 1, keep-with-next
   1593          void Clear_Line1 ()
   1594          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1595               //Set Cursor to First Line
   1596             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine10
   1597             count=0;
   1598             Delay1(1);
   1599              u8 count=0;
   1600             do
   1601             {
   1602               LCDData(' ');
   \                     ??CrossCallReturnLabel_27:
   \   000009 8D000000              CALLF     ?Subroutine9
   1603                  Delay1(1);
   1604                  count++;
   1605             }while (count<8);
   \                     ??CrossCallReturnLabel_25:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_27
   1606          
   1607          
   1608          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_182:
   \   000004 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_226:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_225:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1609          

   \                                 In section .far_func.text, align 1, keep-with-next
   1610          void Clear_Line2 ()
   1611          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1612               //Set Cursor to Second  Line
   1613             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine10
   1614             count=0;
   1615             Delay1(1);
   1616              u8 count=0;
   1617             do
   1618             {
   1619               LCDData(' ');
   \                     ??CrossCallReturnLabel_26:
   \   000009 8D000000              CALLF     ?Subroutine9
   1620                  Delay1(1);
   1621                  count++;
   1622             }while (count<8);
   \                     ??CrossCallReturnLabel_24:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_26
   1623          
   1624          
   1625          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1626          
   1627          
   1628          
   1629          
   1630          

   \                                 In section .far_func.text, align 1, keep-with-next
   1631          void Menu (void)
   1632          {
   1633           // Clear Display
   1634              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine24
   1635              Delay1(250);
   1636              //u8 key;
   1637           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1638              Wait for Plus,Minius or OK
   1639              If plus next option from Menu on the end EXIT
   1640              If minus previous option from Menu  on the end EXIT
   1641              If OK enter to menu option
   1642              If time out about 10s exit from Menu
   1643           */
   1644              do {
   1645          First_Menu:
   1646              line_lcd=0;
   \                     ??CrossCallReturnLabel_58:
   \   000004 725F0000              CLR       L:line_lcd
   1647              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1648              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine31
   1649              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_74:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1650              switch (Key_Press())
   \   000022 8D000000              CALLF     Key_Press
   \   000026 4A                    DEC       A
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   1651                  {
   1652                  case 1: goto Second_Menu ;
   1653                   break;
   1654                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   1655                   break;
   \   000039 CC0000                JP        L:??Menu_3
   1656                  case 3: goto Exit_Menu;
   1657                   break;
   1658                  }
   1659                  break; //Exit Menu
   1660          
   1661          
   1662          Second_Menu:
   1663              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   1664              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     printf
   1665              line_lcd=1;
   \   000047 8D000000              CALLF     ?Subroutine30
   1666              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_71:
   \   00004B 89                    PUSHW     X
   \   00004C C60000                LD        A, L:daily_hour_off
   \   00004F 97                    LD        XL, A
   \   000050 89                    PUSHW     X
   \   000051 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000054 8D000000              CALLF     printf
   \   000058 5B04                  ADD       SP, #0x4
   1667                switch (Key_Press())
   \   00005A 8D000000              CALLF     Key_Press
   \   00005E 4A                    DEC       A
   \   00005F 2710                  JREQ      L:??Menu_4
   \   000061 4A                    DEC       A
   \   000062 2706                  JREQ      L:??Menu_5
   \   000064 4A                    DEC       A
   \   000065 279D                  JREQ      L:??CrossCallReturnLabel_58
   \   000067 CC0000                JP        L:??Menu_3
   1668                  {
   1669                  case 1: goto Third_Menu ;
   1670                   break;
   1671                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   00006A 8D000000              CALLF     Set_Timer_Off
   1672                   break;
   \   00006E CC0000                JP        L:??Menu_3
   1673                  case 3: goto First_Menu;
   1674                   break;
   1675                  }
   1676               break; //Exit Menu
   1677          
   1678          Third_Menu:
   1679                line_lcd=0;
   \                     ??Menu_4:
   \   000071 725F0000              CLR       L:line_lcd
   1680              printf("\nMonthly ");
   \   000075 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000078 8D000000              CALLF     printf
   1681              line_lcd=1;
   \   00007C 35010000              MOV       L:line_lcd, #0x1
   1682              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \   000080 C60000                LD        A, L:monthly_date
   \   000083 5F                    CLRW      X
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:monthly_month
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B C60000                LD        A, L:monthly_year
   \   00008E 97                    LD        XL, A
   \   00008F 89                    PUSHW     X
   \   000090 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000093 8D000000              CALLF     printf
   \   000097 5B06                  ADD       SP, #0x6
   1683                switch (Key_Press())
   \   000099 8D000000              CALLF     Key_Press
   \   00009D 4A                    DEC       A
   \   00009E 2750                  JREQ      L:??Menu_6
   \   0000A0 4A                    DEC       A
   \   0000A1 2706                  JREQ      L:??Menu_7
   \   0000A3 4A                    DEC       A
   \   0000A4 2796                  JREQ      L:??Menu_0
   \   0000A6 CC0000                JP        L:??Menu_3
   1684                  {
   1685                  case 1: goto Fourth_Menu;
   1686                   break;
   1687                  case 2:
   1688                    {
   1689                     Set_Date();
   \                     ??Menu_7:
   \   0000A9 8D000000              CALLF     Set_Date
   1690                     monthly_year=y;
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 C70000                LD        L:monthly_year, A
   1691                     monthly_month=m;
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 C70000                LD        L:monthly_month, A
   1692                     monthly_date=d;
   \   0000B9 C60000                LD        A, L:d
   \   0000BC C70000                LD        L:monthly_date, A
   1693                     status.monthly=1;
   \   0000BF CE0000                LDW       X, L:status
   \   0000C2 01                    RRWA      X, A
   \   0000C3 AA08                  OR        A, #0x8
   \   0000C5 8D000000              CALLF     ?Subroutine65
   1694                     status.daily=0;  // Disable Daily Alarm On date enable it
   1695                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_185:
   \   0000C9 A4FE                  AND       A, #0xfe
   \   0000CB 8D000000              CALLF     ?Subroutine1
   1696                     // Save Status and Date in EEPROM
   1697                     EEPROM_INIT();
   1698                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   1699                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   1700                     FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   \                     ??CrossCallReturnLabel_206:
   \   0000CF C60000                LD        A, L:`y`
   \   0000D2 AE4006                LDW       X, #0x4006
   \   0000D5 8D000000              CALLF     ?Subroutine6
   1701                     FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   \                     ??CrossCallReturnLabel_18:
   \   0000D9 C60000                LD        A, L:m
   \   0000DC AE4007                LDW       X, #0x4007
   \   0000DF 8D000000              CALLF     ?Subroutine6
   1702                     FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   \                     ??CrossCallReturnLabel_19:
   \   0000E3 C60000                LD        A, L:d
   \   0000E6 AE4008                LDW       X, #0x4008
   \   0000E9 8D000000              CALLF     ?Subroutine4
   1703                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   1704                     break;
   \                     ??CrossCallReturnLabel_4:
   \   0000ED CC0000                JP        L:??Menu_3
   1705                    }
   1706                  case 3: goto Second_Menu ;
   1707                   break;
   1708                  }
   1709               break; //Exit Menu
   1710          
   1711          
   1712          Fourth_Menu:
   1713              line_lcd=0;
   \                     ??Menu_6:
   \   0000F0 725F0000              CLR       L:line_lcd
   1714              printf("\nClock   ");
   \   0000F4 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000F7 8D000000              CALLF     ?Subroutine27
   1715              line_lcd=1;
   1716              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_212:
   \   0000FB 89                    PUSHW     X
   \   0000FC C60000                LD        A, L:minutes
   \   0000FF 97                    LD        XL, A
   \   000100 89                    PUSHW     X
   \   000101 C60000                LD        A, L:hours
   \   000104 97                    LD        XL, A
   \   000105 89                    PUSHW     X
   \   000106 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000109 8D000000              CALLF     printf
   \   00010D 5B06                  ADD       SP, #0x6
   1717                switch (Key_Press())
   \   00010F 8D000000              CALLF     Key_Press
   \   000113 4A                    DEC       A
   \   000114 2711                  JREQ      L:??Menu_8
   \   000116 4A                    DEC       A
   \   000117 2708                  JREQ      L:??Menu_9
   \   000119 4A                    DEC       A
   \   00011A 2603                  JRNE      ??lb_1
   \   00011C CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   00011F 2062                  JRA       L:??Menu_3
   1718                  {
   1719                  case 1: goto Fifth_Menu ;
   1720                   break;
   1721                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000121 8D000000              CALLF     Set_Clock
   1722                   break;
   \   000125 205C                  JRA       L:??Menu_3
   1723                  case 3: goto Third_Menu;
   1724                   break;
   1725                  }
   1726               break; //Exit Menu
   1727          
   1728          
   1729          Fifth_Menu:
   1730              line_lcd=0;
   \                     ??Menu_8:
   \   000127 725F0000              CLR       L:line_lcd
   1731              printf("\nDate    ");
   \   00012B AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   00012E 8D000000              CALLF     printf
   1732              line_lcd=1;
   \   000132 8D000000              CALLF     ?Subroutine28
   1733              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_65:
   \   000136 89                    PUSHW     X
   \   000137 C60000                LD        A, L:month
   \   00013A 97                    LD        XL, A
   \   00013B 89                    PUSHW     X
   \   00013C C60000                LD        A, L:year
   \   00013F 97                    LD        XL, A
   \   000140 89                    PUSHW     X
   \   000141 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000144 8D000000              CALLF     printf
   \   000148 5B06                  ADD       SP, #0x6
   1734                switch (Key_Press())
   \   00014A 8D000000              CALLF     Key_Press
   \   00014E 4A                    DEC       A
   \   00014F 270E                  JREQ      L:??Menu_2
   \   000151 4A                    DEC       A
   \   000152 2705                  JREQ      L:??Menu_10
   \   000154 4A                    DEC       A
   \   000155 2799                  JREQ      L:??Menu_6
   \   000157 202A                  JRA       L:??Menu_3
   1735                  {
   1736                  case 1: goto Exit_Menu ;
   1737                   break;
   1738                  case 2: Set_Date();
   \                     ??Menu_10:
   \   000159 8D000000              CALLF     Set_Date
   1739                   break;
   \   00015D 2024                  JRA       L:??Menu_3
   1740                  case 3: goto Fourth_Menu;
   1741                   break;
   1742                  }
   1743               break; //Exit Menu
   1744          
   1745          
   1746          Exit_Menu:
   1747              line_lcd=0;
   \                     ??Menu_2:
   \   00015F 725F0000              CLR       L:line_lcd
   1748              printf("\nExit OK ");
   \   000163 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000166 8D000000              CALLF     printf
   1749              line_lcd=1;
   \   00016A 35010000              MOV       L:line_lcd, #0x1
   1750              printf("\n+/-     ");
   \   00016E AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   000171 8D000000              CALLF     printf
   1751                 switch (Key_Press())
   \   000175 8D000000              CALLF     Key_Press
   \   000179 4A                    DEC       A
   \   00017A 2603                  JRNE      ??lb_2
   \   00017C CC0000                JP        L:??CrossCallReturnLabel_58
   \                     ??lb_2:
   \   00017F A002                  SUB       A, #0x2
   \   000181 27A4                  JREQ      L:??Menu_8
   1752                  {
   1753                  case 1: goto First_Menu;
   1754                   break;
   1755                  case 2:
   1756                   break;
   1757                  case 3: goto Fifth_Menu;
   1758                   break;
   1759                  }
   1760                 break; //Exit Menu
   1761              }    while (1);
   1762              //exit:
   1763             Clear_Line1();
   \                     ??Menu_3:
   \   000183 8D000000              CALLF     Clear_Line1
   1764             Clear_Line2();
   \   000187 AC000000              JPF       Clear_Line2
   1765          
   1766          }
   1767          
   1768          

   \                                 In section .far_func.text, align 1, keep-with-next
   1769          u8 Key_Press(void)
   1770          {
   \                     Key_Press:
   \   000000 3B0000                PUSH      S:?b8
   1771             u8 key_press =0;
   \   000003 3F00                  CLR       S:?b8
   1772             timer3=0;
   \   000005 5F                    CLRW      X
   \   000006 CF0000                LDW       L:timer3, X
   1773             do {
   1774                if (key_ok_on()) key_press=1;
   \                     ??Key_Press_0:
   \   000009 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_113:
   \   00000D 2706                  JREQ      L:??Key_Press_1
   \   00000F 35010000              MOV       S:?b8, #0x1
   \   000013 201A                  JRA       L:??Key_Press_2
   1775                   else if (key_plus_on())key_press=2;
   \                     ??Key_Press_1:
   \   000015 8D000000              CALLF     key_plus_on
   \   000019 A100                  CP        A, #0x0
   \   00001B 2706                  JREQ      L:??Key_Press_3
   \   00001D 35020000              MOV       S:?b8, #0x2
   \   000021 200C                  JRA       L:??Key_Press_2
   1776                  else if (key_minus_on())key_press=3;
   \                     ??Key_Press_3:
   \   000023 8D000000              CALLF     key_minus_on
   \   000027 A100                  CP        A, #0x0
   \   000029 2704                  JREQ      L:??Key_Press_2
   \   00002B 35030000              MOV       S:?b8, #0x3
   1777             } while ( (timer3<=time_menu) && !key_press);    //(timer3<=time_menu) &&
   \                     ??Key_Press_2:
   \   00002F 8D000000              CALLF     ?Subroutine43
   \                     ??CrossCallReturnLabel_128:
   \   000033 2404                  JRNC      L:??Key_Press_4
   \   000035 3D00                  TNZ       S:?b8
   \   000037 27D0                  JREQ      L:??Key_Press_0
   1778          
   1779             return key_press;
   \                     ??Key_Press_4:
   \   000039 B600                  LD        A, S:?b8
   \   00003B 320000                POP       S:?b8
   \   00003E 87                    RETF
   1780          }
   1781          
   1782          
   1783          
   1784          

   \                                 In section .far_func.text, align 1, keep-with-next
   1785          bool Set_Date(void)
   1786          {
   \                     Set_Date:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1787             u8 leap=0 ,date_end,month_start,date_start;
   \   000007 3F00                  CLR       S:?b8
   1788             int yy;
   1789          
   1790                   //Clear Display
   1791             LCDInstr(0x01);
   \   000009 8D000000              CALLF     ?Subroutine19
   1792             Delay1(1000);
   1793             line_lcd=0;
   1794             printf("\nYear>");
   1795             y=year;
   \                     ??CrossCallReturnLabel_45:
   \   00000D C60000                LD        A, L:year
   \   000010 C70000                LD        L:`y`, A
   1796             m=month;
   \   000013 C60000                LD        A, L:month
   \   000016 C70000                LD        L:m, A
   1797             d=date;
   \   000019 C60000                LD        A, L:`date`
   \   00001C C70000                LD        L:d, A
   1798                do
   1799              {
   1800               line_lcd=1;
   \                     ??Set_Date_0:
   \   00001F 8D000000              CALLF     ?Subroutine29
   1801               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_66:
   \   000023 89                    PUSHW     X
   \   000024 C60000                LD        A, L:m
   \   000027 97                    LD        XL, A
   \   000028 89                    PUSHW     X
   \   000029 C60000                LD        A, L:`y`
   \   00002C 97                    LD        XL, A
   \   00002D 89                    PUSHW     X
   \   00002E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000031 8D000000              CALLF     printf
   \   000035 5B06                  ADD       SP, #0x6
   1802                 y=adj(0,99,y);
   \   000037 C60000                LD        A, L:`y`
   \   00003A B700                  LD        S:?b1, A
   \   00003C 35630000              MOV       S:?b0, #0x63
   \   000040 8D000000              CALLF     ??Subroutine70_0
   1803              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_199:
   \   000044 C70000                LD        L:`y`, A
   \   000047 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_110:
   \   00004B 27D2                  JREQ      L:??Set_Date_0
   1804                  yy=y+2000;
   \   00004D C60000                LD        A, L:`y`
   \   000050 5F                    CLRW      X
   \   000051 97                    LD        XL, A
   \   000052 1C07D0                ADDW      X, #0x7d0
   \   000055 BF00                  LDW       S:?w0, X
   1805              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   000057 90AE0190              LDW       Y, #0x190
   \   00005B 8D000000              CALLF     L:?smod16_y_x_y
   \   00005F 905D                  TNZW      Y
   \   000061 271C                  JREQ      L:??Set_Date_1
   \   000063 90AE0064              LDW       Y, #0x64
   \   000067 BE00                  LDW       X, S:?w0
   \   000069 8D000000              CALLF     L:?smod16_y_x_y
   \   00006D 905D                  TNZW      Y
   \   00006F 2712                  JREQ      L:??Set_Date_2
   \   000071 90AE0004              LDW       Y, #0x4
   \   000075 BE00                  LDW       X, S:?w0
   \   000077 8D000000              CALLF     L:?smod16_y_x_y
   \   00007B 905D                  TNZW      Y
   \   00007D 2604                  JRNE      L:??Set_Date_2
   \                     ??Set_Date_1:
   \   00007F 35010000              MOV       S:?b8, #0x1
   1806                  y=yy-2000;
   \                     ??Set_Date_2:
   \   000083 B600                  LD        A, S:?b1
   \   000085 AB30                  ADD       A, #0x30
   \   000087 C70000                LD        L:`y`, A
   1807                   if(y==year) month_start=month;
   \   00008A C60000                LD        A, L:year
   \   00008D C10000                CP        A, L:`y`
   \   000090 2605                  JRNE      L:??Set_Date_3
   \   000092 C60000                LD        A, L:month
   \   000095 B700                  LD        S:?b9, A
   1808               line_lcd=0;
   \                     ??Set_Date_3:
   \   000097 8D000000              CALLF     ?Subroutine41
   1809              printf("\nMonth>");
   1810                do
   1811              {
   1812               line_lcd=1;
   \                     ??CrossCallReturnLabel_109:
   \   00009B 8D000000              CALLF     ?Subroutine29
   1813               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_67:
   \   00009F 89                    PUSHW     X
   \   0000A0 C60000                LD        A, L:m
   \   0000A3 97                    LD        XL, A
   \   0000A4 89                    PUSHW     X
   \   0000A5 C60000                LD        A, L:`y`
   \   0000A8 97                    LD        XL, A
   \   0000A9 89                    PUSHW     X
   \   0000AA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000AD 8D000000              CALLF     printf
   \   0000B1 5B06                  ADD       SP, #0x6
   1814                m=adj(month_start,12,m);
   \   0000B3 C60000                LD        A, L:m
   \   0000B6 B700                  LD        S:?b1, A
   \   0000B8 350C0000              MOV       S:?b0, #0xc
   \   0000BC B600                  LD        A, S:?b9
   \   0000BE 8D000000              CALLF     adj
   \   0000C2 C70000                LD        L:m, A
   1815              } while (!key_ok_on());
   \   0000C5 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_111:
   \   0000C9 27D0                  JREQ      L:??CrossCallReturnLabel_109
   1816          
   1817              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000CB C60000                LD        A, L:m
   \   0000CE A101                  CP        A, #0x1
   \   0000D0 2718                  JREQ      L:??Set_Date_4
   \   0000D2 A103                  CP        A, #0x3
   \   0000D4 2714                  JREQ      L:??Set_Date_4
   \   0000D6 A105                  CP        A, #0x5
   \   0000D8 2710                  JREQ      L:??Set_Date_4
   \   0000DA A107                  CP        A, #0x7
   \   0000DC 270C                  JREQ      L:??Set_Date_4
   \   0000DE A108                  CP        A, #0x8
   \   0000E0 2708                  JREQ      L:??Set_Date_4
   \   0000E2 A10A                  CP        A, #0xa
   \   0000E4 2704                  JREQ      L:??Set_Date_4
   \   0000E6 A10C                  CP        A, #0xc
   \   0000E8 2606                  JRNE      L:??Set_Date_5
   \                     ??Set_Date_4:
   \   0000EA 351F0000              MOV       S:?b8, #0x1f
   \   0000EE 2024                  JRA       L:??Set_Date_6
   1818               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??Set_Date_5:
   \   0000F0 A104                  CP        A, #0x4
   \   0000F2 270C                  JREQ      L:??Set_Date_7
   \   0000F4 A106                  CP        A, #0x6
   \   0000F6 2708                  JREQ      L:??Set_Date_7
   \   0000F8 A109                  CP        A, #0x9
   \   0000FA 2704                  JREQ      L:??Set_Date_7
   \   0000FC A10B                  CP        A, #0xb
   \   0000FE 2606                  JRNE      L:??Set_Date_8
   \                     ??Set_Date_7:
   \   000100 351E0000              MOV       S:?b8, #0x1e
   \   000104 200E                  JRA       L:??Set_Date_6
   1819                else
   1820                 {
   1821                   if(leap) date_end=29;
   \                     ??Set_Date_8:
   \   000106 3D00                  TNZ       S:?b8
   \   000108 2706                  JREQ      L:??Set_Date_9
   \   00010A 351D0000              MOV       S:?b8, #0x1d
   \   00010E 2004                  JRA       L:??Set_Date_6
   1822                    else date_end=28;
   \                     ??Set_Date_9:
   \   000110 351C0000              MOV       S:?b8, #0x1c
   1823                 }
   1824               if(y==year) date_start=d;
   \                     ??Set_Date_6:
   \   000114 C60000                LD        A, L:year
   \   000117 C10000                CP        A, L:`y`
   \   00011A 2605                  JRNE      L:??Set_Date_10
   \   00011C C60000                LD        A, L:d
   \   00011F B700                  LD        S:?b10, A
   1825              LCDInstr(0x01);
   \                     ??Set_Date_10:
   \   000121 8D000000              CALLF     ?Subroutine20
   1826               Delay1(1000);
   1827                line_lcd=0;
   1828              printf("\nDate>");
   1829                do
   1830              {
   1831               line_lcd=1;
   \                     ??CrossCallReturnLabel_47:
   \   000125 8D000000              CALLF     ?Subroutine29
   1832               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_68:
   \   000129 89                    PUSHW     X
   \   00012A C60000                LD        A, L:m
   \   00012D 97                    LD        XL, A
   \   00012E 89                    PUSHW     X
   \   00012F C60000                LD        A, L:`y`
   \   000132 97                    LD        XL, A
   \   000133 89                    PUSHW     X
   \   000134 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000137 8D000000              CALLF     printf
   \   00013B 5B06                  ADD       SP, #0x6
   1833                 d=adj(date_start,date_end,d);
   \   00013D C60000                LD        A, L:d
   \   000140 B700                  LD        S:?b1, A
   \   000142 450000                MOV       S:?b0, S:?b8
   \   000145 B600                  LD        A, S:?b10
   \   000147 8D000000              CALLF     adj
   \   00014B C70000                LD        L:d, A
   1834              } while (!key_ok_on());
   \   00014E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_112:
   \   000152 27D1                  JREQ      L:??CrossCallReturnLabel_47
   1835          
   1836            return TRUE;
   \   000154 A601                  LD        A, #0x1
   \   000156 320000                POP       S:?b10
   \   000159 AC000000              JPF       L:?epilogue_w4
   1837          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   1838          

   \                                 In section .far_func.text, align 1, keep-with-next
   1839           PUTCHAR_PROTOTYPE
   1840          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1841            /* Place your implementation of fputc here */
   1842            /* e.g. write a character to the USART */
   1843                //USART_SendData(USART3, (u8) ch);
   1844               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1845             /* Loop until the end of transmission */
   1846              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1847            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1848          }
   1849          
   1850           #ifdef USE_FULL_ASSERT
   1851          
   1852          /**
   1853            * @brief  Reports the name of the source file and the source line number
   1854            *   where the assert_param error has occurred.
   1855            * @param file: pointer to the source file name
   1856            * @param line: assert_param error line source number
   1857            * @retval : None
   1858            */

   \                                 In section .far_func.text, align 1
   1859          void assert_failed(u8* file, u32 line)
   1860          {
   1861            /* User can add his own implementation to report the file name and line number,
   1862               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1863          
   1864            /* Infinite loop */
   1865            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1866            {
   1867          
   1868            }
   1869          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On>">`:
   \   000000 0A48204F6E3E          DC8 "\012H On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On>">`:
   \   000000 0A4D696E204F          DC8 "\012Min On>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   1870          #endif
   1871          
   1872          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     daily_dispaly                     1
     month_display                     1
     sync_display                      1
     sync_time_ds1307                  1
     ds_temperature                    1
     line1                             8
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     ?Subroutine42                     7
     ??Subroutine74_0                  7
     main                            337
     ?Subroutine16                     9
     ?Subroutine5                      9
     ?Subroutine3                     20
     ?Subroutine66                     2
     ??Subroutine77_0                  8
     ?Subroutine2                     15
     ?Subroutine67                    12
     ?Subroutine27                     4
     ??Subroutine72_0                 10
     Display                         197
     Power_On                         14
     ?Subroutine44                    11
     ?Subroutine65                    19
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine45                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine49                     1
     ??Subroutine76_0                  7
     ?Subroutine48                     9
     ?Subroutine47                    11
     ReadDS1307                      109
     ?Subroutine37                    11
     ?Subroutine34                    13
     ?Subroutine32                     8
     ?Subroutine64                    10
     Check_DS1307                     64
     Set_DS1307                      108
     ?Subroutine46                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       374
     ?Subroutine41                    11
     ?Subroutine20                    11
     ?Subroutine19                    11
     ?Subroutine36                     6
     ??Subroutine70_0                  5
     ?Subroutine21                     5
     ?Subroutine62                    16
     ?Subroutine68                     6
     ?Subroutine28                    10
     adj                              85
     key_ok_on                        47
     ?Subroutine33                    10
     key_plus_on                      45
     ?Subroutine39                     7
     ?Subroutine38                     7
     key_minus_on                     45
     key_ok_plus                      40
     ?Subroutine17                    29
     ?Subroutine43                     7
     Set_Timer_On                    167
     ?Subroutine40                     9
     ?Subroutine6                      5
     ?Subroutine4                     10
     ?Subroutine1                      4
     ??Subroutine71_0                 29
     ?Subroutine58                     9
     ?Subroutine31                    10
     Set_Timer_Off                   172
     ?Subroutine30                    10
     Save_Status                      10
     Read_Allarm                     106
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine56                     9
     ?Subroutine55                     9
     ?Subroutine50                    12
     InitClk                          62
     ?Subroutine57                     9
     LCDDataOut                       87
     ?Subroutine12                     7
     ??Subroutine75_0                  5
     ?Subroutine60                     7
     ?Subroutine14                     2
     InitLcd                          85
     ?Subroutine24                    11
     ?Subroutine18                    17
     ?Subroutine13                    11
     ?Subroutine0                     13
     ??Subroutine69_0                 10
     ?Subroutine26                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine8                     24
     ?Subroutine59                     6
     LCD_Busy                         69
     LCD                             203
     ?Subroutine63                     9
     ?Subroutine11                     4
     ??Subroutine73_0                  5
     ?Subroutine22                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine23                     2
     ?Subroutine15                    10
     ?Subroutine61                     9
     DS18_Read                        74
     ?Subroutine25                    12
     DS18_Reset                       72
     ?Subroutine35                     7
     ?Subroutine54                     7
     temperature                      63
     ?Subroutine52                    17
     ?Subroutine51                    25
     ?Subroutine7                     21
     Read_DS18                       121
     ?Subroutine53                    12
     DS18Set                          41
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine10                    13
     ?Subroutine9                     16
     Clear_Line2                      19
     Menu                            395
     Key_Press                        63
     Set_Date                        349
     ?Subroutine29                    10
     fputc                            18
     assert_failed                     2
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\n%d.%dC%c%c%c">     14
     ?<Constant "\n%c%c%c">            8
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH On>">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On>">           9
     ?<Constant "\nH Off>">            8
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 5 142 bytes in section .far_func.text
    65 bytes in section .near.bss
     3 bytes in section .near.data
   256 bytes in section .near.rodata
 
 5 142 bytes of CODE  memory
   256 bytes of CONST memory
    68 bytes of DATA  memory

Errors: none
Warnings: none
