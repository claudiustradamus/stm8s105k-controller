###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             05/Dec/2013  22:00:08 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24            Monthly alarm if enable disable daily alarm on  set date enable daily alarm
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define lcdLed GPIO_PIN_0
     52          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     53          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     54          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     55          
     56          #define key_ok    GPIO_PIN_4
     57          #define key_plus  GPIO_PIN_1
     58          #define key_minus GPIO_PIN_2
     59            //DS18B20  Temp Sensor
     60          #define ds18_data GPIO_PIN_2 //2
     61          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     62            //Power
     63          #define power_pin GPIO_PIN_3
     64          
     65          
     66          
     67          //EEPROM Address;
     68          #define EEPROM_ADDR 0x4000
     69          #define EEPROM_ADR_STATUSH          EEPROM_ADDR + 0
     70          #define EEPROM_ADR_STATUSL          EEPROM_ADDR + 1
     71          #define EEPROM_ADR_PROGRAM          EEPROM_ADDR + 2
     72          //#define EEPROM_ADR_TIME_ON_HOURS    EEPROM_ADDR +2
     73          //#define EEPROM_ADR_TIME_ON_MINUTES  EEPROM_ADDR +3
     74          //#define EEPROM_ADR_TIME_OFF_HOURS   EEPROM_ADDR +4
     75          //#define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     76          //#define EEPROM_ADR_MONTH_YEAR       EEPROM_ADDR +6
     77          //#define EEPROM_ADR_MONTH_MONTH      EEPROM_ADDR +7
     78          //#define EEPROM_ADR_MONTH_DATE       EEPROM_ADDR +8
     79          
     80          #ifdef __GNUC__
     81            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     82               set to 'Yes') calls __io_putchar() */
     83            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     84          #else
     85            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     86          #endif /* __GNUC__ */
     87          
     88          
     89          
     90          
     91          #define SpecialSymbol 0x1b //Esc to start message
     92          //#define data_size 20
     93          #define key_time 8000
     94          #define key_time_ok 15000
     95          #define key_time_press 4000
     96          #define key_time_release 400
     97          #define DS_Control  0x10  // Out 1s
     98          #define time_menu 10  // 5s
     99          #define TIMEOUT_DS18B20 1000
    100          #define LCDLEDON 20
    101          //#define sync_time 30 // 30s
    102          #define power_jitter 3 //3s
    103          
    104          
    105          
    106          
    107          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    108          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    109          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    110          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    111          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    113          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    114          //char data[data_size];
    115          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    116          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    117          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    118          u8  seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8  minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8  hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    121          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    122          u8  date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    123          u8  month=1;
   \                     month:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    124          u8  year;
   \                     year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    126          u8 y,m,d;
   \                     `y`:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     m:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     d:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    127          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    128          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u8 monthly_year;
   \                     monthly_year:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    134          u8 monthly_month;
   \                     monthly_month:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 monthly_date;
   \                     monthly_date:
   \   000000                       DS8 1
    136          //u16 daily_long_on;

   \                                 In section .near.bss, align 1
    137          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    138          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    139          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    140          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    142          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    143          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    144          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    145          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    146          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    147          char  manu_display,sync_display,program_display,program_number;
   \                     manu_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     sync_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_display:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
   \                     program_number:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    148          bool volatile sync_time_ds1307;
   \                     sync_time_ds1307:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    149          u8 lcdLedTimer;
   \                     lcdLedTimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    150          u8 button;
   \                     button:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    151          u8 power;
   \                     power:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    152          bool blink_flag;
   \                     blink_flag:
   \   000000                       DS8 1
    153          //bool  ds_temperature;
    154          
    155          
    156          

   \                                 In section .near.bss, align 1
    157          char line1[10];
   \                     line1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    158          char line2[10];
   \                     line2:
   \   000000                       DS8 10
    159          //char string1[10];
    160          //char string2[10];

   \                                 In section .near.bss, align 1
    161          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    162          bool volatile Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    163          
    164          //u8 index=0;

   \                                 In section .near.bss, align 1
    165          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    166          int volatile k=0;
   \                     k:
   \   000000                       DS8 2

   \                                 In section .near.data, align 1
    167          char *Day_Week[11] = {" Off"," Sun"," Mon"," Tues"," Wednes"," Thurs"," Fri"," Satur"," Daily"," Month"};
   \                     Day_Week:
   \   000000 000000000000          DC16 `?<Constant " Off">`, `?<Constant " Sun">`, `?<Constant " Mon">`
   \   000006 00000000              DC16 `?<Constant " Tues">`, `?<Constant " Wednes">`
   \   00000A 00000000              DC16 `?<Constant " Thurs">`, `?<Constant " Fri">`
   \   00000E 00000000              DC16 `?<Constant " Satur">`, `?<Constant " Daily">`
   \   000012 0000                  DC16 `?<Constant " Month">`
   \   000014 0000                  DC8 0, 0
    168          //char *test[3] ={"18777","2","3"};
    169          
    170           struct   status_reg
    171           {
    172             unsigned manu:1;
    173             unsigned on:1;
    174             unsigned timer_on:1;
    175             unsigned daily:1;
    176             unsigned monthly:1;

   \                                 In section .near.bss, align 1
    177           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    178          
    179          
    180           struct
    181           {
    182             unsigned ds1307:1;
    183             unsigned ds18B20:1;
    184             unsigned buzzer:1;
    185             unsigned lcdLed:1;

   \                                 In section .near.bss, align 1
    186           }  volatile hardware ;
   \                     hardware:
   \   000000                       DS8 2
    187          
    188          
    189          
    190           typedef  struct
    191            {
    192              u8 day;
    193              u8 onhour ;
    194              u8 onminute ;
    195              u8 offhour;
    196              u8 offminute;
    197          
    198            }  program ;
    199          
    200                   // = new proram[8];

   \                                 In section .near.bss, align 1
    201             program  programpoint[8];
   \                     programpoint:
   \   000000                       DS8 40
    202            /*
    203             =
    204           {
    205             {0x00,0x00,0x00,0x00,0x00},
    206             {0x00,0x00,0x00,0x00,0x00},
    207             {0x00,0x00,0x00,0x00,0x00},
    208             {0x00,0x00,0x00,0x00,0x00},
    209             {0x00,0x00,0x00,0x00,0x00},
    210             {0x00,0x00,0x00,0x00,0x00},
    211             {0x00,0x00,0x00,0x00,0x00},
    212             {0x00,0x00,0x00,0x00,0x00},
    213           };
    214              */
    215          
    216          //time_t  ltime;
    217          //struct tm ptim;
    218          
    219          
    220          
    221          
    222          
    223          /* Private function prototypes -----------------------------------------------*/
    224          void InitHardware();
    225          void GpioConfiguration();
    226          void InitClk();
    227          void InitAdc();
    228          void InitI2C();
    229          void EEPROM_INIT();
    230          bool ReadDS1307();
    231          //void InitUart();
    232          void InitLcd();
    233          void InitDelayTimer2();
    234          void InitDelayTimer3();
    235          void Delay1( u16 Delay);
    236          void Delay2( u16 Delay);
    237          void Delay_us(u16 Delay);
    238          void LCDInstrNibble (u8 Instr);
    239          void LCDInstr(u8 Instr);
    240          void LCDDataOut(u8 data);
    241          void LCD_Busy();
    242          void PulseEnable();
    243          //void SendData();
    244          void SendChar(u8 Char);
    245          //void Send_Hello();
    246          bool Set_Clock();
    247          bool key_ok_on();
    248          bool key_plus_on();
    249          bool key_minus_on();
    250          bool key_ok_plus();
    251          bool Init_DS1307(void);
    252          bool Check_DS1307(void);
    253          bool I2C_Start(void);
    254          bool I2C_WA(u8 address);
    255          bool I2C_WD(u8 data);
    256          bool I2C_RA(u8 address);
    257          bool Set_DS1307();
    258          //bool Set_Delay_Allarm();
    259          bool Set_Timer_On();
    260          bool Set_Timer_Off();
    261          bool Read_Allarm();
    262          bool Read_DS18();
    263          bool DS18_Write( u8 data);
    264          bool DS18_Reset();
    265          bool DS18Set();
    266          u8 temperature();
    267          u8 DS18_Read();
    268          u8 convert_tobcd(u8 data);
    269          u8 I2C_RD(void);
    270          u8 adj(u8 min,u8 max,u8 now);
    271          u8 bcd2hex(u8 bcd);
    272          void Power_On(void);
    273          void Power_Off();
    274          void SaveStatus();
    275          void Rotate_Line( char * line);
    276          void Display_Line(char * line);
    277          void Clear_Line1(void);
    278          void Clear_Line2(void);
    279          void Menu(void);
    280          void pressKey(void);
    281          void Display(void);
    282          bool setData(void);
    283          void initBeep(void);
    284          void beep(u16 Interval);
    285          void FirstMenu();
    286          void ProgramMenu();
    287          void SaveProgram();
    288          void ReadProgram();
    289          void ResetProgram();
    290          void CheckProgramPoint();
    291          
    292          
    293          
    294          u16  Average();
    295          
    296          
    297          /* Private functions ---------------------------------------------------------*/
    298          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_207:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000 8D000000              CALLF     ?Subroutine83
   \                     ??CrossCallReturnLabel_229:
   \   000004 35140000              MOV       L:lcdLedTimer, #0x14
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA08                  OR        A, #0x8
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
    299          void main(void)
    300          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    301              /*High speed internal clock prescaler: 1*/
    302              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    303              InitClk();
   \   000003 8D000000              CALLF     InitClk
    304              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    305              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    306              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    307              GPIO_WriteLow(GPIOD, power_pin );  //Power Off
   \   000013 8D000000              CALLF     ?Subroutine11
    308              GPIO_WriteLow(GPIOB,lcdLed);
   \                     ??CrossCallReturnLabel_20:
   \   000017 A601                  LD        A, #0x1
   \   000019 AE5005                LDW       X, #0x5005
   \   00001C 8D000000              CALLF     GPIO_WriteLow
    309              hardware.lcdLed=0;
   \   000020 CE0000                LDW       X, L:hardware
   \   000023 01                    RRWA      X, A
   \   000024 A4F7                  AND       A, #0xf7
   \   000026 02                    RLWA      X, A
   \   000027 CF0000                LDW       L:hardware, X
    310              //InitUart();
    311               enableInterrupts();
   \   00002A 9A                    RIM
    312               initBeep();
   \   00002B 8D000000              CALLF     initBeep
    313              // GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
    314               InitLcd();
   \   00002F 8D000000              CALLF     InitLcd
    315              //InitAdc();
    316               InitI2C();
   \   000033 8D000000              CALLF     InitI2C
    317              // Enable Timer3
    318              TIM3_Cmd(ENABLE);
   \   000037 A601                  LD        A, #0x1
   \   000039 8D000000              CALLF     TIM3_Cmd
    319              //year=bcd2hex(13);
    320              //Delay1(10000);
    321               if (!ReadDS1307())
   \   00003D 8D000000              CALLF     ReadDS1307
   \   000041 A100                  CP        A, #0x0
   \   000043 261D                  JRNE      L:??main_0
    322               {
    323                 printf("\n E2:%d",error);
   \   000045 C60000                LD        A, L:error
   \   000048 5F                    CLRW      X
   \   000049 97                    LD        XL, A
   \   00004A 89                    PUSHW     X
   \   00004B AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00004E 8D000000              CALLF     printf
   \   000052 5B02                  ADD       SP, #0x2
    324                 // Reset the CPU: Enable the watchdog and wait until it expires
    325                  hardware.ds1307=0;
   \   000054 CE0000                LDW       X, L:hardware
   \   000057 01                    RRWA      X, A
   \   000058 A4FE                  AND       A, #0xfe
   \   00005A 02                    RLWA      X, A
   \   00005B CF0000                LDW       L:hardware, X
    326                   pressKey();
   \   00005E 8D000000              CALLF     pressKey
    327                //IWDG->KR = IWDG_KEY_ENABLE;
    328                // while ( 1 );    // Wait until reset occurs from IWDG
    329               }
    330               //Send_Hello();
    331              //line_lcd=0;
    332              //printf("\nHello");
    333                hardware.lcdLed=1;
   \                     ??main_0:
   \   000062 8D000000              CALLF     ?Subroutine35
    334                 lcdLedTimer=LCDLEDON;
    335                  //GPIO_WriteLow(GPIOB,lcdLed);
    336          
    337              if (!Check_DS1307())
   \                     ??CrossCallReturnLabel_75:
   \   000066 8D000000              CALLF     Check_DS1307
   \   00006A A100                  CP        A, #0x0
   \   00006C 2624                  JRNE      L:??main_1
    338              {
    339                 if (error!=0)
   \   00006E C60000                LD        A, L:error
   \   000071 2710                  JREQ      L:??main_2
    340                 {
    341                  printf("\n E:%d",error);
   \   000073 5F                    CLRW      X
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   000079 8D000000              CALLF     printf
   \   00007D 5B02                  ADD       SP, #0x2
    342                   pressKey();
   \   00007F 8D000000              CALLF     pressKey
    343          
    344                 }
    345               line_lcd=0;
   \                     ??main_2:
   \   000083 725F0000              CLR       L:line_lcd
    346               printf("\nSetClock");
   \   000087 AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008A 8D000000              CALLF     printf
    347                Set_Clock();
   \   00008E 8D000000              CALLF     Set_Clock
    348                 // reset program point
    349          
    350              }
    351          
    352          
    353                 //Read Status register from eepom and update it
    354                //size=sizeof(status);
    355               //u16 status
    356               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_1:
   \   000092 AE4000                LDW       X, #0x4000
   \   000095 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_162:
   \   000099 B700                  LD        S:?b8, A
   \   00009B AE4001                LDW       X, #0x4001
   \   00009E 8D000000              CALLF     ?Subroutine57
   \                     ??CrossCallReturnLabel_161:
   \   0000A2 905F                  CLRW      Y
   \   0000A4 9097                  LD        YL, A
   \   0000A6 5F                    CLRW      X
   \   0000A7 41                    EXG       A, XL
   \   0000A8 B600                  LD        A, S:?b8
   \   0000AA 41                    EXG       A, XL
   \   0000AB 4F                    CLR       A
   \   0000AC 02                    RLWA      X, A
   \   0000AD 8D000000              CALLF     ??Subroutine86_0
   \                     ??CrossCallReturnLabel_237:
   \   0000B1 CF0000                LDW       L:status, X
    357                status_check = *(u16*)(&status);
   \   0000B4 CE0000                LDW       X, L:status
   \   0000B7 CF0000                LDW       L:status_check, X
    358                //ResetProgram();
    359                ReadProgram ();
   \   0000BA 8D000000              CALLF     ReadProgram
    360                //printf("%s",Day_Week[1]);
    361                // pressKey();
    362          
    363                /*
    364              //When Start Check for Allarm and computing Daily_long_on
    365               if ( Read_Allarm() == TRUE)
    366               {
    367                 time_on=daily_hour_on*60+daily_minute_on;
    368                 time_off= daily_hour_off*60+daily_minute_off;
    369               }
    370                  */
    371          
    372                     //Init DS18B20
    373              DS18Set();
   \   0000BE 8D000000              CALLF     DS18Set
    374              line_lcd=0;
   \   0000C2 725F0000              CLR       L:line_lcd
    375              if (!Read_DS18())
   \   0000C6 8D000000              CALLF     Read_DS18
   \   0000CA A100                  CP        A, #0x0
   \   0000CC 2611                  JRNE      L:??main_3
    376              {
    377               printf("\nDS_Err_T");
   \   0000CE AE0000                LDW       X, #`?<Constant "\\nDS_Err_T">`
   \   0000D1 8D000000              CALLF     printf
    378                 hardware.ds18B20=0;
   \   0000D5 8D000000              CALLF     ?Subroutine39
    379                  pressKey();  //while (!key_ok_on());
   \                     ??CrossCallReturnLabel_90:
   \   0000D9 8D000000              CALLF     pressKey
   \   0000DD 2004                  JRA       L:??CrossCallReturnLabel_92
    380              }
    381               else hardware.ds18B20=1;
   \                     ??main_3:
   \   0000DF 8D000000              CALLF     ?Subroutine40
    382          
    383              //daily_dispaly=' ';
    384              //month_display=' ';
    385              sync_time_ds1307= TRUE;
   \                     ??CrossCallReturnLabel_92:
   \   0000E3 35010000              MOV       L:sync_time_ds1307, #0x1
    386          
    387                    //Same delay if  power jitter
    388              if (status.on)
   \   0000E7 CE0000                LDW       X, L:status
   \   0000EA 9F                    LD        A, XL
   \   0000EB A502                  BCP       A, #0x2
   \   0000ED 2713                  JREQ      L:??main_4
    389              {
    390               line_lcd=0;
   \   0000EF 725F0000              CLR       L:line_lcd
    391               printf("\nWait 3s.");
   \   0000F3 AE0000                LDW       X, #`?<Constant "\\nWait 3s.">`
   \   0000F6 8D000000              CALLF     ?Subroutine45
    392               timer3=0;
    393               while (timer3<=power_jitter);
   \                     ??CrossCallReturnLabel_107:
   \   0000FA CE0000                LDW       X, L:timer3
   \   0000FD A30004                CPW       X, #0x4
   \   000100 25F8                  JRC       L:??CrossCallReturnLabel_107
    394              }
    395          
    396          
    397               /* Main Loop*/
    398          
    399              while(1)
    400              {
    401          
    402          
    403                if(key_ok_on()) FirstMenu();
   \                     ??main_4:
   \   000102 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_125:
   \   000106 2704                  JREQ      L:??main_5
   \   000108 8D000000              CALLF     FirstMenu
    404                if(key_plus_on()) Power_On();
   \                     ??main_5:
   \   00010C 8D000000              CALLF     key_plus_on
   \   000110 A100                  CP        A, #0x0
   \   000112 2704                  JREQ      L:??main_6
   \   000114 8D000000              CALLF     Power_On
    405                if(key_minus_on())Power_Off();
   \                     ??main_6:
   \   000118 8D000000              CALLF     key_minus_on
   \   00011C A100                  CP        A, #0x0
   \   00011E 2704                  JREQ      L:??main_7
   \   000120 8D000000              CALLF     Power_Off
    406                if(Time_Display) Display();  //
   \                     ??main_7:
   \   000124 C60000                LD        A, L:Time_Display
   \   000127 2704                  JREQ      L:??main_8
   \   000129 8D000000              CALLF     Display
    407          
    408                if(sync_time_ds1307 )  // Sync local time with DS1307
   \                     ??main_8:
   \   00012D C60000                LD        A, L:sync_time_ds1307
   \   000130 2729                  JREQ      L:??main_9
    409                   {
    410                    if (!ReadDS1307())
   \   000132 8D000000              CALLF     ReadDS1307
   \   000136 A100                  CP        A, #0x0
   \   000138 2619                  JRNE      L:??main_10
    411                        {
    412                          GPIO_WriteLow(GPIOD, power_pin );
   \   00013A 8D000000              CALLF     ?Subroutine11
    413                       printf("\n E2:%d",error);
   \                     ??CrossCallReturnLabel_19:
   \   00013E C60000                LD        A, L:error
   \   000141 5F                    CLRW      X
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B02                  ADD       SP, #0x2
    414                       //restart i2c
    415                       // Reset the CPU: Enable the watchdog and wait until it expires
    416                       IWDG->KR = IWDG_KEY_ENABLE;
   \   00014D 35CC50E0              MOV       L:0x50e0, #0xcc
    417                       while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_11:
   \   000151 20FE                  JRA       L:??main_11
    418                        }
    419                   sync_time_ds1307=FALSE;
   \                     ??main_10:
   \   000153 725F0000              CLR       L:sync_time_ds1307
    420                   sync_display='S';
   \   000157 35530000              MOV       L:sync_display, #0x53
    421                   }
    422          
    423                if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_9:
   \   00015B CE0000                LDW       X, L:status
   \   00015E 9F                    LD        A, XL
   \   00015F A502                  BCP       A, #0x2
   \   000161 2708                  JREQ      L:??main_12
   \   000163 A608                  LD        A, #0x8
   \   000165 8D000000              CALLF     ??Subroutine92_0
   \                     ??CrossCallReturnLabel_268:
   \   000169 2097                  JRA       L:??main_4
    424                 else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??main_12:
   \   00016B 8D000000              CALLF     ?Subroutine11
    425          
    426          
    427          
    428              }
   \                     ??CrossCallReturnLabel_18:
   \   00016F 2091                  JRA       L:??main_4
    429          
    430          
    431          
    432          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine57:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine40:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine39:
   \   000000 CE0000                LDW       X, L:hardware
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:hardware, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine11:
   \   000000 A608                  LD        A, #0x8
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
    433          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 8D000000              CALLF     printf
   \   000004                       REQUIRE ??Subroutine90_0
   \   000004                       ;               // Fall through to label ??Subroutine90_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000 CE0000                LDW       X, L:status
   \   000003 9F                    LD        A, XL
   \   000004 A501                  BCP       A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
    434          void Display(void)
    435          {
   \                     Display:
   \   000000 3B0000                PUSH      S:?b8
    436             //Clear_Line1 ();
    437              char power_display;
    438              result1=temperature();
   \   000003 8D000000              CALLF     temperature
   \   000007 C70000                LD        L:result1, A
    439               result2=0;
   \   00000A 725F0000              CLR       L:result2
    440                if(result1%2!=0) result2=5;
   \   00000E 7201000004            BTJF      L:result1, #0x0, L:??Display_0
   \   000013 35050000              MOV       L:result2, #0x5
    441                 result1/=2;
   \                     ??Display_0:
   \   000017 44                    SRL       A
   \   000018 C70000                LD        L:result1, A
    442          
    443          
    444          
    445             if (status.manu) manu_display='M';
   \   00001B 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_212:
   \   00001F 2706                  JREQ      L:??Display_1
   \   000021 354D0000              MOV       L:manu_display, #0x4d
   \   000025 2004                  JRA       L:??Display_2
    446               else manu_display='A';
   \                     ??Display_1:
   \   000027 35410000              MOV       L:manu_display, #0x41
    447               //Blink D
    448          
    449             if (status.on && !status.manu)
   \                     ??Display_2:
   \   00002B CE0000                LDW       X, L:status
   \   00002E 9F                    LD        A, XL
   \   00002F A502                  BCP       A, #0x2
   \   000031 2722                  JREQ      L:??Display_3
   \   000033 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_213:
   \   000037 261C                  JRNE      L:??Display_3
    450             {
    451               if (program_display==' ')
   \   000039 C60000                LD        A, L:program_display
   \   00003C A120                  CP        A, #0x20
   \   00003E 260D                  JRNE      L:??Display_4
    452                 {
    453                   program_display='P';
   \   000040 35500000              MOV       L:program_display, #0x50
    454                   power_display=0x30 +power;
   \   000044 C60000                LD        A, L:power
   \   000047 AB30                  ADD       A, #0x30
   \   000049 B700                  LD        S:?b8, A
   \   00004B 2008                  JRA       L:??Display_3
    455                 }
    456               else
    457                 {
    458                   program_display=' ';
   \                     ??Display_4:
   \   00004D 35200000              MOV       L:program_display, #0x20
    459                   power_display=' ';
   \   000051 35200000              MOV       S:?b8, #0x20
    460                 }
    461             }
    462          
    463          
    464             // else if (status.on) program_display='P';
    465             //  else program_display=' ';
    466          
    467              if(hardware.ds18B20)sprintf(line1,"\n%d.%dC%c%c%c%c",result1,result2,sync_display,manu_display,program_display,power_display);
   \                     ??Display_3:
   \   000055 C60000                LD        A, L:sync_display
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A BF00                  LDW       S:?w2, X
   \   00005C C60000                LD        A, L:manu_display
   \   00005F 97                    LD        XL, A
   \   000060 BF00                  LDW       S:?w1, X
   \   000062 C60000                LD        A, L:program_display
   \   000065 97                    LD        XL, A
   \   000066 BF00                  LDW       S:?w0, X
   \   000068 B600                  LD        A, S:?b8
   \   00006A 41                    EXG       A, XL
   \   00006B 90CE0000              LDW       Y, L:hardware
   \   00006F 909F                  LD        A, YL
   \   000071 A502                  BCP       A, #0x2
   \   000073 89                    PUSHW     X
   \   000074 2725                  JREQ      L:??Display_5
   \   000076 8D000000              CALLF     L:?push_w0
   \   00007A 8D000000              CALLF     L:?push_w1
   \   00007E 8D000000              CALLF     L:?push_w2
   \   000082 C60000                LD        A, L:result2
   \   000085 97                    LD        XL, A
   \   000086 89                    PUSHW     X
   \   000087 C60000                LD        A, L:result1
   \   00008A 97                    LD        XL, A
   \   00008B 89                    PUSHW     X
   \   00008C 90AE0000              LDW       Y, #`?<Constant "\\n%d.%dC%c%c%c%c">`
   \   000090 AE0000                LDW       X, #line1
   \   000093 8D000000              CALLF     sprintf
   \   000097 5B0C                  ADD       SP, #0xc
   \   000099 2019                  JRA       L:??Display_6
    468                else sprintf(line1,"\n%c%c%c%c",sync_display,manu_display,program_display,power_display);
   \                     ??Display_5:
   \   00009B 8D000000              CALLF     L:?push_w0
   \   00009F 8D000000              CALLF     L:?push_w1
   \   0000A3 8D000000              CALLF     L:?push_w2
   \   0000A7 90AE0000              LDW       Y, #`?<Constant "\\n%c%c%c%c">`
   \   0000AB AE0000                LDW       X, #line1
   \   0000AE 8D000000              CALLF     sprintf
   \   0000B2 5B08                  ADD       SP, #0x8
    469          
    470             line_lcd=0;
   \                     ??Display_6:
   \   0000B4 725F0000              CLR       L:line_lcd
    471             printf(line1);
   \   0000B8 AE0000                LDW       X, #line1
   \   0000BB 8D000000              CALLF     ?Subroutine24
    472          
    473             line_lcd=1;
    474             printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_254:
   \   0000BF 89                    PUSHW     X
   \   0000C0 C60000                LD        A, L:minutes
   \   0000C3 97                    LD        XL, A
   \   0000C4 89                    PUSHW     X
   \   0000C5 C60000                LD        A, L:hours
   \   0000C8 97                    LD        XL, A
   \   0000C9 89                    PUSHW     X
   \   0000CA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000CD 8D000000              CALLF     printf
   \   0000D1 5B06                  ADD       SP, #0x6
    475          
    476          
    477             Time_Display=FALSE;
   \   0000D3 725F0000              CLR       L:Time_Display
    478             sync_display=' ';
   \   0000D7 35200000              MOV       L:sync_display, #0x20
    479          
    480          
    481          }
   \   0000DB 320000                POP       S:?b8
   \   0000DE 87                    RETF
    482          

   \                                 In section .far_func.text, align 1
    483          void Power_On()
    484          {
    485            //status.auto=0;
    486            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA02                  OR        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine42
    487            status.manu=1; //Manu
    488            SaveStatus();
   \                     ??CrossCallReturnLabel_98:
   \   00000A AC000000              JPF       SaveStatus
    489            //hardware.lcdLed=1;
    490          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     ?Subroutine77
   \                     ??CrossCallReturnLabel_210:
   \   000004 AA01                  OR        A, #0x1
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine77:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 87                    RETF
    491          

   \                                 In section .far_func.text, align 1, keep-with-next
    492          void Power_Off()
    493          {
    494            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FD                  AND       A, #0xfd
   \   000006 8D000000              CALLF     ?Subroutine42
    495            status.manu=1; //Manu
    496            SaveStatus();
   \                     ??CrossCallReturnLabel_97:
   \   00000A AC000000              JPF       SaveStatus
    497             //hardware.lcdLed=0;
    498          
    499          }
    500          

   \                                 In section .far_func.text, align 1, keep-with-next
    501          void InitI2C(void)
    502          {
    503             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    504             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    505             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    506          }
    507          

   \                                 In section .far_func.text, align 1, keep-with-next
    508          bool I2C_Start(void)
    509          {
    510             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    511                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    512              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_147:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    513                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    514                  {
    515                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    516                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    517                  }
    518                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    519          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    520          

   \                                 In section .far_func.text, align 1, keep-with-next
    521          bool I2C_WA(u8 address)
    522          {
    523            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    524                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    525                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_146:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    526                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    527                   {
    528                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    529                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    530                   }
    531                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    532          }
    533          

   \                                 In section .far_func.text, align 1, keep-with-next
    534          bool I2C_RA(u8 address)
    535          {
    536            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    537                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    538                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_148:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    539                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    540                   {
    541                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    542                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    543                   }
    544                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    545          }
    546          
    547          

   \                                 In section .far_func.text, align 1, keep-with-next
    548          bool I2C_WD(u8 data)
    549          {
    550           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    551             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    552             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine52
   \                     ??CrossCallReturnLabel_145:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    553              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    554              {
    555                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    556                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    557              }
    558               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    559          }
    560          

   \                                 In section .far_func.text, align 1, keep-with-next
    561          u8 I2C_RD(void)
    562          {
    563           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    564            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    565           //while((!(I2C->SR1 & 0x40))&&timeout);
    566           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    567           {
    568             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    569             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    570           }
    571           u8 data=I2C_ReceiveData();
    572           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    573          }
    574          
    575          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine94_0
   \   000001                       ;               // Fall through to label ??Subroutine94_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    576          bool  ReadDS1307(void)
    577          {        TIM3_Cmd(DISABLE);
   \                     ReadDS1307:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     TIM3_Cmd
    578                 error=0;
   \   000005 8D000000              CALLF     ?Subroutine53
    579                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_150:
   \   000009 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   00000B 4F                    CLR       A
   \   00000C 87                    RETF
    580                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   00000D 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_144:
   \   000011 27F8                  JREQ      L:??ReadDS1307_1
    581                 if(!I2C_WD(0x00)) return FALSE;
   \   000013 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_288:
   \   000017 27F2                  JREQ      L:??ReadDS1307_1
    582                 I2C_GenerateSTOP(ENABLE);
   \   000019 8D000000              CALLF     ?Subroutine28
    583                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_56:
   \   00001D 27EC                  JREQ      L:??ReadDS1307_1
    584                 if(!I2C_RA(0xD0))return FALSE;
   \   00001F A6D0                  LD        A, #0xd0
   \   000021 8D000000              CALLF     I2C_RA
   \   000025 A100                  CP        A, #0x0
   \   000027 27E2                  JREQ      L:??ReadDS1307_1
    585                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000029 8D000000              CALLF     ?Subroutine23
    586                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_44:
   \   00002D C70000                LD        L:seconds, A
    587                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000030 8D000000              CALLF     ?Subroutine23
    588                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_43:
   \   000034 C70000                LD        L:minutes, A
    589                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000037 8D000000              CALLF     ?Subroutine23
    590                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_42:
   \   00003B C70000                LD        L:hours, A
    591                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00003E 8D000000              CALLF     ?Subroutine23
    592                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_41:
   \   000042 C70000                LD        L:days, A
    593                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000045 8D000000              CALLF     ?Subroutine23
    594                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_40:
   \   000049 C70000                LD        L:`date`, A
    595                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00004C 8D000000              CALLF     ?Subroutine23
    596                 month = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_39:
   \   000050 C70000                LD        L:month, A
    597                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000053 8D000000              CALLF     ?Subroutine33
    598                   I2C_GenerateSTOP(ENABLE);
    599                    year= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_66:
   \   000057 8D000000              CALLF     I2C_RD
   \   00005B 8D000000              CALLF     bcd2hex
   \   00005F C70000                LD        L:year, A
    600          
    601               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    602               //   u8 data1 = I2C_RD();
    603                //Last read byte by I2C slave
    604               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    605               //  I2C_GenerateSTOP(ENABLE);
    606               //  temp2= I2C_RD();
    607                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   000062 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    608                    {
    609                      seconds &= 0x7f;
   \   000067 721F0000              BRES      L:seconds, #0x7
    610                      Set_DS1307();
   \   00006B 8D000000              CALLF     Set_DS1307
    611                    }
    612                  hardware.ds1307=1;
   \                     ??ReadDS1307_2:
   \   00006F CE0000                LDW       X, L:hardware
   \   000072 01                    RRWA      X, A
   \   000073 AA01                  OR        A, #0x1
   \   000075 02                    RLWA      X, A
   \   000076 CF0000                LDW       L:hardware, X
    613                 TIM3_Cmd(ENABLE);
   \   000079 A601                  LD        A, #0x1
   \   00007B 8D000000              CALLF     TIM3_Cmd
    614                 return TRUE;
   \   00007F A601                  LD        A, #0x1
   \   000081 87                    RETF
    615          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 8D000000              CALLF     ?Subroutine75
   \                     ??CrossCallReturnLabel_204:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    616          

   \                                 In section .far_func.text, align 1, keep-with-next
    617          bool Check_DS1307(void)
    618          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    619             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    620                 error=0;
   \   000003 725F0000              CLR       L:error
    621                 if (!hardware.ds1307) return FALSE;    //If not DS1307
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A501                  BCP       A, #0x1
   \   00000D 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   00000F 4F                    CLR       A
   \   000010 2038                  JRA       L:??Check_DS1307_2
    622                 if (!I2C_Start()) return FALSE;
   \                     ??Check_DS1307_0:
   \   000012 8D000000              CALLF     I2C_Start
   \   000016 A100                  CP        A, #0x0
   \   000018 27F5                  JREQ      L:??Check_DS1307_1
    623                 if(!I2C_WA(0xD0)) return FALSE;
   \   00001A 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_143:
   \   00001E 27EF                  JREQ      L:??Check_DS1307_1
    624                 if(!I2C_WD(0x08)) return FALSE;
   \   000020 A608                  LD        A, #0x8
   \   000022 8D000000              CALLF     ??Subroutine94_0
   \                     ??CrossCallReturnLabel_291:
   \   000026 27E7                  JREQ      L:??Check_DS1307_1
    625                 I2C_GenerateSTOP(ENABLE);
   \   000028 8D000000              CALLF     ?Subroutine28
    626                  //Last read byte by I2C slave
    627                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_55:
   \   00002C 27E1                  JREQ      L:??Check_DS1307_1
    628                 if(!I2C_RA(0xD0))return FALSE;
   \   00002E A6D0                  LD        A, #0xd0
   \   000030 8D000000              CALLF     I2C_RA
   \   000034 A100                  CP        A, #0x0
   \   000036 27D7                  JREQ      L:??Check_DS1307_1
    629                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000038 8D000000              CALLF     ?Subroutine75
    630                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_205:
   \   00003C B700                  LD        S:?b8, A
    631                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00003E 8D000000              CALLF     ?Subroutine33
    632                 I2C_GenerateSTOP(ENABLE);
    633                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_67:
   \   000042 B600                  LD        A, S:?b8
   \   000044 A1AA                  CP        A, #0xaa
   \   000046 26C7                  JRNE      L:??Check_DS1307_1
    634                 else return TRUE;
   \   000048 A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00004A 320000                POP       S:?b8
   \   00004D 87                    RETF
    635          }
    636          

   \                                 In section .far_func.text, align 1, keep-with-next
    637          bool Set_DS1307()
    638          {
    639                 // convert hex or decimal to bcd format
    640          
    641          
    642                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine53
    643                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_149:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    644                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine50
   \                     ??CrossCallReturnLabel_142:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    645                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine51
   \                     ??CrossCallReturnLabel_287:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    646                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_135:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    647                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_136:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    648                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_137:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    649                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_138:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    650                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_139:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    651                 if(!I2C_WD(convert_tobcd(month))) return FALSE;
   \   000041 C60000                LD        A, L:month
   \   000044 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_140:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    652                 if(!I2C_WD(convert_tobcd(year)))return FALSE;
   \   00004A C60000                LD        A, L:year
   \   00004D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_141:
   \   000051 27B3                  JREQ      L:??Set_DS1307_1
    653                 if(!I2C_WD(DS_Control))return FALSE;
   \   000053 A610                  LD        A, #0x10
   \   000055 8D000000              CALLF     ??Subroutine94_0
   \                     ??CrossCallReturnLabel_289:
   \   000059 27AB                  JREQ      L:??Set_DS1307_1
    654                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005B A6AA                  LD        A, #0xaa
   \   00005D 8D000000              CALLF     ??Subroutine94_0
   \                     ??CrossCallReturnLabel_290:
   \   000061 27A3                  JREQ      L:??Set_DS1307_1
    655                 I2C_GenerateSTOP(ENABLE);
   \   000063 A601                  LD        A, #0x1
   \   000065 8D000000              CALLF     I2C_GenerateSTOP
    656          
    657          
    658             return TRUE;
   \   000069 A601                  LD        A, #0x1
   \   00006B 87                    RETF
    659          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    660          
    661          

   \                                 In section .far_func.text, align 1, keep-with-next
    662          u8 convert_tobcd(u8 data)
    663          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    664             u8 data_second_decimal=data/10;
    665             u8 data_first_decimal=data - 10*data_second_decimal;
    666             data=16*data_second_decimal + data_first_decimal;
    667            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    668          }
    669          

   \                                 In section .far_func.text, align 1, keep-with-next
    670          u8 bcd2hex(u8 bcd)
    671          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    672            u8 hex=0;
    673            hex=(bcd>>4)*10 +(bcd&0x0f);
    674            bcd=0;
    675            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    676          }
    677          
    678          

   \                                 In section .far_func.text, align 1, keep-with-next
    679          bool Set_Clock()
    680          {
    681              //Clear Display
    682             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine15
    683             Delay1(1000);
    684             line_lcd=0;
    685              printf("\nYear>");
    686                do
    687              {
    688               line_lcd=1;
   \                     ??CrossCallReturnLabel_27:
   \   000004 8D000000              CALLF     ?Subroutine25
    689               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_45:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:month
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:year
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000016 8D000000              CALLF     printf
   \   00001A 5B06                  ADD       SP, #0x6
    690                 year=adj(0,99,year);
   \   00001C C60000                LD        A, L:year
   \   00001F B700                  LD        S:?b1, A
   \   000021 35630000              MOV       S:?b0, #0x63
   \   000025 8D000000              CALLF     ??Subroutine87_0
    691              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_243:
   \   000029 C70000                LD        L:year, A
   \   00002C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_112:
   \   000030 27D2                  JREQ      L:??CrossCallReturnLabel_27
    692          
    693               line_lcd=0;
   \   000032 8D000000              CALLF     ?Subroutine44
    694              printf("\nMonth>");
    695                do
    696              {
    697               line_lcd=1;
   \                     ??CrossCallReturnLabel_103:
   \   000036 8D000000              CALLF     ?Subroutine25
    698               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_46:
   \   00003A 89                    PUSHW     X
   \   00003B C60000                LD        A, L:month
   \   00003E 97                    LD        XL, A
   \   00003F 89                    PUSHW     X
   \   000040 C60000                LD        A, L:year
   \   000043 97                    LD        XL, A
   \   000044 89                    PUSHW     X
   \   000045 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000048 8D000000              CALLF     printf
   \   00004C 5B06                  ADD       SP, #0x6
    699                 month=adj(1,12,month);
   \   00004E C60000                LD        A, L:month
   \   000051 B700                  LD        S:?b1, A
   \   000053 350C0000              MOV       S:?b0, #0xc
   \   000057 A601                  LD        A, #0x1
   \   000059 8D000000              CALLF     adj
   \   00005D C70000                LD        L:month, A
    700              } while (!key_ok_on());
   \   000060 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_113:
   \   000064 27D0                  JREQ      L:??CrossCallReturnLabel_103
    701          
    702              LCDInstr(0x01);
   \   000066 8D000000              CALLF     ?Subroutine16
    703               Delay1(1000);
    704                line_lcd=0;
    705              printf("\nDate>");
    706                do
    707              {
    708               line_lcd=1;
   \                     ??CrossCallReturnLabel_29:
   \   00006A 8D000000              CALLF     ?Subroutine25
    709               printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_47:
   \   00006E 89                    PUSHW     X
   \   00006F C60000                LD        A, L:month
   \   000072 97                    LD        XL, A
   \   000073 89                    PUSHW     X
   \   000074 C60000                LD        A, L:year
   \   000077 97                    LD        XL, A
   \   000078 89                    PUSHW     X
   \   000079 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007C 8D000000              CALLF     printf
   \   000080 5B06                  ADD       SP, #0x6
    710                 date=adj(1,31,date);
   \   000082 C60000                LD        A, L:`date`
   \   000085 B700                  LD        S:?b1, A
   \   000087 351F0000              MOV       S:?b0, #0x1f
   \   00008B A601                  LD        A, #0x1
   \   00008D 8D000000              CALLF     adj
   \   000091 C70000                LD        L:`date`, A
    711              } while (!key_ok_on());
   \   000094 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_114:
   \   000098 27D0                  JREQ      L:??CrossCallReturnLabel_29
    712          
    713          
    714              //Clear Display
    715             LCDInstr(0x01);
   \   00009A 8D000000              CALLF     ?Subroutine17
    716             Delay1(1000);
    717             line_lcd=0;
    718              printf("\nDays>");
   \                     ??CrossCallReturnLabel_232:
   \   00009E AE0000                LDW       X, #`?<Constant "\\nDays>">`
   \   0000A1 8D000000              CALLF     printf
    719                do
    720              {
    721                line_lcd=1;
   \                     ??Set_Clock_0:
   \   0000A5 35010000              MOV       L:line_lcd, #0x1
    722               printf("\n%02d",days);
   \   0000A9 C60000                LD        A, L:days
   \   0000AC 5F                    CLRW      X
   \   0000AD 97                    LD        XL, A
   \   0000AE 89                    PUSHW     X
   \   0000AF AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   0000B2 8D000000              CALLF     printf
   \   0000B6 5B02                  ADD       SP, #0x2
    723                 days=adj(1,7,days);
   \   0000B8 C60000                LD        A, L:days
   \   0000BB B700                  LD        S:?b1, A
   \   0000BD 35070000              MOV       S:?b0, #0x7
   \   0000C1 A601                  LD        A, #0x1
   \   0000C3 8D000000              CALLF     adj
   \   0000C7 C70000                LD        L:days, A
    724              } while (!key_ok_on());
   \   0000CA 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_115:
   \   0000CE 27D5                  JREQ      L:??Set_Clock_0
    725          
    726          
    727          
    728             //Clear Display
    729             LCDInstr(0x01);
   \   0000D0 8D000000              CALLF     ?Subroutine17
    730             Delay1(1000);
    731             line_lcd=0;
    732              printf("\nHour>");
   \                     ??CrossCallReturnLabel_233:
   \   0000D4 AE0000                LDW       X, #`?<Constant "\\nHour>">`
   \   0000D7 8D000000              CALLF     printf
    733                do
    734              {
    735                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000DB 8D000000              CALLF     ??Subroutine90_0
    736               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_255:
   \   0000DF 89                    PUSHW     X
   \   0000E0 C60000                LD        A, L:minutes
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 C60000                LD        A, L:hours
   \   0000E8 97                    LD        XL, A
   \   0000E9 89                    PUSHW     X
   \   0000EA AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000ED 8D000000              CALLF     printf
   \   0000F1 5B06                  ADD       SP, #0x6
    737                 hours=adj(0,23,hours);
   \   0000F3 C60000                LD        A, L:hours
   \   0000F6 8D000000              CALLF     ?Subroutine47
    738              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_126:
   \   0000FA 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_242:
   \   0000FE C70000                LD        L:hours, A
   \   000101 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_116:
   \   000105 27D4                  JREQ      L:??Set_Clock_1
    739          
    740               line_lcd=0;
   \   000107 725F0000              CLR       L:line_lcd
    741               printf("\nMinute>");
   \   00010B AE0000                LDW       X, #`?<Constant "\\nMinute>">`
   \   00010E 8D000000              CALLF     printf
    742                do
    743              {
    744                line_lcd=1;
   \                     ??Set_Clock_2:
   \   000112 8D000000              CALLF     ??Subroutine90_0
    745               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_256:
   \   000116 89                    PUSHW     X
   \   000117 C60000                LD        A, L:minutes
   \   00011A 97                    LD        XL, A
   \   00011B 89                    PUSHW     X
   \   00011C C60000                LD        A, L:hours
   \   00011F 97                    LD        XL, A
   \   000120 89                    PUSHW     X
   \   000121 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000124 8D000000              CALLF     printf
   \   000128 5B06                  ADD       SP, #0x6
    746                 minutes=adj(0,59,minutes);
   \   00012A C60000                LD        A, L:minutes
   \   00012D 8D000000              CALLF     ?Subroutine32
    747              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_248:
   \   000131 C70000                LD        L:minutes, A
   \   000134 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_117:
   \   000138 27D8                  JREQ      L:??Set_Clock_2
    748          
    749              line_lcd=0;
   \   00013A 725F0000              CLR       L:line_lcd
    750              printf("\nSeconds>");
   \   00013E AE0000                LDW       X, #`?<Constant "\\nSeconds>">`
   \   000141 8D000000              CALLF     printf
    751              do
    752              {
    753                line_lcd=1;
   \                     ??Set_Clock_3:
   \   000145 8D000000              CALLF     ??Subroutine90_0
    754               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_257:
   \   000149 89                    PUSHW     X
   \   00014A C60000                LD        A, L:minutes
   \   00014D 97                    LD        XL, A
   \   00014E 89                    PUSHW     X
   \   00014F C60000                LD        A, L:hours
   \   000152 97                    LD        XL, A
   \   000153 89                    PUSHW     X
   \   000154 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000157 8D000000              CALLF     printf
   \   00015B 5B06                  ADD       SP, #0x6
    755                 seconds=adj(0,59,seconds);
   \   00015D C60000                LD        A, L:seconds
   \   000160 8D000000              CALLF     ?Subroutine32
    756              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_247:
   \   000164 C70000                LD        L:seconds, A
   \   000167 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_118:
   \   00016B 27D8                  JREQ      L:??Set_Clock_3
    757          
    758                // Set parameter to DS1307 + time byte
    759                Set_DS1307();
   \   00016D 8D000000              CALLF     Set_DS1307
    760          
    761                //bool k=Check_DS1307();
    762          
    763            return TRUE;
   \   000171 A601                  LD        A, #0x1
   \   000173 87                    RETF
    764          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nMonth>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 8D000000              CALLF     ?Subroutine82
   \                     ??CrossCallReturnLabel_226:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007                       REQUIRE ??Subroutine85_0
   \   000007                       ;               // Fall through to label ??Subroutine85_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000 8D000000              CALLF     Delay1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_196:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine71
   \                     ??CrossCallReturnLabel_197:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYear>">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000 8D000000              CALLF     ?Subroutine82
   \                     ??CrossCallReturnLabel_225:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 B700                  LD        S:?b1, A
   \   000002 35170000              MOV       S:?b0, #0x17
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine87_0
   \   000006                       ;               // Fall through to label ??Subroutine87_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    765          
    766          

   \                                 In section .far_func.text, align 1, keep-with-next
    767          u8 adj(u8 min,u8 max,u8 now)
    768          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    769             u8 adj=now;
    770             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    771             {
    772               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    773               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    774             }
    775             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    776             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    777             {
    778               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    779               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    780             }
    781             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    782             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    783          
    784             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    785          }
    786          
    787          

   \                                 In section .far_func.text, align 1, keep-with-next
    788          bool key_ok_on()
    789          {
    790            //Read Key OK
    791            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_59:
   \   000004 2635                  JRNE      L:??key_ok_on_0
    792             {
    793               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    794                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_60:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    795                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 251B                  JRC       L:??key_ok_on_0
    796                 {
    797                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    798                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000024 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_61:
   \   000028 2711                  JREQ      L:??key_ok_on_0
    799                    {
    800                       beep(2000);
   \   00002A 8D000000              CALLF     ?Subroutine36
    801                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_76:
   \   00002E 2606                  JRNE      L:??key_ok_on_3
    802                        {
    803                         hardware.lcdLed=1;
   \   000030 8D000000              CALLF     ?Subroutine35
    804                         lcdLedTimer=LCDLEDON;
    805                         return FALSE;
   \                     ??CrossCallReturnLabel_71:
   \   000034 2005                  JRA       ??key_ok_on_0
    806                        }
    807                       hardware.lcdLed=1;
   \                     ??key_ok_on_3:
   \   000036 8D000000              CALLF     ?Subroutine34
    808                       lcdLedTimer=LCDLEDON;
    809          
    810                      return TRUE;   //if realease retrun true
    811                    }
    812                 }
    813             }
   \                     ??CrossCallReturnLabel_68:
   \   00003A 87                    RETF
    814          
    815            return FALSE;
   \                     ??key_ok_on_0:
   \   00003B 4F                    CLR       A
   \   00003C 87                    RETF
    816          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 AE07D0                LDW       X, #0x7d0
   \   000003 8D000000              CALLF     beep
   \   000007 CE0000                LDW       X, L:hardware
   \   00000A 9F                    LD        A, XL
   \   00000B A408                  AND       A, #0x8
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 8D000000              CALLF     ?Subroutine76
   \                     ??CrossCallReturnLabel_206:
   \   000004 A601                  LD        A, #0x1
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    817          
    818          
    819          

   \                                 In section .far_func.text, align 1, keep-with-next
    820           bool key_plus_on()
    821          {
    822            //Read Key OK
    823              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_94:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2631                  JRNE      L:??key_plus_on_0
    824               {
    825               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    826                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_86:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_93:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    827                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_plus_on_0
    828                  {
    829                    if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_63:
   \   000026 2711                  JREQ      L:??key_plus_on_0
    830                    {
    831                        beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine36
    832                        if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_78:
   \   00002C 2606                  JRNE      L:??key_plus_on_3
    833                        {
    834                         hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine35
    835                         lcdLedTimer=LCDLEDON;
    836                         return FALSE;
   \                     ??CrossCallReturnLabel_73:
   \   000032 2005                  JRA       ??key_plus_on_0
    837                        }
    838                        hardware.lcdLed=1;
   \                     ??key_plus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine34
    839                        lcdLedTimer=LCDLEDON;
    840          
    841                      return TRUE;
    842                    }
    843                  }
    844               }
   \                     ??CrossCallReturnLabel_70:
   \   000038 87                    RETF
    845          
    846            return FALSE;
   \                     ??key_plus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    847          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF
    848          
    849          

   \                                 In section .far_func.text, align 1, keep-with-next
    850            bool key_minus_on()
    851          {
    852            //Read Key OK
    853             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_96:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2631                  JRNE      L:??key_minus_on_0
    854               {
    855               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    856                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_85:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine41
   \                     ??CrossCallReturnLabel_95:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    857                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2517                  JRC       L:??key_minus_on_0
    858                  {
    859                   if (GPIO_ReadInputData(GPIOF)& key_ok)
   \   000022 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_62:
   \   000026 2711                  JREQ      L:??key_minus_on_0
    860                   {
    861                         beep(2000);
   \   000028 8D000000              CALLF     ?Subroutine36
    862                     if(!hardware.lcdLed)
   \                     ??CrossCallReturnLabel_77:
   \   00002C 2606                  JRNE      L:??key_minus_on_3
    863                       {
    864                        hardware.lcdLed=1;
   \   00002E 8D000000              CALLF     ?Subroutine35
    865                        lcdLedTimer=LCDLEDON;
    866                        return FALSE;
   \                     ??CrossCallReturnLabel_72:
   \   000032 2005                  JRA       ??key_minus_on_0
    867                       }
    868                     hardware.lcdLed=1;
   \                     ??key_minus_on_3:
   \   000034 8D000000              CALLF     ?Subroutine34
    869                     lcdLedTimer=LCDLEDON;
    870                     return TRUE;
    871                   }
    872                  }
    873               }
   \                     ??CrossCallReturnLabel_69:
   \   000038 87                    RETF
    874          
    875            return FALSE;
   \                     ??key_minus_on_0:
   \   000039 4F                    CLR       A
   \   00003A 87                    RETF
    876          }
    877          
    878          

   \                                 In section .far_func.text, align 1, keep-with-next
    879          bool  key_ok_plus()
    880          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    881            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_23:
   \   000007 2622                  JRNE      L:??key_ok_plus_0
    882            {
    883                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    884                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_87:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine13
   \                     ??CrossCallReturnLabel_24:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    885                 if (timer2>=key_time)
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_88:
   \   00001D 2504                  JRC       L:??CrossCallReturnLabel_228
    886                   hardware.lcdLed=1;
   \   00001F 8D000000              CALLF     ?Subroutine83
    887                        lcdLedTimer=LCDLEDON;
   \                     ??CrossCallReturnLabel_228:
   \   000023 35140000              MOV       L:lcdLedTimer, #0x14
    888                   return TRUE;
   \   000027 A601                  LD        A, #0x1
   \   000029 2001                  JRA       L:??key_ok_plus_3
    889            }
    890          
    891           return FALSE;
   \                     ??key_ok_plus_0:
   \   00002B 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   00002C 320000                POP       S:?b8
   \   00002F 87                    RETF
    892          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    893          
    894           /*
    895          bool Set_Timer_On()
    896          {
    897          
    898             //clr
    899             LCDInstr(0x01);
    900             Delay1(1000);
    901             line_lcd=0;
    902             printf("\nH On>");
    903              timer3=0;
    904            do
    905              {
    906               line_lcd=1;
    907               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
    908                 daily_hour_on=adj(0,23,daily_hour_on);
    909              } while ( timer3<=time_menu && !key_ok_on());
    910          
    911          
    912             LCDInstr(0x01);
    913             Delay1(1000);
    914             line_lcd=0;
    915             printf("\nMin On>");
    916              timer3=0;
    917            do
    918              {
    919               line_lcd=1;
    920               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
    921                 daily_minute_on=adj(0,59,daily_minute_on);
    922              } while ((timer3<=time_menu)&& !key_ok_on());
    923          
    924             //Save data to eeprom
    925               if (!status.monthly) status.daily=1;
    926                 else status.daily=0;
    927               EEPROM_INIT();
    928              //u8 temp =*(u8*)(&status);
    929              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    930               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    931               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    932               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    933               //FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    934               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    935                time_on=daily_hour_on*60+daily_minute_on;
    936                 change=TRUE;
    937          
    938             return TRUE;
    939          }
    940           */
    941          

   \                                 In section .far_func.text, align 1, keep-with-next
    942          bool Set_Timer_Off()
    943          {
    944          
    945              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine17
    946              Delay1(1000);
    947              line_lcd=0;
    948              printf("\nH Off>");
   \                     ??CrossCallReturnLabel_234:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off>">`
   \   000007 8D000000              CALLF     ?Subroutine45
    949               timer3=0;
    950            do
    951              {
    952               line_lcd=1;
   \                     ??CrossCallReturnLabel_105:
   \   00000B 8D000000              CALLF     ?Subroutine27
    953               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_52:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    954                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 8D000000              CALLF     ?Subroutine47
    955              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_127:
   \   000025 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_241:
   \   000029 C70000                LD        L:daily_hour_off, A
   \   00002C 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_131:
   \   000030 2406                  JRNC      L:??Set_Timer_Off_0
   \   000032 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_119:
   \   000036 27D3                  JREQ      L:??CrossCallReturnLabel_105
    956          
    957            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   000038 8D000000              CALLF     ?Subroutine17
    958             Delay1(1000);
    959             line_lcd=0;
    960             printf("\nMin Off>");
   \                     ??CrossCallReturnLabel_235:
   \   00003C AE0000                LDW       X, #`?<Constant "\\nMin Off>">`
   \   00003F 8D000000              CALLF     ?Subroutine45
    961             timer3=0;
    962            do
    963              {
    964               line_lcd=1;
   \                     ??CrossCallReturnLabel_106:
   \   000043 8D000000              CALLF     ?Subroutine27
    965               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_53:
   \   000047 89                    PUSHW     X
   \   000048 C60000                LD        A, L:daily_hour_off
   \   00004B 97                    LD        XL, A
   \   00004C 89                    PUSHW     X
   \   00004D AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000050 8D000000              CALLF     printf
   \   000054 5B04                  ADD       SP, #0x4
    966                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000056 C60000                LD        A, L:daily_minute_off
   \   000059 8D000000              CALLF     ?Subroutine32
    967              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_246:
   \   00005D C70000                LD        L:daily_minute_off, A
   \   000060 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_132:
   \   000064 2406                  JRNC      L:??Set_Timer_Off_1
   \   000066 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_120:
   \   00006A 27D7                  JREQ      L:??CrossCallReturnLabel_106
    968          
    969            //Save data to eeprom
    970               if (!status.monthly) status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006C CE0000                LDW       X, L:status
   \   00006F 9F                    LD        A, XL
   \   000070 A410                  AND       A, #0x10
   \   000072 2608                  JRNE      L:??Set_Timer_Off_2
   \   000074 CE0000                LDW       X, L:status
   \   000077 01                    RRWA      X, A
   \   000078 AA08                  OR        A, #0x8
   \   00007A 2006                  JRA       ??Set_Timer_Off_3
    971                 else status.daily=0;
   \                     ??Set_Timer_Off_2:
   \   00007C CE0000                LDW       X, L:status
   \   00007F 01                    RRWA      X, A
   \   000080 A4F7                  AND       A, #0xf7
   \                     ??Set_Timer_Off_3:
   \   000082 8D000000              CALLF     ?Subroutine1
    972               EEPROM_INIT();
    973              //u8 temp =*(u8*)(&status);
    974              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    975               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    976               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    977               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    978               //FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    979               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    980                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_1:
   \   000086 C60000                LD        A, L:daily_hour_off
   \   000089 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_251:
   \   00008D C60000                LD        A, L:daily_minute_off
   \   000090 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_238:
   \   000094 CF0000                LDW       L:time_off, X
    981                 change=TRUE;
   \   000097 35010000              MOV       L:change, #0x1
    982               return TRUE;
   \   00009B A601                  LD        A, #0x1
   \   00009D 87                    RETF
    983          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine86_0
   \   000002                       ;               // Fall through to label ??Subroutine86_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000 905F                  CLRW      Y
   \   000002 9097                  LD        YL, A
   \   000004                       REQUIRE ??Subroutine88_0
   \   000004                       ;               // Fall through to label ??Subroutine88_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000 AE003C                LDW       X, #0x3c
   \   000003                       REQUIRE ??Subroutine89_0
   \   000003                       ;               // Fall through to label ??Subroutine89_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000 BF00                  LDW       S:?w0, X
   \   000002 93                    LDW       X, Y
   \   000003 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 8D000000              CALLF     ?Subroutine79
   \                     ??CrossCallReturnLabel_215:
   \   000008 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_193:
   \   00000C CE0000                LDW       X, L:status
   \   00000F 9F                    LD        A, XL
   \   000010 AE4001                LDW       X, #0x4001
   \   000013 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_192:
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte
    984          
    985          
    986          

   \                                 In section .far_func.text, align 1, keep-with-next
    987          void SaveStatus()
    988          {
    989            EEPROM_INIT();
   \                     SaveStatus:
   \   000000 8D000000              CALLF     ?Subroutine79
    990            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   \                     ??CrossCallReturnLabel_216:
   \   000004 8D000000              CALLF     ?Subroutine56
    991            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   \                     ??CrossCallReturnLabel_159:
   \   000008 CE0000                LDW       X, L:status
   \   00000B 9F                    LD        A, XL
   \   00000C AE4001                LDW       X, #0x4001
   \   00000F 8D000000              CALLF     ?Subroutine56
    992            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_160:
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 AC000000              JPF       FLASH_Lock
    993          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_191:
   \   000004 87                    RETF
    994          
    995          

   \                                 In section .far_func.text, align 1, keep-with-next
    996          void SaveProgram ()
    997          {
   \                     SaveProgram:
   \   000000 3B0000                PUSH      S:?b8
    998               char *pp = (char*)&programpoint[0];
    999              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1000             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1001             {
   1002              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,*(pp+i));
   \                     ??SaveProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b8
   \   00000D 41                    EXG       A, XL
   \   00000E D60000                LD        A, (L:programpoint,X)
   \   000011 8D000000              CALLF     ?Subroutine55
   1003             }
   \                     ??CrossCallReturnLabel_157:
   \   000015 25F2                  JRC       L:??SaveProgram_0
   1004              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000017 A6F7                  LD        A, #0xf7
   \   000019 8D000000              CALLF     FLASH_Lock
   1005          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 1C4002                ADDW      X, #0x4002
   \   000003 8D000000              CALLF     L:?sext32_l0_x
   \   000007 8D000000              CALLF     FLASH_ProgramByte
   \   00000B B600                  LD        A, S:?b8
   \   00000D 4C                    INC       A
   \   00000E B700                  LD        S:?b8, A
   \   000010 A128                  CP        A, #0x28
   \   000012 87                    RETF
   1006          
   1007          

   \                                 In section .far_func.text, align 1, keep-with-next
   1008          void ReadProgram()
   1009          {
   \                     ReadProgram:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   1010              char *pp = (char*)&programpoint[0];
   1011            for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b10
   1012             {
   1013               *(pp+i)=FLASH_ReadByte( EEPROM_ADR_PROGRAM+i);
   \                     ??ReadProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A 41                    EXG       A, XL
   \   00000B B600                  LD        A, S:?b10
   \   00000D 41                    EXG       A, XL
   \   00000E BF00                  LDW       S:?w4, X
   \   000010 1C4002                ADDW      X, #0x4002
   \   000013 8D000000              CALLF     L:?sext32_l0_x
   \   000017 8D000000              CALLF     FLASH_ReadByte
   \   00001B BE00                  LDW       X, S:?w4
   \   00001D D70000                LD        (L:programpoint,X), A
   1014             }
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   \   000025 A128                  CP        A, #0x28
   \   000027 25E0                  JRC       L:??ReadProgram_0
   1015          }
   \   000029 320000                POP       S:?b10
   \   00002C AC000000              JPF       L:?epilogue_w4
   1016          
   1017          

   \                                 In section .far_func.text, align 1, keep-with-next
   1018          void ResetProgram()
   1019          {
   \                     ResetProgram:
   \   000000 3B0000                PUSH      S:?b8
   1020          
   1021              EEPROM_INIT();
   \   000003 8D000000              CALLF     EEPROM_INIT
   1022             for( u8 i=0;i< sizeof(programpoint);i++)
   \   000007 3F00                  CLR       S:?b8
   1023             {
   1024              FLASH_ProgramByte( EEPROM_ADR_PROGRAM+i,0);
   \                     ??ResetProgram_0:
   \   000009 5F                    CLRW      X
   \   00000A B600                  LD        A, S:?b8
   \   00000C 41                    EXG       A, XL
   \   00000D 8D000000              CALLF     ?Subroutine55
   1025             }
   \                     ??CrossCallReturnLabel_158:
   \   000011 25F6                  JRC       L:??ResetProgram_0
   1026              FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \   000013 A6F7                  LD        A, #0xf7
   \   000015 8D000000              CALLF     FLASH_Lock
   1027          
   1028               //Reload ProgrmaPoint
   1029             ReadProgram();
   \   000019 8D000000              CALLF     ReadProgram
   1030          }
   \   00001D 320000                POP       S:?b8
   \   000020 87                    RETF
   1031          

   \                                 In section .far_func.text, align 1, keep-with-next
   1032          void CheckProgramPoint()
   1033          {
   \                     CheckProgramPoint:
   \   000000 8D000000              CALLF     L:?push_w4
   1034             if(status.manu) return;
   \   000004 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_211:
   \   000008 2703                  JREQ      ??lb_5
   \   00000A CC0000                JP        L:??CheckProgramPoint_0
   1035             u16 timenow=hours*60+minutes;
   \                     ??lb_5:
   \   00000D C60000                LD        A, L:hours
   \   000010 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_252:
   \   000014 C60000                LD        A, L:minutes
   \   000017 8D000000              CALLF     ?Subroutine58
   \                     ??CrossCallReturnLabel_239:
   \   00001B BF00                  LDW       S:?w4, X
   1036             status.on=0;
   \   00001D CE0000                LDW       X, L:status
   \   000020 01                    RRWA      X, A
   \   000021 A4FD                  AND       A, #0xfd
   \   000023 02                    RLWA      X, A
   \   000024 CF0000                LDW       L:status, X
   1037              //u8 daytoday;
   1038               for( u8 i=0; i<8;i++)
   \   000027 3F00                  CLR       S:?b6
   1039               {
   1040                  //For Daily Allarm
   1041                 if(programpoint[i].day==8)
   \                     ??CheckProgramPoint_1:
   \   000029 5F                    CLRW      X
   \   00002A 41                    EXG       A, XL
   \   00002B B600                  LD        A, S:?b6
   \   00002D 41                    EXG       A, XL
   \   00002E 9093                  LDW       Y, X
   \   000030 AE0005                LDW       X, #0x5
   \   000033 8D000000              CALLF     ??Subroutine89_0
   \                     ??CrossCallReturnLabel_249:
   \   000037 1C0000                ADDW      X, #programpoint
   \   00003A BF00                  LDW       S:?w1, X
   \   00003C 92C600                LD        A, [S:?w1.w]
   \   00003F A108                  CP        A, #0x8
   \   000041 266D                  JRNE      L:??CheckProgramPoint_2
   1042                 {
   1043                  int timeon = programpoint[i].onhour * 60 + programpoint[i].onminute;
   \   000043 5C                    INCW      X
   \   000044 F6                    LD        A, (X)
   \   000045 5F                    CLRW      X
   \   000046 97                    LD        XL, A
   \   000047 9093                  LDW       Y, X
   \   000049 8D000000              CALLF     ??Subroutine88_0
   \                     ??CrossCallReturnLabel_250:
   \   00004D 9093                  LDW       Y, X
   \   00004F BE00                  LDW       X, S:?w1
   \   000051 1C0002                ADDW      X, #0x2
   \   000054 F6                    LD        A, (X)
   \   000055 5F                    CLRW      X
   \   000056 97                    LD        XL, A
   \   000057 BF00                  LDW       S:?w0, X
   \   000059 93                    LDW       X, Y
   \   00005A 72BB0000              ADDW      X, S:?w0
   \   00005E 9093                  LDW       Y, X
   1044                  int timeoff= programpoint[i].offhour * 60 + programpoint[i].offminute;
   \   000060 BE00                  LDW       X, S:?w1
   \   000062 1C0003                ADDW      X, #0x3
   \   000065 F6                    LD        A, (X)
   \   000066 5F                    CLRW      X
   \   000067 97                    LD        XL, A
   \   000068 BF00                  LDW       S:?w2, X
   \   00006A AE003C                LDW       X, #0x3c
   \   00006D BF00                  LDW       S:?w0, X
   \   00006F BE00                  LDW       X, S:?w2
   \   000071 8D000000              CALLF     L:?mul16_x_x_w0
   \   000075 BF00                  LDW       S:?w0, X
   \   000077 BE00                  LDW       X, S:?w1
   \   000079 1C0004                ADDW      X, #0x4
   \   00007C F6                    LD        A, (X)
   \   00007D 5F                    CLRW      X
   \   00007E 97                    LD        XL, A
   \   00007F BF00                  LDW       S:?w1, X
   \   000081 BE00                  LDW       X, S:?w0
   \   000083 72BB0000              ADDW      X, S:?w1
   \   000087 BF00                  LDW       S:?w0, X
   1045                      do
   1046                        {
   1047                         if (timeon == timenow)
   \                     ??CheckProgramPoint_3:
   \   000089 90B300                CPW       Y, S:?w4
   \   00008C 2611                  JRNE      L:??CheckProgramPoint_4
   1048                          {
   1049                            power = i;
   \   00008E B600                  LD        A, S:?b6
   \   000090 C70000                LD        L:power, A
   1050                            status.on=1;
   \   000093 CE0000                LDW       X, L:status
   \   000096 01                    RRWA      X, A
   \   000097 AA02                  OR        A, #0x2
   \   000099 02                    RLWA      X, A
   \   00009A CF0000                LDW       L:status, X
   1051                           break;
   \   00009D 2011                  JRA       L:??CheckProgramPoint_2
   1052                          }
   1053                         timeon ++;
   \                     ??CheckProgramPoint_4:
   \   00009F 93                    LDW       X, Y
   \   0000A0 5C                    INCW      X
   \   0000A1 9093                  LDW       Y, X
   1054                        if (timeon == 1441) timeon = 0;
   \   0000A3 90A305A1              CPW       Y, #0x5a1
   \   0000A7 2602                  JRNE      L:??CheckProgramPoint_5
   \   0000A9 905F                  CLRW      Y
   1055                        } while (!(timeon==timeoff));
   \                     ??CheckProgramPoint_5:
   \   0000AB 90B300                CPW       Y, S:?w0
   \   0000AE 26D9                  JRNE      L:??CheckProgramPoint_3
   1056                  }
   1057          
   1058                     // for Day of the Week Allarm
   1059                  else if (programpoint[i].day== days) //Point is Weekly Mode
   1060                  {
   1061          
   1062                  }
   1063                 // for Monthly Allarm
   1064                  else if (programpoint[i].day == 9)//Point is Monthly Mode
   1065                   {
   1066                   }
   1067          
   1068          
   1069               }
   \                     ??CheckProgramPoint_2:
   \   0000B0 B600                  LD        A, S:?b6
   \   0000B2 4C                    INC       A
   \   0000B3 B700                  LD        S:?b6, A
   \   0000B5 A108                  CP        A, #0x8
   \   0000B7 2403                  JRNC      ??lb_6
   \   0000B9 CC0000                JP        L:??CheckProgramPoint_1
   \                     ??lb_6:
   \                     ??CheckProgramPoint_0:
   \   0000BC AC000000              JPF       L:?epilogue_w4
   1070          
   1071          
   1072          
   1073          
   1074          }
   1075          
   1076          

   \                                 In section .far_func.text, align 1, keep-with-next
   1077          bool Read_Allarm()
   1078          {
   1079             //daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   1080              if(daily_hour_on > 24) return FALSE;
   \                     Read_Allarm:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 A119                  CP        A, #0x19
   \   000005 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   000007 4F                    CLR       A
   \   000008 87                    RETF
   1081             //daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   1082              if(daily_minute_on > 59) return FALSE;
   \                     ??Read_Allarm_0:
   \   000009 C60000                LD        A, L:daily_minute_on
   \   00000C A13C                  CP        A, #0x3c
   \   00000E 24F7                  JRNC      L:??Read_Allarm_1
   1083             //daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   1084              if(daily_hour_off > 24) return FALSE;
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 A119                  CP        A, #0x19
   \   000015 24F0                  JRNC      L:??Read_Allarm_1
   1085             //daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   1086              if(daily_hour_off > 59) return FALSE;
   1087             //monthly_year=FLASH_ReadByte(EEPROM_ADR_MONTH_YEAR);
   1088              if(monthly_year >99) return FALSE;
   \   000017 C60000                LD        A, L:monthly_year
   \   00001A A164                  CP        A, #0x64
   \   00001C 24E9                  JRNC      L:??Read_Allarm_1
   1089             //monthly_month=FLASH_ReadByte(EEPROM_ADR_MONTH_MONTH);
   1090              if(monthly_month>12) return FALSE;
   \   00001E C60000                LD        A, L:monthly_month
   \   000021 A10D                  CP        A, #0xd
   \   000023 24E2                  JRNC      L:??Read_Allarm_1
   1091             //monthly_date=FLASH_ReadByte(EEPROM_ADR_MONTH_DATE);
   1092              if(monthly_date >31) return FALSE;
   \   000025 C60000                LD        A, L:monthly_date
   \   000028 A120                  CP        A, #0x20
   \   00002A 24DB                  JRNC      L:??Read_Allarm_1
   1093            return TRUE;
   \   00002C A601                  LD        A, #0x1
   \   00002E 87                    RETF
   1094          }
   1095          

   \                                 In section .far_func.text, align 1, keep-with-next
   1096          void EEPROM_INIT()
   1097          {
   1098            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
   1099            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
   1100            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
   1101          
   1102          
   1103          
   1104          }
   1105          
   1106          

   \                                 In section .far_func.text, align 1, keep-with-next
   1107          void GpioConfiguration()
   1108          {
   1109          
   1110            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1111          
   1112            // ADC PE6 NEW PB0
   1113            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1114          
   1115            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1116            //GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   1117          
   1118            //PD0 Led
   1119            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A601                  LD        A, #0x1
   \   00001E 8D000000              CALLF     ?Subroutine64
   1120            //I2C
   1121            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_181:
   \   000022 35B00000              MOV       S:?b0, #0xb0
   \   000026 A610                  LD        A, #0x10
   \   000028 AE5005                LDW       X, #0x5005
   \   00002B 8D000000              CALLF     GPIO_Init
   1122            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \   00002F 35B00000              MOV       S:?b0, #0xb0
   \   000033 A620                  LD        A, #0x20
   \   000035 AE5005                LDW       X, #0x5005
   \   000038 8D000000              CALLF     ?Subroutine67
   1123            // Remap Pins pb4,pb5  sda,scl ;
   1124          
   1125             //Init KEY OK,PLUS,MINUS
   1126            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_188:
   \   00003C A610                  LD        A, #0x10
   \   00003E AE5019                LDW       X, #0x5019
   \   000041 8D000000              CALLF     ?Subroutine67
   1127            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_189:
   \   000045 A602                  LD        A, #0x2
   \   000047 AE5000                LDW       X, #0x5000
   \   00004A 8D000000              CALLF     ?Subroutine67
   1128            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_190:
   \   00004E A604                  LD        A, #0x4
   \   000050 AE5000                LDW       X, #0x5000
   \   000053 8D000000              CALLF     GPIO_Init
   1129          
   1130            //Init DS18b20 data pin
   1131            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_PP_HIGH_FAST);    //GPIO_MODE_OUT_OD_HIZ_FAST
   \   000057 35F00000              MOV       S:?b0, #0xf0
   \   00005B A604                  LD        A, #0x4
   \   00005D 8D000000              CALLF     ?Subroutine64
   1132          
   1133            // Power Pin
   1134             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_LOW_FAST);
   \                     ??CrossCallReturnLabel_180:
   \   000061 35E00000              MOV       S:?b0, #0xe0
   \   000065 A608                  LD        A, #0x8
   \   000067 8D000000              CALLF     ?Subroutine64
   1135          
   1136            // lcdLed Pin
   1137             GPIO_Init(GPIOB,lcdLed,GPIO_MODE_OUT_OD_LOW_SLOW);//GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_179:
   \   00006B 35800000              MOV       S:?b0, #0x80
   \   00006F A601                  LD        A, #0x1
   \   000071 AE5005                LDW       X, #0x5005
   \   000074 AC000000              JPF       GPIO_Init
   1138          
   1139          
   1140          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_Init
   1141          

   \                                 In section .far_func.text, align 1, keep-with-next
   1142          void InitClk()
   1143          {
   1144            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1145            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1146            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1147            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1148            CLK_SOURCE_HSI,       // Switch to internal timer.
   1149            DISABLE,              // Disable the clock switch interrupt.
   1150            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1151          
   1152            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine65
   1153            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER3 , ENABLE);
   \                     ??CrossCallReturnLabel_182:
   \   000027 A606                  LD        A, #0x6
   \   000029 8D000000              CALLF     ?Subroutine65
   1154            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_183:
   \   00002D A603                  LD        A, #0x3
   \   00002F 8D000000              CALLF     ?Subroutine65
   1155            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_184:
   \   000033 A613                  LD        A, #0x13
   \   000035 8D000000              CALLF     ?Subroutine65
   1156            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_185:
   \   000039 4F                    CLR       A
   \   00003A AC000000              JPF       CLK_PeripheralClockConfig
   1157          
   1158          
   1159          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1160          
   1161          
   1162          /*
   1163          void InitAdc()
   1164          {
   1165               ADC1_DeInit();
   1166               ADC1_StartConversion();
   1167          
   1168               //ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1169               //           ADC1_CHANNEL_0,
   1170               //           ADC1_PRESSEL_FCPU_D4,
   1171               //            ADC1_EXTTRIG_TIM,
   1172          
   1173          
   1174               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   1175               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1176                                      ADC1_CHANNEL_0,
   1177                                      ADC1_ALIGN_RIGHT
   1178                                     );
   1179          
   1180          
   1181               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   1182          
   1183          
   1184               //ADC1_Cmd (ENABLE);
   1185               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1186               ADC1_StartConversion();
   1187               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   1188          
   1189          }
   1190          */
   1191          
   1192          
   1193          
   1194          /*
   1195          void InitUart()
   1196          {
   1197             UART2_DeInit();
   1198             UART2_Init((u32)9600,
   1199                        UART2_WORDLENGTH_8D,
   1200                        UART2_STOPBITS_1,
   1201                        UART2_PARITY_NO,
   1202                        UART2_SYNCMODE_CLOCK_DISABLE,
   1203                        UART2_MODE_TXRX_ENABLE
   1204                          );
   1205          
   1206             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1207             UART2_Cmd(ENABLE);
   1208          
   1209            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1210          }
   1211            */
   1212          
   1213          
   1214          /*
   1215          void SendChar( u8 Char)
   1216          {
   1217             UART2->DR = Char;
   1218            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   1219          }
   1220          
   1221           */
   1222          
   1223           /*
   1224          void Send_Hello()
   1225          {
   1226            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1227             Delay1(10);
   1228             sprintf(data,"Hello");
   1229              u8 i=0;
   1230            do
   1231           {
   1232            SendChar(data[i++]);
   1233           } while (data[i]!=0);
   1234            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1235            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1236          
   1237          
   1238          
   1239          }
   1240          
   1241          
   1242          
   1243          
   1244          
   1245          void SendData()
   1246          {
   1247           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1248            Delay1(10);
   1249            u8 i=0;
   1250            sprintf(data,"%d %c",adcdata,0x0d);
   1251           do
   1252           {
   1253             SendChar(data[i++]);
   1254          
   1255           } while (data[i]!=0);
   1256             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1257            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1258            rx_data=0;
   1259          }
   1260          */
   1261          
   1262          
   1263           /*
   1264          u16 Average()
   1265          {
   1266           //Find average in measure
   1267            u8 i=0;
   1268            u16 Summa=0;
   1269            do
   1270            {
   1271             Summa+=measure[i++];
   1272            } while ( measure[i]!=0);
   1273             if(i!=0) Summa=Summa/i;
   1274             return Summa;
   1275          }
   1276             */
   1277          

   \                                 In section .far_func.text, align 1, keep-with-next
   1278          void LCDDataOut(u8 data)
   1279          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1280            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_15:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_277
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine93_0
   1281            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_277:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_14:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_278
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine93_0
   1282            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_278:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_13:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_279
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine93_0
   1283            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_279:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine8
   \                     ??CrossCallReturnLabel_12:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_280
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine93_0
   1284          }
   \                     ??CrossCallReturnLabel_280:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_286:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1285          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000 8D000000              CALLF     ?Subroutine82
   \                     ??CrossCallReturnLabel_224:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine93_0
   \   000002                       ;               // Fall through to label ??Subroutine93_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1286          void InitLcd()
   1287          {
   1288           LCD_EN(0);
   \                     InitLcd:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine9
   1289            LCD_RW(0);
   1290            LCD_RS(0);
   \                     ??CrossCallReturnLabel_17:
   \   000006 8D000000              CALLF     ?Subroutine10
   1291            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_275:
   \   00000A AE0FA0                LDW       X, #0xfa0
   \   00000D 8D000000              CALLF     ?Subroutine14
   1292          
   1293            LCDInstrNibble(0x03);
   1294             Delay1(10);
   1295            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_26:
   \   000011 A603                  LD        A, #0x3
   \   000013 8D000000              CALLF     LCDInstrNibble
   1296             Delay1(10);
   \   000017 AE000A                LDW       X, #0xa
   \   00001A 8D000000              CALLF     ?Subroutine14
   1297            LCDInstrNibble(0x03);
   1298             Delay1(10);
   1299          
   1300             //Line 4
   1301            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_25:
   \   00001E A602                  LD        A, #0x2
   \   000020 8D000000              CALLF     LCDInstrNibble
   1302            LCDInstrNibble(0x02);
   \   000024 A602                  LD        A, #0x2
   \   000026 8D000000              CALLF     LCDInstrNibble
   1303            LCDInstrNibble(0x08);
   \   00002A A608                  LD        A, #0x8
   \   00002C 8D000000              CALLF     LCDInstrNibble
   1304            Delay1(100);
   \   000030 AE0064                LDW       X, #0x64
   \   000033 8D000000              CALLF     Delay1
   1305          
   1306            LCDInstr(0x0C);
   \   000037 A60C                  LD        A, #0xc
   \   000039 8D000000              CALLF     LCDInstr
   1307            Delay1(10);
   \   00003D AE000A                LDW       X, #0xa
   \   000040 8D000000              CALLF     Delay1
   1308          
   1309            LCDInstr(0x01) ;
   \   000044 8D000000              CALLF     ?Subroutine19
   1310            Delay1(250);
   1311          
   1312            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_31:
   \   000048 A606                  LD        A, #0x6
   \   00004A 8D000000              CALLF     LCDInstr
   1313            Delay1(10);
   \   00004E AE000A                LDW       X, #0xa
   \   000051 AC000000              JPF       Delay1
   1314          
   1315          
   1316          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_203:
   \   000004 AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_284:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_283:
   \   00000A 87                    RETF
   1317          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine93_0
   \                     ??CrossCallReturnLabel_281:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_231:
   \   00000D                       REQUIRE ??Subroutine84_0
   \   00000D                       ;               // Fall through to label ??Subroutine84_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_230:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   1318          void LCDInstr(u8 Instr)
   1319          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1320            LCD_RS(0);
   \   000005 8D000000              CALLF     ?Subroutine10
   1321            LCD_RW(0);
   \                     ??CrossCallReturnLabel_273:
   \   000009 2000                  JRA       ?Subroutine0
   1322            LCDDataOut(Instr>>4);
   1323            PulseEnable();
   1324            LCDDataOut(Instr & 0x0F);
   1325            PulseEnable();
   1326          }
   1327          

   \                                 In section .far_func.text, align 1, keep-with-next
   1328          void LCDData(u8 Data)
   1329          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1330            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine8
   1331            LCD_RW(0);
   \                     ??CrossCallReturnLabel_11:
   \   00000B                       REQUIRE ?Subroutine0
   \   00000B                       ;               // Fall through to label ?Subroutine0
   1332            LCDDataOut(Data>>4);
   1333            PulseEnable() ;
   1334            LCDDataOut(Data & 0x0F) ;
   1335            PulseEnable();
   1336          }
   1337          

   \                                 In section .far_func.text, align 1, keep-with-next
   1338          void LCDInstrNibble(u8 Instr)
   1339          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1340            LCD_RS(0);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine9
   1341            LCD_RW(0);
   1342            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_16:
   \   00000B AC000000              JPF       ??Subroutine84_0
   1343            PulseEnable();
   1344          }
   1345          

   \                                 In section .far_func.text, align 1, keep-with-next
   1346          void PulseEnable(void)
   1347          {
   1348            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine4
   1349             Delay1(1);
   1350            LCD_EN(1);
   1351             Delay1(1);
   1352            LCD_EN(0);
   \                     ??CrossCallReturnLabel_4:
   \   000004 A608                  LD        A, #0x8
   \   000006 8D000000              CALLF     ??Subroutine93_0
   1353             Delay1(1);
   \                     ??CrossCallReturnLabel_276:
   \   00000A 5F                    CLRW      X
   \   00000B 5C                    INCW      X
   \   00000C AC000000              JPF       Delay1
   1354          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine72
   \                     ??CrossCallReturnLabel_285:
   \   000006 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_264:
   \   00000A A608                  LD        A, #0x8
   \   00000C AE500A                LDW       X, #0x500a
   \   00000F 8D000000              CALLF     GPIO_WriteHigh
   \   000013 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_263:
   \   000017 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1355          

   \                                 In section .far_func.text, align 1, keep-with-next
   1356          void LCD_Busy(void)
   1357          {
   1358             //set Port D7 as Input
   1359             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1360             //Set Read
   1361             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine8
   1362             LCD_RS(0);
   \                     ??CrossCallReturnLabel_10:
   \   000013 8D000000              CALLF     ?Subroutine10
   1363             // Read Busy Flag
   1364                timer2=0;
   \                     ??CrossCallReturnLabel_274:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1365             do
   1366             {
   1367             // Enable set
   1368               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine4
   1369                Delay1(1);
   1370               LCD_EN(1);
   1371                Delay1(1);
   1372             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_5:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1373                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1374                //Clear read
   1375              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine93_0
   1376             //set Port D7 as Output
   1377             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_282:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1378          
   1379          }
   1380          
   1381          

   \                                 In section .far_func.text, align 1, keep-with-next
   1382          void LCD(u8 data)
   1383           {
   \                     LCD:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1384             //  static u8 linet=0;
   1385          
   1386          
   1387               if (data =='\n')     //r
   \   000006 A10A                  CP        A, #0xa
   \   000008 2674                  JRNE      L:??CrossCallReturnLabel_261
   1388               {
   1389          
   1390                   switch(line_lcd)
   \   00000A C60000                LD        A, L:line_lcd
   \   00000D 270B                  JREQ      L:??LCD_0
   \   00000F 4A                    DEC       A
   \   000010 272C                  JREQ      L:??LCD_1
   \   000012 4A                    DEC       A
   \   000013 2735                  JREQ      L:??LCD_2
   \   000015 4A                    DEC       A
   \   000016 273E                  JREQ      L:??LCD_3
   \   000018 2046                  JRA       L:??LCD_4
   1391                   {
   1392                   case 0:
   1393                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   00001A A680                  LD        A, #0x80
   \   00001C 8D000000              CALLF     LCDInstr
   1394                      for( u8 i=0;i<8;i++)
   \   000020 3F00                  CLR       S:?b8
   1395                      {
   1396                       LCDInstr(0x80 | i);
   \                     ??LCD_5:
   \   000022 B600                  LD        A, S:?b8
   \   000024 AA80                  OR        A, #0x80
   \   000026 8D000000              CALLF     LCDInstr
   1397                        LCDData(' ');      //Erase Line
   \   00002A A620                  LD        A, #0x20
   \   00002C 8D000000              CALLF     ?Subroutine7
   1398                         Delay1(1);
   1399                      }
   \                     ??CrossCallReturnLabel_258:
   \   000030 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_36:
   \   000034 25EC                  JRC       L:??LCD_5
   1400                     LCDInstr(0x80 | 0x00);
   \   000036 A680                  LD        A, #0x80
   \   000038 8D000000              CALLF     ?Subroutine73
   1401                     count=0;
   1402                     break;
   \                     ??CrossCallReturnLabel_198:
   \   00003C 2022                  JRA       L:??LCD_4
   1403                   case 1:
   1404                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   00003E A6C0                  LD        A, #0xc0
   \   000040 8D000000              CALLF     LCDInstr
   1405                     count=20;
   \   000044 35140000              MOV       L:count, #0x14
   1406                     break;
   \   000048 2016                  JRA       L:??LCD_4
   1407                   case 2:
   1408                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00004A A694                  LD        A, #0x94
   \   00004C 8D000000              CALLF     LCDInstr
   1409                     count=40;
   \   000050 35280000              MOV       L:count, #0x28
   1410                     break;
   \   000054 200A                  JRA       L:??LCD_4
   1411                   case 3:
   1412                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000056 A6D4                  LD        A, #0xd4
   \   000058 8D000000              CALLF     LCDInstr
   1413                     count=60;
   \   00005C 353C0000              MOV       L:count, #0x3c
   1414                     break;
   1415                   //default:
   1416                    //  LCDInstr(0x80 |0x40);    //Line 1
   1417                    }
   1418                   line_lcd++;
   \                     ??LCD_4:
   \   000060 C60000                LD        A, L:line_lcd
   \   000063 4C                    INC       A
   \   000064 C70000                LD        L:line_lcd, A
   1419                   if (line_lcd>=5)
   \   000067 A105                  CP        A, #0x5
   \   000069 250F                  JRC       L:??LCD_6
   1420                   {
   1421                    line_lcd=1;   //line >=5
   \   00006B 35010000              MOV       L:line_lcd, #0x1
   1422                    LCDInstr(0x01); //Clear LCD
   \   00006F 8D000000              CALLF     ?Subroutine82
   1423                    Delay1(2500);
   \                     ??CrossCallReturnLabel_227:
   \   000073 AE09C4                LDW       X, #0x9c4
   \   000076 8D000000              CALLF     Delay1
   1424                   }
   1425          
   1426                   Delay1(1);
   \                     ??LCD_6:
   \   00007A 8D000000              CALLF     ??Subroutine91_0
   1427          
   1428          
   1429               }
   1430          
   1431          
   1432               if (count==20)
   \                     ??CrossCallReturnLabel_261:
   \   00007E C60000                LD        A, L:count
   \   000081 A114                  CP        A, #0x14
   \   000083 260A                  JRNE      L:??LCD_7
   1433                {
   1434                  LCDInstr(0x80 | 0x40);
   \   000085 A6C0                  LD        A, #0xc0
   \                     ??LCD_8:
   \   000087 8D000000              CALLF     LCDInstr
   1435                  Delay1(1);
   \                     ??LCD_9:
   \   00008B 5F                    CLRW      X
   \   00008C 5C                    INCW      X
   \   00008D 2020                  JRA       ??CrossCallReturnLabel_201
   1436                }
   1437                   else if(count==40)
   \                     ??LCD_7:
   \   00008F A128                  CP        A, #0x28
   \   000091 2604                  JRNE      L:??LCD_10
   1438                  {
   1439                    LCDInstr(0x80 | 0x14);
   \   000093 A694                  LD        A, #0x94
   \   000095 20F0                  JRA       ??LCD_8
   1440                    Delay1(1);
   1441                  }
   1442                    else if(count==60)
   \                     ??LCD_10:
   \   000097 A13C                  CP        A, #0x3c
   \   000099 2608                  JRNE      L:??LCD_11
   1443                    {
   1444                      LCDInstr(0x80 | 0x54);
   \   00009B A6D4                  LD        A, #0xd4
   \   00009D 8D000000              CALLF     ?Subroutine73
   1445                      count=0;
   1446                      Delay1(1);
   \                     ??CrossCallReturnLabel_199:
   \   0000A1 20E8                  JRA       ??LCD_9
   1447                    }
   1448                      else if(count >80)
   \                     ??LCD_11:
   \   0000A3 A151                  CP        A, #0x51
   \   0000A5 250C                  JRC       L:??LCD_12
   1449                        {
   1450                          count=0;
   \   0000A7 725F0000              CLR       L:count
   1451                          LCDInstr(0x01); //Clear LCD
   \   0000AB 8D000000              CALLF     ?Subroutine74
   1452                          Delay1(250);
   1453                        }
   \                     ??CrossCallReturnLabel_201:
   \   0000AF 8D000000              CALLF     Delay1
   1454          
   1455               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   0000B3 B600                  LD        A, S:?b9
   \   0000B5 A11C                  CP        A, #0x1c
   \   0000B7 250B                  JRC       L:??LCD_13
   1456               {
   1457                 LCDData(data);
   \   0000B9 8D000000              CALLF     ?Subroutine7
   1458                  Delay1(1);
   1459                 count++;
   \                     ??CrossCallReturnLabel_259:
   \   0000BD C60000                LD        A, L:count
   \   0000C0 4C                    INC       A
   \   0000C1 C70000                LD        L:count, A
   1460               }
   1461           }
   \                     ??LCD_13:
   \   0000C4 AC000000              JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine91_0
   \   000004                       ;               // Fall through to label ??Subroutine91_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_265:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 B600                  LD        A, S:?b8
   \   000002 4C                    INC       A
   \   000003 B700                  LD        S:?b8, A
   \   000005 A108                  CP        A, #0x8
   \   000007 87                    RETF
   1462          

   \                                 In section .far_func.text, align 1, keep-with-next
   1463          void InitDelayTimer2()
   1464          {
   1465             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1466             //Tclock 16/8=2Mhz  /20 10us
   1467                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1468                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1469                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1470                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1471                 TIM2_Cmd(ENABLE); //Enable TIM2
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1472          
   1473          }
   1474          

   \                                 In section .far_func.text, align 1, keep-with-next
   1475          void InitDelayTimer3()
   1476          {
   1477             //Timer 3 use for 1s Delay
   1478             //Tclock 16000000/1024=15626
   1479                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1480                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1481                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1482                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 AC000000              JPF       TIM3_ITConfig
   1483          
   1484               // TIM3_Cmd(ENABLE);  //Enable TIM3
   1485          
   1486          }
   1487          
   1488          
   1489          
   1490          

   \                                 In section .far_func.text, align 1, keep-with-next
   1491          bool DS18_Write(u8 data)
   1492          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1493            disableInterrupts();
   \   000006 9B                    SIM
   1494            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1495            {
   1496             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine12
   1497             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1498             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_22:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_272
   \   00001A 8D000000              CALLF     ?Subroutine18
   1499               //else DS18(0);
   1500             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_272:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1501             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine18
   1502             //Delay1(0);
   1503            }
   \                     ??CrossCallReturnLabel_271:
   \   000029 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_37:
   \   00002D 25DA                  JRC       L:??DS18_Write_0
   1504            enableInterrupts();
   \   00002F 9A                    RIM
   1505            return TRUE;
   \   000030 A601                  LD        A, #0x1
   \   000032 AC000000              JPF       L:?epilogue_w4
   1506          
   1507          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine92_0
   \   000002                       ;               // Fall through to label ??Subroutine92_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_194:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 AC000000              JPF       GPIO_WriteLow
   1508          
   1509          

   \                                 In section .far_func.text, align 1, keep-with-next
   1510          u8  DS18_Read()
   1511          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1512              //Init DS18b20 data pin as Input
   1513          
   1514            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1515              disableInterrupts();    //01.10.2013
   \   000006 9B                    SIM
   1516            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1517            {
   1518              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine12
   1519              Delay_us(1); //Start time slot 4,5 us
   1520              DS18(1);
   \                     ??CrossCallReturnLabel_21:
   \   00000D 8D000000              CALLF     ?Subroutine18
   1521              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_269:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1522              //Delay1(0);
   1523             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_35:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1524              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1525              //  DS18(1);  // Next bit
   1526             // Delay1(0);
   1527          
   1528            }
   \   00003D 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_38:
   \   000041 25C6                  JRC       L:??DS18_Read_0
   1529              enableInterrupts();
   \   000043 9A                    RIM
   1530              //Init DS18b20 data pin
   1531             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1532             return data;
   \   000044 B600                  LD        A, S:?b9
   \   000046 AC000000              JPF       L:?epilogue_w4
   1533          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1534          

   \                                 In section .far_func.text, align 1, keep-with-next
   1535          bool DS18_Reset()
   1536          {
   1537             //Init Reset Pulse
   1538              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine70
   1539              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_195:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1540              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine18
   1541              //Delay1(1);
   1542              timer2=0;
   \                     ??CrossCallReturnLabel_270:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1543              while ((timer2 < TIMEOUT_DS18B20) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_79:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_33:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1544              if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_80:
   \   000023 2506                  JRC       L:??DS18_Reset_2
   1545              {
   1546                hardware.ds18B20=0;
   \                     ??DS18_Reset_3:
   \   000025 8D000000              CALLF     ?Subroutine39
   1547                return FALSE;
   \                     ??CrossCallReturnLabel_89:
   \   000029 4F                    CLR       A
   \   00002A 87                    RETF
   1548              }
   1549          
   1550              timer2=0; // Then Wait for Release bus set to One
   \                     ??DS18_Reset_2:
   \   00002B 5F                    CLRW      X
   \   00002C CF0000                LDW       L:timer2, X
   1551               while ((timer2 < TIMEOUT_DS18B20) && (!GPIO_ReadInputPin(GPIOD, ds18_data)));;
   \                     ??DS18_Reset_4:
   \   00002F 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_81:
   \   000033 2406                  JRNC      L:??DS18_Reset_5
   \   000035 8D000000              CALLF     ?Subroutine20
   \                     ??CrossCallReturnLabel_34:
   \   000039 27F4                  JREQ      L:??DS18_Reset_4
   1552                if (timer2>=TIMEOUT_DS18B20)
   \                     ??DS18_Reset_5:
   \   00003B 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_82:
   \   00003F 24E4                  JRNC      L:??DS18_Reset_3
   1553                 {
   1554                  hardware.ds18B20=0;
   1555                  return FALSE;
   1556                 }
   1557          
   1558              // Delay1(10);
   1559              //Delay1(20);    //25=524us
   1560               hardware.ds18B20=1;
   \   000041 8D000000              CALLF     ?Subroutine40
   1561              return TRUE;
   \                     ??CrossCallReturnLabel_91:
   \   000045 A601                  LD        A, #0x1
   \   000047 87                    RETF
   1562          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A303E8                CPW       X, #0x3e8
   \   000006 87                    RETF
   1563          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1564          u8 temperature ()
   1565          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1566          
   1567             //Init Reset Pulse
   1568               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_177:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1569             //Skip ROM Command 0xCC
   1570              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine62
   1571             //Function command  CONVERT T [44h]
   1572              DS18_Write(0x44);
   1573              //Wait util end convert
   1574              timer2=0;
   1575               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_172:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_84:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_172
   1576                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??temperature_1
   1577               //u8 temp8=timer2;
   1578              //Init Reset Pulse
   1579              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_178:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1580              // Skip ROM Command 0xCC
   1581              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine61
   1582              //Function command READ SCRATCHPAD [BEh]
   1583              DS18_Write(0xBE);
   1584               u8 temp1=DS18_Read();
   1585               u8 temp2=DS18_Read();
   1586              DS18_Reset();
   \                     ??CrossCallReturnLabel_170:
   \   000033 8D000000              CALLF     DS18_Reset
   1587                u16 result = temp2*256+temp1;
   1588                temp1= (u8)(result>>3);
   1589               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_3:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1590          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000 8D000000              CALLF     ?Subroutine81
   \                     ??CrossCallReturnLabel_221:
   \   000004 A644                  LD        A, #0x44
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 5F                    CLRW      X
   \   00000B CF0000                LDW       L:timer2, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 AC000000              JPF       DS18_Write

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     ?Subroutine81
   \                     ??CrossCallReturnLabel_220:
   \   000004 A6BE                  LD        A, #0xbe
   \   000006 8D000000              CALLF     DS18_Write
   \   00000A 8D000000              CALLF     DS18_Read
   \   00000E B700                  LD        S:?b8, A
   \   000010 8D000000              CALLF     DS18_Read
   \   000014 B700                  LD        S:?b9, A
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 90BF00                LDW       S:?w0, Y
   \   00000F 72BB0000              ADDW      X, S:?w0
   \   000013 54                    SRLW      X
   \   000014 54                    SRLW      X
   \   000015 54                    SRLW      X
   \   000016 9F                    LD        A, XL
   \   000017 87                    RETF
   1591          

   \                                 In section .far_func.text, align 1, keep-with-next
   1592          bool Read_DS18()
   1593          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1594          
   1595             //Init Reset Pulse
   1596               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_175:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1597             //Skip ROM Command 0xCC
   1598              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine62
   1599             //Function command  CONVERT T [44h]
   1600              DS18_Write(0x44);
   1601              //Wait util end convert
   1602              timer2=0;
   1603               while ((timer2 < TIMEOUT_DS18B20) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_171:
   \   000013 8D000000              CALLF     ?Subroutine37
   \                     ??CrossCallReturnLabel_83:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_171
   1604                if (timer2>TIMEOUT_DS18B20) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A303E9                CPW       X, #0x3e9
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1605               //u8 temp8=timer2;
   1606              //Init Reset Pulse
   1607              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_176:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1608              // Skip ROM Command 0xCC
   1609              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine61
   1610              //Function command READ SCRATCHPAD [BEh]
   1611              DS18_Write(0xBE);
   1612               u8 temp1=DS18_Read();
   1613               u8 temp2=DS18_Read();
   1614               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_169:
   \   000033 8D000000              CALLF     ?Subroutine66
   1615               u8 temp4=DS18_Read();
   1616               u8 temp5=DS18_Read();
   1617               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_187:
   \   000037 8D000000              CALLF     ?Subroutine66
   1618               u8 temp7=DS18_Read();
   1619               u8 temp8=DS18_Read();
   1620               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_186:
   \   00003B 8D000000              CALLF     DS18_Read
   1621          
   1622               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1623          
   1624                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1625                result2=0;
   \   000047 725F0000              CLR       L:result2
   1626                u16 result = temp2*256+temp1;
   1627                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_2:
   \   00004F C70000                LD        L:result1, A
   1628                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1629                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1630          
   1631          
   1632                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1633               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1634               //line_lcd=1;
   1635               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1636               // while (!key_ok_on());
   1637          
   1638               //u8 temp3=DS18_Read();
   1639          
   1640              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1641          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1642          

   \                                 In section .far_func.text, align 1, keep-with-next
   1643          bool DS18Set ()
   1644          {
   1645               //Init Reset Pulse
   1646              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_173:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \                     ??DS18Set_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1647             //Skip ROM Command 0xCC
   1648              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 8D000000              CALLF     ?Subroutine81
   1649             //Function command  WRITE SCRATCHPAD 0x4E
   1650              DS18_Write(0x4E);
   \                     ??CrossCallReturnLabel_223:
   \   00000C A64E                  LD        A, #0x4e
   \   00000E 8D000000              CALLF     DS18_Write
   1651             //Write 3 bytes last is config reg
   1652              DS18_Write(125);
   \   000012 A67D                  LD        A, #0x7d
   \   000014 8D000000              CALLF     DS18_Write
   1653              DS18_Write(0xDC); //-55
   \   000018 A6DC                  LD        A, #0xdc
   \   00001A 8D000000              CALLF     DS18_Write
   1654              DS18_Write(0x1F);
   \   00001E A61F                  LD        A, #0x1f
   \   000020 8D000000              CALLF     DS18_Write
   1655          
   1656             //Init Reset Pulse
   1657              if(!DS18_Reset()) return FALSE;
   \   000024 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_174:
   \   000028 27DC                  JREQ      L:??DS18Set_1
   1658              //Skip ROM Command 0xCC
   1659              DS18_Write(0xCC);
   \   00002A 8D000000              CALLF     ?Subroutine81
   1660              //Function   Store in Conf Reg
   1661              DS18_Write(0x48);
   \                     ??CrossCallReturnLabel_222:
   \   00002E A648                  LD        A, #0x48
   \   000030 8D000000              CALLF     DS18_Write
   1662          
   1663          
   1664          
   1665          
   1666          
   1667          
   1668            return TRUE;
   \   000034 A601                  LD        A, #0x1
   \   000036 87                    RETF
   1669          }
   1670          
   1671          
   1672          
   1673          
   1674          
   1675          
   1676          
   1677          

   \                                 In section .far_func.text, align 1, keep-with-next
   1678          void Delay1(u16 Delay)
   1679          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1680              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1681            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1682            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1683          }
   \   00000D 87                    RETF
   1684          

   \                                 In section .far_func.text, align 1, keep-with-next
   1685           void Delay2(u16 Delay)
   1686          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1687            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1688            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1689          }
   \   00000D 87                    RETF
   1690          
   1691          

   \                                 In section .far_func.text, align 1, keep-with-next
   1692          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1693          {
   1694            //disableInterrupts();
   1695            do
   1696              {
   1697                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1698                nop();
   \   000001 9D                    NOP
   1699              }
   1700              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1701            //enableInterrupts();
   1702          }
   \   000005 87                    RETF
   1703          
   1704          

   \                                 In section .far_func.text, align 1, keep-with-next
   1705          void Display_Line(char* line)
   1706          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1707            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1708            u8 count;
   1709              //Set Cursor to First Line
   1710             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1711             count=0;
   \   000010 3F00                  CLR       S:?b10
   1712             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine91_0
   1713            do
   1714            {
   1715          
   1716              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_262:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1717               {
   1718                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine7
   1719                  Delay1(1);
   1720                 count++;
   \                     ??CrossCallReturnLabel_260:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1721               }
   1722               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1723            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_262
   1724          
   1725             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1726          
   1727          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1728          

   \                                 In section .far_func.text, align 1, keep-with-next
   1729          void Rotate_Line( char * line)
   1730          {
   1731          
   1732             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1733             char temp_next;
   1734          
   1735             do
   1736             {
   1737                temp_next=*(line+1);
   1738               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1739                //line++;
   1740                //temp_next=*line;
   1741               //*line=*line++;
   1742             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1743             line--;
   1744             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1745          
   1746          }
   \   000012 87                    RETF
   1747          

   \                                 In section .far_func.text, align 1, keep-with-next
   1748          void Clear_Line1 ()
   1749          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1750               //Set Cursor to First Line
   1751             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine6
   1752             count=0;
   1753             Delay1(1);
   1754              u8 count=0;
   1755             do
   1756             {
   1757               LCDData(' ');
   \                     ??CrossCallReturnLabel_9:
   \   000009 8D000000              CALLF     ?Subroutine5
   1758                  Delay1(1);
   1759                  count++;
   1760             }while (count<8);
   \                     ??CrossCallReturnLabel_7:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_9
   1761          
   1762          
   1763          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine73
   \                     ??CrossCallReturnLabel_200:
   \   000004 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_267:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_266:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1764          

   \                                 In section .far_func.text, align 1, keep-with-next
   1765          void Clear_Line2 ()
   1766          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1767               //Set Cursor to Second  Line
   1768             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine6
   1769             count=0;
   1770             Delay1(1);
   1771              u8 count=0;
   1772             do
   1773             {
   1774               LCDData(' ');
   \                     ??CrossCallReturnLabel_8:
   \   000009 8D000000              CALLF     ?Subroutine5
   1775                  Delay1(1);
   1776                  count++;
   1777             }while (count<8);
   \                     ??CrossCallReturnLabel_6:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_8
   1778          
   1779          
   1780          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1781          
   1782          
   1783          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000 8D000000              CALLF     pressKey
   \   000004 C60000                LD        A, L:button
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1784          void FirstMenu()
   1785          {
   1786                // Clear Display
   1787              LCDInstr(0x01); //Clear LCD
   \                     FirstMenu:
   \   000000 8D000000              CALLF     ?Subroutine74
   \                     ??CrossCallReturnLabel_202:
   \   000004 8D000000              CALLF     ??Subroutine85_0
   1788              Delay1(250);
   1789          
   1790                line_lcd=0;
   1791                printf("\nManuAuto");
   \                     ??CrossCallReturnLabel_236:
   \   000008 AE0000                LDW       X, #`?<Constant "\\nManuAuto">`
   \   00000B 8D000000              CALLF     printf
   1792                line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine29
   1793                 if (!status.manu)
   \                     ??CrossCallReturnLabel_57:
   \   000013 2605                  JRNE      L:??FirstMenu_0
   1794                printf( "\nAuto");
   \   000015 AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \   000018 2003                  JRA       ??FirstMenu_1
   1795                 else  printf("\nManu");
   \                     ??FirstMenu_0:
   \   00001A AE0000                LDW       X, #`?<Constant "\\nManu">`
   \                     ??FirstMenu_1:
   \   00001D 8D000000              CALLF     printf
   1796          
   1797                 do
   1798                 {
   1799                 pressKey();
   \                     ??FirstMenu_2:
   \   000021 8D000000              CALLF     ?Subroutine80
   1800          
   1801                  if(button==2)      // Plus Button
   \                     ??CrossCallReturnLabel_219:
   \   000025 A102                  CP        A, #0x2
   \   000027 262C                  JRNE      L:??FirstMenu_3
   1802                  {
   1803                    if(status.manu) status.manu=0;
   \   000029 CE0000                LDW       X, L:status
   \   00002C 9F                    LD        A, XL
   \   00002D A401                  AND       A, #0x1
   \   00002F 2708                  JREQ      L:??FirstMenu_4
   \   000031 CE0000                LDW       X, L:status
   \   000034 01                    RRWA      X, A
   \   000035 A4FE                  AND       A, #0xfe
   \   000037 2006                  JRA       ??FirstMenu_5
   1804                     else status.manu=1;
   \                     ??FirstMenu_4:
   \   000039 CE0000                LDW       X, L:status
   \   00003C 01                    RRWA      X, A
   \   00003D AA01                  OR        A, #0x1
   \                     ??FirstMenu_5:
   \   00003F 02                    RLWA      X, A
   \   000040 CF0000                LDW       L:status, X
   1805                    line_lcd=1;
   \   000043 8D000000              CALLF     ?Subroutine29
   1806                    if(status.manu)printf("\nManu");
   \                     ??CrossCallReturnLabel_58:
   \   000047 2705                  JREQ      L:??FirstMenu_6
   \   000049 AE0000                LDW       X, #`?<Constant "\\nManu">`
   \   00004C 2003                  JRA       ??FirstMenu_7
   1807                    else  printf("\nAuto");
   \                     ??FirstMenu_6:
   \   00004E AE0000                LDW       X, #`?<Constant "\\nAuto">`
   \                     ??FirstMenu_7:
   \   000051 8D000000              CALLF     printf
   1808                  }
   1809          
   1810                  if( button==3 || button==0 )      // Minus Button
   \                     ??FirstMenu_3:
   \   000055 C60000                LD        A, L:button
   \   000058 A103                  CP        A, #0x3
   \   00005A 2705                  JREQ      L:??FirstMenu_8
   \   00005C C60000                LD        A, L:button
   \   00005F 2604                  JRNE      L:??FirstMenu_9
   1811                  {
   1812                    SaveStatus();
   \                     ??FirstMenu_8:
   \   000061 AC000000              JPF       SaveStatus
   1813                    return;
   1814                  }
   1815          
   1816          
   1817                 } while( button!=1);
   \                     ??FirstMenu_9:
   \   000065 A101                  CP        A, #0x1
   \   000067 26B8                  JRNE      L:??FirstMenu_2
   1818          
   1819                   SaveStatus();
   \   000069 8D000000              CALLF     SaveStatus
   1820                   button=0;
   \   00006D 725F0000              CLR       L:button
   1821                   ProgramMenu();
   \   000071 AC000000              JPF       ProgramMenu
   1822          
   1823          
   1824          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 8D000000              CALLF     ?Subroutine78
   \                     ??CrossCallReturnLabel_214:
   \   000008 87                    RETF
   1825          
   1826          
   1827          

   \                                 In section .far_func.text, align 1, keep-with-next
   1828          void ProgramMenu()
   1829          {
   \                     ProgramMenu:
   \   000000 8D000000              CALLF     L:?push_l3
   \   000004 8D000000              CALLF     L:?push_w4
   \   000008 3B0000                PUSH      S:?b10
   1830              u8 program_number=0;
   \   00000B 3F00                  CLR       S:?b10
   1831             do
   1832             {
   1833               sprintf(line1,"\nP%d%s",program_number,Day_Week[programpoint[program_number].day]);
   \                     ??ProgramMenu_0:
   \   00000D 5F                    CLRW      X
   \   00000E 41                    EXG       A, XL
   \   00000F B600                  LD        A, S:?b10
   \   000011 41                    EXG       A, XL
   \   000012 BF00                  LDW       S:?w7, X
   \   000014 AE0005                LDW       X, #0x5
   \   000017 BF00                  LDW       S:?w0, X
   \   000019 BE00                  LDW       X, S:?w7
   \   00001B 8D000000              CALLF     L:?mul16_x_x_w0
   \   00001F 1C0000                ADDW      X, #programpoint
   \   000022 BF00                  LDW       S:?w4, X
   \   000024 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_163:
   \   000028 89                    PUSHW     X
   \   000029 8D000000              CALLF     L:?push_w7
   \   00002D 90AE0000              LDW       Y, #`?<Constant "\\nP%d%s">`
   \   000031 AE0000                LDW       X, #line1
   \   000034 8D000000              CALLF     sprintf
   \   000038 5B04                  ADD       SP, #0x4
   1834               sprintf(line2,"\n%s",Day_Week[programpoint[program_number].day]);
   \   00003A 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_164:
   \   00003E 89                    PUSHW     X
   \   00003F 90AE0000              LDW       Y, #`?<Constant "\\n%s">`
   \   000043 AE0000                LDW       X, #line2
   \   000046 8D000000              CALLF     sprintf
   \   00004A 5B02                  ADD       SP, #0x2
   1835               Clear_Line2();
   \   00004C 8D000000              CALLF     Clear_Line2
   1836               Clear_Line1();
   \   000050 8D000000              CALLF     ?Subroutine60
   1837               line_lcd=0;
   1838               printf(line1);
   \                     ??CrossCallReturnLabel_166:
   \   000054 AE0000                LDW       X, #line1
   \   000057 8D000000              CALLF     ?Subroutine43
   1839               line_lcd=1;
   1840               printf(line2);
   \                     ??CrossCallReturnLabel_102:
   \   00005B AE0000                LDW       X, #line2
   \   00005E 8D000000              CALLF     printf
   1841                 do
   1842                 {
   1843                   pressKey();
   \                     ??ProgramMenu_1:
   \   000062 8D000000              CALLF     ?Subroutine80
   1844          
   1845                    if(button==2)   //Plus
   \                     ??CrossCallReturnLabel_218:
   \   000066 A102                  CP        A, #0x2
   \   000068 2625                  JRNE      L:??ProgramMenu_2
   1846                    {
   1847                       programpoint[program_number].day++;
   \   00006A 92C600                LD        A, [S:?w4.w]
   \   00006D 4C                    INC       A
   \   00006E 92C700                LD        [S:?w4.w], A
   1848                        if( programpoint[program_number].day >=9) programpoint[program_number].day=0;
   \   000071 A109                  CP        A, #0x9
   \   000073 2504                  JRC       L:??ProgramMenu_3
   \   000075 4F                    CLR       A
   \   000076 92C700                LD        [S:?w4.w], A
   1849                          Clear_Line2();
   \                     ??ProgramMenu_3:
   \   000079 8D000000              CALLF     Clear_Line2
   1850                           line_lcd=1;
   \   00007D 35010000              MOV       L:line_lcd, #0x1
   1851                           printf("\n%s",Day_Week[programpoint[program_number].day]);
   \   000081 8D000000              CALLF     ?Subroutine59
   1852                    }
   \                     ??CrossCallReturnLabel_165:
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%s">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B02                  ADD       SP, #0x2
   1853          
   1854                    if(button==3 || button==0 ) // Minus
   \                     ??ProgramMenu_2:
   \   00008F C60000                LD        A, L:button
   \   000092 A103                  CP        A, #0x3
   \   000094 2705                  JREQ      L:??ProgramMenu_4
   \   000096 C60000                LD        A, L:button
   \   000099 260B                  JRNE      L:??ProgramMenu_5
   1855                    {
   1856                       SaveProgram();
   \                     ??ProgramMenu_4:
   \   00009B 8D000000              CALLF     SaveProgram
   1857                        button=0;
   \   00009F 725F0000              CLR       L:button
   1858                       return;
   \   0000A3 CC0000                JP        L:??ProgramMenu_6
   1859                    }
   1860          
   1861          
   1862                 } while (button != 1 && button != 0);
   \                     ??ProgramMenu_5:
   \   0000A6 A101                  CP        A, #0x1
   \   0000A8 26B8                  JRNE      L:??ProgramMenu_1
   1863          
   1864                     // Test programm is Active ?
   1865                  if( programpoint[program_number].day !=0)
   \   0000AA 923D00                TNZ       [S:?w4.w]
   \   0000AD 2603                  JRNE      ??lb_3
   \   0000AF CC0000                JP        L:??ProgramMenu_7
   1866                  {
   1867                        //Set On Hour
   1868                     Clear_Line1();
   \                     ??lb_3:
   \   0000B2 8D000000              CALLF     ?Subroutine60
   1869                     line_lcd=0;
   1870                     printf("\nP%d%s",program_number," On");
   \                     ??CrossCallReturnLabel_167:
   \   0000B6 4B00                  PUSH      #BYTE1(`?<Constant " On">`)
   \   0000B8 4B00                  PUSH      #BYTE2(`?<Constant " On">`)
   \   0000BA 8D000000              CALLF     L:?push_w7
   \   0000BE AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   0000C1 8D000000              CALLF     printf
   \   0000C5 5B04                  ADD       SP, #0x4
   1871                     timer3=0;
   \   0000C7 5F                    CLRW      X
   \   0000C8 CF0000                LDW       L:timer3, X
   1872                     Clear_Line2();
   \   0000CB 8D000000              CALLF     Clear_Line2
   \   0000CF BE00                  LDW       X, S:?w4
   \   0000D1 1C0002                ADDW      X, #0x2
   \   0000D4 BF00                  LDW       S:?w6, X
   1873                     do
   1874                      {
   1875                       line_lcd=1;
   \                     ??ProgramMenu_8:
   \   0000D6 35010000              MOV       L:line_lcd, #0x1
   1876                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   0000DA C60000                LD        A, L:blink_flag
   \   0000DD 2718                  JREQ      L:??ProgramMenu_9
   \   0000DF 92C600                LD        A, [S:?w6.w]
   \   0000E2 5F                    CLRW      X
   \   0000E3 97                    LD        XL, A
   \   0000E4 89                    PUSHW     X
   \   0000E5 BE00                  LDW       X, S:?w4
   \   0000E7 5C                    INCW      X
   \   0000E8 F6                    LD        A, (X)
   \   0000E9 5F                    CLRW      X
   \   0000EA 97                    LD        XL, A
   \   0000EB 89                    PUSHW     X
   \   0000EC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0000EF 8D000000              CALLF     printf
   \   0000F3 5B04                  ADD       SP, #0x4
   \   0000F5 200F                  JRA       L:??ProgramMenu_10
   1877                         else printf("\n  :%02d",programpoint[program_number].onminute);
   \                     ??ProgramMenu_9:
   \   0000F7 92C600                LD        A, [S:?w6.w]
   \   0000FA 5F                    CLRW      X
   \   0000FB 97                    LD        XL, A
   \   0000FC 89                    PUSHW     X
   \   0000FD AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   000100 8D000000              CALLF     printf
   \   000104 5B02                  ADD       SP, #0x2
   1878                       programpoint[program_number].onhour =adj(0,23,programpoint[program_number].onhour);
   \                     ??ProgramMenu_10:
   \   000106 BE00                  LDW       X, S:?w4
   \   000108 5C                    INCW      X
   \   000109 F6                    LD        A, (X)
   \   00010A 8D000000              CALLF     ?Subroutine47
   1879                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_128:
   \   00010E 8D000000              CALLF     ??Subroutine87_0
   \                     ??CrossCallReturnLabel_240:
   \   000112 BE00                  LDW       X, S:?w4
   \   000114 5C                    INCW      X
   \   000115 F7                    LD        (X), A
   \   000116 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_133:
   \   00011A 2406                  JRNC      L:??ProgramMenu_11
   \   00011C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_121:
   \   000120 27B4                  JREQ      L:??ProgramMenu_8
   1880          
   1881                        //Set On Minute
   1882                      //Clear_Line1();
   1883                      //line_lcd=0;
   1884                      //printf("\nMin On>");
   1885                     // printf("\nP%d%s",program_number," On");
   1886                      timer3=0;
   \                     ??ProgramMenu_11:
   \   000122 5F                    CLRW      X
   \   000123 CF0000                LDW       L:timer3, X
   1887                    do
   1888                      {
   1889                       line_lcd=1;
   \                     ??ProgramMenu_12:
   \   000126 35010000              MOV       L:line_lcd, #0x1
   \   00012A BE00                  LDW       X, S:?w4
   \   00012C 5C                    INCW      X
   \   00012D F6                    LD        A, (X)
   \   00012E 5F                    CLRW      X
   \   00012F 97                    LD        XL, A
   \   000130 9093                  LDW       Y, X
   \   000132 C60000                LD        A, L:blink_flag
   \   000135 2712                  JREQ      L:??ProgramMenu_13
   1890                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].onhour,programpoint[program_number].onminute);
   \   000137 92C600                LD        A, [S:?w6.w]
   \   00013A 97                    LD        XL, A
   \   00013B 89                    PUSHW     X
   \   00013C 9089                  PUSHW     Y
   \   00013E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000141 8D000000              CALLF     printf
   \   000145 5B04                  ADD       SP, #0x4
   \   000147 200B                  JRA       L:??ProgramMenu_14
   1891                         else  printf("\n%02d:  ",programpoint[program_number].onhour);
   \                     ??ProgramMenu_13:
   \   000149 9089                  PUSHW     Y
   \   00014B AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   00014E 8D000000              CALLF     printf
   \   000152 5B02                  ADD       SP, #0x2
   1892                           programpoint[program_number].onminute=adj(0,59,programpoint[program_number].onminute);
   \                     ??ProgramMenu_14:
   \   000154 92C600                LD        A, [S:?w6.w]
   \   000157 B700                  LD        S:?b1, A
   \   000159 353B0000              MOV       S:?b0, #0x3b
   \   00015D 8D000000              CALLF     ?Subroutine31
   1893                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_64:
   \   000161 2406                  JRNC      L:??ProgramMenu_15
   \   000163 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_122:
   \   000167 27BD                  JREQ      L:??ProgramMenu_12
   1894          
   1895          
   1896                     // Set Off Hour
   1897          
   1898                     Clear_Line1();
   \                     ??ProgramMenu_15:
   \   000169 8D000000              CALLF     ?Subroutine60
   1899                     line_lcd=0;
   1900                     printf("\nP%d%s",program_number," Off");
   \                     ??CrossCallReturnLabel_168:
   \   00016D 4B00                  PUSH      #BYTE1(`?<Constant " Off">`)
   \   00016F 4B00                  PUSH      #BYTE2(`?<Constant " Off">`)
   \   000171 8D000000              CALLF     L:?push_w7
   \   000175 AE0000                LDW       X, #`?<Constant "\\nP%d%s">`
   \   000178 8D000000              CALLF     printf
   \   00017C 5B04                  ADD       SP, #0x4
   1901                     timer3=0;
   \   00017E 5F                    CLRW      X
   \   00017F CF0000                LDW       L:timer3, X
   \   000182 BE00                  LDW       X, S:?w4
   \   000184 1C0003                ADDW      X, #0x3
   \   000187 BF00                  LDW       S:?w6, X
   \   000189 BE00                  LDW       X, S:?w4
   \   00018B 1C0004                ADDW      X, #0x4
   \   00018E BF00                  LDW       S:?w4, X
   1902                     do
   1903                      {
   1904                       line_lcd=1;
   \                     ??ProgramMenu_16:
   \   000190 35010000              MOV       L:line_lcd, #0x1
   1905                       if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   000194 C60000                LD        A, L:blink_flag
   \   000197 2716                  JREQ      L:??ProgramMenu_17
   \   000199 92C600                LD        A, [S:?w4.w]
   \   00019C 5F                    CLRW      X
   \   00019D 97                    LD        XL, A
   \   00019E 89                    PUSHW     X
   \   00019F 92C600                LD        A, [S:?w6.w]
   \   0001A2 97                    LD        XL, A
   \   0001A3 89                    PUSHW     X
   \   0001A4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001A7 8D000000              CALLF     printf
   \   0001AB 5B04                  ADD       SP, #0x4
   \   0001AD 200F                  JRA       L:??ProgramMenu_18
   1906                         else printf("\n  :%02d",programpoint[program_number].offminute);
   \                     ??ProgramMenu_17:
   \   0001AF 92C600                LD        A, [S:?w4.w]
   \   0001B2 5F                    CLRW      X
   \   0001B3 97                    LD        XL, A
   \   0001B4 89                    PUSHW     X
   \   0001B5 AE0000                LDW       X, #`?<Constant "\\n  :%02d">`
   \   0001B8 8D000000              CALLF     printf
   \   0001BC 5B02                  ADD       SP, #0x2
   1907                       programpoint[program_number].offhour =adj(0,23,programpoint[program_number].offhour);
   \                     ??ProgramMenu_18:
   \   0001BE 92C600                LD        A, [S:?w6.w]
   \   0001C1 8D000000              CALLF     ?Subroutine47
   1908                      } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_129:
   \   0001C5 8D000000              CALLF     ?Subroutine31
   \                     ??CrossCallReturnLabel_65:
   \   0001C9 2406                  JRNC      L:??ProgramMenu_19
   \   0001CB 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_123:
   \   0001CF 27BF                  JREQ      L:??ProgramMenu_16
   1909          
   1910                    //Set Off Minute
   1911          
   1912                    timer3=0;
   \                     ??ProgramMenu_19:
   \   0001D1 5F                    CLRW      X
   \   0001D2 CF0000                LDW       L:timer3, X
   1913                    do
   1914                      {
   1915                       line_lcd=1;
   \                     ??ProgramMenu_20:
   \   0001D5 35010000              MOV       L:line_lcd, #0x1
   \   0001D9 92C600                LD        A, [S:?w6.w]
   \   0001DC 5F                    CLRW      X
   \   0001DD 97                    LD        XL, A
   \   0001DE 9093                  LDW       Y, X
   \   0001E0 C60000                LD        A, L:blink_flag
   \   0001E3 2712                  JREQ      L:??ProgramMenu_21
   1916                        if(blink_flag) printf("\n%02d:%02d",programpoint[program_number].offhour,programpoint[program_number].offminute);
   \   0001E5 92C600                LD        A, [S:?w4.w]
   \   0001E8 97                    LD        XL, A
   \   0001E9 89                    PUSHW     X
   \   0001EA 9089                  PUSHW     Y
   \   0001EC AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   0001EF 8D000000              CALLF     printf
   \   0001F3 5B04                  ADD       SP, #0x4
   \   0001F5 200B                  JRA       L:??ProgramMenu_22
   1917                         else  printf("\n%02d:  ",programpoint[program_number].offhour);
   \                     ??ProgramMenu_21:
   \   0001F7 9089                  PUSHW     Y
   \   0001F9 AE0000                LDW       X, #`?<Constant "\\n%02d:  ">`
   \   0001FC 8D000000              CALLF     printf
   \   000200 5B02                  ADD       SP, #0x2
   1918                           programpoint[program_number].offminute=adj(0,59,programpoint[program_number].offminute);
   \                     ??ProgramMenu_22:
   \   000202 92C600                LD        A, [S:?w4.w]
   \   000205 8D000000              CALLF     ?Subroutine32
   1919                      } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_245:
   \   000209 92C700                LD        [S:?w4.w], A
   \   00020C 8D000000              CALLF     ?Subroutine48
   1920          
   1921                  }
   \                     ??CrossCallReturnLabel_134:
   \   000210 2406                  JRNC      L:??ProgramMenu_7
   \   000212 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_124:
   \   000216 27BD                  JREQ      L:??ProgramMenu_20
   1922          
   1923          
   1924                   program_number++;
   \                     ??ProgramMenu_7:
   \   000218 B600                  LD        A, S:?b10
   \   00021A 4C                    INC       A
   \   00021B B700                  LD        S:?b10, A
   1925          
   1926          
   1927          
   1928          
   1929          
   1930          
   1931          
   1932          
   1933                 } while ( (program_number < 8) && (button!=0));
   \   00021D A108                  CP        A, #0x8
   \   00021F 2408                  JRNC      L:??ProgramMenu_23
   \   000221 C60000                LD        A, L:button
   \   000224 2703                  JREQ      ??lb_4
   \   000226 CC0000                JP        L:??ProgramMenu_0
   1934          
   1935                   SaveProgram();
   \                     ??lb_4:
   \                     ??ProgramMenu_23:
   \   000229 8D000000              CALLF     SaveProgram
   1936          
   1937          
   1938          }
   \                     ??ProgramMenu_6:
   \   00022D 320000                POP       S:?b10
   \   000230 8D000000              CALLF     L:?pop_w4
   \   000234 8D000000              CALLF     L:?pop_l3
   \   000238 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 8D000000              CALLF     Clear_Line1
   \   000004 725F0000              CLR       L:line_lcd
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 92C600                LD        A, [S:?w4.w]
   \   000003 5F                    CLRW      X
   \   000004 97                    LD        XL, A
   \   000005 58                    SLLW      X
   \   000006 DE0000                LDW       X, (L:Day_Week,X)
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000 8D000000              CALLF     printf
   \   000004 35010000              MOV       L:line_lcd, #0x1
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     adj
   \   000005 92C700                LD        [S:?w6.w], A
   \   000008 CE0000                LDW       X, L:timer3
   \   00000B A3000B                CPW       X, #0xb
   \   00000E 87                    RETF
   1939          
   1940          
   1941          

   \                                 In section .far_func.text, align 1, keep-with-next
   1942          void Menu (void)
   1943          {
   1944           // Clear Display
   1945              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine19
   1946              Delay1(250);
   1947              //u8 key;
   1948           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1949              Wait for Plus,Minius or OK
   1950              If plus next option from Menu on the end EXIT
   1951              If minus previous option from Menu  on the end EXIT
   1952              If OK enter to menu option
   1953              If time out about 10s exit from Menu
   1954           */
   1955          
   1956          
   1957          
   1958          
   1959          
   1960          
   1961              do {
   1962          
   1963          First_Menu:
   1964              line_lcd=0;
   \                     ??CrossCallReturnLabel_32:
   \   000004 725F0000              CLR       L:line_lcd
   1965              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     ?Subroutine43
   1966              line_lcd=1;
   1967              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_99:
   \   00000F C60000                LD        A, L:daily_minute_on
   \   000012 5F                    CLRW      X
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 C60000                LD        A, L:daily_hour_on
   \   000018 97                    LD        XL, A
   \   000019 89                    PUSHW     X
   \   00001A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001D 8D000000              CALLF     printf
   \   000021 5B04                  ADD       SP, #0x4
   1968               pressKey();
   \   000023 8D000000              CALLF     ?Subroutine54
   1969              switch (button)
   \                     ??CrossCallReturnLabel_151:
   \   000027 2713                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 2709                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2603                  JRNE      ??lb_0
   \   00002F CC0000                JP        L:??Menu_2
   \                     ??lb_0:
   \   000032 CC0000                JP        L:??Menu_3
   1970                  {
   1971                  case 1: goto Second_Menu ;
   1972                   break;
   1973                  case 2: Set_Timer_On();
   \                     ??Menu_1:
   \   000035 8D000000              CALLF     Set_Timer_On
   1974                   break;
   \   000039 CC0000                JP        L:??Menu_3
   1975                  case 3: goto Exit_Menu;
   1976                   break;
   1977                  }
   1978                  break; //Exit Menu
   1979          
   1980          
   1981          Second_Menu:
   1982              line_lcd=0;
   \                     ??Menu_0:
   \   00003C 725F0000              CLR       L:line_lcd
   1983              printf("\nOFF     ");
   \   000040 AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000043 8D000000              CALLF     printf
   1984              line_lcd=1;
   \   000047 8D000000              CALLF     ?Subroutine27
   1985              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_54:
   \   00004B 89                    PUSHW     X
   \   00004C C60000                LD        A, L:daily_hour_off
   \   00004F 97                    LD        XL, A
   \   000050 89                    PUSHW     X
   \   000051 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000054 8D000000              CALLF     printf
   \   000058 5B04                  ADD       SP, #0x4
   1986                pressKey();
   \   00005A 8D000000              CALLF     ?Subroutine54
   1987                switch (button)
   \                     ??CrossCallReturnLabel_152:
   \   00005E 2710                  JREQ      L:??Menu_4
   \   000060 4A                    DEC       A
   \   000061 2706                  JREQ      L:??Menu_5
   \   000063 4A                    DEC       A
   \   000064 279E                  JREQ      L:??CrossCallReturnLabel_32
   \   000066 CC0000                JP        L:??Menu_3
   1988                  {
   1989                  case 1: goto Third_Menu ;
   1990                   break;
   1991                  case 2: Set_Timer_Off();
   \                     ??Menu_5:
   \   000069 8D000000              CALLF     Set_Timer_Off
   1992                   break;
   \   00006D CC0000                JP        L:??Menu_3
   1993                  case 3: goto First_Menu;
   1994                   break;
   1995                  }
   1996               break; //Exit Menu
   1997          
   1998          Third_Menu:
   1999                line_lcd=0;
   \                     ??Menu_4:
   \   000070 725F0000              CLR       L:line_lcd
   2000              printf("\nMonthly ");
   \   000074 AE0000                LDW       X, #`?<Constant "\\nMonthly ">`
   \   000077 8D000000              CALLF     ?Subroutine43
   2001              line_lcd=1;
   2002              printf("\n%02d:%02d:%02d",monthly_year,monthly_month,monthly_date);
   \                     ??CrossCallReturnLabel_100:
   \   00007B C60000                LD        A, L:monthly_date
   \   00007E 5F                    CLRW      X
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:monthly_month
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 C60000                LD        A, L:monthly_year
   \   000089 97                    LD        XL, A
   \   00008A 89                    PUSHW     X
   \   00008B AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00008E 8D000000              CALLF     printf
   \   000092 5B06                  ADD       SP, #0x6
   2003                pressKey();
   \   000094 8D000000              CALLF     ?Subroutine54
   2004                switch (button)
   \                     ??CrossCallReturnLabel_153:
   \   000098 2738                  JREQ      L:??Menu_6
   \   00009A 4A                    DEC       A
   \   00009B 2706                  JREQ      L:??Menu_7
   \   00009D 4A                    DEC       A
   \   00009E 279C                  JREQ      L:??Menu_0
   \   0000A0 CC0000                JP        L:??Menu_3
   2005                  {
   2006                  case 1: goto Fourth_Menu;
   2007                   break;
   2008                  case 2:
   2009                    {
   2010                     setData();
   \                     ??Menu_7:
   \   0000A3 8D000000              CALLF     setData
   2011                     monthly_year=y;
   \   0000A7 C60000                LD        A, L:`y`
   \   0000AA C70000                LD        L:monthly_year, A
   2012                     monthly_month=m;
   \   0000AD C60000                LD        A, L:m
   \   0000B0 C70000                LD        L:monthly_month, A
   2013                     monthly_date=d;
   \   0000B3 C60000                LD        A, L:d
   \   0000B6 C70000                LD        L:monthly_date, A
   2014                     status.monthly=1;
   \   0000B9 CE0000                LDW       X, L:status
   \   0000BC 01                    RRWA      X, A
   \   0000BD AA10                  OR        A, #0x10
   \   0000BF 8D000000              CALLF     ?Subroutine77
   2015                     status.daily=0;  // Disable Daily Alarm On date enable it
   \                     ??CrossCallReturnLabel_208:
   \   0000C3 A4F7                  AND       A, #0xf7
   \   0000C5 8D000000              CALLF     ?Subroutine77
   2016                     status.on=0;     // Power off
   \                     ??CrossCallReturnLabel_209:
   \   0000C9 A4FD                  AND       A, #0xfd
   \   0000CB 8D000000              CALLF     ?Subroutine1
   2017                     // Save Status and Date in EEPROM
   2018                     EEPROM_INIT();
   2019                     FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
   2020                     FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
   2021                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_YEAR,y);
   2022                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_MONTH,m);
   2023                    // FLASH_ProgramByte(EEPROM_ADR_MONTH_DATE,d);
   2024                     FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   2025                     break;
   \                     ??CrossCallReturnLabel_0:
   \   0000CF CC0000                JP        L:??Menu_3
   2026                    }
   2027                  case 3: goto Second_Menu ;
   2028                   break;
   2029                  }
   2030               break; //Exit Menu
   2031          
   2032          
   2033          Fourth_Menu:
   2034              line_lcd=0;
   \                     ??Menu_6:
   \   0000D2 725F0000              CLR       L:line_lcd
   2035              printf("\nClock   ");
   \   0000D6 AE0000                LDW       X, #`?<Constant "\\nClock   ">`
   \   0000D9 8D000000              CALLF     ?Subroutine24
   2036              line_lcd=1;
   2037              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_253:
   \   0000DD 89                    PUSHW     X
   \   0000DE C60000                LD        A, L:minutes
   \   0000E1 97                    LD        XL, A
   \   0000E2 89                    PUSHW     X
   \   0000E3 C60000                LD        A, L:hours
   \   0000E6 97                    LD        XL, A
   \   0000E7 89                    PUSHW     X
   \   0000E8 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EB 8D000000              CALLF     printf
   \   0000EF 5B06                  ADD       SP, #0x6
   2038                pressKey();
   \   0000F1 8D000000              CALLF     ?Subroutine54
   2039                switch (button)
   \                     ??CrossCallReturnLabel_154:
   \   0000F5 2711                  JREQ      L:??Menu_8
   \   0000F7 4A                    DEC       A
   \   0000F8 2708                  JREQ      L:??Menu_9
   \   0000FA 4A                    DEC       A
   \   0000FB 2603                  JRNE      ??lb_1
   \   0000FD CC0000                JP        L:??Menu_4
   \                     ??lb_1:
   \   000100 2056                  JRA       L:??Menu_3
   2040                  {
   2041                  case 1: goto Fifth_Menu ;
   2042                   break;
   2043                  case 2: Set_Clock();
   \                     ??Menu_9:
   \   000102 8D000000              CALLF     Set_Clock
   2044                   break;
   \   000106 2050                  JRA       L:??Menu_3
   2045                  case 3: goto Third_Menu;
   2046                   break;
   2047                  }
   2048               break; //Exit Menu
   2049          
   2050          
   2051          Fifth_Menu:
   2052              line_lcd=0;
   \                     ??Menu_8:
   \   000108 725F0000              CLR       L:line_lcd
   2053              printf("\nDate    ");
   \   00010C AE0000                LDW       X, #`?<Constant "\\nDate    ">`
   \   00010F 8D000000              CALLF     printf
   2054              line_lcd=1;
   \   000113 8D000000              CALLF     ?Subroutine25
   2055              printf("\n%02d:%02d:%02d",year,month,date);
   \                     ??CrossCallReturnLabel_48:
   \   000117 89                    PUSHW     X
   \   000118 C60000                LD        A, L:month
   \   00011B 97                    LD        XL, A
   \   00011C 89                    PUSHW     X
   \   00011D C60000                LD        A, L:year
   \   000120 97                    LD        XL, A
   \   000121 89                    PUSHW     X
   \   000122 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000125 8D000000              CALLF     printf
   \   000129 5B06                  ADD       SP, #0x6
   2056                pressKey();
   \   00012B 8D000000              CALLF     ?Subroutine54
   2057                switch (button)
   \                     ??CrossCallReturnLabel_155:
   \   00012F 2708                  JREQ      L:??Menu_2
   \   000131 4A                    DEC       A
   \   000132 27CE                  JREQ      L:??Menu_9
   \   000134 4A                    DEC       A
   \   000135 279B                  JREQ      L:??Menu_6
   \   000137 201F                  JRA       L:??Menu_3
   2058                  {
   2059                  case 1: goto Exit_Menu ;
   2060                   break;
   2061                  case 2: Set_Clock();
   2062                   break;
   2063                  case 3: goto Fourth_Menu;
   2064                   break;
   2065                  }
   2066               break; //Exit Menu
   2067          
   2068          
   2069          Exit_Menu:
   2070              line_lcd=0;
   \                     ??Menu_2:
   \   000139 725F0000              CLR       L:line_lcd
   2071              printf("\nExit OK ");
   \   00013D AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   000140 8D000000              CALLF     ?Subroutine43
   2072              line_lcd=1;
   2073              printf("\n+/-     ");
   \                     ??CrossCallReturnLabel_101:
   \   000144 AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   000147 8D000000              CALLF     printf
   2074                 pressKey();
   \   00014B 8D000000              CALLF     ?Subroutine54
   2075                switch (button)
   2076                  {
   2077                  case 1: goto First_Menu;
   2078                   break;
   2079                  case 2:
   2080                   break;
   2081                  case 3: goto Fifth_Menu;
   2082                   break;
   2083                  }
   2084                 break; //Exit Menu
   2085              }    while (1);
   \                     ??CrossCallReturnLabel_156:
   \   00014F 2603                  JRNE      ??lb_2
   \   000151 CC0000                JP        L:??CrossCallReturnLabel_32
   \                     ??lb_2:
   \   000154 A002                  SUB       A, #0x2
   \   000156 27B0                  JREQ      L:??Menu_8
   2086              //exit:
   2087             Clear_Line1();
   \                     ??Menu_3:
   \   000158 8D000000              CALLF     Clear_Line1
   2088             Clear_Line2();
   \   00015C AC000000              JPF       Clear_Line2
   2089          
   2090          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     ?Subroutine80
   \                     ??CrossCallReturnLabel_217:
   \   000004 4A                    DEC       A
   \   000005 87                    RETF
   2091          
   2092          

   \                                 In section .far_func.text, align 1, keep-with-next
   2093          void pressKey(void)
   2094          {
   2095             button =0;
   \                     pressKey:
   \   000000 725F0000              CLR       L:button
   2096             timer3=0;
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   2097             hardware.lcdLed=1;
   \   000008 8D000000              CALLF     ?Subroutine35
   2098             lcdLedTimer=LCDLEDON;
   2099             do
   2100             {
   2101                if (key_ok_on()) button=1;
   \                     ??CrossCallReturnLabel_74:
   \   00000C 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_111:
   \   000010 2706                  JREQ      L:??pressKey_0
   \   000012 35010000              MOV       L:button, #0x1
   \   000016 201A                  JRA       L:??pressKey_1
   2102                   else if (key_plus_on())button=2;
   \                     ??pressKey_0:
   \   000018 8D000000              CALLF     key_plus_on
   \   00001C A100                  CP        A, #0x0
   \   00001E 2706                  JREQ      L:??pressKey_2
   \   000020 35020000              MOV       L:button, #0x2
   \   000024 200C                  JRA       L:??pressKey_1
   2103                  else if (key_minus_on())button=3;
   \                     ??pressKey_2:
   \   000026 8D000000              CALLF     key_minus_on
   \   00002A A100                  CP        A, #0x0
   \   00002C 2704                  JREQ      L:??pressKey_1
   \   00002E 35030000              MOV       L:button, #0x3
   2104             } while ( (timer3<=time_menu) && !button);    //(timer3<=time_menu) &&
   \                     ??pressKey_1:
   \   000032 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_130:
   \   000036 2405                  JRNC      L:??pressKey_3
   \   000038 C60000                LD        A, L:button
   \   00003B 27CF                  JREQ      L:??CrossCallReturnLabel_74
   2105          
   2106              if (button==0) beep(10000);
   \                     ??pressKey_3:
   \   00003D C60000                LD        A, L:button
   \   000040 2607                  JRNE      L:??pressKey_4
   \   000042 AE2710                LDW       X, #0x2710
   \   000045 8D000000              CALLF     beep
   2107          
   2108             //return button;
   2109          }
   \                     ??pressKey_4:
   \   000049 87                    RETF
   2110          
   2111          
   2112          
   2113          

   \                                 In section .far_func.text, align 1, keep-with-next
   2114          bool setData(void)
   2115          {
   \                     setData:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   2116             u8 leap=0 ,date_end,month_start=1,date_start=1;
   \   000007 3F00                  CLR       S:?b8
   \   000009 35010000              MOV       S:?b10, #0x1
   \   00000D 35010000              MOV       S:?b9, #0x1
   2117             int yy;
   2118          
   2119                   //Clear Display
   2120             LCDInstr(0x01);
   \   000011 8D000000              CALLF     ?Subroutine15
   2121             Delay1(1000);
   2122             line_lcd=0;
   2123             printf("\nYear>");
   2124             y=year;
   \                     ??CrossCallReturnLabel_28:
   \   000015 C60000                LD        A, L:year
   \   000018 C70000                LD        L:`y`, A
   2125             m=month;
   \   00001B C60000                LD        A, L:month
   \   00001E C70000                LD        L:m, A
   2126             d=date;
   \   000021 C60000                LD        A, L:`date`
   \   000024 C70000                LD        L:d, A
   2127                do
   2128              {
   2129               line_lcd=1;
   \                     ??setData_0:
   \   000027 8D000000              CALLF     ?Subroutine26
   2130               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_49:
   \   00002B 89                    PUSHW     X
   \   00002C C60000                LD        A, L:m
   \   00002F 97                    LD        XL, A
   \   000030 89                    PUSHW     X
   \   000031 C60000                LD        A, L:`y`
   \   000034 97                    LD        XL, A
   \   000035 89                    PUSHW     X
   \   000036 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000039 8D000000              CALLF     printf
   \   00003D 5B06                  ADD       SP, #0x6
   2131                 y=adj(0,99,y);
   \   00003F C60000                LD        A, L:`y`
   \   000042 B700                  LD        S:?b1, A
   \   000044 35630000              MOV       S:?b0, #0x63
   \   000048 8D000000              CALLF     ??Subroutine87_0
   2132              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_244:
   \   00004C C70000                LD        L:`y`, A
   \   00004F 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_108:
   \   000053 27D2                  JREQ      L:??setData_0
   2133                  yy=y+2000;
   \   000055 C60000                LD        A, L:`y`
   \   000058 5F                    CLRW      X
   \   000059 97                    LD        XL, A
   \   00005A 1C07D0                ADDW      X, #0x7d0
   \   00005D BF00                  LDW       S:?w0, X
   2134              if ( yy%400==0 ||(yy%100!=0 && yy%4==0)) leap=1;
   \   00005F 90AE0190              LDW       Y, #0x190
   \   000063 8D000000              CALLF     L:?smod16_y_x_y
   \   000067 905D                  TNZW      Y
   \   000069 271C                  JREQ      L:??setData_1
   \   00006B 90AE0064              LDW       Y, #0x64
   \   00006F BE00                  LDW       X, S:?w0
   \   000071 8D000000              CALLF     L:?smod16_y_x_y
   \   000075 905D                  TNZW      Y
   \   000077 2712                  JREQ      L:??setData_2
   \   000079 90AE0004              LDW       Y, #0x4
   \   00007D BE00                  LDW       X, S:?w0
   \   00007F 8D000000              CALLF     L:?smod16_y_x_y
   \   000083 905D                  TNZW      Y
   \   000085 2604                  JRNE      L:??setData_2
   \                     ??setData_1:
   \   000087 35010000              MOV       S:?b8, #0x1
   2135                  y=yy-2000;
   \                     ??setData_2:
   \   00008B B600                  LD        A, S:?b1
   \   00008D AB30                  ADD       A, #0x30
   \   00008F C70000                LD        L:`y`, A
   2136                   if(y==year) month_start=month;
   \   000092 C60000                LD        A, L:year
   \   000095 C10000                CP        A, L:`y`
   \   000098 2605                  JRNE      L:??setData_3
   \   00009A C60000                LD        A, L:month
   \   00009D B700                  LD        S:?b10, A
   2137               line_lcd=0;
   \                     ??setData_3:
   \   00009F 8D000000              CALLF     ?Subroutine44
   2138              printf("\nMonth>");
   2139                do
   2140              {
   2141               line_lcd=1;
   \                     ??CrossCallReturnLabel_104:
   \   0000A3 8D000000              CALLF     ?Subroutine26
   2142               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_50:
   \   0000A7 89                    PUSHW     X
   \   0000A8 C60000                LD        A, L:m
   \   0000AB 97                    LD        XL, A
   \   0000AC 89                    PUSHW     X
   \   0000AD C60000                LD        A, L:`y`
   \   0000B0 97                    LD        XL, A
   \   0000B1 89                    PUSHW     X
   \   0000B2 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000B5 8D000000              CALLF     printf
   \   0000B9 5B06                  ADD       SP, #0x6
   2143                m=adj(month_start,12,m);
   \   0000BB C60000                LD        A, L:m
   \   0000BE B700                  LD        S:?b1, A
   \   0000C0 350C0000              MOV       S:?b0, #0xc
   \   0000C4 B600                  LD        A, S:?b10
   \   0000C6 8D000000              CALLF     adj
   \   0000CA C70000                LD        L:m, A
   2144              } while (!key_ok_on());
   \   0000CD 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_109:
   \   0000D1 27D0                  JREQ      L:??CrossCallReturnLabel_104
   2145          
   2146              if ( m == 1 || m==3 || m==5 ||m==7||m==8||m==10||m==12) date_end=31;
   \   0000D3 C60000                LD        A, L:m
   \   0000D6 A101                  CP        A, #0x1
   \   0000D8 2718                  JREQ      L:??setData_4
   \   0000DA A103                  CP        A, #0x3
   \   0000DC 2714                  JREQ      L:??setData_4
   \   0000DE A105                  CP        A, #0x5
   \   0000E0 2710                  JREQ      L:??setData_4
   \   0000E2 A107                  CP        A, #0x7
   \   0000E4 270C                  JREQ      L:??setData_4
   \   0000E6 A108                  CP        A, #0x8
   \   0000E8 2708                  JREQ      L:??setData_4
   \   0000EA A10A                  CP        A, #0xa
   \   0000EC 2704                  JREQ      L:??setData_4
   \   0000EE A10C                  CP        A, #0xc
   \   0000F0 2606                  JRNE      L:??setData_5
   \                     ??setData_4:
   \   0000F2 351F0000              MOV       S:?b8, #0x1f
   \   0000F6 2024                  JRA       L:??setData_6
   2147               else if ( m==4||m==6 || m==9 ||m==11) date_end=30;
   \                     ??setData_5:
   \   0000F8 A104                  CP        A, #0x4
   \   0000FA 270C                  JREQ      L:??setData_7
   \   0000FC A106                  CP        A, #0x6
   \   0000FE 2708                  JREQ      L:??setData_7
   \   000100 A109                  CP        A, #0x9
   \   000102 2704                  JREQ      L:??setData_7
   \   000104 A10B                  CP        A, #0xb
   \   000106 2606                  JRNE      L:??setData_8
   \                     ??setData_7:
   \   000108 351E0000              MOV       S:?b8, #0x1e
   \   00010C 200E                  JRA       L:??setData_6
   2148                else
   2149                 {
   2150                   if(leap) date_end=29;
   \                     ??setData_8:
   \   00010E 3D00                  TNZ       S:?b8
   \   000110 2706                  JREQ      L:??setData_9
   \   000112 351D0000              MOV       S:?b8, #0x1d
   \   000116 2004                  JRA       L:??setData_6
   2151                    else date_end=28;
   \                     ??setData_9:
   \   000118 351C0000              MOV       S:?b8, #0x1c
   2152                 }
   2153               if( y==year && m==month) date_start=d;
   \                     ??setData_6:
   \   00011C C60000                LD        A, L:year
   \   00011F C10000                CP        A, L:`y`
   \   000122 260D                  JRNE      L:??setData_10
   \   000124 C60000                LD        A, L:month
   \   000127 C10000                CP        A, L:m
   \   00012A 2605                  JRNE      L:??setData_10
   \   00012C C60000                LD        A, L:d
   \   00012F B700                  LD        S:?b9, A
   2154              LCDInstr(0x01);
   \                     ??setData_10:
   \   000131 8D000000              CALLF     ?Subroutine16
   2155               Delay1(1000);
   2156                line_lcd=0;
   2157              printf("\nDate>");
   2158                do
   2159              {
   2160               line_lcd=1;
   \                     ??CrossCallReturnLabel_30:
   \   000135 8D000000              CALLF     ?Subroutine26
   2161               printf("\n%02d:%02d:%02d",y,m,d);
   \                     ??CrossCallReturnLabel_51:
   \   000139 89                    PUSHW     X
   \   00013A C60000                LD        A, L:m
   \   00013D 97                    LD        XL, A
   \   00013E 89                    PUSHW     X
   \   00013F C60000                LD        A, L:`y`
   \   000142 97                    LD        XL, A
   \   000143 89                    PUSHW     X
   \   000144 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000147 8D000000              CALLF     printf
   \   00014B 5B06                  ADD       SP, #0x6
   2162                 d=adj(date_start,date_end,d);
   \   00014D C60000                LD        A, L:d
   \   000150 B700                  LD        S:?b1, A
   \   000152 450000                MOV       S:?b0, S:?b8
   \   000155 B600                  LD        A, S:?b9
   \   000157 8D000000              CALLF     adj
   \   00015B C70000                LD        L:d, A
   2163              } while (!key_ok_on());
   \   00015E 8D000000              CALLF     ?Subroutine46
   \                     ??CrossCallReturnLabel_110:
   \   000162 27D1                  JREQ      L:??CrossCallReturnLabel_30
   2164          
   2165                //Set clock keeper
   2166               //year=y;
   2167               //month=m;
   2168               //date=d;
   2169               //Set_DS1307();
   2170          
   2171            return TRUE;
   \   000164 A601                  LD        A, #0x1
   \   000166 320000                POP       S:?b10
   \   000169 AC000000              JPF       L:?epilogue_w4
   2172          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:d
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
   2173          
   2174          

   \                                 In section .far_func.text, align 1, keep-with-next
   2175          void initBeep(void)
   2176          {
   2177            BEEP_DeInit();
   \                     initBeep:
   \   000000 8D000000              CALLF     BEEP_DeInit
   2178            BEEP_Init(BEEP_FREQUENCY_2KHZ);
   \   000004 A640                  LD        A, #0x40
   \   000006 8D000000              CALLF     BEEP_Init
   2179             BEEP_Cmd(ENABLE);
   \   00000A A601                  LD        A, #0x1
   \   00000C 8D000000              CALLF     BEEP_Cmd
   2180               Delay1(10000);
   \   000010 AE2710                LDW       X, #0x2710
   \   000013 8D000000              CALLF     Delay1
   2181             BEEP_Cmd(DISABLE);
   \   000017 4F                    CLR       A
   \   000018 AC000000              JPF       BEEP_Cmd
   2182          
   2183          }
   2184          

   \                                 In section .far_func.text, align 1, keep-with-next
   2185          void beep(u16 Interval)
   2186          {
   \                     beep:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2187          
   2188           BEEP_Cmd(ENABLE);
   \   000006 A601                  LD        A, #0x1
   \   000008 8D000000              CALLF     BEEP_Cmd
   2189               Delay1(Interval);
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E 8D000000              CALLF     Delay1
   2190            BEEP_Cmd(DISABLE);
   \   000012 4F                    CLR       A
   \   000013 8D000000              CALLF     BEEP_Cmd
   2191          
   2192          }
   \   000017 AC000000              JPF       L:?epilogue_w4
   2193          

   \                                 In section .far_func.text, align 1, keep-with-next
   2194           PUTCHAR_PROTOTYPE
   2195          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   2196            /* Place your implementation of fputc here */
   2197            /* e.g. write a character to the USART */
   2198                //USART_SendData(USART3, (u8) ch);
   2199               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   2200             /* Loop until the end of transmission */
   2201              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   2202            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   2203          }
   2204          
   2205           #ifdef USE_FULL_ASSERT
   2206          
   2207          /**
   2208            * @brief  Reports the name of the source file and the source line number
   2209            *   where the assert_param error has occurred.
   2210            * @param file: pointer to the source file name
   2211            * @param line: assert_param error line source number
   2212            * @retval : None
   2213            */

   \                                 In section .far_func.text, align 1
   2214          void assert_failed(u8* file, u32 line)
   2215          {
   2216            /* User can add his own implementation to report the file name and line number,
   2217               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   2218          
   2219            /* Infinite loop */
   2220            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   2221            {
   2222          
   2223            }
   2224          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Off">`:
   \   000000 204F666600            DC8 " Off"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Sun">`:
   \   000000 2053756E00            DC8 " Sun"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Mon">`:
   \   000000 204D6F6E00            DC8 " Mon"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Tues">`:
   \   000000 205475657300          DC8 " Tues"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Wednes">`:
   \   000000 205765646E65          DC8 " Wednes"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Thurs">`:
   \   000000 205468757273          DC8 " Thurs"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Fri">`:
   \   000000 2046726900            DC8 " Fri"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Satur">`:
   \   000000 205361747572          DC8 " Satur"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Daily">`:
   \   000000 204461696C79          DC8 " Daily"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " Month">`:
   \   000000 204D6F6E7468          DC8 " Month"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_T">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_T"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nWait 3s.">`:
   \   000000 0A5761697420          DC8 "\012Wait 3s."

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%dC%c%c%c%c">`:
   \   000000 0A25642E2564          DC8 "\012%d.%dC%c%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%c%c%c%c">`:
   \   000000 0A2563256325          DC8 "\012%c%c%c%c"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYear>">`:
   \   000000 0A596561723E          DC8 "\012Year>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonth>">`:
   \   000000 0A4D6F6E7468          DC8 "\012Month>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate>">`:
   \   000000 0A446174653E          DC8 "\012Date>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays>">`:
   \   000000 0A446179733E          DC8 "\012Days>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHour>">`:
   \   000000 0A486F75723E          DC8 "\012Hour>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinute>">`:
   \   000000 0A4D696E7574          DC8 "\012Minute>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds>">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off>">`:
   \   000000 0A48204F6666          DC8 "\012H Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off>">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off>"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManuAuto">`:
   \   000000 0A4D616E7541          DC8 "\012ManuAuto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nAuto">`:
   \   000000 0A4175746F00          DC8 "\012Auto"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nManu">`:
   \   000000 0A4D616E7500          DC8 "\012Manu"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nP%d%s">`:
   \   000000 0A5025642573          DC8 "\012P%d%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%s">`:
   \   000000 0A257300              DC8 "\012%s"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " On">`:
   \   000000 204F6E00              DC8 " On"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n  :%02d">`:
   \   000000 0A20203A2530          DC8 "\012  :%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:  ">`:
   \   000000 0A253032643A          DC8 "\012%02d:  "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMonthly ">`:
   \   000000 0A4D6F6E7468          DC8 "\012Monthly "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock   ">`:
   \   000000 0A436C6F636B          DC8 "\012Clock   "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate    ">`:
   \   000000 0A4461746520          DC8 "\012Date    "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   2225          #endif
   2226          
   2227          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     month                             1
     year                              1
     error                             1
     y                                 1
     m                                 1
     d                                 1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     monthly_year                      1
     monthly_month                     1
     monthly_date                      1
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     manu_display                      1
     sync_display                      1
     program_display                   1
     program_number                    1
     sync_time_ds1307                  1
     lcdLedTimer                       1
     button                            1
     power                             1
     blink_flag                        1
     line1                            10
     line2                            10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     Day_Week                         22
     status                            2
     hardware                          2
     programpoint                     40
     ?Subroutine35                     5
     ?Subroutine76                     9
     ??Subroutine86_0                  8
     ?Subroutine46                     7
     ??Subroutine92_0                  7
     ?Subroutine83                    11
     main                            369
     ?Subroutine57                     9
     ?Subroutine45                     9
     ?Subroutine40                    11
     ?Subroutine39                    11
     ?Subroutine11                     9
     ?Subroutine24                     4
     ??Subroutine90_0                 10
     ?Subroutine78                     7
     Display                         223
     Power_On                         14
     ?Subroutine42                    11
     ?Subroutine77                     9
     Power_Off                        14
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine52                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine51                     1
     ??Subroutine94_0                  7
     ?Subroutine50                     9
     ReadDS1307                      130
     ?Subroutine53                    11
     ?Subroutine33                    11
     ?Subroutine28                    13
     ?Subroutine23                     8
     ?Subroutine75                    10
     Check_DS1307                     78
     Set_DS1307                      108
     ?Subroutine49                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       372
     ?Subroutine44                    11
     ?Subroutine17                     7
     ??Subroutine85_0                  9
     ?Subroutine16                    11
     ?Subroutine15                    11
     ?Subroutine71                    16
     ?Subroutine82                     6
     ?Subroutine47                     7
     ?Subroutine32                     6
     ??Subroutine87_0                  5
     ?Subroutine25                    10
     adj                              85
     key_ok_on                        61
     ?Subroutine36                    14
     ?Subroutine34                     7
     ?Subroutine30                    10
     key_plus_on                      59
     ?Subroutine41                     7
     ?Subroutine38                     7
     key_minus_on                     59
     key_ok_plus                      48
     ?Subroutine13                    29
     Set_Timer_Off                   158
     ?Subroutine58                     2
     ?Subroutine48                     7
     ?Subroutine2                      4
     ??Subroutine88_0                  3
     ??Subroutine89_0                  7
     ?Subroutine27                    10
     ?Subroutine1                     29
     ?Subroutine79                    14
     ?Subroutine69                     9
     SaveStatus                       25
     ?Subroutine56                     5
     SaveProgram                      33
     ?Subroutine55                    19
     ReadProgram                      48
     ResetProgram                     33
     CheckProgramPoint               192
     Read_Allarm                      47
     EEPROM_INIT                      15
     GpioConfiguration               120
     ?Subroutine67                     9
     ?Subroutine64                     7
     InitClk                          62
     ?Subroutine65                     9
     LCDDataOut                       87
     ?Subroutine8                      7
     ??Subroutine93_0                  5
     ?Subroutine72                     7
     ?Subroutine74                     8
     ?Subroutine10                     2
     InitLcd                          85
     ?Subroutine19                     8
     ?Subroutine14                    17
     ?Subroutine9                     11
     ?Subroutine0                     13
     ??Subroutine84_0                 10
     ?Subroutine21                    10
     LCDInstr                         11
     LCDData                          11
     LCDInstrNibble                   15
     PulseEnable                      16
     ?Subroutine4                     24
     ?Subroutine68                     6
     LCD_Busy                         69
     LCD                             200
     ?Subroutine73                     9
     ?Subroutine7                      4
     ??Subroutine91_0                  5
     ?Subroutine22                     8
     InitDelayTimer2                  29
     InitDelayTimer3                  23
     DS18_Write                       54
     ?Subroutine18                     2
     ?Subroutine12                    10
     ?Subroutine70                     9
     DS18_Read                        74
     ?Subroutine20                    12
     DS18_Reset                       72
     ?Subroutine37                     7
     ?Subroutine63                     7
     temperature                      63
     ?Subroutine62                    15
     ?Subroutine81                     6
     ?Subroutine61                    23
     ?Subroutine3                     24
     Read_DS18                       121
     ?Subroutine66                    12
     DS18Set                          55
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine6                     13
     ?Subroutine5                     16
     Clear_Line2                      19
     ?Subroutine80                     8
     FirstMenu                       117
     ?Subroutine29                     9
     ProgramMenu                     569
     ?Subroutine60                     9
     ?Subroutine59                    10
     ?Subroutine43                     9
     ?Subroutine31                    15
     Menu                            352
     ?Subroutine54                     6
     pressKey                         74
     setData                         365
     ?Subroutine26                    10
     initBeep                         28
     beep                             27
     fputc                            18
     assert_failed                     2
     ?<Constant " Off">                5
     ?<Constant " Sun">                5
     ?<Constant " Mon">                5
     ?<Constant " Tues">               6
     ?<Constant " Wednes">             8
     ?<Constant " Thurs">              7
     ?<Constant " Fri">                5
     ?<Constant " Satur">              7
     ?<Constant " Daily">              7
     ?<Constant " Month">              7
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "\nDS_Err_T">         10
     ?<Constant "\nWait 3s.">         10
     ?<Constant "\n%d.%dC%c%c%c%c">   16
     ?<Constant "\n%c%c%c%c">         10
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYear>">             7
     ?<Constant "\nMonth>">            8
     ?<Constant "\nDate>">             7
     ?<Constant "\nDays>">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHour>">             7
     ?<Constant "\nMinute>">           9
     ?<Constant "\nSeconds>">         10
     ?<Constant "\nH Off>">            8
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin Off>">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nManuAuto">         10
     ?<Constant "\nAuto">              6
     ?<Constant "\nManu">              6
     ?<Constant "\nP%d%s">             7
     ?<Constant "\n%s">                4
     ?<Constant " On">                 4
     ?<Constant "\n  :%02d">           9
     ?<Constant "\n%02d:  ">           9
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nMonthly ">         10
     ?<Constant "\nClock   ">         10
     ?<Constant "\nDate    ">         10
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 6 238 bytes in section .far_func.text
   123 bytes in section .near.bss
    25 bytes in section .near.data
   371 bytes in section .near.rodata
 
 6 238 bytes of CODE  memory
   371 bytes of CONST memory
   148 bytes of DATA  memory

Errors: none
Warnings: none
