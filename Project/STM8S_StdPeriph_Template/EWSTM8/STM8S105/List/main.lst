###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.30.1.50036 for STM8             19/Sep/2013  22:49:16 #
# Copyright 2010-2011 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\main.c     #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\main.c"   #
#                    -e -Ohz --debug --code_model medium --data_model medium  #
#                    -o "C:\Documents and Settings\Administrator\Desktop\stm8 #
#                    s105k-controller\Project\STM8S_StdPeriph_Template\EWSTM8 #
#                    \STM8S105\Obj\" --dlib_config "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 6.0\stm8\LIB\dlstm8mmf.h" -D  #
#                    STM8S105 -lC "C:\Documents and                           #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\STM8S105\List\" -lA  #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\ST #
#                    M8S105\List\" -I "C:\Documents and                       #
#                    Settings\Administrator\Desktop\stm8s105k-controller\Proj #
#                    ect\STM8S_StdPeriph_Template\EWSTM8\..\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\stm8s10 #
#                    5k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\.. #
#                    \..\..\Libraries\STM8S_StdPeriph_Driver\inc\" --vregs 16 #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\List\main.lst                                      #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\stm8s105 #
#                    k-controller\Project\STM8S_StdPeriph_Template\EWSTM8\STM #
#                    8S105\Obj\main.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\stm8s105k-controller\Project\STM8S_StdPeriph_Template\main.c
      1          /**
      2             LCD PINOUT
      3             PINS  1    2    3   4   5   6   7   8   9   10   11   12   13   14    15    16
      4                  VSS  VDD  VO  RS  R/W  E  DB0 DB1 DB2  DB3  DB4  DB5 DB6  DB7  LED_A LED_K
      5                  GND
      6                                20   22  24                   18    19   21   23
      7                                3    5   7                    1     2    4    6
      8             */
      9          
     10          /** New Device STM8S105K4  */
     11          /* Controller LCD DS1307,DS18B20 */
     12          
     13          /* Daily Allarm ON OFF
     14                                  ON
     15                                  |
     16            First bit set ON      100H:HHHH MMMM:MMMM
     17                                     OFF
     18                                      |
     19            Second bit set OFF       010H:HHHH MMMM:MMMM
     20          
     21          
     22            Daily Allarm ON TimeLong(in minute for 24h 1440 minute 0x5A0)
     23          
     24          
     25          
     26          
     27          */
     28          
     29          
     30          
     31          /* Includes ------------------------------------------------------------------*/
     32          #include "stm8s.h"
     33          #include "stdio.h"
     34          //#include <time.h>
     35          #include "string.h"
     36          
     37          /* Private defines -----------------------------------------------------------*/
     38          
     39          /* ================ LCD ======================= */
     40          
     41          #define LCD_GPIO_PIN (GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7)
     42          #define LCD_PORT (GPIOC)
     43          #define LCD_GPIO_COTROL_PIN (GPIO_PIN_3 | GPIO_PIN_1 |GPIO_PIN_2)
     44          #define DATA4 GPIO_PIN_4
     45          #define DATA5 GPIO_PIN_5
     46          #define DATA6 GPIO_PIN_6
     47          #define DATA7 GPIO_PIN_7
     48          #define EN  GPIO_PIN_3
     49          #define RW  GPIO_PIN_1
     50          #define RS  GPIO_PIN_2
     51          #define LCD_EN(x)  x ? GPIO_WriteHigh(LCD_PORT, EN): GPIO_WriteLow(LCD_PORT,EN); //GPIOB->ODR =(GPIOB->ODR &~PIN_EN)|(x ? PIN_EN :0);
     52          #define LCD_RW(x)  x ? GPIO_WriteHigh(LCD_PORT, RW): GPIO_WriteLow(LCD_PORT,RW);
     53          #define LCD_RS(x)  x ? GPIO_WriteHigh(LCD_PORT, RS): GPIO_WriteLow(LCD_PORT,RS);
     54          
     55          #define key_ok    GPIO_PIN_4
     56          #define key_plus  GPIO_PIN_1
     57          #define key_minus GPIO_PIN_2
     58            //DS18B20  Temp Sensor
     59          #define ds18_data GPIO_PIN_2 //2
     60          #define DS18(x)   x ? GPIO_WriteHigh(GPIOD,ds18_data):GPIO_WriteLow(GPIOD,ds18_data);
     61            //Power
     62          #define power_pin GPIO_PIN_3
     63          
     64          
     65          
     66          //EEPROM Address;
     67          #define EEPROM_ADDR 0x4000
     68          #define EEPROM_ADR_STATUSH EEPROM_ADDR + 0
     69          #define EEPROM_ADR_STATUSL EEPROM_ADDR + 1
     70          #define EEPROM_ADR_TIME_ON_HOURS EEPROM_ADDR +2
     71          #define EEPROM_ADR_TIME_ON_MINUTES EEPROM_ADDR +3
     72          #define EEPROM_ADR_TIME_OFF_HOURS EEPROM_ADDR +4
     73          #define EEPROM_ADR_TIME_OFF_MINUTES EEPROM_ADDR +5
     74          
     75          
     76          
     77          #ifdef __GNUC__
     78            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     79               set to 'Yes') calls __io_putchar() */
     80            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     81          #else
     82            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     83          #endif /* __GNUC__ */
     84          
     85          
     86          
     87          
     88          #define SpecialSymbol 0x1b //Esc to start message
     89          //#define data_size 20
     90          #define key_time 8000
     91          #define key_time_ok 15000
     92          #define key_time_press 4000
     93          #define key_time_release 400
     94          #define DS_Control  0x10  // Out 1s
     95          #define time_menu 10  // 5s
     96          
     97          
     98          
     99          
    100          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
    101          volatile u16 timer1;
   \                     timer1:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    102          volatile u16 timer2;
   \                     timer2:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    103          volatile u16 timer3;
   \                     timer3:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    104          volatile u8 timeout;
   \                     timeout:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    105          volatile u16 adcdata;
   \                     adcdata:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    106          volatile u8 rx_data;
   \                     rx_data:
   \   000000                       DS8 1
    107          //char data[data_size];
    108          //u16  measure[data_size];

   \                                 In section .near.bss, align 1
    109          u8 line_lcd;
   \                     line_lcd:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    110          u8 count;
   \                     count:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    111          u8 seconds;
   \                     seconds:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    112          u8 minutes;
   \                     minutes:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    113          u8 hours;
   \                     hours:
   \   000000                       DS8 1

   \                                 In section .near.data, align 1
    114          u8 days=1;
   \                     days:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    115          u8 date=1;
   \                     `date`:
   \   000000 01                    DC8 1

   \                                 In section .near.data, align 1
    116          u8 monts=1;
   \                     monts:
   \   000000 01                    DC8 1

   \                                 In section .near.bss, align 1
    117          int years;
   \                     years:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    118          u8 error;
   \                     error:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    119          u8 temp_flag;
   \                     temp_flag:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    120          u8 temp2;
   \                     temp2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    121          u8 daily_hour_on;
   \                     daily_hour_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    122          u8 daily_minute_on;
   \                     daily_minute_on:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    123          u8 daily_hour_off;
   \                     daily_hour_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    124          u8 daily_minute_off;
   \                     daily_minute_off:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    125          u16 daily_long_on;
   \                     daily_long_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    126          u16 time_on;
   \                     time_on:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    127          u16 time_off;
   \                     time_off:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    128          u8 ttimer;
   \                     ttimer:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    129          u8 result1;
   \                     result1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    130          u8 result2;
   \                     result2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    131          u8 result_old;
   \                     result_old:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    132          u8 l=0;
   \                     l:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    133          u16 status_check;
   \                     status_check:
   \   000000                       DS8 2

   \                                 In section .near.bss, align 1
    134          u8 test1;
   \                     test1:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    135          u8 test2;
   \                     test2:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    136          u8 date_end;
   \                     date_end:
   \   000000                       DS8 1
    137          

   \                                 In section .near.bss, align 1
    138          char line1[40];
   \                     line1:
   \   000000                       DS8 40

   \                                 In section .near.bss, align 1
    139          char string1[10];
   \                     string1:
   \   000000                       DS8 10

   \                                 In section .near.bss, align 1
    140          bool change;
   \                     change:
   \   000000                       DS8 1

   \                                 In section .near.bss, align 1
    141          bool Time_Display;
   \                     Time_Display:
   \   000000                       DS8 1
    142          
    143          //u8 index=0;

   \                                 In section .near.bss, align 1
    144          float  result;
   \                     result:
   \   000000                       DS8 4

   \                                 In section .near.bss, align 1
    145          int volatile k=0;
   \                     k:
   \   000000                       DS8 2
    146          
    147          
    148           struct   status_reg
    149           {
    150             unsigned on:1;
    151             unsigned timer_on:1;
    152             unsigned daily:1;

   \                                 In section .near.bss, align 1
    153           }  volatile   status  ;
   \                     status:
   \   000000                       DS8 2
    154          
    155          //time_t  ltime;
    156          //struct tm ptim;
    157          
    158          
    159          
    160          
    161          
    162          /* Private function prototypes -----------------------------------------------*/
    163          void InitHardware();
    164          void GpioConfiguration();
    165          void InitClk();
    166          void InitAdc();
    167          void InitI2C();
    168          void EEPROM_INIT();
    169          bool ReadDS1307();
    170          //void InitUart();
    171          void InitLcd();
    172          void InitDelayTimer2();
    173          void InitDelayTimer3();
    174          void Delay1( u16 Delay);
    175          void Delay2( u16 Delay);
    176          void Delay_us(u16 Delay);
    177          void LCDInstrNibble (u8 Instr);
    178          void LCDInstr(u8 Instr);
    179          void LCDDataOut(u8 data);
    180          void LCD_Busy();
    181          void PulseEnable();
    182          //void SendData();
    183          void SendChar(u8 Char);
    184          //void Send_Hello();
    185          bool Set_Clock();
    186          bool key_ok_on();
    187          bool key_plus_on();
    188          bool key_minus_on();
    189          bool key_ok_plus();
    190          bool Init_DS1307(void);
    191          bool Check_DS1307(void);
    192          bool I2C_Start(void);
    193          bool I2C_WA(u8 address);
    194          bool I2C_WD(u8 data);
    195          bool I2C_RA(u8 address);
    196          bool Set_DS1307();
    197          //bool Set_Delay_Allarm();
    198          bool Set_Timer_On();
    199          bool Set_Timer_Off();
    200          bool Read_Allarm();
    201          bool Read_DS18();
    202          bool DS18_Write( u8 data);
    203          bool DS18_Reset();
    204          bool DS18Set();
    205          u8 temperature();
    206          u8 DS18_Read();
    207          u8 convert_tobcd(u8 data);
    208          u8 I2C_RD(void);
    209          u8 adj(u8 min,u8 max,u8 now);
    210          u8 bcd2hex(u8 bcd);
    211          void Power_On(void);
    212          void Power_Off();
    213          void Save_Status();
    214          void Rotate_Line( char * line);
    215          void Display_Line(char * line);
    216          void Clear_Line1(void);
    217          void Clear_Line2(void);
    218          void Menu(void);
    219          u8 Key_Press(void);
    220          void Display(void);
    221          bool Set_Date(void);
    222          
    223          u16  Average();
    224          
    225          
    226          /* Private functions ---------------------------------------------------------*/
    227          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000 8D000000              CALLF     key_ok_on
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_179:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:seconds
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1
    228          void main(void)
    229          {
   \                     main:
   \   000000 3B0000                PUSH      S:?b8
    230              /*High speed internal clock prescaler: 1*/
    231              //CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1);
    232          
    233              InitClk();
   \   000003 8D000000              CALLF     InitClk
    234              InitDelayTimer2();
   \   000007 8D000000              CALLF     InitDelayTimer2
    235              InitDelayTimer3();
   \   00000B 8D000000              CALLF     InitDelayTimer3
    236              GpioConfiguration();
   \   00000F 8D000000              CALLF     GpioConfiguration
    237              GPIO_WriteLow(GPIOD, power_pin );
   \   000013 8D000000              CALLF     ?Subroutine28
    238              //InitUart();
    239              enableInterrupts();
   \                     ??CrossCallReturnLabel_69:
   \   000017 9A                    RIM
    240              GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R/W Line Read Mode
   \   000018 A680                  LD        A, #0x80
   \   00001A 8D000000              CALLF     ?Subroutine70
    241              InitLcd();
   \                     ??CrossCallReturnLabel_185:
   \   00001E 8D000000              CALLF     InitLcd
    242              //InitAdc();
    243              InitI2C();
   \   000022 8D000000              CALLF     InitI2C
    244              //Init DS18B20
    245              DS18Set();
   \   000026 8D000000              CALLF     DS18Set
    246              line_lcd=0;
   \   00002A 725F0000              CLR       L:line_lcd
    247              if (!Read_DS18())
   \   00002E 8D000000              CALLF     Read_DS18
   \   000032 A100                  CP        A, #0x0
   \   000034 260D                  JRNE      L:??main_0
    248              {
    249               printf("\nDS_Err_I");
   \   000036 AE0000                LDW       X, #`?<Constant "\\nDS_Err_I">`
   \   000039 8D000000              CALLF     printf
    250                while (!key_ok_on());
   \                     ??main_1:
   \   00003D 8D000000              CALLF     ?Subroutine42
    251              }
   \                     ??CrossCallReturnLabel_115:
   \   000041 27FA                  JREQ      L:??main_1
    252          
    253          
    254          
    255          
    256          
    257              //years=bcd2hex(13);
    258              Delay1(1000);
   \                     ??main_0:
   \   000043 AE03E8                LDW       X, #0x3e8
   \   000046 8D000000              CALLF     Delay1
    259               if (!ReadDS1307())
   \   00004A 8D000000              CALLF     ReadDS1307
   \   00004E A100                  CP        A, #0x0
   \   000050 2615                  JRNE      L:??main_2
    260               {
    261                 printf("\n E2:%d",error);
   \   000052 C60000                LD        A, L:error
   \   000055 5F                    CLRW      X
   \   000056 97                    LD        XL, A
   \   000057 89                    PUSHW     X
   \   000058 AE0000                LDW       X, #`?<Constant "\\n E2:%d">`
   \   00005B 8D000000              CALLF     printf
   \   00005F 5B02                  ADD       SP, #0x2
    262                 // Reset the CPU: Enable the watchdog and wait until it expires
    263                 IWDG->KR = IWDG_KEY_ENABLE;
   \   000061 35CC50E0              MOV       L:0x50e0, #0xcc
    264                 while ( 1 );    // Wait until reset occurs from IWDG
   \                     ??main_3:
   \   000065 20FE                  JRA       L:??main_3
    265               }
    266               //Send_Hello();
    267              //line_lcd=0;
    268              //printf("\nHello");
    269          
    270          
    271              if (!Check_DS1307())
   \                     ??main_2:
   \   000067 8D000000              CALLF     Check_DS1307
   \   00006B A100                  CP        A, #0x0
   \   00006D 2626                  JRNE      L:??main_4
    272              {
    273                 if (error!=0)
   \   00006F C60000                LD        A, L:error
   \   000072 2712                  JREQ      L:??main_5
    274                 {
    275                  printf("\n E:%d",error);
   \   000074 5F                    CLRW      X
   \   000075 97                    LD        XL, A
   \   000076 89                    PUSHW     X
   \   000077 AE0000                LDW       X, #`?<Constant "\\n E:%d">`
   \   00007A 8D000000              CALLF     printf
   \   00007E 5B02                  ADD       SP, #0x2
    276                   while (!key_ok_on());
   \                     ??main_6:
   \   000080 8D000000              CALLF     ?Subroutine42
    277          
    278                 }
   \                     ??CrossCallReturnLabel_116:
   \   000084 27FA                  JREQ      L:??main_6
    279               line_lcd=0;
   \                     ??main_5:
   \   000086 725F0000              CLR       L:line_lcd
    280               printf("\nSetClock");
   \   00008A AE0000                LDW       X, #`?<Constant "\\nSetClock">`
   \   00008D 8D000000              CALLF     printf
    281                Set_Clock();
   \   000091 8D000000              CALLF     Set_Clock
    282          
    283              }
    284          
    285          
    286                 //Read Status register from eepom and update it
    287                //size=sizeof(status);
    288               //u16 status
    289               *(u16*)(&status)=(u16)(FLASH_ReadByte(EEPROM_ADR_STATUSH)*256)+(u16)FLASH_ReadByte(EEPROM_ADR_STATUSL);
   \                     ??main_4:
   \   000095 AE4000                LDW       X, #0x4000
   \   000098 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_16:
   \   00009C B700                  LD        S:?b8, A
   \   00009E AE4001                LDW       X, #0x4001
   \   0000A1 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_15:
   \   0000A5 905F                  CLRW      Y
   \   0000A7 9097                  LD        YL, A
   \   0000A9 5F                    CLRW      X
   \   0000AA 41                    EXG       A, XL
   \   0000AB B600                  LD        A, S:?b8
   \   0000AD 41                    EXG       A, XL
   \   0000AE 4F                    CLR       A
   \   0000AF 02                    RLWA      X, A
   \   0000B0 8D000000              CALLF     ??Subroutine81_0
   \                     ??CrossCallReturnLabel_240:
   \   0000B4 CF0000                LDW       L:status, X
    290                status_check = *(u16*)(&status);
   \   0000B7 CE0000                LDW       X, L:status
   \   0000BA CF0000                LDW       L:status_check, X
    291              //When Start Check for Allarm and computing Daily_long_on
    292               if ( Read_Allarm() == TRUE)
   \   0000BD 8D000000              CALLF     Read_Allarm
   \   0000C1 A101                  CP        A, #0x1
   \   0000C3 2613                  JRNE      L:??CrossCallReturnLabel_212
    293               {
    294                 time_on=daily_hour_on*60+daily_minute_on;
   \   0000C5 8D000000              CALLF     ?Subroutine26
    295                 time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_66:
   \   0000C9 C60000                LD        A, L:daily_hour_off
   \   0000CC 8D000000              CALLF     ?Subroutine25
    296               }
   \                     ??CrossCallReturnLabel_64:
   \   0000D0 2006                  JRA       L:??CrossCallReturnLabel_212
    297          
    298               //UART2_Cmd(DISABLE);  // Disable UART for the moment
    299          
    300               // Working fuction
    301              //Set_DS1307(13,7,13,34,0);//u8 year ,u8 monts,u8 hours,u8 minutes,u8 seconds)
    302          
    303          
    304          
    305              // strcpy(line1,"Hello I am here! ");
    306              //  while(1)
    307              //  {
    308              //     Display_Line(line1);
    309              //     Delay2(20000);
    310              //  }
    311              //  while (!key_ok_on());
    312                 //sprintf(line1,"TIMER ON ");
    313              while(1)
    314              {
    315                ADC1_Cmd (ENABLE);
    316          
    317                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    318                   Delay2(10000);
    319                   //ttimer++;
    320                // GPIO_WriteReverse(GPIOD, (GPIO_Pin_TypeDef)GPIO_PIN_0 );
    321                //   Delay2(5000);
    322          
    323                     //status_check = *(u16*)(&status);
    324          
    325          
    326                /*
    327               if (!ReadDS1307())
    328               {
    329                 printf("\n E2:%d",error);
    330                  //restart i2c
    331                // Reset the CPU: Enable the watchdog and wait until it expires
    332                 IWDG->KR = IWDG_KEY_ENABLE;
    333                 while ( 1 );    // Wait until reset occurs from IWDG
    334          
    335               }
    336               */
    337          
    338          
    339                if (key_ok_on()) Menu();
    340                 //if(key_ok_plus()) Set_Delay_Allarm();  //Set Daily Allarm
    341                if(key_plus_on()) Power_On();
    342                if(key_minus_on())Power_Off();
    343          
    344          
    345                //Check for Allarm
    346                    if (status.daily==1)
    347                  {
    348                u16 time_now=hours*60+minutes;
    349                status.on=0;
    350                     u16 time=time_on;
    351                     do
    352                    {
    353                       if(time==time_now)
    354                       {
    355                         status.on=1;
    356                          break ;
    357                       }
    358                        time++;
    359                         if( time==1441) time=0;
    360                    } while(!(time==time_off));
    361                   };
    362          
    363          
    364                      //Read Temperature
    365                  // if( ttimer > 5 )
    366                   //{
    367          
    368          
    369                      result1=temperature();
    370                      if (result_old != result1) change=TRUE;
    371                       //else  change=FALSE;
    372                      result_old=result1;
    373                      result2=0;
    374                      if(result1%2!=0) result2=5;
    375                      result1/=2;
    376          
    377          
    378                     // char result3;
    379                     // ttimer=0;
    380                 //  }
    381          
    382                   //printf("\n%d.%d",result1,result2);
    383          
    384                     //Display
    385                     // line_lcd=0;
    386                     if (status.daily==1)  sprintf(string1,"TIMER ON");
    387                      else sprintf(string1,"TIMER OFF");
    388          
    389          
    390          
    391                       if (change)
    392                       {
    393                      sprintf(line1,"%d.%dC %s ",result1,result2,string1);
    394                         change=FALSE;
    395                       }
    396                     line_lcd=0;
    397                      Display_Line(line1);
    398                    line_lcd=1;
    399                    printf("\n%02d:%02d:%02d",hours,minutes,seconds);
    400          
    401          
    402                     if(status.on) GPIO_WriteHigh(GPIOD, power_pin );
   \                     ??main_7:
   \   0000D2 A608                  LD        A, #0x8
   \   0000D4 8D000000              CALLF     ??Subroutine75_0
   \                     ??CrossCallReturnLabel_212:
   \   0000D8 A601                  LD        A, #0x1
   \   0000DA 8D000000              CALLF     ADC1_Cmd
   \   0000DE AE2710                LDW       X, #0x2710
   \   0000E1 8D000000              CALLF     Delay2
   \   0000E5 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_117:
   \   0000E9 2704                  JREQ      L:??main_8
   \   0000EB 8D000000              CALLF     Menu
   \                     ??main_8:
   \   0000EF 8D000000              CALLF     key_plus_on
   \   0000F3 A100                  CP        A, #0x0
   \   0000F5 2704                  JREQ      L:??main_9
   \   0000F7 8D000000              CALLF     Power_On
   \                     ??main_9:
   \   0000FB 8D000000              CALLF     key_minus_on
   \   0000FF A100                  CP        A, #0x0
   \   000101 2704                  JREQ      L:??main_10
   \   000103 8D000000              CALLF     Power_Off
   \                     ??main_10:
   \   000107 CE0000                LDW       X, L:status
   \   00010A 9F                    LD        A, XL
   \   00010B A504                  BCP       A, #0x4
   \   00010D 2739                  JREQ      L:??main_11
   \   00010F C60000                LD        A, L:hours
   \   000112 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_238:
   \   000116 C60000                LD        A, L:minutes
   \   000119 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_242:
   \   00011D BF00                  LDW       S:?w0, X
   \   00011F CE0000                LDW       X, L:status
   \   000122 01                    RRWA      X, A
   \   000123 A4FE                  AND       A, #0xfe
   \   000125 02                    RLWA      X, A
   \   000126 CF0000                LDW       L:status, X
   \   000129 CE0000                LDW       X, L:time_on
   \                     ??main_12:
   \   00012C B300                  CPW       X, S:?w0
   \   00012E 260C                  JRNE      L:??main_13
   \   000130 CE0000                LDW       X, L:status
   \   000133 01                    RRWA      X, A
   \   000134 AA01                  OR        A, #0x1
   \   000136 02                    RLWA      X, A
   \   000137 CF0000                LDW       L:status, X
   \   00013A 200C                  JRA       L:??main_11
   \                     ??main_13:
   \   00013C 5C                    INCW      X
   \   00013D A305A1                CPW       X, #0x5a1
   \   000140 2601                  JRNE      L:??main_14
   \   000142 5F                    CLRW      X
   \                     ??main_14:
   \   000143 C30000                CPW       X, L:time_off
   \   000146 26E4                  JRNE      L:??main_12
   \                     ??main_11:
   \   000148 8D000000              CALLF     temperature
   \   00014C C70000                LD        L:result1, A
   \   00014F C10000                CP        A, L:result_old
   \   000152 2704                  JREQ      L:??main_15
   \   000154 35010000              MOV       L:change, #0x1
   \                     ??main_15:
   \   000158 C70000                LD        L:result_old, A
   \   00015B 725F0000              CLR       L:result2
   \   00015F 7201000004            BTJF      L:result1, #0x0, L:??main_16
   \   000164 35050000              MOV       L:result2, #0x5
   \                     ??main_16:
   \   000168 44                    SRL       A
   \   000169 C70000                LD        L:result1, A
   \   00016C CE0000                LDW       X, L:status
   \   00016F 9F                    LD        A, XL
   \   000170 A504                  BCP       A, #0x4
   \   000172 2706                  JREQ      L:??main_17
   \   000174 90AE0000              LDW       Y, #`?<Constant "TIMER ON">`
   \   000178 2004                  JRA       ??main_18
   \                     ??main_17:
   \   00017A 90AE0000              LDW       Y, #`?<Constant "TIMER OFF">`
   \                     ??main_18:
   \   00017E AE0000                LDW       X, #string1
   \   000181 8D000000              CALLF     sprintf
   \   000185 C60000                LD        A, L:change
   \   000188 2720                  JREQ      L:??main_19
   \   00018A 4B00                  PUSH      #BYTE1(string1)
   \   00018C 4B00                  PUSH      #BYTE2(string1)
   \   00018E C60000                LD        A, L:result2
   \   000191 5F                    CLRW      X
   \   000192 97                    LD        XL, A
   \   000193 89                    PUSHW     X
   \   000194 C60000                LD        A, L:result1
   \   000197 97                    LD        XL, A
   \   000198 89                    PUSHW     X
   \   000199 90AE0000              LDW       Y, #`?<Constant "%d.%dC %s ">`
   \   00019D AE0000                LDW       X, #line1
   \   0001A0 8D000000              CALLF     sprintf
   \   0001A4 5B06                  ADD       SP, #0x6
   \   0001A6 725F0000              CLR       L:change
   \                     ??main_19:
   \   0001AA 725F0000              CLR       L:line_lcd
   \   0001AE AE0000                LDW       X, #line1
   \   0001B1 8D000000              CALLF     Display_Line
   \   0001B5 8D000000              CALLF     ?Subroutine38
   \                     ??CrossCallReturnLabel_95:
   \   0001B9 89                    PUSHW     X
   \   0001BA C60000                LD        A, L:minutes
   \   0001BD 97                    LD        XL, A
   \   0001BE 89                    PUSHW     X
   \   0001BF C60000                LD        A, L:hours
   \   0001C2 97                    LD        XL, A
   \   0001C3 89                    PUSHW     X
   \   0001C4 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0001C7 8D000000              CALLF     printf
   \   0001CB 5B06                  ADD       SP, #0x6
   \   0001CD CE0000                LDW       X, L:status
   \   0001D0 9F                    LD        A, XL
   \   0001D1 A501                  BCP       A, #0x1
   \   0001D3 2703                  JREQ      ??lb_1
   \   0001D5 CC0000                JP        L:??main_7
    403                       else   GPIO_WriteLow(GPIOD, power_pin );
   \                     ??lb_1:
   \   0001D8 8D000000              CALLF     ?Subroutine28
    404          
    405          
    406          
    407              }
   \                     ??CrossCallReturnLabel_70:
   \   0001DC CC0000                JP        L:??CrossCallReturnLabel_212
    408          
    409          
    410          
    411          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000 905F                  CLRW      Y
   \   000002                       REQUIRE ??Subroutine80_0
   \   000002                       ;               // Fall through to label ??Subroutine80_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine80_0:
   \   000000 9097                  LD        YL, A
   \   000002 AE003C                LDW       X, #0x3c
   \   000005 BF00                  LDW       S:?w0, X
   \   000007 93                    LDW       X, Y
   \   000008 AC000000              JPF       L:?mul16_x_x_w0

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine28:
   \   000000 A608                  LD        A, #0x8
   \   000002 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_184:
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine70:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 AC000000              JPF       GPIO_WriteLow

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine26:
   \   000000 C60000                LD        A, L:daily_hour_on
   \   000003 8D000000              CALLF     ?Subroutine63
   \                     ??CrossCallReturnLabel_239:
   \   000007 C60000                LD        A, L:daily_minute_on
   \   00000A 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_244:
   \   00000E CF0000                LDW       L:time_on, X
   \   000011 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000 9097                  LD        YL, A
   \   000002                       REQUIRE ??Subroutine81_0
   \   000002                       ;               // Fall through to label ??Subroutine81_0

   \                                 In section .far_func.text, align 1
   \                     ??Subroutine81_0:
   \   000000 90BF00                LDW       S:?w0, Y
   \   000003 72BB0000              ADDW      X, S:?w0
   \   000007 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine25:
   \   000000 8D000000              CALLF     ??Subroutine80_0
   \                     ??CrossCallReturnLabel_237:
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 8D000000              CALLF     ?Subroutine68
   \                     ??CrossCallReturnLabel_243:
   \   00000B CF0000                LDW       L:time_off, X
   \   00000E 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine7:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ReadByte
    412          

   \                                 In section .far_func.text, align 1
    413          void Display(void)
    414          {
    415            line_lcd=0;
   \                     Display:
   \   000000 725F0000              CLR       L:line_lcd
    416          
    417          
    418          
    419          
    420          
    421            Time_Display=FALSE;
   \   000004 725F0000              CLR       L:Time_Display
    422          }
   \   000008 87                    RETF
    423          

   \                                 In section .far_func.text, align 1
    424          void Power_On()
    425          {
    426            status.on=1;
   \                     Power_On:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA01                  OR        A, #0x1
   \   000006 8D000000              CALLF     ?Subroutine43
    427            status.daily=0; //Off Daily timer
    428            Save_Status();
    429            change=TRUE;
    430          }
   \                     ??CrossCallReturnLabel_119:
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine43:
   \   000000 02                    RLWA      X, A
   \   000001 CF0000                LDW       L:status, X
   \   000004 CE0000                LDW       X, L:status
   \   000007 01                    RRWA      X, A
   \   000008 A4FB                  AND       A, #0xfb
   \   00000A 02                    RLWA      X, A
   \   00000B CF0000                LDW       L:status, X
   \   00000E 8D000000              CALLF     Save_Status
   \   000012 35010000              MOV       L:change, #0x1
   \   000016 87                    RETF
    431          

   \                                 In section .far_func.text, align 1
    432          void Power_Off()
    433          {
    434            status.on=0;
   \                     Power_Off:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 A4FE                  AND       A, #0xfe
   \   000006 8D000000              CALLF     ?Subroutine43
    435            status.daily=0; //Off Daily timer
    436            Save_Status();
    437            change=TRUE;
    438          }
   \                     ??CrossCallReturnLabel_118:
   \   00000A 87                    RETF
    439          

   \                                 In section .far_func.text, align 1
    440          void InitI2C(void)
    441          {
    442             I2C_DeInit();
   \                     InitI2C:
   \   000000 8D000000              CALLF     I2C_DeInit
    443             I2C_Init(10000, 0xA2, I2C_DUTYCYCLE_2, I2C_ACK_CURR, I2C_ADDMODE_7BIT, 2);
   \   000004 35020000              MOV       S:?b6, #0x2
   \   000008 3F00                  CLR       S:?b5
   \   00000A 35010000              MOV       S:?b4, #0x1
   \   00000E 4F                    CLR       A
   \   00000F AE00A2                LDW       X, #0xa2
   \   000012 89                    PUSHW     X
   \   000013 AE2710                LDW       X, #0x2710
   \   000016 BF00                  LDW       S:?w1, X
   \   000018 5F                    CLRW      X
   \   000019 BF00                  LDW       S:?w0, X
   \   00001B 85                    POPW      X
   \   00001C 8D000000              CALLF     I2C_Init
    444             I2C_Cmd(ENABLE);
   \   000020 A601                  LD        A, #0x1
   \   000022 AC000000              JPF       I2C_Cmd
    445          }
    446          

   \                                 In section .far_func.text, align 1, keep-with-next
    447          bool I2C_Start(void)
    448          {
    449             I2C_GenerateSTART(ENABLE);
   \                     I2C_Start:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTART
    450                 timeout=100;
   \   000006 35640000              MOV       L:timeout, #0x64
    451              	while(!(I2C_CheckEvent(I2C_EVENT_MASTER_MODE_SELECT))&&timeout);
   \                     ??I2C_Start_0:
   \   00000A AE0301                LDW       X, #0x301
   \   00000D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_140:
   \   000011 2605                  JRNE      L:??I2C_Start_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_Start_0
    452                  if (!timeout)
   \                     ??I2C_Start_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_Start_2
    453                  {
    454                      error=1;
   \   00001D 35010000              MOV       L:error, #0x1
    455                     return FALSE;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    456                  }
    457                    else return TRUE;
   \                     ??I2C_Start_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    458          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000 8D000000              CALLF     I2C_CheckEvent
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF
    459          

   \                                 In section .far_func.text, align 1, keep-with-next
    460          bool I2C_WA(u8 address)
    461          {
    462            I2C_Send7bitAddress(address, I2C_DIRECTION_TX);
   \                     I2C_WA:
   \   000000 3F00                  CLR       S:?b0
   \   000002 8D000000              CALLF     I2C_Send7bitAddress
    463                 timeout=255;
   \   000006 35FF0000              MOV       L:timeout, #0xff
    464                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))&&timeout);
   \                     ??I2C_WA_0:
   \   00000A AE0782                LDW       X, #0x782
   \   00000D 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_139:
   \   000011 2605                  JRNE      L:??I2C_WA_1
   \   000013 C60000                LD        A, L:timeout
   \   000016 26F2                  JRNE      L:??I2C_WA_0
    465                   if (!timeout)
   \                     ??I2C_WA_1:
   \   000018 C60000                LD        A, L:timeout
   \   00001B 2606                  JRNE      L:??I2C_WA_2
    466                   {
    467                    error=2;
   \   00001D 35020000              MOV       L:error, #0x2
    468                     return FALSE ;
   \   000021 4F                    CLR       A
   \   000022 87                    RETF
    469                   }
    470                    else return TRUE;
   \                     ??I2C_WA_2:
   \   000023 A601                  LD        A, #0x1
   \   000025 87                    RETF
    471          }
    472          

   \                                 In section .far_func.text, align 1, keep-with-next
    473          bool I2C_RA(u8 address)
    474          {
    475            I2C_Send7bitAddress(address, I2C_DIRECTION_RX);
   \                     I2C_RA:
   \   000000 35010000              MOV       S:?b0, #0x1
   \   000004 8D000000              CALLF     I2C_Send7bitAddress
    476                 timeout=255;
   \   000008 35FF0000              MOV       L:timeout, #0xff
    477                  while(!(I2C_CheckEvent(I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))&&timeout);
   \                     ??I2C_RA_0:
   \   00000C AE0302                LDW       X, #0x302
   \   00000F 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_141:
   \   000013 2605                  JRNE      L:??I2C_RA_1
   \   000015 C60000                LD        A, L:timeout
   \   000018 26F2                  JRNE      L:??I2C_RA_0
    478                   if (!timeout)
   \                     ??I2C_RA_1:
   \   00001A C60000                LD        A, L:timeout
   \   00001D 2606                  JRNE      L:??I2C_RA_2
    479                   {
    480                     error=3;
   \   00001F 35030000              MOV       L:error, #0x3
    481                     return FALSE ;
   \   000023 4F                    CLR       A
   \   000024 87                    RETF
    482                   }
    483                    else return TRUE;
   \                     ??I2C_RA_2:
   \   000025 A601                  LD        A, #0x1
   \   000027 87                    RETF
    484          }
    485          
    486          

   \                                 In section .far_func.text, align 1, keep-with-next
    487          bool I2C_WD(u8 data)
    488          {
    489           I2C_SendData(data);   // set register pointer 00h
   \                     I2C_WD:
   \   000000 8D000000              CALLF     I2C_SendData
    490             timeout=255;
   \   000004 35FF0000              MOV       L:timeout, #0xff
    491             while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
   \                     ??I2C_WD_0:
   \   000008 AE0784                LDW       X, #0x784
   \   00000B 8D000000              CALLF     ?Subroutine49
   \                     ??CrossCallReturnLabel_138:
   \   00000F 2605                  JRNE      L:??I2C_WD_1
   \   000011 C60000                LD        A, L:timeout
   \   000014 26F2                  JRNE      L:??I2C_WD_0
    492              if (!timeout)
   \                     ??I2C_WD_1:
   \   000016 C60000                LD        A, L:timeout
   \   000019 2606                  JRNE      L:??I2C_WD_2
    493              {
    494                error=4;
   \   00001B 35040000              MOV       L:error, #0x4
    495                 return FALSE ;
   \   00001F 4F                    CLR       A
   \   000020 87                    RETF
    496              }
    497               else return TRUE;
   \                     ??I2C_WD_2:
   \   000021 A601                  LD        A, #0x1
   \   000023 87                    RETF
    498          }
    499          

   \                                 In section .far_func.text, align 1, keep-with-next
    500          u8 I2C_RD(void)
    501          {
    502           timeout=255;
   \                     I2C_RD:
   \   000000 35FF0000              MOV       L:timeout, #0xff
    503            while( !I2C_GetFlagStatus(I2C_FLAG_TRANSFERFINISHED)&& timeout);
   \                     ??I2C_RD_0:
   \   000004 AE0104                LDW       X, #0x104
   \   000007 8D000000              CALLF     I2C_GetFlagStatus
   \   00000B A100                  CP        A, #0x0
   \   00000D 2605                  JRNE      L:??I2C_RD_1
   \   00000F C60000                LD        A, L:timeout
   \   000012 26F0                  JRNE      L:??I2C_RD_0
    504           //while((!(I2C->SR1 & 0x40))&&timeout);
    505           if (!timeout)
   \                     ??I2C_RD_1:
   \   000014 C60000                LD        A, L:timeout
   \   000017 2606                  JRNE      L:??I2C_RD_2
    506           {
    507             error=5;
   \   000019 35050000              MOV       L:error, #0x5
    508             return FALSE;
   \   00001D 4F                    CLR       A
   \   00001E 87                    RETF
    509           }
    510           u8 data=I2C_ReceiveData();
    511           return data;
   \                     ??I2C_RD_2:
   \   00001F AC000000              JPF       I2C_ReceiveData
    512          }
    513          
    514            /*
    515          bool Init_DS1307(void)
    516          {
    517             // Test DS1307
    518              error=0;
    519              if (!I2C_Start()) return FALSE;
    520              if(!I2C_WA(0xD0)) return FALSE;
    521              if(!I2C_WD(0x00)) return FALSE;
    522              if(!I2C_WD(0x00)) return FALSE;
    523              I2C_GenerateSTOP(ENABLE);
    524          
    525              // timeout=100;  error=4;
    526              ///   while(!(I2C_CheckEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED))&&timeout);
    527              //    if (!timeout)return FALSE ;
    528               return TRUE;
    529          }
    530             */
    531          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000 4F                    CLR       A
   \   000001                       REQUIRE ??Subroutine79_0
   \   000001                       ;               // Fall through to label ??Subroutine79_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000 8D000000              CALLF     I2C_WD
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000 A6D0                  LD        A, #0xd0
   \   000002 8D000000              CALLF     I2C_WA
   \   000006 A100                  CP        A, #0x0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000 725F0000              CLR       L:error
   \   000004 8D000000              CALLF     I2C_Start
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    532          bool  ReadDS1307(void)
    533          {
    534                 error=0;
   \                     ReadDS1307:
   \   000000 8D000000              CALLF     ?Subroutine46
    535                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_134:
   \   000004 2602                  JRNE      L:??ReadDS1307_0
   \                     ??ReadDS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    536                 if(!I2C_WA(0xD0))return FALSE;
   \                     ??ReadDS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_137:
   \   00000C 27F8                  JREQ      L:??ReadDS1307_1
    537                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_233:
   \   000012 27F2                  JREQ      L:??ReadDS1307_1
    538                 I2C_GenerateSTOP(ENABLE);
   \   000014 8D000000              CALLF     ?Subroutine20
    539                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_52:
   \   000018 27EC                  JREQ      L:??ReadDS1307_1
    540                 if(!I2C_RA(0xD0))return FALSE;
   \   00001A A6D0                  LD        A, #0xd0
   \   00001C 8D000000              CALLF     I2C_RA
   \   000020 A100                  CP        A, #0x0
   \   000022 27E2                  JREQ      L:??ReadDS1307_1
    541                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000024 8D000000              CALLF     ?Subroutine13
    542                 seconds = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_34:
   \   000028 C70000                LD        L:seconds, A
    543                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002B 8D000000              CALLF     ?Subroutine13
    544                 minutes = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_33:
   \   00002F C70000                LD        L:minutes, A
    545                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000032 8D000000              CALLF     ?Subroutine13
    546                 hours = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_32:
   \   000036 C70000                LD        L:hours, A
    547                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000039 8D000000              CALLF     ?Subroutine13
    548                 days = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_31:
   \   00003D C70000                LD        L:days, A
    549                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000040 8D000000              CALLF     ?Subroutine13
    550                 date = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_30:
   \   000044 C70000                LD        L:`date`, A
    551                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   000047 8D000000              CALLF     ?Subroutine13
    552                 monts = bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_29:
   \   00004B C70000                LD        L:monts, A
    553                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   00004E 8D000000              CALLF     ?Subroutine23
    554                   I2C_GenerateSTOP(ENABLE);
    555                    years= bcd2hex(I2C_RD());
   \                     ??CrossCallReturnLabel_61:
   \   000052 8D000000              CALLF     I2C_RD
   \   000056 8D000000              CALLF     bcd2hex
   \   00005A 5F                    CLRW      X
   \   00005B 97                    LD        XL, A
   \   00005C CF0000                LDW       L:years, X
    556          
    557               //  I2C_AcknowledgeConfig(I2C_ACK_CURR);
    558               //   u8 data1 = I2C_RD();
    559                //Last read byte by I2C slave
    560               //  I2C_AcknowledgeConfig(I2C_ACK_NONE);
    561               //  I2C_GenerateSTOP(ENABLE);
    562               //  temp2= I2C_RD();
    563                 if( seconds & 0x80 )    //if not enable the oscillator ?
   \   00005F 720F000008            BTJF      L:seconds, #0x7, L:??ReadDS1307_2
    564                    {
    565                      seconds &= 0x7f;
   \   000064 721F0000              BRES      L:seconds, #0x7
    566                      Set_DS1307();
   \   000068 8D000000              CALLF     Set_DS1307
    567                    }
    568          
    569                 return TRUE;
   \                     ??ReadDS1307_2:
   \   00006C A601                  LD        A, #0x1
   \   00006E 87                    RETF
    570          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000 4F                    CLR       A
   \   000001 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000005 A601                  LD        A, #0x1
   \   000007 AC000000              JPF       I2C_GenerateSTOP

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_GenerateSTOP
   \   000006 8D000000              CALLF     I2C_Start
   \   00000A A100                  CP        A, #0x0
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000 8D000000              CALLF     ?Subroutine62
   \                     ??CrossCallReturnLabel_169:
   \   000004 AC000000              JPF       bcd2hex

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine62:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     I2C_AcknowledgeConfig
   \   000006 AC000000              JPF       I2C_RD
    571          

   \                                 In section .far_func.text, align 1, keep-with-next
    572          bool Check_DS1307(void)
    573          {
   \                     Check_DS1307:
   \   000000 3B0000                PUSH      S:?b8
    574             // Read  address 0x08 from DS1307 if not 0XAA clock is not set
    575                 error=0;
   \   000003 8D000000              CALLF     ?Subroutine46
    576                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_133:
   \   000007 2603                  JRNE      L:??Check_DS1307_0
   \                     ??Check_DS1307_1:
   \   000009 4F                    CLR       A
   \   00000A 2030                  JRA       L:??Check_DS1307_2
    577                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Check_DS1307_0:
   \   00000C 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_136:
   \   000010 27F7                  JREQ      L:??Check_DS1307_1
    578                 if(!I2C_WD(0x08)) return FALSE;
   \   000012 A608                  LD        A, #0x8
   \   000014 8D000000              CALLF     ??Subroutine79_0
   \                     ??CrossCallReturnLabel_236:
   \   000018 27EF                  JREQ      L:??Check_DS1307_1
    579                 I2C_GenerateSTOP(ENABLE);
   \   00001A 8D000000              CALLF     ?Subroutine20
    580                  //Last read byte by I2C slave
    581                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_51:
   \   00001E 27E9                  JREQ      L:??Check_DS1307_1
    582                 if(!I2C_RA(0xD0))return FALSE;
   \   000020 A6D0                  LD        A, #0xd0
   \   000022 8D000000              CALLF     I2C_RA
   \   000026 A100                  CP        A, #0x0
   \   000028 27DF                  JREQ      L:??Check_DS1307_1
    583                 I2C_AcknowledgeConfig(I2C_ACK_CURR);
   \   00002A 8D000000              CALLF     ?Subroutine62
    584                 u8 data = I2C_RD();
   \                     ??CrossCallReturnLabel_170:
   \   00002E B700                  LD        S:?b8, A
    585                 I2C_AcknowledgeConfig(I2C_ACK_NONE);
   \   000030 8D000000              CALLF     ?Subroutine23
    586                 I2C_GenerateSTOP(ENABLE);
    587                 if (data != 0xAA) return FALSE;
   \                     ??CrossCallReturnLabel_62:
   \   000034 B600                  LD        A, S:?b8
   \   000036 A1AA                  CP        A, #0xaa
   \   000038 26CF                  JRNE      L:??Check_DS1307_1
    588                 else return TRUE;
   \   00003A A601                  LD        A, #0x1
   \                     ??Check_DS1307_2:
   \   00003C 320000                POP       S:?b8
   \   00003F 87                    RETF
    589          }
    590          

   \                                 In section .far_func.text, align 1, keep-with-next
    591          bool Set_DS1307()
    592          {
    593                 // convert hex or decimal to bcd format
    594          
    595          
    596                 error=0;
   \                     Set_DS1307:
   \   000000 8D000000              CALLF     ?Subroutine46
    597                 if (!I2C_Start()) return FALSE;
   \                     ??CrossCallReturnLabel_132:
   \   000004 2602                  JRNE      L:??Set_DS1307_0
   \                     ??Set_DS1307_1:
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
    598                 if(!I2C_WA(0xD0)) return FALSE;
   \                     ??Set_DS1307_0:
   \   000008 8D000000              CALLF     ?Subroutine47
   \                     ??CrossCallReturnLabel_135:
   \   00000C 27F8                  JREQ      L:??Set_DS1307_1
    599                 if(!I2C_WD(0x00)) return FALSE;
   \   00000E 8D000000              CALLF     ?Subroutine48
   \                     ??CrossCallReturnLabel_232:
   \   000012 27F2                  JREQ      L:??Set_DS1307_1
    600                 if(!I2C_WD(convert_tobcd(seconds))) return FALSE;
   \   000014 C60000                LD        A, L:seconds
   \   000017 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_125:
   \   00001B 27E9                  JREQ      L:??Set_DS1307_1
    601                 if(!I2C_WD(convert_tobcd(minutes))) return FALSE;
   \   00001D C60000                LD        A, L:minutes
   \   000020 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_126:
   \   000024 27E0                  JREQ      L:??Set_DS1307_1
    602                 if(!I2C_WD(convert_tobcd(hours))) return FALSE;
   \   000026 C60000                LD        A, L:hours
   \   000029 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_127:
   \   00002D 27D7                  JREQ      L:??Set_DS1307_1
    603                 if(!I2C_WD(convert_tobcd(days))) return FALSE;
   \   00002F C60000                LD        A, L:days
   \   000032 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_128:
   \   000036 27CE                  JREQ      L:??Set_DS1307_1
    604                 if(!I2C_WD(convert_tobcd(date))) return FALSE;
   \   000038 C60000                LD        A, L:`date`
   \   00003B 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_129:
   \   00003F 27C5                  JREQ      L:??Set_DS1307_1
    605                 if(!I2C_WD(convert_tobcd(monts))) return FALSE;
   \   000041 C60000                LD        A, L:monts
   \   000044 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_130:
   \   000048 27BC                  JREQ      L:??Set_DS1307_1
    606                 if(!I2C_WD(convert_tobcd(years)))return FALSE;
   \   00004A CE0000                LDW       X, L:years
   \   00004D 9F                    LD        A, XL
   \   00004E 8D000000              CALLF     ?Subroutine45
   \                     ??CrossCallReturnLabel_131:
   \   000052 27B2                  JREQ      L:??Set_DS1307_1
    607                 if(!I2C_WD(DS_Control))return FALSE;
   \   000054 A610                  LD        A, #0x10
   \   000056 8D000000              CALLF     ??Subroutine79_0
   \                     ??CrossCallReturnLabel_234:
   \   00005A 27AA                  JREQ      L:??Set_DS1307_1
    608                 if(!I2C_WD(0XAA)) return FALSE;  // Byte --> time is set by program
   \   00005C A6AA                  LD        A, #0xaa
   \   00005E 8D000000              CALLF     ??Subroutine79_0
   \                     ??CrossCallReturnLabel_235:
   \   000062 27A2                  JREQ      L:??Set_DS1307_1
    609                 I2C_GenerateSTOP(ENABLE);
   \   000064 A601                  LD        A, #0x1
   \   000066 8D000000              CALLF     I2C_GenerateSTOP
    610          
    611          
    612             return TRUE;
   \   00006A A601                  LD        A, #0x1
   \   00006C 87                    RETF
    613          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000 8D000000              CALLF     convert_tobcd
   \   000004 8D000000              CALLF     I2C_WD
   \   000008 A100                  CP        A, #0x0
   \   00000A 87                    RETF
    614          
    615          

   \                                 In section .far_func.text, align 1, keep-with-next
    616          u8 convert_tobcd(u8 data)
    617          {
   \                     convert_tobcd:
   \   000000 B700                  LD        S:?b1, A
    618             u8 data_second_decimal=data/10;
    619             u8 data_first_decimal=data - 10*data_second_decimal;
    620             data=16*data_second_decimal + data_first_decimal;
    621            return data;
   \   000002 A60A                  LD        A, #0xa
   \   000004 5F                    CLRW      X
   \   000005 01                    RRWA      X, A
   \   000006 B600                  LD        A, S:?b1
   \   000008 02                    RLWA      X, A
   \   000009 62                    DIV       X, A
   \   00000A 41                    EXG       A, XL
   \   00000B B700                  LD        S:?b0, A
   \   00000D A606                  LD        A, #0x6
   \   00000F 97                    LD        XL, A
   \   000010 B600                  LD        A, S:?b0
   \   000012 42                    MUL       X, A
   \   000013 9F                    LD        A, XL
   \   000014 BB00                  ADD       A, S:?b1
   \   000016 87                    RETF
    622          }
    623          

   \                                 In section .far_func.text, align 1, keep-with-next
    624          u8 bcd2hex(u8 bcd)
    625          {
   \                     bcd2hex:
   \   000000 B700                  LD        S:?b1, A
    626            u8 hex=0;
    627            hex=(bcd>>4)*10 +(bcd&0x0f);
    628            bcd=0;
    629            return hex ;
   \   000002 4E                    SWAP      A
   \   000003 A40F                  AND       A, #0xf
   \   000005 350A0000              MOV       S:?b0, #0xa
   \   000009 97                    LD        XL, A
   \   00000A B600                  LD        A, S:?b0
   \   00000C 42                    MUL       X, A
   \   00000D 41                    EXG       A, XL
   \   00000E B700                  LD        S:?b0, A
   \   000010 B600                  LD        A, S:?b1
   \   000012 A40F                  AND       A, #0xf
   \   000014 BB00                  ADD       A, S:?b0
   \   000016 87                    RETF
    630          }
    631          
    632          

   \                                 In section .far_func.text, align 1, keep-with-next
    633          bool Set_Clock()
    634          {
    635              //Clear Display
    636             LCDInstr(0x01);
   \                     Set_Clock:
   \   000000 8D000000              CALLF     ?Subroutine14
    637             Delay1(1000);
    638             line_lcd=0;
    639              printf("\nYears:");
    640                do
    641              {
    642               line_lcd=1;
   \                     ??CrossCallReturnLabel_35:
   \   000004 8D000000              CALLF     ?Subroutine37
    643               printf("\n%02d:%02d:%02d",years,monts,date);
   \                     ??CrossCallReturnLabel_88:
   \   000008 89                    PUSHW     X
   \   000009 C60000                LD        A, L:monts
   \   00000C 97                    LD        XL, A
   \   00000D 89                    PUSHW     X
   \   00000E 3B0000                PUSH      L:years + 1
   \   000011 3B0000                PUSH      L:years
   \   000014 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000017 8D000000              CALLF     printf
   \   00001B 5B06                  ADD       SP, #0x6
    644                 years=adj(0,99,years);
   \   00001D 8D000000              CALLF     ?Subroutine10
    645              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_26:
   \   000021 27E1                  JREQ      L:??CrossCallReturnLabel_35
    646          
    647               line_lcd=0;
   \   000023 8D000000              CALLF     ?Subroutine34
    648              printf("\nmonts:");
    649                do
    650              {
    651               line_lcd=1;
   \                     ??CrossCallReturnLabel_81:
   \   000027 8D000000              CALLF     ?Subroutine37
    652               printf("\n%02d:%02d:%02d",years,monts,date);
   \                     ??CrossCallReturnLabel_89:
   \   00002B 89                    PUSHW     X
   \   00002C C60000                LD        A, L:monts
   \   00002F 97                    LD        XL, A
   \   000030 89                    PUSHW     X
   \   000031 3B0000                PUSH      L:years + 1
   \   000034 3B0000                PUSH      L:years
   \   000037 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00003A 8D000000              CALLF     printf
   \   00003E 5B06                  ADD       SP, #0x6
    653                 monts=adj(1,12,monts);
   \   000040 8D000000              CALLF     ?Subroutine17
    654              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_46:
   \   000044 27E1                  JREQ      L:??CrossCallReturnLabel_81
    655          
    656              LCDInstr(0x01);
   \   000046 8D000000              CALLF     ?Subroutine15
    657               Delay1(1000);
    658                line_lcd=0;
    659              printf("\nDate:");
    660                do
    661              {
    662               line_lcd=1;
   \                     ??CrossCallReturnLabel_37:
   \   00004A 8D000000              CALLF     ?Subroutine37
    663               printf("\n%02d:%02d:%02d",years,monts,date);
   \                     ??CrossCallReturnLabel_90:
   \   00004E 89                    PUSHW     X
   \   00004F C60000                LD        A, L:monts
   \   000052 97                    LD        XL, A
   \   000053 89                    PUSHW     X
   \   000054 3B0000                PUSH      L:years + 1
   \   000057 3B0000                PUSH      L:years
   \   00005A AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00005D 8D000000              CALLF     printf
   \   000061 5B06                  ADD       SP, #0x6
    664                 date=adj(1,31,date);
   \   000063 C60000                LD        A, L:`date`
   \   000066 B700                  LD        S:?b1, A
   \   000068 351F0000              MOV       S:?b0, #0x1f
   \   00006C 8D000000              CALLF     ?Subroutine18
    665              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_48:
   \   000070 27D8                  JREQ      L:??CrossCallReturnLabel_37
    666          
    667          
    668              //Clear Display
    669             LCDInstr(0x01);
   \   000072 8D000000              CALLF     ?Subroutine16
    670             Delay1(1000);
    671             line_lcd=0;
    672              printf("\nDays:");
   \                     ??CrossCallReturnLabel_39:
   \   000076 AE0000                LDW       X, #`?<Constant "\\nDays:">`
   \   000079 8D000000              CALLF     printf
    673                do
    674              {
    675                line_lcd=1;
   \                     ??Set_Clock_0:
   \   00007D 35010000              MOV       L:line_lcd, #0x1
    676               printf("\n%02d",days);
   \   000081 C60000                LD        A, L:days
   \   000084 5F                    CLRW      X
   \   000085 97                    LD        XL, A
   \   000086 89                    PUSHW     X
   \   000087 AE0000                LDW       X, #`?<Constant "\\n%02d">`
   \   00008A 8D000000              CALLF     printf
   \   00008E 5B02                  ADD       SP, #0x2
    677                 days=adj(1,7,days);
   \   000090 C60000                LD        A, L:days
   \   000093 B700                  LD        S:?b1, A
   \   000095 35070000              MOV       S:?b0, #0x7
   \   000099 A601                  LD        A, #0x1
   \   00009B 8D000000              CALLF     adj
   \   00009F C70000                LD        L:days, A
    678              } while (!key_ok_on());
   \   0000A2 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_107:
   \   0000A6 27D5                  JREQ      L:??Set_Clock_0
    679          
    680          
    681          
    682             //Clear Display
    683             LCDInstr(0x01);
   \   0000A8 8D000000              CALLF     ?Subroutine16
    684             Delay1(1000);
    685             line_lcd=0;
    686              printf("\nHours:");
   \                     ??CrossCallReturnLabel_40:
   \   0000AC AE0000                LDW       X, #`?<Constant "\\nHours:">`
   \   0000AF 8D000000              CALLF     printf
    687                do
    688              {
    689                line_lcd=1;
   \                     ??Set_Clock_1:
   \   0000B3 8D000000              CALLF     ?Subroutine38
    690               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_91:
   \   0000B7 89                    PUSHW     X
   \   0000B8 C60000                LD        A, L:minutes
   \   0000BB 97                    LD        XL, A
   \   0000BC 89                    PUSHW     X
   \   0000BD C60000                LD        A, L:hours
   \   0000C0 97                    LD        XL, A
   \   0000C1 89                    PUSHW     X
   \   0000C2 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000C5 8D000000              CALLF     printf
   \   0000C9 5B06                  ADD       SP, #0x6
    691                 hours=adj(0,23,hours);
   \   0000CB C60000                LD        A, L:hours
   \   0000CE B700                  LD        S:?b1, A
   \   0000D0 35170000              MOV       S:?b0, #0x17
   \   0000D4 8D000000              CALLF     ??Subroutine72_0
    692              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_191:
   \   0000D8 C70000                LD        L:hours, A
   \   0000DB 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_108:
   \   0000DF 27D2                  JREQ      L:??Set_Clock_1
    693          
    694               line_lcd=0;
   \   0000E1 725F0000              CLR       L:line_lcd
    695               printf("\nMinutes:");
   \   0000E5 AE0000                LDW       X, #`?<Constant "\\nMinutes:">`
   \   0000E8 8D000000              CALLF     printf
    696                do
    697              {
    698                line_lcd=1;
   \                     ??Set_Clock_2:
   \   0000EC 8D000000              CALLF     ?Subroutine38
    699               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_92:
   \   0000F0 89                    PUSHW     X
   \   0000F1 C60000                LD        A, L:minutes
   \   0000F4 97                    LD        XL, A
   \   0000F5 89                    PUSHW     X
   \   0000F6 C60000                LD        A, L:hours
   \   0000F9 97                    LD        XL, A
   \   0000FA 89                    PUSHW     X
   \   0000FB AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000FE 8D000000              CALLF     printf
   \   000102 5B06                  ADD       SP, #0x6
    700                 minutes=adj(0,59,minutes);
   \   000104 C60000                LD        A, L:minutes
   \   000107 8D000000              CALLF     ?Subroutine24
    701              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_195:
   \   00010B C70000                LD        L:minutes, A
   \   00010E 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_109:
   \   000112 27D8                  JREQ      L:??Set_Clock_2
    702          
    703              line_lcd=0;
   \   000114 725F0000              CLR       L:line_lcd
    704              printf("\nSeconds:");
   \   000118 AE0000                LDW       X, #`?<Constant "\\nSeconds:">`
   \   00011B 8D000000              CALLF     printf
    705              do
    706              {
    707                line_lcd=1;
   \                     ??Set_Clock_3:
   \   00011F 8D000000              CALLF     ?Subroutine38
    708               printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_93:
   \   000123 89                    PUSHW     X
   \   000124 C60000                LD        A, L:minutes
   \   000127 97                    LD        XL, A
   \   000128 89                    PUSHW     X
   \   000129 C60000                LD        A, L:hours
   \   00012C 97                    LD        XL, A
   \   00012D 89                    PUSHW     X
   \   00012E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000131 8D000000              CALLF     printf
   \   000135 5B06                  ADD       SP, #0x6
    709                 seconds=adj(0,59,seconds);
   \   000137 C60000                LD        A, L:seconds
   \   00013A 8D000000              CALLF     ?Subroutine24
    710              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_194:
   \   00013E C70000                LD        L:seconds, A
   \   000141 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_110:
   \   000145 27D8                  JREQ      L:??Set_Clock_3
    711          
    712                // Set parameter to DS1307 + time byte
    713                Set_DS1307();
   \   000147 8D000000              CALLF     Set_DS1307
    714          
    715                //bool k=Check_DS1307();
    716          
    717            return TRUE;
   \   00014B A601                  LD        A, #0x1
   \   00014D 87                    RETF
    718          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:`date`
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000 725F0000              CLR       L:line_lcd
   \   000004 AE0000                LDW       X, #`?<Constant "\\nmonts:">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000 A601                  LD        A, #0x1
   \   000002 8D000000              CALLF     adj
   \   000006 C70000                LD        L:`date`, A
   \   000009 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_176:
   \   00000D 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000 C60000                LD        A, L:monts
   \   000003 B700                  LD        S:?b1, A
   \   000005 350C0000              MOV       S:?b0, #0xc
   \   000009 A601                  LD        A, #0x1
   \   00000B 8D000000              CALLF     adj
   \   00000F C70000                LD        L:monts, A
   \   000012 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_177:
   \   000016 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_166:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nDate:">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_167:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nYears:">`
   \   000007 AC000000              JPF       printf

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000 CE0000                LDW       X, L:years
   \   000003 41                    EXG       A, XL
   \   000004 B700                  LD        S:?b1, A
   \   000006 35630000              MOV       S:?b0, #0x63
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     adj
   \   00000F 5F                    CLRW      X
   \   000010 97                    LD        XL, A
   \   000011 CF0000                LDW       L:years, X
   \   000014 8D000000              CALLF     ?Subroutine67
   \                     ??CrossCallReturnLabel_178:
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000 B700                  LD        S:?b1, A
   \   000002 353B0000              MOV       S:?b0, #0x3b
   \   000006                       REQUIRE ??Subroutine72_0
   \   000006                       ;               // Fall through to label ??Subroutine72_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000 4F                    CLR       A
   \   000001 AC000000              JPF       adj

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000 8D000000              CALLF     ?Subroutine61
   \                     ??CrossCallReturnLabel_168:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_183:
   \   000004 AE03E8                LDW       X, #0x3e8
   \   000007 8D000000              CALLF     Delay1
   \   00000B 725F0000              CLR       L:line_lcd
   \   00000F 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000 A601                  LD        A, #0x1
   \   000002 AC000000              JPF       LCDInstr
    719          
    720          

   \                                 In section .far_func.text, align 1, keep-with-next
    721          u8 adj(u8 min,u8 max,u8 now)
    722          {
   \                     adj:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 3B0000                PUSH      S:?b10
   \   000007 B700                  LD        S:?b10, A
   \   000009 450000                MOV       S:?b8, S:?b0
   \   00000C 450000                MOV       S:?b9, S:?b1
    723             u8 adj=now;
    724             if (key_plus_on())
   \   00000F 8D000000              CALLF     key_plus_on
   \   000013 A100                  CP        A, #0x0
   \   000015 2709                  JREQ      L:??adj_0
    725             {
    726               adj ++;
   \   000017 B600                  LD        A, S:?b9
   \   000019 4C                    INC       A
   \   00001A B700                  LD        S:?b9, A
    727               timer3=0;
   \   00001C 5F                    CLRW      X
   \   00001D CF0000                LDW       L:timer3, X
    728             }
    729             if (adj >max) adj = min;
   \                     ??adj_0:
   \   000020 B600                  LD        A, S:?b8
   \   000022 B100                  CP        A, S:?b9
   \   000024 2403                  JRNC      L:??adj_1
   \   000026 450000                MOV       S:?b9, S:?b10
    730             if (key_minus_on())
   \                     ??adj_1:
   \   000029 8D000000              CALLF     key_minus_on
   \   00002D A100                  CP        A, #0x0
   \   00002F 2709                  JREQ      L:??adj_2
    731             {
    732               timer3=0;
   \   000031 5F                    CLRW      X
   \   000032 CF0000                LDW       L:timer3, X
    733               adj --;
   \   000035 B600                  LD        A, S:?b9
   \   000037 4A                    DEC       A
   \   000038 B700                  LD        S:?b9, A
    734             }
    735             if ( adj == 255) adj=max;
   \                     ??adj_2:
   \   00003A B600                  LD        A, S:?b9
   \   00003C A1FF                  CP        A, #0xff
   \   00003E 2603                  JRNE      L:??adj_3
   \   000040 450000                MOV       S:?b9, S:?b8
    736             if (adj < min) adj=max;
   \                     ??adj_3:
   \   000043 B600                  LD        A, S:?b9
   \   000045 B100                  CP        A, S:?b10
   \   000047 2403                  JRNC      L:??adj_4
   \   000049 450000                MOV       S:?b9, S:?b8
    737          
    738             return adj ;
   \                     ??adj_4:
   \   00004C B600                  LD        A, S:?b9
   \   00004E 320000                POP       S:?b10
   \   000051 AC000000              JPF       L:?epilogue_w4
    739          }
    740          
    741          

   \                                 In section .far_func.text, align 1
    742          bool key_ok_on()
    743          {
    744            //Read Key OK
    745            if (!(GPIO_ReadInputData(GPIOF)& key_ok))
   \                     key_ok_on:
   \   000000 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_2:
   \   000004 2627                  JRNE      L:??key_ok_on_0
    746             {
    747               timer2=0;  // Key must be push for timer2 time
   \   000006 5F                    CLRW      X
   \   000007 CF0000                LDW       L:timer2, X
    748                while((timer2 < key_time_ok) && !(GPIO_ReadInputData(GPIOF)& key_ok) );;
   \                     ??key_ok_on_1:
   \   00000A CE0000                LDW       X, L:timer2
   \   00000D A33A98                CPW       X, #0x3a98
   \   000010 2406                  JRNC      L:??key_ok_on_2
   \   000012 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_3:
   \   000016 27F2                  JREQ      L:??key_ok_on_1
    749                 if (timer2>=key_time_press) // min delay for one
   \                     ??key_ok_on_2:
   \   000018 CE0000                LDW       X, L:timer2
   \   00001B A30FA0                CPW       X, #0xfa0
   \   00001E 250D                  JRC       L:??key_ok_on_0
    750                 {
    751                   timer2=0; // and next must be release
   \   000020 5F                    CLRW      X
   \   000021 CF0000                LDW       L:timer2, X
    752                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;   //if realease retrun true
   \   000024 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   000028 2703                  JREQ      L:??key_ok_on_0
   \   00002A A601                  LD        A, #0x1
   \   00002C 87                    RETF
    753                 }
    754             }
    755          
    756            return FALSE;
   \                     ??key_ok_on_0:
   \   00002D 4F                    CLR       A
   \   00002E 87                    RETF
    757          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 A510                  BCP       A, #0x10
   \   000009 87                    RETF
    758          
    759          
    760          

   \                                 In section .far_func.text, align 1
    761           bool key_plus_on()
    762          {
    763            //Read Key OK
    764              if (!(GPIO_ReadInputData(GPIOA)& key_plus))
   \                     key_plus_on:
   \   000000 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000004 A502                  BCP       A, #0x2
   \   000006 2623                  JRNE      L:??key_plus_on_0
    765               {
    766               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    767                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_plus) );;
   \                     ??key_plus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_54:
   \   000010 2408                  JRNC      L:??key_plus_on_2
   \   000012 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000016 A502                  BCP       A, #0x2
   \   000018 27F2                  JREQ      L:??key_plus_on_1
    768                  if (timer2>=key_time_press)
   \                     ??key_plus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_plus_on_0
    769                  {
    770                    if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   000026 2703                  JREQ      L:??key_plus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    771                  }
    772               }
    773          
    774            return FALSE;
   \                     ??key_plus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    775          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine21:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A31F40                CPW       X, #0x1f40
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 AE5000                LDW       X, #0x5000
   \   000003 AC000000              JPF       GPIO_ReadInputData
    776          
    777          

   \                                 In section .far_func.text, align 1
    778            bool key_minus_on()
    779          {
    780            //Read Key OK
    781             if (!(GPIO_ReadInputData(GPIOA)& key_minus))
   \                     key_minus_on:
   \   000000 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_10:
   \   000004 A504                  BCP       A, #0x4
   \   000006 2623                  JRNE      L:??key_minus_on_0
    782               {
    783               timer2=0;  // Key must be push for timer2 time
   \   000008 5F                    CLRW      X
   \   000009 CF0000                LDW       L:timer2, X
    784                while((timer2 < key_time) && !(GPIO_ReadInputData(GPIOA)& key_minus) );;
   \                     ??key_minus_on_1:
   \   00000C 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_53:
   \   000010 2408                  JRNC      L:??key_minus_on_2
   \   000012 8D000000              CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   000016 A504                  BCP       A, #0x4
   \   000018 27F2                  JREQ      L:??key_minus_on_1
    785                  if (timer2>=key_time_press)
   \                     ??key_minus_on_2:
   \   00001A CE0000                LDW       X, L:timer2
   \   00001D A30FA0                CPW       X, #0xfa0
   \   000020 2509                  JRC       L:??key_minus_on_0
    786                  {
    787                   if (GPIO_ReadInputData(GPIOF)& key_ok)  return TRUE;
   \   000022 8D000000              CALLF     ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   000026 2703                  JREQ      L:??key_minus_on_0
   \   000028 A601                  LD        A, #0x1
   \   00002A 87                    RETF
    788                  }
    789               }
    790          
    791            return FALSE;
   \                     ??key_minus_on_0:
   \   00002B 4F                    CLR       A
   \   00002C 87                    RETF
    792          }
    793          
    794          

   \                                 In section .far_func.text, align 1
    795          bool  key_ok_plus()
    796          {
   \                     key_ok_plus:
   \   000000 3B0000                PUSH      S:?b8
    797            if (!((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)))
   \   000003 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_0:
   \   000007 261A                  JRNE      L:??key_ok_plus_0
    798            {
    799                timer2=0;  // Key must be push for timer2 time
   \   000009 5F                    CLRW      X
   \   00000A CF0000                LDW       L:timer2, X
    800                while((timer2 < key_time) && !((GPIO_ReadInputData(GPIOF)& key_ok)|(GPIO_ReadInputData(GPIOA)& key_plus)));;
   \                     ??key_ok_plus_1:
   \   00000D 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_55:
   \   000011 2406                  JRNC      L:??key_ok_plus_2
   \   000013 8D000000              CALLF     ?Subroutine1
   \                     ??CrossCallReturnLabel_1:
   \   000017 27F4                  JREQ      L:??key_ok_plus_1
    801                 if (timer2>=key_time) return TRUE;
   \                     ??key_ok_plus_2:
   \   000019 8D000000              CALLF     ?Subroutine21
   \                     ??CrossCallReturnLabel_56:
   \   00001D 2504                  JRC       L:??key_ok_plus_0
   \   00001F A601                  LD        A, #0x1
   \   000021 2001                  JRA       L:??key_ok_plus_3
    802            }
    803          
    804           return FALSE;
   \                     ??key_ok_plus_0:
   \   000023 4F                    CLR       A
   \                     ??key_ok_plus_3:
   \   000024 320000                POP       S:?b8
   \   000027 87                    RETF
    805          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 AE5019                LDW       X, #0x5019
   \   000003 8D000000              CALLF     GPIO_ReadInputData
   \   000007 B700                  LD        S:?b8, A
   \   000009 AE5000                LDW       X, #0x5000
   \   00000C 8D000000              CALLF     GPIO_ReadInputData
   \   000010 A402                  AND       A, #0x2
   \   000012 88                    PUSH      A
   \   000013 B600                  LD        A, S:?b8
   \   000015 A410                  AND       A, #0x10
   \   000017 B700                  LD        S:?b1, A
   \   000019 84                    POP       A
   \   00001A BA00                  OR        A, S:?b1
   \   00001C 87                    RETF
    806          
    807          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000 CE0000                LDW       X, L:timer3
   \   000003 A3000B                CPW       X, #0xb
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000 CE0000                LDW       X, L:status
   \   000003 01                    RRWA      X, A
   \   000004 AA04                  OR        A, #0x4
   \   000006 02                    RLWA      X, A
   \   000007 CF0000                LDW       L:status, X
   \   00000A                       REQUIRE ??Subroutine73_0
   \   00000A                       ;               // Fall through to label ??Subroutine73_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000 8D000000              CALLF     EEPROM_INIT
   \   000004 CE0000                LDW       X, L:status
   \   000007 4F                    CLR       A
   \   000008 01                    RRWA      X, A
   \   000009 9F                    LD        A, XL
   \   00000A AE4000                LDW       X, #0x4000
   \   00000D 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_202:
   \   000011 CE0000                LDW       X, L:status
   \   000014 9F                    LD        A, XL
   \   000015 AE4001                LDW       X, #0x4001
   \   000018 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_201:
   \   00001C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
    808          bool Set_Timer_On()
    809          {
    810          
    811             //clr
    812             LCDInstr(0x01);
   \                     Set_Timer_On:
   \   000000 8D000000              CALLF     ?Subroutine16
    813             Delay1(1000);
    814             line_lcd=0;
    815             printf("\nH On:");
   \                     ??CrossCallReturnLabel_43:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH On:">`
   \   000007 8D000000              CALLF     ?Subroutine39
    816              timer3=0;
    817            do
    818              {
    819               line_lcd=1;
   \                     ??CrossCallReturnLabel_98:
   \   00000B 8D000000              CALLF     ?Subroutine41
    820               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_103:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_on
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    821                 daily_hour_on=adj(0,23,daily_hour_on);
   \   00001E C60000                LD        A, L:daily_hour_on
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine72_0
    822              } while ( timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_189:
   \   00002B C70000                LD        L:daily_hour_on, A
   \   00002E 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_123:
   \   000032 2406                  JRNC      L:??Set_Timer_On_0
   \   000034 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_113:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_98
    823          
    824             LCDInstr(0x01);
   \                     ??Set_Timer_On_0:
   \   00003A 8D000000              CALLF     ?Subroutine16
    825             Delay1(1000);
    826             line_lcd=0;
    827             printf("\nMin On:");
   \                     ??CrossCallReturnLabel_44:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin On:">`
   \   000041 8D000000              CALLF     ?Subroutine39
    828              timer3=0;
    829            do
    830              {
    831               line_lcd=1;
   \                     ??CrossCallReturnLabel_99:
   \   000045 8D000000              CALLF     ?Subroutine41
    832               printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_104:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_on
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    833                 daily_minute_on=adj(0,59,daily_minute_on);
   \   000058 C60000                LD        A, L:daily_minute_on
   \   00005B 8D000000              CALLF     ?Subroutine24
    834              } while ((timer3<=time_menu)&& !key_ok_on());
   \                     ??CrossCallReturnLabel_192:
   \   00005F C70000                LD        L:daily_minute_on, A
   \   000062 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_124:
   \   000066 2406                  JRNC      L:??Set_Timer_On_1
   \   000068 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_114:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_99
    835          
    836             //Save data to eeprom
    837               status.daily=1;
   \                     ??Set_Timer_On_1:
   \   00006E 8D000000              CALLF     ?Subroutine4
    838               EEPROM_INIT();
    839              //u8 temp =*(u8*)(&status);
    840              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    841               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    842               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    843               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
   \                     ??CrossCallReturnLabel_197:
   \   000072 C60000                LD        A, L:daily_hour_on
   \   000075 AE4002                LDW       X, #0x4002
   \   000078 8D000000              CALLF     ?Subroutine50
    844               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
   \                     ??CrossCallReturnLabel_143:
   \   00007C C60000                LD        A, L:daily_minute_on
   \   00007F AE4003                LDW       X, #0x4003
   \   000082 8D000000              CALLF     ?Subroutine8
    845               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    846                time_on=daily_hour_on*60+daily_minute_on;
   \                     ??CrossCallReturnLabel_21:
   \   000086 8D000000              CALLF     ?Subroutine26
    847                 change=TRUE;
   \                     ??CrossCallReturnLabel_65:
   \   00008A 35010000              MOV       L:change, #0x1
    848          
    849             return TRUE;
   \   00008E A601                  LD        A, #0x1
   \   000090 87                    RETF
    850          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_200:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000 BF00                  LDW       S:?w1, X
   \   000002 5F                    CLRW      X
   \   000003 BF00                  LDW       S:?w0, X
   \   000005 AC000000              JPF       FLASH_ProgramByte

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000 8D000000              CALLF     printf
   \   000004 5F                    CLRW      X
   \   000005 CF0000                LDW       L:timer3, X
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000 8D000000              CALLF     ?Subroutine59
   \                     ??CrossCallReturnLabel_199:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_on
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    851          

   \                                 In section .far_func.text, align 1, keep-with-next
    852          bool Set_Timer_Off()
    853          {
    854          
    855              LCDInstr(0x01);
   \                     Set_Timer_Off:
   \   000000 8D000000              CALLF     ?Subroutine16
    856              Delay1(1000);
    857              line_lcd=0;
    858              printf("\nH Off:");
   \                     ??CrossCallReturnLabel_41:
   \   000004 AE0000                LDW       X, #`?<Constant "\\nH Off:">`
   \   000007 8D000000              CALLF     ?Subroutine39
    859               timer3=0;
    860            do
    861              {
    862               line_lcd=1;
   \                     ??CrossCallReturnLabel_96:
   \   00000B 8D000000              CALLF     ?Subroutine40
    863               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_100:
   \   00000F 89                    PUSHW     X
   \   000010 C60000                LD        A, L:daily_hour_off
   \   000013 97                    LD        XL, A
   \   000014 89                    PUSHW     X
   \   000015 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000018 8D000000              CALLF     printf
   \   00001C 5B04                  ADD       SP, #0x4
    864                 daily_hour_off=adj(0,23,daily_hour_off);
   \   00001E C60000                LD        A, L:daily_hour_off
   \   000021 B700                  LD        S:?b1, A
   \   000023 35170000              MOV       S:?b0, #0x17
   \   000027 8D000000              CALLF     ??Subroutine72_0
    865              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_190:
   \   00002B C70000                LD        L:daily_hour_off, A
   \   00002E 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_121:
   \   000032 2406                  JRNC      L:??Set_Timer_Off_0
   \   000034 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_111:
   \   000038 27D1                  JREQ      L:??CrossCallReturnLabel_96
    866          
    867            LCDInstr(0x01);
   \                     ??Set_Timer_Off_0:
   \   00003A 8D000000              CALLF     ?Subroutine16
    868             Delay1(1000);
    869             line_lcd=0;
    870             printf("\nMin Off:");
   \                     ??CrossCallReturnLabel_42:
   \   00003E AE0000                LDW       X, #`?<Constant "\\nMin Off:">`
   \   000041 8D000000              CALLF     ?Subroutine39
    871             timer3=0;
    872            do
    873              {
    874               line_lcd=1;
   \                     ??CrossCallReturnLabel_97:
   \   000045 8D000000              CALLF     ?Subroutine40
    875               printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_101:
   \   000049 89                    PUSHW     X
   \   00004A C60000                LD        A, L:daily_hour_off
   \   00004D 97                    LD        XL, A
   \   00004E 89                    PUSHW     X
   \   00004F AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000052 8D000000              CALLF     printf
   \   000056 5B04                  ADD       SP, #0x4
    876                 daily_minute_off=adj(0,59,daily_minute_off);
   \   000058 C60000                LD        A, L:daily_minute_off
   \   00005B 8D000000              CALLF     ?Subroutine24
    877              } while (timer3<=time_menu && !key_ok_on());
   \                     ??CrossCallReturnLabel_193:
   \   00005F C70000                LD        L:daily_minute_off, A
   \   000062 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_122:
   \   000066 2406                  JRNC      L:??Set_Timer_Off_1
   \   000068 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_112:
   \   00006C 27D7                  JREQ      L:??CrossCallReturnLabel_97
    878          
    879            //Save data to eeprom
    880               status.daily=1;
   \                     ??Set_Timer_Off_1:
   \   00006E 8D000000              CALLF     ?Subroutine4
    881               EEPROM_INIT();
    882              //u8 temp =*(u8*)(&status);
    883              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    884               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    885               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    886               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
   \                     ??CrossCallReturnLabel_196:
   \   000072 C60000                LD        A, L:daily_hour_off
   \   000075 AE4004                LDW       X, #0x4004
   \   000078 8D000000              CALLF     ?Subroutine50
    887               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
   \                     ??CrossCallReturnLabel_142:
   \   00007C C60000                LD        A, L:daily_minute_off
   \   00007F AE4005                LDW       X, #0x4005
   \   000082 8D000000              CALLF     ?Subroutine8
    888               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    889                time_off= daily_hour_off*60+daily_minute_off;
   \                     ??CrossCallReturnLabel_22:
   \   000086 C60000                LD        A, L:daily_hour_off
   \   000089 905F                  CLRW      Y
   \   00008B 8D000000              CALLF     ?Subroutine25
    890                 change=TRUE;
   \                     ??CrossCallReturnLabel_63:
   \   00008F 35010000              MOV       L:change, #0x1
    891               return TRUE;
   \   000093 A601                  LD        A, #0x1
   \   000095 87                    RETF
    892          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000 35010000              MOV       L:line_lcd, #0x1
   \   000004 C60000                LD        A, L:daily_minute_off
   \   000007 5F                    CLRW      X
   \   000008 97                    LD        XL, A
   \   000009 87                    RETF
    893          
    894          /*
    895               //Computing time_long_on
    896          
    897               u8 hour=daily_hour_on;
    898               u8 minute=daily_minute_on;
    899               daily_long_on=0;
    900               do
    901               {
    902                    daily_long_on++;
    903                    minute++;
    904                    if (minute==60)
    905                    {
    906                      minute=0;
    907                      hour++;
    908                    }
    909                    if(hour==24) hour=0;
    910          
    911               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
    912          
    913                //Display daily_long_on
    914              LCDInstr(0x01);
    915              Delay1(1000);
    916              line_lcd=0;
    917              printf("\nLong :");
    918          
    919                do
    920              {
    921               line_lcd=1;
    922               printf("\n%d",daily_long_on);
    923                 //daily_long_on=adj(0,1440,daily_long_on);
    924              } while (!key_ok_on());
    925          
    926              time_on=daily_hour_on*60+daily_minute_on;
    927              time_off= daily_hour_off*60+daily_minute_off;
    928              //Save data to eeprom
    929                status.daily=1;
    930               EEPROM_INIT();
    931              //u8 temp =*(u8*)(&status);
    932              // FLASH_ProgramByte(EEPROM_ADR_STATUS,*(u8*)(&status)); //save Status to eeprom
    933               FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    934               FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    935               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_HOURS,daily_hour_on);
    936               FLASH_ProgramByte(EEPROM_ADR_TIME_ON_MINUTES,daily_minute_on);
    937               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_HOURS,daily_hour_off);
    938               FLASH_ProgramByte(EEPROM_ADR_TIME_OFF_MINUTES,daily_minute_off);
    939               FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
    940          
    941             return TRUE;
    942          
    943          }
    944            */
    945          

   \                                 In section .far_func.text, align 1
    946          void Save_Status()
    947          {
    948            EEPROM_INIT();
   \                     Save_Status:
   \   000000 8D000000              CALLF     ??Subroutine73_0
    949            FLASH_ProgramByte(EEPROM_ADR_STATUSH,(u8)(*(u16*)(&status)>>8));
    950            FLASH_ProgramByte(EEPROM_ADR_STATUSL,(u8)(*(u16*)(&status)));
    951            FLASH_Lock(FLASH_MEMTYPE_DATA); //Locking  Flash Data
   \                     ??CrossCallReturnLabel_198:
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 AC000000              JPF       FLASH_Lock
    952          }
    953          

   \                                 In section .far_func.text, align 1
    954          bool Read_Allarm()
    955          {
    956             daily_hour_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_HOURS);
   \                     Read_Allarm:
   \   000000 AE4002                LDW       X, #0x4002
   \   000003 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_20:
   \   000007 C70000                LD        L:daily_hour_on, A
    957              if(daily_hour_on > 24) return FALSE;
   \   00000A A119                  CP        A, #0x19
   \   00000C 2502                  JRC       L:??Read_Allarm_0
   \                     ??Read_Allarm_1:
   \   00000E 4F                    CLR       A
   \   00000F 87                    RETF
    958             daily_minute_on=FLASH_ReadByte(EEPROM_ADR_TIME_ON_MINUTES);
   \                     ??Read_Allarm_0:
   \   000010 AE4003                LDW       X, #0x4003
   \   000013 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_19:
   \   000017 C70000                LD        L:daily_minute_on, A
    959              if(daily_minute_on > 59) return FALSE;
   \   00001A A13C                  CP        A, #0x3c
   \   00001C 24F0                  JRNC      L:??Read_Allarm_1
    960             daily_hour_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_HOURS);
   \   00001E AE4004                LDW       X, #0x4004
   \   000021 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_18:
   \   000025 C70000                LD        L:daily_hour_off, A
    961              if(daily_hour_off > 24) return FALSE;
   \   000028 A119                  CP        A, #0x19
   \   00002A 24E2                  JRNC      L:??Read_Allarm_1
    962             daily_minute_off=FLASH_ReadByte(EEPROM_ADR_TIME_OFF_MINUTES);
   \   00002C AE4005                LDW       X, #0x4005
   \   00002F 8D000000              CALLF     ?Subroutine7
   \                     ??CrossCallReturnLabel_17:
   \   000033 C70000                LD        L:daily_minute_off, A
    963              if(daily_hour_off > 59) return FALSE;
   \   000036 C60000                LD        A, L:daily_hour_off
   \   000039 A13C                  CP        A, #0x3c
   \   00003B 24D1                  JRNC      L:??Read_Allarm_1
    964               // Computting daily_long_on
    965                u8 hour=daily_hour_on;
   \   00003D C60000                LD        A, L:daily_hour_on
   \   000040 B700                  LD        S:?b0, A
    966               u8 minute=daily_minute_on;
   \   000042 C60000                LD        A, L:daily_minute_on
   \   000045 B700                  LD        S:?b1, A
    967               daily_long_on=0;
   \   000047 5F                    CLRW      X
   \   000048 CF0000                LDW       L:daily_long_on, X
    968               do
    969               {
    970                    daily_long_on++;
   \                     ??Read_Allarm_2:
   \   00004B CE0000                LDW       X, L:daily_long_on
   \   00004E 5C                    INCW      X
   \   00004F CF0000                LDW       L:daily_long_on, X
    971                    minute++;
   \   000052 B600                  LD        A, S:?b1
   \   000054 4C                    INC       A
   \   000055 B700                  LD        S:?b1, A
    972                    if (minute==60)
   \   000057 A13C                  CP        A, #0x3c
   \   000059 2607                  JRNE      L:??Read_Allarm_3
    973                    {
    974                      minute=0;
   \   00005B 3F00                  CLR       S:?b1
    975                      hour++;
   \   00005D B600                  LD        A, S:?b0
   \   00005F 4C                    INC       A
   \   000060 B700                  LD        S:?b0, A
    976                    }
    977                    if(hour==24) hour=0;
   \                     ??Read_Allarm_3:
   \   000062 B600                  LD        A, S:?b0
   \   000064 A118                  CP        A, #0x18
   \   000066 2602                  JRNE      L:??Read_Allarm_4
   \   000068 3F00                  CLR       S:?b0
    978          
    979               } while ( !((hour==daily_hour_off) & (minute==daily_minute_off)));
   \                     ??Read_Allarm_4:
   \   00006A C60000                LD        A, L:daily_hour_off
   \   00006D B100                  CP        A, S:?b0
   \   00006F 26DA                  JRNE      L:??Read_Allarm_2
   \   000071 C60000                LD        A, L:daily_minute_off
   \   000074 B100                  CP        A, S:?b1
   \   000076 26D3                  JRNE      L:??Read_Allarm_2
    980          
    981            return TRUE;
   \   000078 A601                  LD        A, #0x1
   \   00007A 87                    RETF
    982          }
    983          

   \                                 In section .far_func.text, align 1, keep-with-next
    984          void EEPROM_INIT()
    985          {
    986            FLASH_DeInit();
   \                     EEPROM_INIT:
   \   000000 8D000000              CALLF     FLASH_DeInit
    987            FLASH_Unlock(FLASH_MEMTYPE_DATA);
   \   000004 A6F7                  LD        A, #0xf7
   \   000006 8D000000              CALLF     FLASH_Unlock
    988            FLASH_SetProgrammingTime(FLASH_PROGRAMTIME_STANDARD);
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       FLASH_SetProgrammingTime
    989          
    990          
    991          
    992          }
    993          
    994          

   \                                 In section .far_func.text, align 1
    995          void GpioConfiguration()
    996          {
    997          
    998            GPIO_Init(LCD_PORT,(GPIO_Pin_TypeDef)LCD_GPIO_PIN,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     GpioConfiguration:
   \   000000 35F00000              MOV       S:?b0, #0xf0
   \   000004 A6FE                  LD        A, #0xfe
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
    999          
   1000            // ADC PE6 NEW PB0
   1001            GPIO_Init(GPIOB,GPIO_PIN_0,GPIO_MODE_IN_FL_NO_IT);
   \   00000D 3F00                  CLR       S:?b0
   \   00000F A601                  LD        A, #0x1
   \   000011 AE5005                LDW       X, #0x5005
   \   000014 8D000000              CALLF     GPIO_Init
   1002          
   1003            // PD6/UART2_RX   PD5/UART2_TX  No need to init  PD7 485 R/W;
   1004            GPIO_Init(GPIOD,GPIO_PIN_7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \   000018 35F00000              MOV       S:?b0, #0xf0
   \   00001C A680                  LD        A, #0x80
   \   00001E 8D000000              CALLF     ?Subroutine51
   1005          
   1006            //PD0 Led
   1007            GPIO_Init(GPIOD,GPIO_PIN_0,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_144:
   \   000022 A601                  LD        A, #0x1
   \   000024 AE500F                LDW       X, #0x500f
   \   000027 8D000000              CALLF     ?Subroutine56
   1008            //I2C
   1009            GPIO_Init(GPIOB,GPIO_PIN_4 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_157:
   \   00002B A610                  LD        A, #0x10
   \   00002D AE5005                LDW       X, #0x5005
   \   000030 8D000000              CALLF     ?Subroutine56
   1010            GPIO_Init(GPIOB,GPIO_PIN_5 ,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_158:
   \   000034 A620                  LD        A, #0x20
   \   000036 AE5005                LDW       X, #0x5005
   \   000039 8D000000              CALLF     ?Subroutine57
   1011            // Remap Pins pb4,pb5  sda,scl ;
   1012          
   1013             //Init KEY OK,PLUS,MINUS
   1014            GPIO_Init(GPIOF,key_ok,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_160:
   \   00003D A610                  LD        A, #0x10
   \   00003F AE5019                LDW       X, #0x5019
   \   000042 8D000000              CALLF     ?Subroutine57
   1015            GPIO_Init(GPIOA,key_plus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_161:
   \   000046 A602                  LD        A, #0x2
   \   000048 AE5000                LDW       X, #0x5000
   \   00004B 8D000000              CALLF     ?Subroutine57
   1016            GPIO_Init(GPIOA,key_minus,GPIO_MODE_IN_PU_NO_IT);
   \                     ??CrossCallReturnLabel_162:
   \   00004F A604                  LD        A, #0x4
   \   000051 AE5000                LDW       X, #0x5000
   \   000054 8D000000              CALLF     ?Subroutine56
   1017          
   1018            //Init DS18b20 data pin
   1019            GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   \                     ??CrossCallReturnLabel_159:
   \   000058 A604                  LD        A, #0x4
   \   00005A 8D000000              CALLF     ?Subroutine51
   1020          
   1021            // Power Pin
   1022             GPIO_Init(GPIOD,power_pin,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_145:
   \   00005E A608                  LD        A, #0x8
   \   000060 AE500F                LDW       X, #0x500f
   \   000063 AC000000              JPF       GPIO_Init
   1023          
   1024          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine57:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35400000              MOV       S:?b0, #0x40
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine56:
   \   000000 8D000000              CALLF     GPIO_Init
   \   000004 35B00000              MOV       S:?b0, #0xb0
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine51:
   \   000000 AE500F                LDW       X, #0x500f
   \   000003 8D000000              CALLF     GPIO_Init
   \   000007 35F00000              MOV       S:?b0, #0xf0
   \   00000B 87                    RETF
   1025          

   \                                 In section .far_func.text, align 1
   1026          void InitClk()
   1027          {
   1028            CLK_DeInit();
   \                     InitClk:
   \   000000 8D000000              CALLF     CLK_DeInit
   1029            CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);    // CPU Prescalar = 1.
   \   000004 A680                  LD        A, #0x80
   \   000006 8D000000              CALLF     CLK_SYSCLKConfig
   1030            CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);    // Prescalar = 1, 16 MHz.
   \   00000A 4F                    CLR       A
   \   00000B 8D000000              CALLF     CLK_SYSCLKConfig
   1031            CLK_ClockSwitchConfig(CLK_SWITCHMODE_AUTO,  // Automatically switch
   1032            CLK_SOURCE_HSI,       // Switch to internal timer.
   1033            DISABLE,              // Disable the clock switch interrupt.
   1034            CLK_CURRENTCLOCKSTATE_DISABLE);   // Disable the previous clock.
   \   00000F 3F00                  CLR       S:?b2
   \   000011 3F00                  CLR       S:?b1
   \   000013 35E10000              MOV       S:?b0, #0xe1
   \   000017 A601                  LD        A, #0x1
   \   000019 8D000000              CALLF     CLK_ClockSwitchConfig
   1035          
   1036            CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2 , ENABLE);
   \   00001D 35010000              MOV       S:?b0, #0x1
   \   000021 A605                  LD        A, #0x5
   \   000023 8D000000              CALLF     ?Subroutine58
   1037            CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART2,ENABLE);
   \                     ??CrossCallReturnLabel_163:
   \   000027 A603                  LD        A, #0x3
   \   000029 8D000000              CALLF     ?Subroutine58
   1038            CLK_PeripheralClockConfig(CLK_PERIPHERAL_ADC,ENABLE);
   \                     ??CrossCallReturnLabel_164:
   \   00002D A613                  LD        A, #0x13
   \   00002F 8D000000              CALLF     ?Subroutine58
   1039            CLK_PeripheralClockConfig(CLK_PERIPHERAL_I2C,ENABLE);
   \                     ??CrossCallReturnLabel_165:
   \   000033 4F                    CLR       A
   \   000034 AC000000              JPF       CLK_PeripheralClockConfig
   1040          
   1041          
   1042          }

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine58:
   \   000000 8D000000              CALLF     CLK_PeripheralClockConfig
   \   000004 35010000              MOV       S:?b0, #0x1
   \   000008 87                    RETF
   1043          
   1044          

   \                                 In section .far_func.text, align 1
   1045          void InitAdc()
   1046          {
   1047               ADC1_DeInit();
   \                     InitAdc:
   \   000000 8D000000              CALLF     ADC1_DeInit
   1048               ADC1_StartConversion();
   \   000004 8D000000              CALLF     ADC1_StartConversion
   1049               /*
   1050               ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
   1051                          ADC1_CHANNEL_0,
   1052                          ADC1_PRESSEL_FCPU_D4,
   1053                           ADC1_EXTTRIG_TIM,
   1054          
   1055                 */
   1056               ADC1_PrescalerConfig(ADC1_PRESSEL_FCPU_D3);
   \   000008 A610                  LD        A, #0x10
   \   00000A 8D000000              CALLF     ADC1_PrescalerConfig
   1057               ADC1_ConversionConfig( ADC1_CONVERSIONMODE_SINGLE,
   1058                                      ADC1_CHANNEL_0,
   1059                                      ADC1_ALIGN_RIGHT
   1060                                     );
   \   00000E 35080000              MOV       S:?b1, #0x8
   \   000012 3F00                  CLR       S:?b0
   \   000014 4F                    CLR       A
   \   000015 8D000000              CALLF     ADC1_ConversionConfig
   1061          
   1062          
   1063               ADC1_SchmittTriggerConfig(ADC1_SCHMITTTRIG_CHANNEL0,DISABLE);
   \   000019 3F00                  CLR       S:?b0
   \   00001B 4F                    CLR       A
   \   00001C 8D000000              CALLF     ADC1_SchmittTriggerConfig
   1064          
   1065          
   1066               //ADC1_Cmd (ENABLE);
   1067               //ADC1->CR1 |= ADC1_CR1_ADON ;
   1068               ADC1_StartConversion();
   \   000020 8D000000              CALLF     ADC1_StartConversion
   1069               ADC1_ITConfig (ADC1_IT_EOCIE,ENABLE);
   \   000024 A601                  LD        A, #0x1
   \   000026 AE0020                LDW       X, #0x20
   \   000029 AC000000              JPF       ADC1_ITConfig
   1070          
   1071          }
   1072          
   1073          /*
   1074          void InitUart()
   1075          {
   1076             UART2_DeInit();
   1077             UART2_Init((u32)9600,
   1078                        UART2_WORDLENGTH_8D,
   1079                        UART2_STOPBITS_1,
   1080                        UART2_PARITY_NO,
   1081                        UART2_SYNCMODE_CLOCK_DISABLE,
   1082                        UART2_MODE_TXRX_ENABLE
   1083                          );
   1084          
   1085             UART2_ITConfig( UART2_IT_RXNE,ENABLE);
   1086             UART2_Cmd(ENABLE);
   1087          
   1088            // UART2_ITConfig(UART2_IT_RXNE,ENABLE);
   1089          }
   1090            */
   1091          

   \                                 In section .far_func.text, align 1
   1092          void SendChar( u8 Char)
   1093          {
   1094             UART2->DR = Char;
   \                     SendChar:
   \   000000 C75241                LD        L:0x5241, A
   1095            while (UART2_GetFlagStatus(UART2_FLAG_TXE) == RESET);;
   \                     ??SendChar_0:
   \   000003 AE0080                LDW       X, #0x80
   \   000006 8D000000              CALLF     UART2_GetFlagStatus
   \   00000A A100                  CP        A, #0x0
   \   00000C 27F5                  JREQ      L:??SendChar_0
   1096          }
   \   00000E 87                    RETF
   1097            /*
   1098          void Send_Hello()
   1099          {
   1100            GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1101             Delay1(10);
   1102             sprintf(data,"Hello");
   1103              u8 i=0;
   1104            do
   1105           {
   1106            SendChar(data[i++]);
   1107           } while (data[i]!=0);
   1108            while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1109            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1110          
   1111          
   1112          
   1113          }
   1114              */
   1115          
   1116          
   1117              /*
   1118          
   1119          void SendData()
   1120          {
   1121           GPIO_WriteHigh(GPIOD,GPIO_PIN_7); //R_W Line
   1122            Delay1(10);
   1123            u8 i=0;
   1124            sprintf(data,"%d %c",adcdata,0x0d);
   1125           do
   1126           {
   1127             SendChar(data[i++]);
   1128          
   1129           } while (data[i]!=0);
   1130             while (UART2_GetFlagStatus(UART2_FLAG_TC) == RESET);;  //Wait to send last byte
   1131            GPIO_WriteLow(GPIOD,GPIO_PIN_7); //R_W Line
   1132            rx_data=0;
   1133          }
   1134          */
   1135          

   \                                 In section .far_func.text, align 1, keep-with-next
   1136          void LCDDataOut(u8 data)
   1137          {
   \                     LCDDataOut:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1138            (data&0x1)? GPIO_WriteHigh(LCD_PORT,DATA4):GPIO_WriteLow(LCD_PORT,DATA4);
   \   000005 A501                  BCP       A, #0x1
   \   000007 2708                  JREQ      L:??LCDDataOut_0
   \   000009 A610                  LD        A, #0x10
   \   00000B 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_76:
   \   00000F 2006                  JRA       L:??CrossCallReturnLabel_221
   \                     ??LCDDataOut_0:
   \   000011 A610                  LD        A, #0x10
   \   000013 8D000000              CALLF     ??Subroutine77_0
   1139            (data&0x2)? GPIO_WriteHigh(LCD_PORT,DATA5):GPIO_WriteLow(LCD_PORT,DATA5);
   \                     ??CrossCallReturnLabel_221:
   \   000017 B600                  LD        A, S:?b8
   \   000019 A502                  BCP       A, #0x2
   \   00001B 2708                  JREQ      L:??LCDDataOut_1
   \   00001D A620                  LD        A, #0x20
   \   00001F 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_75:
   \   000023 2006                  JRA       L:??CrossCallReturnLabel_222
   \                     ??LCDDataOut_1:
   \   000025 A620                  LD        A, #0x20
   \   000027 8D000000              CALLF     ??Subroutine77_0
   1140            (data&0x4)? GPIO_WriteHigh(LCD_PORT,DATA6):GPIO_WriteLow(LCD_PORT,DATA6);
   \                     ??CrossCallReturnLabel_222:
   \   00002B B600                  LD        A, S:?b8
   \   00002D A504                  BCP       A, #0x4
   \   00002F 2708                  JREQ      L:??LCDDataOut_2
   \   000031 A640                  LD        A, #0x40
   \   000033 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_74:
   \   000037 2006                  JRA       L:??CrossCallReturnLabel_223
   \                     ??LCDDataOut_2:
   \   000039 A640                  LD        A, #0x40
   \   00003B 8D000000              CALLF     ??Subroutine77_0
   1141            (data&0x8)? GPIO_WriteHigh(LCD_PORT,DATA7):GPIO_WriteLow(LCD_PORT,DATA7);
   \                     ??CrossCallReturnLabel_223:
   \   00003F B600                  LD        A, S:?b8
   \   000041 A508                  BCP       A, #0x8
   \   000043 2708                  JREQ      L:??LCDDataOut_3
   \   000045 A680                  LD        A, #0x80
   \   000047 8D000000              CALLF     ?Subroutine30
   \                     ??CrossCallReturnLabel_73:
   \   00004B 2006                  JRA       L:??CrossCallReturnLabel_224
   \                     ??LCDDataOut_3:
   \   00004D A680                  LD        A, #0x80
   \   00004F 8D000000              CALLF     ??Subroutine77_0
   1142          }
   \                     ??CrossCallReturnLabel_224:
   \   000053 320000                POP       S:?b8
   \   000056 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteHigh

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000 8D000000              CALLF     ??Subroutine78_0
   \                     ??CrossCallReturnLabel_229:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000 AE500A                LDW       X, #0x500a
   \   000003 AC000000              JPF       GPIO_WriteLow
   1143          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine77_0
   \   000002                       ;               // Fall through to label ??Subroutine77_0

   \                                 In section .far_func.text, align 1, keep-with-next
   1144          void InitLcd()
   1145          {
   1146           LCD_EN(0);
   \                     InitLcd:
   \   000000 8D000000              CALLF     ?Subroutine27
   1147            LCD_RW(0);
   \                     ??CrossCallReturnLabel_68:
   \   000004 A602                  LD        A, #0x2
   \   000006 8D000000              CALLF     ??Subroutine77_0
   1148            LCD_RS(0);
   \                     ??CrossCallReturnLabel_228:
   \   00000A 8D000000              CALLF     ??Subroutine76_0
   1149            Delay1(4000); // 40ms
   \                     ??CrossCallReturnLabel_220:
   \   00000E AE0FA0                LDW       X, #0xfa0
   \   000011 8D000000              CALLF     ?Subroutine32
   1150          
   1151            LCDInstrNibble(0x03);
   1152             Delay1(10);
   1153            LCDInstrNibble(0x03);
   \                     ??CrossCallReturnLabel_80:
   \   000015 A603                  LD        A, #0x3
   \   000017 8D000000              CALLF     LCDInstrNibble
   1154             Delay1(10);
   \   00001B AE000A                LDW       X, #0xa
   \   00001E 8D000000              CALLF     ?Subroutine32
   1155            LCDInstrNibble(0x03);
   1156             Delay1(10);
   1157          
   1158             //Line 4
   1159            LCDInstrNibble(0x02);
   \                     ??CrossCallReturnLabel_79:
   \   000022 A602                  LD        A, #0x2
   \   000024 8D000000              CALLF     LCDInstrNibble
   1160            LCDInstrNibble(0x02);
   \   000028 A602                  LD        A, #0x2
   \   00002A 8D000000              CALLF     LCDInstrNibble
   1161            LCDInstrNibble(0x08);
   \   00002E A608                  LD        A, #0x8
   \   000030 8D000000              CALLF     LCDInstrNibble
   1162            Delay1(100);
   \   000034 AE0064                LDW       X, #0x64
   \   000037 8D000000              CALLF     Delay1
   1163          
   1164            LCDInstr(0x0C);
   \   00003B A60C                  LD        A, #0xc
   \   00003D 8D000000              CALLF     LCDInstr
   1165            Delay1(10);
   \   000041 AE000A                LDW       X, #0xa
   \   000044 8D000000              CALLF     Delay1
   1166          
   1167            LCDInstr(0x01) ;
   \   000048 8D000000              CALLF     ?Subroutine19
   1168            Delay1(250);
   1169          
   1170            LCDInstr(0x06);
   \                     ??CrossCallReturnLabel_49:
   \   00004C A606                  LD        A, #0x6
   \   00004E 8D000000              CALLF     LCDInstr
   1171            Delay1(10);
   \   000052 AE000A                LDW       X, #0xa
   \   000055 AC000000              JPF       Delay1
   1172          
   1173          
   1174          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000 8D000000              CALLF     Delay1
   \   000004 A603                  LD        A, #0x3
   \   000006 8D000000              CALLF     LCDInstrNibble
   \   00000A AE000A                LDW       X, #0xa
   \   00000D AC000000              JPF       Delay1

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_230:
   \   000004 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000 A608                  LD        A, #0x8
   \   000002                       REQUIRE ??Subroutine78_0
   \   000002                       ;               // Fall through to label ??Subroutine78_0

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine19:
   \   000000 8D000000              CALLF     ?Subroutine69
   \                     ??CrossCallReturnLabel_180:
   \   000004 AE00FA                LDW       X, #0xfa
   \   000007 AC000000              JPF       Delay1
   1175          

   \                                 In section .far_func.text, align 1, keep-with-next
   1176          void LCDInstr(u8 Instr)
   1177          {
   \                     LCDInstr:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine29
   1178            LCD_RS(0);
   1179            LCD_RW(0);
   \                     ??CrossCallReturnLabel_217:
   \   000007                       REQUIRE ?Subroutine0
   \   000007                       ;               // Fall through to label ?Subroutine0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 A602                  LD        A, #0x2
   \   000002 8D000000              CALLF     ??Subroutine77_0
   \                     ??CrossCallReturnLabel_225:
   \   000006 B600                  LD        A, S:?b8
   \   000008 4E                    SWAP      A
   \   000009 8D000000              CALLF     ?Subroutine36
   1180            LCDDataOut(Instr>>4);
   1181            PulseEnable();
   \                     ??CrossCallReturnLabel_188:
   \   00000D                       REQUIRE ??Subroutine71_0
   \   00000D                       ;               // Fall through to label ??Subroutine71_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000 B600                  LD        A, S:?b8
   \   000002 8D000000              CALLF     ?Subroutine36
   1182            LCDDataOut(Instr & 0x0F);
   1183            PulseEnable();
   \                     ??CrossCallReturnLabel_187:
   \   000006 320000                POP       S:?b8
   \   000009 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000 A40F                  AND       A, #0xf
   \   000002 8D000000              CALLF     LCDDataOut
   \   000006 AC000000              JPF       PulseEnable

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000 B700                  LD        S:?b8, A
   \   000002                       REQUIRE ??Subroutine76_0
   \   000002                       ;               // Fall through to label ??Subroutine76_0
   1184          }
   1185          

   \                                 In section .far_func.text, align 1, keep-with-next
   1186          void LCDData(u8 Data)
   1187          {
   \                     LCDData:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1188            LCD_RS(1);
   \   000005 A604                  LD        A, #0x4
   \   000007 8D000000              CALLF     ?Subroutine30
   1189            LCD_RW(0);
   \                     ??CrossCallReturnLabel_72:
   \   00000B AC000000              JPF       ?Subroutine0
   1190            LCDDataOut(Data>>4);
   1191            PulseEnable() ;
   1192            LCDDataOut(Data & 0x0F) ;
   1193            PulseEnable();
   1194          }
   1195          

   \                                 In section .far_func.text, align 1, keep-with-next
   1196          void LCDInstrNibble(u8 Instr)
   1197          {
   \                     LCDInstrNibble:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 8D000000              CALLF     ?Subroutine29
   1198            LCD_RS(0);
   1199            LCD_RW(0);
   \                     ??CrossCallReturnLabel_218:
   \   000007 A602                  LD        A, #0x2
   \   000009 8D000000              CALLF     ??Subroutine77_0
   1200            LCDDataOut(Instr & 0x0F);
   \                     ??CrossCallReturnLabel_227:
   \   00000D AC000000              JPF       ??Subroutine71_0
   1201            PulseEnable();
   1202          }
   1203          

   \                                 In section .far_func.text, align 1, keep-with-next
   1204          void PulseEnable(void)
   1205          {
   1206            LCD_EN(0);
   \                     PulseEnable:
   \   000000 8D000000              CALLF     ?Subroutine6
   1207             Delay1(1);
   1208            LCD_EN(1);
   1209             Delay1(1);
   1210            LCD_EN(0);
   \                     ??CrossCallReturnLabel_13:
   \   000004 8D000000              CALLF     ?Subroutine27
   1211             Delay1(1);
   \                     ??CrossCallReturnLabel_67:
   \   000008 5F                    CLRW      X
   \   000009 5C                    INCW      X
   \   00000A AC000000              JPF       Delay1
   1212          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000 8D000000              CALLF     ?Subroutine65
   \                     ??CrossCallReturnLabel_231:
   \   000004 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_208:
   \   000008 A608                  LD        A, #0x8
   \   00000A AE500A                LDW       X, #0x500a
   \   00000D 8D000000              CALLF     GPIO_WriteHigh
   \   000011 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_207:
   \   000015 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000 5F                    CLRW      X
   \   000001 5C                    INCW      X
   \   000002 AC000000              JPF       Delay1
   1213          

   \                                 In section .far_func.text, align 1, keep-with-next
   1214          void LCD_Busy(void)
   1215          {
   1216             //set Port D7 as Input
   1217             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_IN_PU_NO_IT);
   \                     LCD_Busy:
   \   000000 35400000              MOV       S:?b0, #0x40
   \   000004 A680                  LD        A, #0x80
   \   000006 AE500A                LDW       X, #0x500a
   \   000009 8D000000              CALLF     GPIO_Init
   1218             //Set Read
   1219             LCD_RW(1);
   \   00000D A602                  LD        A, #0x2
   \   00000F 8D000000              CALLF     ?Subroutine30
   1220             LCD_RS(0);
   \                     ??CrossCallReturnLabel_71:
   \   000013 8D000000              CALLF     ??Subroutine76_0
   1221             // Read Busy Flag
   1222                timer2=0;
   \                     ??CrossCallReturnLabel_219:
   \   000017 5F                    CLRW      X
   \   000018 CF0000                LDW       L:timer2, X
   1223             do
   1224             {
   1225             // Enable set
   1226               LCD_EN(0);
   \                     ??LCD_Busy_0:
   \   00001B 8D000000              CALLF     ?Subroutine6
   1227                Delay1(1);
   1228               LCD_EN(1);
   1229                Delay1(1);
   1230             } while (GPIO_ReadInputPin(LCD_PORT, DATA7));
   \                     ??CrossCallReturnLabel_14:
   \   00001F A680                  LD        A, #0x80
   \   000021 AE500A                LDW       X, #0x500a
   \   000024 8D000000              CALLF     GPIO_ReadInputPin
   \   000028 A100                  CP        A, #0x0
   \   00002A 26EF                  JRNE      L:??LCD_Busy_0
   1231                k=timer2;
   \   00002C CE0000                LDW       X, L:timer2
   \   00002F CF0000                LDW       L:k, X
   1232                //Clear read
   1233              LCD_RW(0);
   \   000032 A602                  LD        A, #0x2
   \   000034 8D000000              CALLF     ??Subroutine77_0
   1234             //set Port D7 as Output
   1235             GPIO_Init(LCD_PORT,DATA7,GPIO_MODE_OUT_PP_HIGH_FAST);
   \                     ??CrossCallReturnLabel_226:
   \   000038 35F00000              MOV       S:?b0, #0xf0
   \   00003C A680                  LD        A, #0x80
   \   00003E AE500A                LDW       X, #0x500a
   \   000041 AC000000              JPF       GPIO_Init
   1236          
   1237          }
   1238          
   1239          

   \                                 In section .far_func.text, align 1, keep-with-next
   1240          void LCD(u8 data)
   1241           {
   \                     LCD:
   \   000000 3B0000                PUSH      S:?b8
   \   000003 B700                  LD        S:?b8, A
   1242             //  static u8 linet=0;
   1243          
   1244          
   1245               if (data =='\n')     //r
   \   000005 A10A                  CP        A, #0xa
   \   000007 2658                  JRNE      L:??CrossCallReturnLabel_206
   1246               {
   1247          
   1248                   switch(line_lcd)
   \   000009 C60000                LD        A, L:line_lcd
   \   00000C 270B                  JREQ      L:??LCD_0
   \   00000E 4A                    DEC       A
   \   00000F 2710                  JREQ      L:??LCD_1
   \   000011 4A                    DEC       A
   \   000012 2719                  JREQ      L:??LCD_2
   \   000014 4A                    DEC       A
   \   000015 2722                  JREQ      L:??LCD_3
   \   000017 202A                  JRA       L:??LCD_4
   1249                   {
   1250                   case 0:
   1251                     LCDInstr(0x80 | 0x00);
   \                     ??LCD_0:
   \   000019 A680                  LD        A, #0x80
   \   00001B 8D000000              CALLF     ?Subroutine64
   1252                     count=0;
   1253                     break;
   \                     ??CrossCallReturnLabel_172:
   \   00001F 2022                  JRA       L:??LCD_4
   1254                   case 1:
   1255                     LCDInstr(0x80 | 0x40);
   \                     ??LCD_1:
   \   000021 A6C0                  LD        A, #0xc0
   \   000023 8D000000              CALLF     LCDInstr
   1256                     count=20;
   \   000027 35140000              MOV       L:count, #0x14
   1257                     break;
   \   00002B 2016                  JRA       L:??LCD_4
   1258                   case 2:
   1259                     LCDInstr(0x80 | 0x14);
   \                     ??LCD_2:
   \   00002D A694                  LD        A, #0x94
   \   00002F 8D000000              CALLF     LCDInstr
   1260                     count=40;
   \   000033 35280000              MOV       L:count, #0x28
   1261                     break;
   \   000037 200A                  JRA       L:??LCD_4
   1262                   case 3:
   1263                     LCDInstr(0x80 | 0x54);
   \                     ??LCD_3:
   \   000039 A6D4                  LD        A, #0xd4
   \   00003B 8D000000              CALLF     LCDInstr
   1264                     count=60;
   \   00003F 353C0000              MOV       L:count, #0x3c
   1265                     break;
   1266                   //default:
   1267                    //  LCDInstr(0x80 |0x40);    //Line 1
   1268                    }
   1269                   line_lcd++;
   \                     ??LCD_4:
   \   000043 C60000                LD        A, L:line_lcd
   \   000046 4C                    INC       A
   \   000047 C70000                LD        L:line_lcd, A
   1270                   if (line_lcd>=5)
   \   00004A A105                  CP        A, #0x5
   \   00004C 250F                  JRC       L:??LCD_5
   1271                   {
   1272                    line_lcd=1;   //line >=5
   \   00004E 35010000              MOV       L:line_lcd, #0x1
   1273                    LCDInstr(0x01); //Clear LCD
   \   000052 8D000000              CALLF     ?Subroutine69
   1274                    Delay1(2500);
   \                     ??CrossCallReturnLabel_182:
   \   000056 AE09C4                LDW       X, #0x9c4
   \   000059 8D000000              CALLF     Delay1
   1275                   }
   1276          
   1277                   Delay1(1);
   \                     ??LCD_5:
   \   00005D 8D000000              CALLF     ??Subroutine74_0
   1278          
   1279          
   1280               }
   1281          
   1282          
   1283               if (count==20)
   \                     ??CrossCallReturnLabel_206:
   \   000061 C60000                LD        A, L:count
   \   000064 A114                  CP        A, #0x14
   \   000066 260A                  JRNE      L:??LCD_6
   1284                {
   1285                  LCDInstr(0x80 | 0x40);
   \   000068 A6C0                  LD        A, #0xc0
   \                     ??LCD_7:
   \   00006A 8D000000              CALLF     LCDInstr
   1286                  Delay1(1);
   \                     ??LCD_8:
   \   00006E 5F                    CLRW      X
   \   00006F 5C                    INCW      X
   \   000070 2023                  JRA       ??LCD_9
   1287                }
   1288                   else if(count==40)
   \                     ??LCD_6:
   \   000072 A128                  CP        A, #0x28
   \   000074 2604                  JRNE      L:??LCD_10
   1289                  {
   1290                    LCDInstr(0x80 | 0x14);
   \   000076 A694                  LD        A, #0x94
   \   000078 20F0                  JRA       ??LCD_7
   1291                    Delay1(1);
   1292                  }
   1293                    else if(count==60)
   \                     ??LCD_10:
   \   00007A A13C                  CP        A, #0x3c
   \   00007C 2608                  JRNE      L:??LCD_11
   1294                    {
   1295                      LCDInstr(0x80 | 0x54);
   \   00007E A6D4                  LD        A, #0xd4
   \   000080 8D000000              CALLF     ?Subroutine64
   1296                      count=0;
   1297                      Delay1(1);
   \                     ??CrossCallReturnLabel_173:
   \   000084 20E8                  JRA       ??LCD_8
   1298                    }
   1299                      else if(count >80)
   \                     ??LCD_11:
   \   000086 A151                  CP        A, #0x51
   \   000088 250F                  JRC       L:??LCD_12
   1300                        {
   1301                          count=0;
   \   00008A 725F0000              CLR       L:count
   1302                          LCDInstr(0x01); //Clear LCD
   \   00008E 8D000000              CALLF     ?Subroutine69
   1303                          Delay1(250);
   \                     ??CrossCallReturnLabel_181:
   \   000092 AE00FA                LDW       X, #0xfa
   \                     ??LCD_9:
   \   000095 8D000000              CALLF     Delay1
   1304                        }
   1305          
   1306          
   1307              /*
   1308                   line++;
   1309                   if (line>3)
   1310                   {
   1311                     line=1;  //Line 0 for Time
   1312                   }
   1313                 switch(line)
   1314                   {
   1315                   case 1 :LCDInstr(0x80 | 0x40);break;  //Line 1
   1316                   case 2 :LCDInstr(0x80 | 0x14);break;  //Line 2
   1317                   case 3 :LCDInstr(0x80 | 0x54);break;  //Line 3
   1318                   default : LCDInstr(0x80 | 0x40); // Line 1
   1319                   }
   1320                   Delay(1);
   1321                   count=0;
   1322                }
   1323          
   1324               */
   1325          
   1326               if (data > 0x1b)   //Display only valid data
   \                     ??LCD_12:
   \   000099 B600                  LD        A, S:?b8
   \   00009B A11C                  CP        A, #0x1c
   \   00009D 250B                  JRC       L:??LCD_13
   1327               {
   1328                 LCDData(data);
   \   00009F 8D000000              CALLF     ?Subroutine12
   1329                  Delay1(1);
   1330                 count++;
   \                     ??CrossCallReturnLabel_204:
   \   0000A3 C60000                LD        A, L:count
   \   0000A6 4C                    INC       A
   \   0000A7 C70000                LD        L:count, A
   1331               }
   1332           }
   \                     ??LCD_13:
   \   0000AA 320000                POP       S:?b8
   \   0000AD 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000 8D000000              CALLF     LCDInstr
   \   000004 725F0000              CLR       L:count
   \   000008 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000 8D000000              CALLF     LCDData
   \   000004                       REQUIRE ??Subroutine74_0
   \   000004                       ;               // Fall through to label ??Subroutine74_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_209:
   \   000004 87                    RETF
   1333          

   \                                 In section .far_func.text, align 1, keep-with-next
   1334          void InitDelayTimer2()
   1335          {
   1336             //Timer 2 use for Delay  long Delay is 40ms for lcd
   1337             //Tclock 16/8=2Mhz  /20 10us
   1338                 TIM2_DeInit();
   \                     InitDelayTimer2:
   \   000000 8D000000              CALLF     TIM2_DeInit
   1339                 TIM2_TimeBaseInit(TIM2_PRESCALER_2,0X0050);
   \   000004 AE0050                LDW       X, #0x50
   \   000007 A601                  LD        A, #0x1
   \   000009 8D000000              CALLF     TIM2_TimeBaseInit
   1340                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1341                 TIM2_ITConfig(TIM2_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM2_ITConfig
   1342            //Enable TIM2
   1343                 TIM2_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM2_Cmd
   1344          
   1345          }
   1346          

   \                                 In section .far_func.text, align 1, keep-with-next
   1347          void InitDelayTimer3()
   1348          {
   1349             //Timer 3 use for 1s Delay
   1350             //Tclock 16000000/1024=15626
   1351                 TIM3_DeInit();
   \                     InitDelayTimer3:
   \   000000 8D000000              CALLF     TIM3_DeInit
   1352                 TIM3_TimeBaseInit(TIM3_PRESCALER_1024,15625);
   \   000004 AE3D09                LDW       X, #0x3d09
   \   000007 A60A                  LD        A, #0xa
   \   000009 8D000000              CALLF     TIM3_TimeBaseInit
   1353                 //TIM2_PrescalerConfig(TIM2_PRESCALER_1, TIM2_PSCRELOADMODE_IMMEDIATE);
   1354                 TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);
   \   00000D 35010000              MOV       S:?b0, #0x1
   \   000011 A601                  LD        A, #0x1
   \   000013 8D000000              CALLF     TIM3_ITConfig
   1355            //Enable TIM2
   1356                 TIM3_Cmd(ENABLE);
   \   000017 A601                  LD        A, #0x1
   \   000019 AC000000              JPF       TIM3_Cmd
   1357          
   1358          }
   1359          
   1360          
   1361          
   1362          

   \                                 In section .far_func.text, align 1, keep-with-next
   1363          bool DS18_Write(u8 data)
   1364          {
   \                     DS18_Write:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 B700                  LD        S:?b9, A
   1365            disableInterrupts();
   \   000006 9B                    SIM
   1366            for ( u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1367            {
   1368             DS18(0);
   \                     ??DS18_Write_0:
   \   000009 8D000000              CALLF     ?Subroutine31
   1369             Delay_us(1); //Delay1(0); //Start time slot 4,5 us
   1370             if( data & (1<<i)) DS18(1)
   \                     ??CrossCallReturnLabel_78:
   \   00000D 5F                    CLRW      X
   \   00000E 5C                    INCW      X
   \   00000F B600                  LD        A, S:?b8
   \   000011 8D000000              CALLF     L:?sll16_x_x_a
   \   000015 9F                    LD        A, XL
   \   000016 B500                  BCP       A, S:?b9
   \   000018 2704                  JREQ      L:??CrossCallReturnLabel_216
   \   00001A 8D000000              CALLF     ?Subroutine33
   1371               //else DS18(0);
   1372             Delay_us(160);  // 60us end time slot
   \                     ??CrossCallReturnLabel_216:
   \   00001E AE00A0                LDW       X, #0xa0
   \   000021 8D000000              CALLF     Delay_us
   1373             DS18(1);
   \   000025 8D000000              CALLF     ?Subroutine33
   1374             //Delay1(0);
   1375            }
   \                     ??CrossCallReturnLabel_215:
   \   000029 B600                  LD        A, S:?b8
   \   00002B 4C                    INC       A
   \   00002C B700                  LD        S:?b8, A
   \   00002E A108                  CP        A, #0x8
   \   000030 25D7                  JRC       L:??DS18_Write_0
   1376            enableInterrupts();
   \   000032 9A                    RIM
   1377            return TRUE;
   \   000033 A601                  LD        A, #0x1
   \   000035 AC000000              JPF       L:?epilogue_w4
   1378          
   1379          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000 A604                  LD        A, #0x4
   \   000002                       REQUIRE ??Subroutine75_0
   \   000002                       ;               // Fall through to label ??Subroutine75_0

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000 8D000000              CALLF     ?Subroutine66
   \                     ??CrossCallReturnLabel_175:
   \   000004 5F                    CLRW      X
   \   000005 5C                    INCW      X
   \   000006 AC000000              JPF       Delay_us

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000 A604                  LD        A, #0x4
   \   000002 8D000000              CALLF     ?Subroutine70
   \                     ??CrossCallReturnLabel_186:
   \   000006 87                    RETF
   1380          
   1381          

   \                                 In section .far_func.text, align 1, keep-with-next
   1382          u8  DS18_Read()
   1383          {
   \                     DS18_Read:
   \   000000 8D000000              CALLF     L:?push_w4
   1384              //Init DS18b20 data pin as Input
   1385          
   1386            u8 data=0;
   \   000004 3F00                  CLR       S:?b9
   1387              disableInterrupts();
   \   000006 9B                    SIM
   1388            for (u8 i=0;i<8;i++)
   \   000007 3F00                  CLR       S:?b8
   1389            {
   1390              DS18(0);
   \                     ??DS18_Read_0:
   \   000009 8D000000              CALLF     ?Subroutine31
   1391              Delay_us(1); //Start time slot 4,5 us
   1392              DS18(1);
   \                     ??CrossCallReturnLabel_77:
   \   00000D 8D000000              CALLF     ?Subroutine33
   1393              Delay_us(35); // Wait for ds18b20 set bit 15us
   \                     ??CrossCallReturnLabel_213:
   \   000011 AE0023                LDW       X, #0x23
   \   000014 8D000000              CALLF     Delay_us
   1394              //Delay1(0);
   1395             data +=((1<<i)*(GPIO_ReadInputPin(GPIOD,ds18_data)&&ds18_data));
   \   000018 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_84:
   \   00001C 2706                  JREQ      L:??DS18_Read_1
   \   00001E 35010000              MOV       S:?b0, #0x1
   \   000022 2002                  JRA       L:??DS18_Read_2
   \                     ??DS18_Read_1:
   \   000024 3F00                  CLR       S:?b0
   \                     ??DS18_Read_2:
   \   000026 5F                    CLRW      X
   \   000027 5C                    INCW      X
   \   000028 B600                  LD        A, S:?b8
   \   00002A 8D000000              CALLF     L:?sll16_x_x_a
   \   00002E B600                  LD        A, S:?b0
   \   000030 42                    MUL       X, A
   \   000031 9F                    LD        A, XL
   \   000032 BB00                  ADD       A, S:?b9
   \   000034 B700                  LD        S:?b9, A
   1396              Delay_us(120); // Wait 60 us until end of read slot  45us
   \   000036 AE0078                LDW       X, #0x78
   \   000039 8D000000              CALLF     Delay_us
   1397              //  DS18(1);  // Next bit
   1398             // Delay1(0);
   1399          
   1400            }
   \   00003D B600                  LD        A, S:?b8
   \   00003F 4C                    INC       A
   \   000040 B700                  LD        S:?b8, A
   \   000042 A108                  CP        A, #0x8
   \   000044 25C3                  JRC       L:??DS18_Read_0
   1401              enableInterrupts();
   \   000046 9A                    RIM
   1402              //Init DS18b20 data pin
   1403             // GPIO_Init(GPIOD,ds18_data,GPIO_MODE_OUT_OD_HIZ_FAST);
   1404             return data;
   \   000047 B600                  LD        A, S:?b9
   \   000049 AC000000              JPF       L:?epilogue_w4
   1405          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000 A604                  LD        A, #0x4
   \   000002 AE500F                LDW       X, #0x500f
   \   000005 8D000000              CALLF     GPIO_ReadInputPin
   \   000009 A100                  CP        A, #0x0
   \   00000B 87                    RETF
   1406          

   \                                 In section .far_func.text, align 1, keep-with-next
   1407          bool DS18_Reset()
   1408          {
   1409             //Init Reset Pulse
   1410              DS18(0);
   \                     DS18_Reset:
   \   000000 8D000000              CALLF     ?Subroutine66
   1411              Delay1(25);    //25=524us
   \                     ??CrossCallReturnLabel_174:
   \   000004 AE0019                LDW       X, #0x19
   \   000007 8D000000              CALLF     Delay1
   1412              DS18(1);
   \   00000B 8D000000              CALLF     ?Subroutine33
   1413              //Delay1(1);
   1414              timer2=0;
   \                     ??CrossCallReturnLabel_214:
   \   00000F 5F                    CLRW      X
   \   000010 CF0000                LDW       L:timer2, X
   1415              while ((timer2 < 10000) && (GPIO_ReadInputPin(GPIOD, ds18_data)));;   //Wait for ack from DS18B20
   \                     ??DS18_Reset_0:
   \   000013 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_57:
   \   000017 2406                  JRNC      L:??DS18_Reset_1
   \   000019 8D000000              CALLF     ?Subroutine35
   \                     ??CrossCallReturnLabel_83:
   \   00001D 26F4                  JRNE      L:??DS18_Reset_0
   1416              if (timer2>=10000) return FALSE;
   \                     ??DS18_Reset_1:
   \   00001F 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_58:
   \   000023 2502                  JRC       L:??DS18_Reset_2
   \   000025 4F                    CLR       A
   \   000026 87                    RETF
   1417              // Delay1(10);
   1418              Delay1(20);    //25=524us
   \                     ??DS18_Reset_2:
   \   000027 AE0014                LDW       X, #0x14
   \   00002A 8D000000              CALLF     Delay1
   1419          
   1420              return TRUE;
   \   00002E A601                  LD        A, #0x1
   \   000030 87                    RETF
   1421          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000 CE0000                LDW       X, L:timer2
   \   000003 A32710                CPW       X, #0x2710
   \   000006 87                    RETF
   1422          

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000 8D000000              CALLF     DS18_Reset
   \   000004 A100                  CP        A, #0x0
   \   000006 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   1423          u8 temperature ()
   1424          {
   \                     temperature:
   \   000000 8D000000              CALLF     L:?push_w4
   1425          
   1426             //Init Reset Pulse
   1427               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_155:
   \   000008 2605                  JRNE      L:??temperature_0
   \                     ??temperature_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1428             //Skip ROM Command 0xCC
   1429              DS18_Write(0xCC);
   \                     ??temperature_0:
   \   00000F 8D000000              CALLF     ?Subroutine53
   1430             //Function command  CONVERT T [44h]
   1431              DS18_Write(0x44);
   1432              //Wait util end convert
   1433              timer2=0;
   1434               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_149:
   \   000013 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_60:
   \   000017 2408                  JRNC      L:??temperature_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_149
   1435                if (timer2>10000) return FALSE;
   \                     ??temperature_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??temperature_1
   1436               //u8 temp8=timer2;
   1437              //Init Reset Pulse
   1438              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_156:
   \   00002D 27DB                  JREQ      L:??temperature_1
   1439              // Skip ROM Command 0xCC
   1440              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine52
   1441              //Function command READ SCRATCHPAD [BEh]
   1442              DS18_Write(0xBE);
   1443               u8 temp1=DS18_Read();
   1444               u8 temp2=DS18_Read();
   1445              DS18_Reset();
   \                     ??CrossCallReturnLabel_147:
   \   000033 8D000000              CALLF     DS18_Reset
   1446                u16 result = temp2*256+temp1;
   1447                temp1= (u8)(result>>3);
   1448               return temp1;
   \   000037 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   00003B AC000000              JPF       L:?epilogue_w4
   1449          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A644                  LD        A, #0x44
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 5F                    CLRW      X
   \   00000D CF0000                LDW       L:timer2, X
   \   000010 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000 A6CC                  LD        A, #0xcc
   \   000002 8D000000              CALLF     DS18_Write
   \   000006 A6BE                  LD        A, #0xbe
   \   000008 8D000000              CALLF     DS18_Write
   \   00000C 8D000000              CALLF     DS18_Read
   \   000010 B700                  LD        S:?b8, A
   \   000012 8D000000              CALLF     DS18_Read
   \   000016 B700                  LD        S:?b9, A
   \   000018 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000 5F                    CLRW      X
   \   000001 41                    EXG       A, XL
   \   000002 B600                  LD        A, S:?b9
   \   000004 41                    EXG       A, XL
   \   000005 4F                    CLR       A
   \   000006 02                    RLWA      X, A
   \   000007 905F                  CLRW      Y
   \   000009 B600                  LD        A, S:?b8
   \   00000B 61                    EXG       A, YL
   \   00000C 8D000000              CALLF     ??Subroutine81_0
   \                     ??CrossCallReturnLabel_241:
   \   000010 54                    SRLW      X
   \   000011 54                    SRLW      X
   \   000012 54                    SRLW      X
   \   000013 9F                    LD        A, XL
   \   000014 87                    RETF
   1450          

   \                                 In section .far_func.text, align 1, keep-with-next
   1451          bool Read_DS18()
   1452          {
   \                     Read_DS18:
   \   000000 8D000000              CALLF     L:?push_w4
   1453          
   1454             //Init Reset Pulse
   1455               if(!DS18_Reset()) return FALSE;
   \   000004 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_153:
   \   000008 2605                  JRNE      L:??Read_DS18_0
   \                     ??Read_DS18_1:
   \   00000A 4F                    CLR       A
   \   00000B AC000000              JPF       L:?epilogue_w4
   1456             //Skip ROM Command 0xCC
   1457              DS18_Write(0xCC);
   \                     ??Read_DS18_0:
   \   00000F 8D000000              CALLF     ?Subroutine53
   1458             //Function command  CONVERT T [44h]
   1459              DS18_Write(0x44);
   1460              //Wait util end convert
   1461              timer2=0;
   1462               while ((timer2 < 10000) && !(DS18_Read()));;
   \                     ??CrossCallReturnLabel_148:
   \   000013 8D000000              CALLF     ?Subroutine22
   \                     ??CrossCallReturnLabel_59:
   \   000017 2408                  JRNC      L:??Read_DS18_2
   \   000019 8D000000              CALLF     DS18_Read
   \   00001D A100                  CP        A, #0x0
   \   00001F 27F2                  JREQ      L:??CrossCallReturnLabel_148
   1463                if (timer2>10000) return FALSE;
   \                     ??Read_DS18_2:
   \   000021 CE0000                LDW       X, L:timer2
   \   000024 A32711                CPW       X, #0x2711
   \   000027 24E1                  JRNC      L:??Read_DS18_1
   1464               //u8 temp8=timer2;
   1465              //Init Reset Pulse
   1466              if(!DS18_Reset()) return FALSE;
   \   000029 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_154:
   \   00002D 27DB                  JREQ      L:??Read_DS18_1
   1467              // Skip ROM Command 0xCC
   1468              DS18_Write(0xCC);
   \   00002F 8D000000              CALLF     ?Subroutine52
   1469              //Function command READ SCRATCHPAD [BEh]
   1470              DS18_Write(0xBE);
   1471               u8 temp1=DS18_Read();
   1472               u8 temp2=DS18_Read();
   1473               u8 temp3=DS18_Read();
   \                     ??CrossCallReturnLabel_146:
   \   000033 8D000000              CALLF     ?Subroutine54
   1474               u8 temp4=DS18_Read();
   1475               u8 temp5=DS18_Read();
   1476               u8 temp6=DS18_Read();
   \                     ??CrossCallReturnLabel_151:
   \   000037 8D000000              CALLF     ?Subroutine54
   1477               u8 temp7=DS18_Read();
   1478               u8 temp8=DS18_Read();
   1479               u8 temp9=DS18_Read();
   \                     ??CrossCallReturnLabel_150:
   \   00003B 8D000000              CALLF     DS18_Read
   1480          
   1481               DS18_Reset();
   \   00003F 8D000000              CALLF     DS18_Reset
   1482          
   1483                line_lcd=0;
   \   000043 725F0000              CLR       L:line_lcd
   1484                result2=0;
   \   000047 725F0000              CLR       L:result2
   1485                u16 result = temp2*256+temp1;
   1486                result1= (u8)(result>>3);
   \   00004B 8D000000              CALLF     ?Subroutine5
   \                     ??CrossCallReturnLabel_11:
   \   00004F C70000                LD        L:result1, A
   1487                if(result1%2!=0) result2=5;
   \   000052 7201000004            BTJF      L:result1, #0x0, L:??Read_DS18_3
   \   000057 35050000              MOV       L:result2, #0x5
   1488                result1 /=2;
   \                     ??Read_DS18_3:
   \   00005B 44                    SRL       A
   \   00005C C70000                LD        L:result1, A
   1489          
   1490          
   1491                printf("\n%d.%d",result1,result2);
   \   00005F C60000                LD        A, L:result2
   \   000062 5F                    CLRW      X
   \   000063 97                    LD        XL, A
   \   000064 89                    PUSHW     X
   \   000065 C60000                LD        A, L:result1
   \   000068 97                    LD        XL, A
   \   000069 89                    PUSHW     X
   \   00006A AE0000                LDW       X, #`?<Constant "\\n%d.%d">`
   \   00006D 8D000000              CALLF     printf
   \   000071 5B04                  ADD       SP, #0x4
   1492               // printf("\n%02x%02x%02x",temp1,temp2,temp5);
   1493               //line_lcd=1;
   1494               // printf("\n%02x%02x%02x",temp7,temp8,temp9);
   1495               // while (!key_ok_on());
   1496          
   1497               //u8 temp3=DS18_Read();
   1498          
   1499              return TRUE;
   \   000073 A601                  LD        A, #0x1
   \   000075 AC000000              JPF       L:?epilogue_w4
   1500          }

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000 8D000000              CALLF     DS18_Read
   \   000004 8D000000              CALLF     DS18_Read
   \   000008 AC000000              JPF       DS18_Read
   1501          

   \                                 In section .far_func.text, align 1, keep-with-next
   1502          bool DS18Set ()
   1503          {
   1504               //Init Reset Pulse
   1505              if(!DS18_Reset()) return FALSE;
   \                     DS18Set:
   \   000000 8D000000              CALLF     ?Subroutine55
   \                     ??CrossCallReturnLabel_152:
   \   000004 2602                  JRNE      L:??DS18Set_0
   \   000006 4F                    CLR       A
   \   000007 87                    RETF
   1506             //Skip ROM Command 0xCC
   1507              DS18_Write(0xCC);
   \                     ??DS18Set_0:
   \   000008 A6CC                  LD        A, #0xcc
   \   00000A 8D000000              CALLF     DS18_Write
   1508             //Function command  WRITE SCRATCHPAD 0x4E
   1509              DS18_Write(0x4E);
   \   00000E A64E                  LD        A, #0x4e
   \   000010 8D000000              CALLF     DS18_Write
   1510             //Write 3 bytes last is config reg
   1511              DS18_Write(125);
   \   000014 A67D                  LD        A, #0x7d
   \   000016 8D000000              CALLF     DS18_Write
   1512              DS18_Write(0xDC); //-55
   \   00001A A6DC                  LD        A, #0xdc
   \   00001C 8D000000              CALLF     DS18_Write
   1513              DS18_Write(0x1F);
   \   000020 A61F                  LD        A, #0x1f
   \   000022 8D000000              CALLF     DS18_Write
   1514          
   1515          
   1516          
   1517          
   1518            return TRUE;
   \   000026 A601                  LD        A, #0x1
   \   000028 87                    RETF
   1519          }
   1520          
   1521          
   1522          
   1523          
   1524           /*
   1525          u16 Average()
   1526          {
   1527           //Find average in measure
   1528            u8 i=0;
   1529            u16 Summa=0;
   1530            do
   1531            {
   1532             Summa+=measure[i++];
   1533            } while ( measure[i]!=0);
   1534             if(i!=0) Summa=Summa/i;
   1535             return Summa;
   1536          }
   1537             */
   1538          

   \                                 In section .far_func.text, align 1, keep-with-next
   1539          PUTCHAR_PROTOTYPE
   1540          {
   \                     fputc:
   \   000000 8D000000              CALLF     L:?push_w4
   \   000004 BF00                  LDW       S:?w4, X
   1541            /* Place your implementation of fputc here */
   1542            /* e.g. write a character to the USART */
   1543                //USART_SendData(USART3, (u8) ch);
   1544               LCD(ch);
   \   000006 B600                  LD        A, S:?b9
   \   000008 8D000000              CALLF     LCD
   1545             /* Loop until the end of transmission */
   1546              //while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);;
   1547            return ch;
   \   00000C BE00                  LDW       X, S:?w4
   \   00000E AC000000              JPF       L:?epilogue_w4
   1548          }
   1549          
   1550          

   \                                 In section .far_func.text, align 1, keep-with-next
   1551          void Delay1(u16 Delay)
   1552          {
   \                     Delay1:
   \   000000 BF00                  LDW       S:?w0, X
   1553              //1 = 40us,2=60us,3=80us,10=200us, 15=320us,
   1554            timer1=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer1, X
   1555            while ( timer1 < Delay); ;
   \                     ??Delay1_0:
   \   000006 CE0000                LDW       X, L:timer1
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay1_0
   1556          }
   \   00000D 87                    RETF
   1557          

   \                                 In section .far_func.text, align 1, keep-with-next
   1558           void Delay2(u16 Delay)
   1559          {
   \                     Delay2:
   \   000000 BF00                  LDW       S:?w0, X
   1560            timer2=0;
   \   000002 5F                    CLRW      X
   \   000003 CF0000                LDW       L:timer2, X
   1561            while ( timer2 < Delay); ;
   \                     ??Delay2_0:
   \   000006 CE0000                LDW       X, L:timer2
   \   000009 B300                  CPW       X, S:?w0
   \   00000B 25F9                  JRC       L:??Delay2_0
   1562          }
   \   00000D 87                    RETF
   1563          
   1564          

   \                                 In section .far_func.text, align 1, keep-with-next
   1565          void Delay_us (u16 time) //1:3.2us,100:39us,200:77us,35:15.2us,120:45us,160:60us
   1566          {
   1567            //disableInterrupts();
   1568            do
   1569              {
   1570                time--;
   \                     Delay_us:
   \                     ??Delay_us_0:
   \   000000 5A                    DECW      X
   1571                nop();
   \   000001 9D                    NOP
   1572              }
   1573              while (time);
   \   000002 5D                    TNZW      X
   \   000003 26FB                  JRNE      L:??Delay_us_0
   1574            //enableInterrupts();
   1575          }
   \   000005 87                    RETF
   1576          
   1577          
   1578          
   1579          /*
   1580          void Delay12 (u16 Delay)
   1581          {
   1582            timer2=0;
   1583            while ( timer2 < Delay); ;
   1584          }
   1585          */
   1586          
   1587          
   1588          #ifdef USE_FULL_ASSERT
   1589          
   1590          /**
   1591            * @brief  Reports the name of the source file and the source line number
   1592            *   where the assert_param error has occurred.
   1593            * @param file: pointer to the source file name
   1594            * @param line: assert_param error line source number
   1595            * @retval : None
   1596            */

   \                                 In section .far_func.text, align 1, keep-with-next
   1597          void assert_failed(u8* file, u32 line)
   1598          {
   1599            /* User can add his own implementation to report the file name and line number,
   1600               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1601          
   1602            /* Infinite loop */
   1603            while (1)
   \                     assert_failed:
   \                     ??assert_failed_0:
   \   000000 20FE                  JRA       L:??assert_failed_0
   1604            {
   1605          
   1606            }
   1607          }
   1608          #endif
   1609          
   1610          

   \                                 In section .far_func.text, align 1, keep-with-next
   1611          void Display_Line(char* line)
   1612          {
   \                     Display_Line:
   \   000000 8D000000              CALLF     L:?push_l2
   1613            char current_char= *line++;
   \   000004 F6                    LD        A, (X)
   \   000005 B700                  LD        S:?b11, A
   \   000007 5C                    INCW      X
   \   000008 BF00                  LDW       S:?w4, X
   1614            u8 count;
   1615              //Set Cursor to First Line
   1616             LCDInstr(0x80 | 0x00);
   \   00000A A680                  LD        A, #0x80
   \   00000C 8D000000              CALLF     LCDInstr
   1617             count=0;
   \   000010 3F00                  CLR       S:?b10
   1618             Delay1(1);
   \   000012 8D000000              CALLF     ??Subroutine74_0
   1619            do
   1620            {
   1621          
   1622              if (current_char > 0x1b)   //Display only valid data
   \                     ??CrossCallReturnLabel_205:
   \   000016 B600                  LD        A, S:?b11
   \   000018 A11C                  CP        A, #0x1c
   \   00001A 2509                  JRC       L:??Display_Line_0
   1623               {
   1624                 LCDData(current_char);
   \   00001C 8D000000              CALLF     ?Subroutine12
   1625                  Delay1(1);
   1626                 count++;
   \                     ??CrossCallReturnLabel_203:
   \   000020 B600                  LD        A, S:?b10
   \   000022 4C                    INC       A
   \   000023 B700                  LD        S:?b10, A
   1627               }
   1628               current_char=*line++;
   \                     ??Display_Line_0:
   \   000025 92C600                LD        A, [S:?w4.w]
   \   000028 B700                  LD        S:?b11, A
   \   00002A BE00                  LDW       X, S:?w4
   \   00002C 5C                    INCW      X
   \   00002D BF00                  LDW       S:?w4, X
   1629            }  while ((current_char != 0x00) && (count<7));
   \   00002F 3D00                  TNZ       S:?b11
   \   000031 2706                  JREQ      L:??Display_Line_1
   \   000033 B600                  LD        A, S:?b10
   \   000035 A107                  CP        A, #0x7
   \   000037 25DD                  JRC       L:??CrossCallReturnLabel_205
   1630          
   1631             Rotate_Line(line1);
   \                     ??Display_Line_1:
   \   000039 AE0000                LDW       X, #line1
   \   00003C 8D000000              CALLF     Rotate_Line
   1632          
   1633          }
   \   000040 AC000000              JPF       L:?epilogue_l2
   1634          

   \                                 In section .far_func.text, align 1, keep-with-next
   1635          void Rotate_Line( char * line)
   1636          {
   1637          
   1638             char temp_first = *line;
   \                     Rotate_Line:
   \   000000 F6                    LD        A, (X)
   \   000001 B700                  LD        S:?b0, A
   1639             char temp_next;
   1640          
   1641             do
   1642             {
   1643                temp_next=*(line+1);
   1644               *line++=temp_next;
   \                     ??Rotate_Line_0:
   \   000003 9093                  LDW       Y, X
   \   000005 905C                  INCW      Y
   \   000007 90F6                  LD        A, (Y)
   \   000009 F7                    LD        (X), A
   \   00000A 93                    LDW       X, Y
   1645                //line++;
   1646                //temp_next=*line;
   1647               //*line=*line++;
   1648             } while (*line !=0);
   \   00000B 7D                    TNZ       (X)
   \   00000C 26F5                  JRNE      L:??Rotate_Line_0
   1649             line--;
   1650             *line=temp_first;
   \   00000E 5A                    DECW      X
   \   00000F B600                  LD        A, S:?b0
   \   000011 F7                    LD        (X), A
   1651          
   1652          }
   \   000012 87                    RETF
   1653          

   \                                 In section .far_func.text, align 1, keep-with-next
   1654          void Clear_Line1 ()
   1655          {
   \                     Clear_Line1:
   \   000000 3B0000                PUSH      S:?b8
   1656               //Set Cursor to First Line
   1657             LCDInstr(0x80 | 0x00);
   \   000003 A680                  LD        A, #0x80
   \   000005 8D000000              CALLF     ?Subroutine11
   1658             count=0;
   1659             Delay1(1);
   1660              u8 count=0;
   1661             do
   1662             {
   1663               LCDData(' ');
   \                     ??CrossCallReturnLabel_28:
   \   000009 8D000000              CALLF     ?Subroutine9
   1664                  Delay1(1);
   1665                  count++;
   1666             }while (count<8);
   \                     ??CrossCallReturnLabel_24:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_28
   1667          
   1668          
   1669          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000 8D000000              CALLF     ?Subroutine64
   \                     ??CrossCallReturnLabel_171:
   \   000004 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_211:
   \   000008 35080000              MOV       S:?b8, #0x8
   \   00000C 87                    RETF

   \                                 In section .far_func.text, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000 A620                  LD        A, #0x20
   \   000002 8D000000              CALLF     LCDData
   \   000006 8D000000              CALLF     ?Subroutine60
   \                     ??CrossCallReturnLabel_210:
   \   00000A B600                  LD        A, S:?b8
   \   00000C 4A                    DEC       A
   \   00000D B700                  LD        S:?b8, A
   \   00000F 87                    RETF
   1670          

   \                                 In section .far_func.text, align 1, keep-with-next
   1671          void Clear_Line2 ()
   1672          {
   \                     Clear_Line2:
   \   000000 3B0000                PUSH      S:?b8
   1673               //Set Cursor to Second  Line
   1674             LCDInstr(0x80 | 0x40);
   \   000003 A6C0                  LD        A, #0xc0
   \   000005 8D000000              CALLF     ?Subroutine11
   1675             count=0;
   1676             Delay1(1);
   1677              u8 count=0;
   1678             do
   1679             {
   1680               LCDData(' ');
   \                     ??CrossCallReturnLabel_27:
   \   000009 8D000000              CALLF     ?Subroutine9
   1681                  Delay1(1);
   1682                  count++;
   1683             }while (count<8);
   \                     ??CrossCallReturnLabel_23:
   \   00000D 26FA                  JRNE      L:??CrossCallReturnLabel_27
   1684          
   1685          
   1686          }
   \   00000F 320000                POP       S:?b8
   \   000012 87                    RETF
   1687          
   1688          
   1689          
   1690          
   1691          

   \                                 In section .far_func.text, align 1, keep-with-next
   1692          void Menu (void)
   1693          {
   1694           // Clear Display
   1695              LCDInstr(0x01); //Clear LCD
   \                     Menu:
   \   000000 8D000000              CALLF     ?Subroutine19
   1696              Delay1(250);
   1697              //u8 key;
   1698           /* First Line 1. Time On 2. Time off 3.Timer ON/OFF 4.Exit
   1699              Wait for Plus,Minius or OK
   1700              If plus next option from Menu on the end EXIT
   1701              If minus previous option from Menu  on the end EXIT
   1702              If OK enter to menu option
   1703              If time out about 10s exit from Menu
   1704           */
   1705          
   1706          
   1707             /*
   1708                First_Menu();
   1709          
   1710          
   1711          
   1712              */
   1713          
   1714          
   1715          
   1716          
   1717          
   1718              do {
   1719          
   1720          
   1721          First_Menu:
   1722              line_lcd=0;
   \                     ??CrossCallReturnLabel_50:
   \   000004 725F0000              CLR       L:line_lcd
   1723              printf("\nON      ");
   \   000008 AE0000                LDW       X, #`?<Constant "\\nON      ">`
   \   00000B 8D000000              CALLF     printf
   1724              line_lcd=1;
   \   00000F 8D000000              CALLF     ?Subroutine41
   1725              printf("\n%02d:%02d",daily_hour_on,daily_minute_on);
   \                     ??CrossCallReturnLabel_105:
   \   000013 89                    PUSHW     X
   \   000014 C60000                LD        A, L:daily_hour_on
   \   000017 97                    LD        XL, A
   \   000018 89                    PUSHW     X
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B04                  ADD       SP, #0x4
   1726              switch (Key_Press())
   \   000022 8D000000              CALLF     Key_Press
   \   000026 4A                    DEC       A
   \   000027 2709                  JREQ      L:??Menu_0
   \   000029 4A                    DEC       A
   \   00002A 270D                  JREQ      L:??Menu_1
   \   00002C 4A                    DEC       A
   \   00002D 2775                  JREQ      L:??Menu_2
   \   00002F CC0000                JP        L:??Menu_3
   1727                  {
   1728                  case 1: Set_Timer_On();
   \                     ??Menu_0:
   \   000032 8D000000              CALLF     Set_Timer_On
   1729                   break;
   \   000036 CC0000                JP        L:??Menu_3
   1730                  case 2: goto Second_Menu ;
   1731                   break;
   1732                  case 3: goto Exit_Menu;
   1733                   break;
   1734                  }
   1735                  break; //Exit Menu
   1736          
   1737          
   1738          Second_Menu:
   1739              line_lcd=0;
   \                     ??Menu_1:
   \   000039 725F0000              CLR       L:line_lcd
   1740              printf("\nOFF     ");
   \   00003D AE0000                LDW       X, #`?<Constant "\\nOFF     ">`
   \   000040 8D000000              CALLF     printf
   1741              line_lcd=1;
   \   000044 8D000000              CALLF     ?Subroutine40
   1742              printf("\n%02d:%02d",daily_hour_off,daily_minute_off);
   \                     ??CrossCallReturnLabel_102:
   \   000048 89                    PUSHW     X
   \   000049 C60000                LD        A, L:daily_hour_off
   \   00004C 97                    LD        XL, A
   \   00004D 89                    PUSHW     X
   \   00004E AE0000                LDW       X, #`?<Constant "\\n%02d:%02d">`
   \   000051 8D000000              CALLF     printf
   \   000055 5B04                  ADD       SP, #0x4
   1743                switch (Key_Press())
   \   000057 8D000000              CALLF     Key_Press
   \   00005B 4A                    DEC       A
   \   00005C 2708                  JREQ      L:??Menu_4
   \   00005E 4A                    DEC       A
   \   00005F 270B                  JREQ      L:??Menu_5
   \   000061 4A                    DEC       A
   \   000062 27A0                  JREQ      L:??CrossCallReturnLabel_50
   \   000064 206A                  JRA       L:??Menu_3
   1744                  {
   1745                  case 1: Set_Timer_Off();
   \                     ??Menu_4:
   \   000066 8D000000              CALLF     Set_Timer_Off
   1746                   break;
   \   00006A 2064                  JRA       L:??Menu_3
   1747                  case 2: goto Third_Menu ;
   1748                   break;
   1749                  case 3: goto First_Menu;
   1750                   break;
   1751                  }
   1752               break; //Exit Menu
   1753          
   1754          Third_Menu:
   1755              line_lcd=0;
   \                     ??Menu_5:
   \   00006C 725F0000              CLR       L:line_lcd
   1756              printf("\nClock");
   \   000070 AE0000                LDW       X, #`?<Constant "\\nClock">`
   \   000073 8D000000              CALLF     printf
   1757              line_lcd=1;
   \   000077 8D000000              CALLF     ?Subroutine38
   1758              printf("\n%02d:%02d:%02d",hours,minutes,seconds);
   \                     ??CrossCallReturnLabel_94:
   \   00007B 89                    PUSHW     X
   \   00007C C60000                LD        A, L:minutes
   \   00007F 97                    LD        XL, A
   \   000080 89                    PUSHW     X
   \   000081 C60000                LD        A, L:hours
   \   000084 97                    LD        XL, A
   \   000085 89                    PUSHW     X
   \   000086 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   000089 8D000000              CALLF     printf
   \   00008D 5B06                  ADD       SP, #0x6
   1759                switch (Key_Press())
   \   00008F 8D000000              CALLF     Key_Press
   \   000093 4A                    DEC       A
   \   000094 2708                  JREQ      L:??Menu_6
   \   000096 4A                    DEC       A
   \   000097 270B                  JREQ      L:??Menu_2
   \   000099 4A                    DEC       A
   \   00009A 279D                  JREQ      L:??Menu_1
   \   00009C 2032                  JRA       L:??Menu_3
   1760                  {
   1761                  case 1:  Set_Clock();
   \                     ??Menu_6:
   \   00009E 8D000000              CALLF     Set_Clock
   1762                   break;
   \   0000A2 202C                  JRA       L:??Menu_3
   1763                  case 2: goto Exit_Menu ;
   1764                   break;
   1765                  case 3: goto Second_Menu;
   1766                   break;
   1767                  }
   1768               break; //Exit Menu
   1769          
   1770          
   1771          
   1772          
   1773          
   1774          
   1775          Exit_Menu:
   1776              line_lcd=0;
   \                     ??Menu_2:
   \   0000A4 725F0000              CLR       L:line_lcd
   1777              printf("\nExit OK ");
   \   0000A8 AE0000                LDW       X, #`?<Constant "\\nExit OK ">`
   \   0000AB 8D000000              CALLF     printf
   1778              line_lcd=1;
   \   0000AF 35010000              MOV       L:line_lcd, #0x1
   1779              printf("\n+/-     ");
   \   0000B3 AE0000                LDW       X, #`?<Constant "\\n+/-     ">`
   \   0000B6 8D000000              CALLF     printf
   1780                 switch (Key_Press())
   \   0000BA 8D000000              CALLF     Key_Press
   \   0000BE 4A                    DEC       A
   \   0000BF 270B                  JREQ      L:??Menu_7
   \   0000C1 4A                    DEC       A
   \   0000C2 2603                  JRNE      ??lb_0
   \   0000C4 CC0000                JP        L:??CrossCallReturnLabel_50
   \                     ??lb_0:
   \   0000C7 4A                    DEC       A
   \   0000C8 27A2                  JREQ      L:??Menu_5
   \   0000CA 2004                  JRA       L:??Menu_3
   1781                  {
   1782                  case 1: Set_Date();
   \                     ??Menu_7:
   \   0000CC 8D000000              CALLF     Set_Date
   1783                   break;
   1784                  case 2: goto First_Menu ;
   1785                   break;
   1786                  case 3: goto Third_Menu;
   1787                   break;
   1788                  }
   1789                 break; //Exit Menu
   1790              }    while (1);
   1791              //exit:
   1792             Clear_Line1();
   \                     ??Menu_3:
   \   0000D0 8D000000              CALLF     Clear_Line1
   1793             Clear_Line2();
   \   0000D4 AC000000              JPF       Clear_Line2
   1794          
   1795          }
   1796          
   1797          

   \                                 In section .far_func.text, align 1, keep-with-next
   1798          u8 Key_Press(void)
   1799          {
   \                     Key_Press:
   \   000000 3B0000                PUSH      S:?b8
   1800             u8 key_press =0;
   \   000003 3F00                  CLR       S:?b8
   1801             timer3=0;
   \   000005 5F                    CLRW      X
   \   000006 CF0000                LDW       L:timer3, X
   1802             do {
   1803                if (key_ok_on()) key_press=1;
   \                     ??Key_Press_0:
   \   000009 8D000000              CALLF     ?Subroutine42
   \                     ??CrossCallReturnLabel_106:
   \   00000D 2706                  JREQ      L:??Key_Press_1
   \   00000F 35010000              MOV       S:?b8, #0x1
   \   000013 201A                  JRA       L:??Key_Press_2
   1804                   else if (key_plus_on())key_press=2;
   \                     ??Key_Press_1:
   \   000015 8D000000              CALLF     key_plus_on
   \   000019 A100                  CP        A, #0x0
   \   00001B 2706                  JREQ      L:??Key_Press_3
   \   00001D 35020000              MOV       S:?b8, #0x2
   \   000021 200C                  JRA       L:??Key_Press_2
   1805                  else if (key_minus_on())key_press=3;
   \                     ??Key_Press_3:
   \   000023 8D000000              CALLF     key_minus_on
   \   000027 A100                  CP        A, #0x0
   \   000029 2704                  JREQ      L:??Key_Press_2
   \   00002B 35030000              MOV       S:?b8, #0x3
   1806             } while ( (timer3<=time_menu) && !key_press);    //(timer3<=time_menu) &&
   \                     ??Key_Press_2:
   \   00002F 8D000000              CALLF     ?Subroutine44
   \                     ??CrossCallReturnLabel_120:
   \   000033 2404                  JRNC      L:??Key_Press_4
   \   000035 3D00                  TNZ       S:?b8
   \   000037 27D0                  JREQ      L:??Key_Press_0
   1807          
   1808             return key_press;
   \                     ??Key_Press_4:
   \   000039 B600                  LD        A, S:?b8
   \   00003B 320000                POP       S:?b8
   \   00003E 87                    RETF
   1809          }
   1810          
   1811          
   1812          
   1813          

   \                                 In section .far_func.text, align 1, keep-with-next
   1814          bool Set_Date(void)
   1815          {
   \                     Set_Date:
   \   000000 3B0000                PUSH      S:?b8
   1816             u8 leap=0;
   \   000003 3F00                  CLR       S:?b8
   1817          
   1818                   //Clear Display
   1819             LCDInstr(0x01);
   \   000005 8D000000              CALLF     ?Subroutine14
   1820             Delay1(1000);
   1821             line_lcd=0;
   1822              printf("\nYears:");
   1823                do
   1824              {
   1825               line_lcd=1;
   \                     ??CrossCallReturnLabel_36:
   \   000009 8D000000              CALLF     ?Subroutine37
   1826               printf("\n%02d:%02d:%02d",years,monts,date);
   \                     ??CrossCallReturnLabel_85:
   \   00000D 89                    PUSHW     X
   \   00000E C60000                LD        A, L:monts
   \   000011 97                    LD        XL, A
   \   000012 89                    PUSHW     X
   \   000013 3B0000                PUSH      L:years + 1
   \   000016 3B0000                PUSH      L:years
   \   000019 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00001C 8D000000              CALLF     printf
   \   000020 5B06                  ADD       SP, #0x6
   1827                 years=adj(0,99,years);
   \   000022 8D000000              CALLF     ?Subroutine10
   1828              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_25:
   \   000026 27E1                  JREQ      L:??CrossCallReturnLabel_36
   1829                  years+=2000;
   \   000028 CE0000                LDW       X, L:years
   \   00002B 1C07D0                ADDW      X, #0x7d0
   \   00002E CF0000                LDW       L:years, X
   1830              if ( years%400==0 ||(years%100!=0 && years%4==0)) leap=1;
   \   000031 90AE0190              LDW       Y, #0x190
   \   000035 8D000000              CALLF     L:?smod16_y_x_y
   \   000039 905D                  TNZW      Y
   \   00003B 271E                  JREQ      L:??Set_Date_0
   \   00003D CE0000                LDW       X, L:years
   \   000040 90AE0064              LDW       Y, #0x64
   \   000044 8D000000              CALLF     L:?smod16_y_x_y
   \   000048 905D                  TNZW      Y
   \   00004A 2713                  JREQ      L:??Set_Date_1
   \   00004C CE0000                LDW       X, L:years
   \   00004F 90AE0004              LDW       Y, #0x4
   \   000053 8D000000              CALLF     L:?smod16_y_x_y
   \   000057 905D                  TNZW      Y
   \   000059 2604                  JRNE      L:??Set_Date_1
   \                     ??Set_Date_0:
   \   00005B 35010000              MOV       S:?b8, #0x1
   1831                  years-=2000;
   \                     ??Set_Date_1:
   \   00005F CE0000                LDW       X, L:years
   \   000062 1CF830                ADDW      X, #0xfffffffffffff830
   \   000065 CF0000                LDW       L:years, X
   1832               line_lcd=0;
   \   000068 8D000000              CALLF     ?Subroutine34
   1833              printf("\nmonts:");
   1834                do
   1835              {
   1836               line_lcd=1;
   \                     ??CrossCallReturnLabel_82:
   \   00006C 8D000000              CALLF     ?Subroutine37
   1837               printf("\n%02d:%02d:%02d",years,monts,date);
   \                     ??CrossCallReturnLabel_86:
   \   000070 89                    PUSHW     X
   \   000071 C60000                LD        A, L:monts
   \   000074 97                    LD        XL, A
   \   000075 89                    PUSHW     X
   \   000076 3B0000                PUSH      L:years + 1
   \   000079 3B0000                PUSH      L:years
   \   00007C AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   00007F 8D000000              CALLF     printf
   \   000083 5B06                  ADD       SP, #0x6
   1838                 monts=adj(1,12,monts);
   \   000085 8D000000              CALLF     ?Subroutine17
   1839              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_45:
   \   000089 27E1                  JREQ      L:??CrossCallReturnLabel_82
   1840          
   1841              if ( monts == 1 || monts==3 || monts==5 ||monts==7||monts==8||monts==10||monts==12) date_end=31;
   \   00008B C60000                LD        A, L:monts
   \   00008E A101                  CP        A, #0x1
   \   000090 2718                  JREQ      L:??Set_Date_2
   \   000092 A103                  CP        A, #0x3
   \   000094 2714                  JREQ      L:??Set_Date_2
   \   000096 A105                  CP        A, #0x5
   \   000098 2710                  JREQ      L:??Set_Date_2
   \   00009A A107                  CP        A, #0x7
   \   00009C 270C                  JREQ      L:??Set_Date_2
   \   00009E A108                  CP        A, #0x8
   \   0000A0 2708                  JREQ      L:??Set_Date_2
   \   0000A2 A10A                  CP        A, #0xa
   \   0000A4 2704                  JREQ      L:??Set_Date_2
   \   0000A6 A10C                  CP        A, #0xc
   \   0000A8 2606                  JRNE      L:??Set_Date_3
   \                     ??Set_Date_2:
   \   0000AA 351F0000              MOV       L:date_end, #0x1f
   \   0000AE 2024                  JRA       L:??Set_Date_4
   1842               else if ( monts==4||monts==6 || monts==9 ||monts==11) date_end=30;
   \                     ??Set_Date_3:
   \   0000B0 A104                  CP        A, #0x4
   \   0000B2 270C                  JREQ      L:??Set_Date_5
   \   0000B4 A106                  CP        A, #0x6
   \   0000B6 2708                  JREQ      L:??Set_Date_5
   \   0000B8 A109                  CP        A, #0x9
   \   0000BA 2704                  JREQ      L:??Set_Date_5
   \   0000BC A10B                  CP        A, #0xb
   \   0000BE 2606                  JRNE      L:??Set_Date_6
   \                     ??Set_Date_5:
   \   0000C0 351E0000              MOV       L:date_end, #0x1e
   \   0000C4 200E                  JRA       L:??Set_Date_4
   1843                else
   1844                 {
   1845                   if(leap) date_end=29;
   \                     ??Set_Date_6:
   \   0000C6 3D00                  TNZ       S:?b8
   \   0000C8 2706                  JREQ      L:??Set_Date_7
   \   0000CA 351D0000              MOV       L:date_end, #0x1d
   \   0000CE 2004                  JRA       L:??Set_Date_4
   1846                    else date_end=28;
   \                     ??Set_Date_7:
   \   0000D0 351C0000              MOV       L:date_end, #0x1c
   1847                 }
   1848                 asm("nop");
   \                     ??Set_Date_4:
   \   0000D4 9D                    nop
   1849              LCDInstr(0x01);
   \   0000D5 8D000000              CALLF     ?Subroutine15
   1850               Delay1(1000);
   1851                line_lcd=0;
   1852              printf("\nDate:");
   1853                do
   1854              {
   1855               line_lcd=1;
   \                     ??CrossCallReturnLabel_38:
   \   0000D9 8D000000              CALLF     ?Subroutine37
   1856               printf("\n%02d:%02d:%02d",years,monts,date);
   \                     ??CrossCallReturnLabel_87:
   \   0000DD 89                    PUSHW     X
   \   0000DE C60000                LD        A, L:monts
   \   0000E1 97                    LD        XL, A
   \   0000E2 89                    PUSHW     X
   \   0000E3 3B0000                PUSH      L:years + 1
   \   0000E6 3B0000                PUSH      L:years
   \   0000E9 AE0000                LDW       X, #`?<Constant "\\n%02d:%02d:%02d">`
   \   0000EC 8D000000              CALLF     printf
   \   0000F0 5B06                  ADD       SP, #0x6
   1857                 date=adj(1,date_end,date);
   \   0000F2 C60000                LD        A, L:`date`
   \   0000F5 B700                  LD        S:?b1, A
   \   0000F7 C60000                LD        A, L:date_end
   \   0000FA B700                  LD        S:?b0, A
   \   0000FC 8D000000              CALLF     ?Subroutine18
   1858              } while (!key_ok_on());
   \                     ??CrossCallReturnLabel_47:
   \   000100 27D7                  JREQ      L:??CrossCallReturnLabel_38
   1859          
   1860            /*
   1861              ptim.tm_sec=seconds;
   1862              ptim.tm_min=minutes;
   1863              ptim.tm_hour=hours;
   1864              ptim.tm_mday=date;
   1865              ptim.tm_mon=monts;
   1866              ptim.tm_year=years;
   1867          
   1868               if( mktime(&ptim)==-1)
   1869               {
   1870                  line_lcd=0;
   1871                 printf("/nDate err");
   1872                  line_lcd=1;
   1873                 printf("/nRepair..");
   1874                  while (!key_ok_on());
   1875               }
   1876               else
   1877               {
   1878                  line_lcd=0;
   1879                 printf("/nDate ok!");
   1880                    while (!key_ok_on());
   1881               }
   1882              */
   1883          
   1884          
   1885          
   1886          
   1887          
   1888          
   1889          
   1890          
   1891          
   1892          
   1893          
   1894          
   1895          
   1896          
   1897          
   1898          
   1899          
   1900            return TRUE;
   \   000102 A601                  LD        A, #0x1
   \   000104 320000                POP       S:?b8
   \   000107 87                    RETF
   1901          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDS_Err_I">`:
   \   000000 0A44535F4572          DC8 "\012DS_Err_I"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E2:%d">`:
   \   000000 0A2045323A25          DC8 "\012 E2:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n E:%d">`:
   \   000000 0A20453A2564          DC8 "\012 E:%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSetClock">`:
   \   000000 0A536574436C          DC8 "\012SetClock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "TIMER ON">`:
   \   000000 54494D455220          DC8 "TIMER ON"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "TIMER OFF">`:
   \   000000 54494D455220          DC8 "TIMER OFF"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%d.%dC %s ">`:
   \   000000 25642E256443          DC8 "%d.%dC %s "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nYears:">`:
   \   000000 0A5965617273          DC8 "\012Years:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nmonts:">`:
   \   000000 0A6D6F6E7473          DC8 "\012monts:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDate:">`:
   \   000000 0A446174653A          DC8 "\012Date:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nDays:">`:
   \   000000 0A446179733A          DC8 "\012Days:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d">`:
   \   000000 0A2530326400          DC8 "\012%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nHours:">`:
   \   000000 0A486F757273          DC8 "\012Hours:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMinutes:">`:
   \   000000 0A4D696E7574          DC8 "\012Minutes:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nSeconds:">`:
   \   000000 0A5365636F6E          DC8 "\012Seconds:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH On:">`:
   \   000000 0A48204F6E3A          DC8 "\012H On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%02d:%02d">`:
   \   000000 0A253032643A          DC8 "\012%02d:%02d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin On:">`:
   \   000000 0A4D696E204F          DC8 "\012Min On:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nH Off:">`:
   \   000000 0A48204F6666          DC8 "\012H Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nMin Off:">`:
   \   000000 0A4D696E204F          DC8 "\012Min Off:"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n%d.%d">`:
   \   000000 0A25642E2564          DC8 "\012%d.%d"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nON      ">`:
   \   000000 0A4F4E202020          DC8 "\012ON      "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nOFF     ">`:
   \   000000 0A4F46462020          DC8 "\012OFF     "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nClock">`:
   \   000000 0A436C6F636B          DC8 "\012Clock"

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\nExit OK ">`:
   \   000000 0A4578697420          DC8 "\012Exit OK "

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "\\n+/-     ">`:
   \   000000 0A2B2F2D2020          DC8 "\012+/-     "
   1902          
   1903          
   1904          
   1905          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     timer1                            2
     timer2                            2
     timer3                            2
     timeout                           1
     adcdata                           2
     rx_data                           1
     line_lcd                          1
     count                             1
     seconds                           1
     minutes                           1
     hours                             1
     days                              1
     date                              1
     monts                             1
     years                             2
     error                             1
     temp_flag                         1
     temp2                             1
     daily_hour_on                     1
     daily_minute_on                   1
     daily_hour_off                    1
     daily_minute_off                  1
     daily_long_on                     2
     time_on                           2
     time_off                          2
     ttimer                            1
     result1                           1
     result2                           1
     result_old                        1
     l                                 1
     status_check                      2
     test1                             1
     test2                             1
     date_end                          1
     line1                            40
     string1                          10
     change                            1
     Time_Display                      1
     result                            4
     k                                 2
     status                            2
     ?Subroutine67                     7
     ?Subroutine42                     5
     ?Subroutine38                    10
     ??Subroutine75_0                  7
     main                            479
     ?Subroutine63                     2
     ??Subroutine80_0                 12
     ?Subroutine28                     7
     ?Subroutine70                     7
     ?Subroutine26                    18
     ?Subroutine68                     2
     ??Subroutine81_0                  8
     ?Subroutine25                    15
     ?Subroutine7                      9
     Display                           9
     Power_On                         11
     ?Subroutine43                    23
     Power_Off                        11
     InitI2C                          38
     I2C_Start                        38
     ?Subroutine49                     7
     I2C_WA                           38
     I2C_RA                           40
     I2C_WD                           36
     I2C_RD                           35
     ?Subroutine48                     1
     ??Subroutine79_0                  7
     ?Subroutine47                     9
     ?Subroutine46                    11
     ReadDS1307                      111
     ?Subroutine23                    11
     ?Subroutine20                    13
     ?Subroutine13                     8
     ?Subroutine62                    10
     Check_DS1307                     64
     Set_DS1307                      109
     ?Subroutine45                    11
     convert_tobcd                    23
     bcd2hex                          23
     Set_Clock                       334
     ?Subroutine37                    10
     ?Subroutine34                    11
     ?Subroutine18                    14
     ?Subroutine17                    23
     ?Subroutine15                    11
     ?Subroutine14                    11
     ?Subroutine10                    25
     ?Subroutine24                     6
     ??Subroutine72_0                  5
     ?Subroutine16                     5
     ?Subroutine61                    16
     ?Subroutine69                     6
     adj                              85
     key_ok_on                        47
     ?Subroutine2                     10
     key_plus_on                      45
     ?Subroutine21                     7
     ?Subroutine3                      7
     key_minus_on                     45
     key_ok_plus                      40
     ?Subroutine1                     29
     ?Subroutine44                     7
     ?Subroutine4                     10
     ??Subroutine73_0                 29
     Set_Timer_On                    145
     ?Subroutine50                     5
     ?Subroutine59                     9
     ?Subroutine39                     9
     ?Subroutine8                     10
     ?Subroutine41                    10
     Set_Timer_Off                   150
     ?Subroutine40                    10
     Save_Status                      10
     Read_Allarm                     123
     EEPROM_INIT                      15
     GpioConfiguration               103
     ?Subroutine57                     9
     ?Subroutine56                     9
     ?Subroutine51                    12
     InitClk                          56
     ?Subroutine58                     9
     InitAdc                          45
     SendChar                         15
     LCDDataOut                       87
     ?Subroutine30                     7
     ??Subroutine77_0                  5
     ??Subroutine78_0                  7
     ??Subroutine76_0                  2
     InitLcd                          89
     ?Subroutine32                    17
     ?Subroutine27                     5
     ?Subroutine65                     2
     ?Subroutine19                    11
     LCDInstr                          7
     ?Subroutine0                     13
     ??Subroutine71_0                 10
     ?Subroutine36                    10
     ?Subroutine29                     2
     LCDData                          15
     LCDInstrNibble                   17
     PulseEnable                      14
     ?Subroutine6                     22
     ?Subroutine60                     6
     LCD_Busy                         69
     LCD                             174
     ?Subroutine64                     9
     ?Subroutine12                     4
     ??Subroutine74_0                  5
     InitDelayTimer2                  29
     InitDelayTimer3                  29
     DS18_Write                       57
     ?Subroutine33                     2
     ?Subroutine31                    10
     ?Subroutine66                     7
     DS18_Read                        77
     ?Subroutine35                    12
     DS18_Reset                       49
     ?Subroutine22                     7
     ?Subroutine55                     7
     temperature                      63
     ?Subroutine53                    17
     ?Subroutine52                    25
     ?Subroutine5                     21
     Read_DS18                       121
     ?Subroutine54                    12
     DS18Set                          41
     fputc                            18
     Delay1                           14
     Delay2                           14
     Delay_us                          6
     assert_failed                     2
     Display_Line                     68
     Rotate_Line                      19
     Clear_Line1                      19
     ?Subroutine11                    13
     ?Subroutine9                     16
     Clear_Line2                      19
     Menu                            216
     Key_Press                        63
     Set_Date                        264
     ?<Constant "\nDS_Err_I">         10
     ?<Constant "\n E2:%d">            8
     ?<Constant "\n E:%d">             7
     ?<Constant "\nSetClock">         10
     ?<Constant "TIMER ON">            9
     ?<Constant "TIMER OFF">          10
     ?<Constant "%d.%dC %s ">         11
     ?<Constant "\n%02d:%02d:%02d">   16
     ?<Constant "\nYears:">            8
     ?<Constant "\nmonts:">            8
     ?<Constant "\nDate:">             7
     ?<Constant "\nDays:">             7
     ?<Constant "\n%02d">              6
     ?<Constant "\nHours:">            8
     ?<Constant "\nMinutes:">         10
     ?<Constant "\nSeconds:">         10
     ?<Constant "\nH On:">             7
     ?<Constant "\n%02d:%02d">        11
     ?<Constant "\nMin On:">           9
     ?<Constant "\nH Off:">            8
     ?<Constant "\nMin Off:">         10
     ?<Constant "\n%d.%d">             7
     ?<Constant "\nON      ">         10
     ?<Constant "\nOFF     ">         10
     ?<Constant "\nClock">             7
     ?<Constant "\nExit OK ">         10
     ?<Constant "\n+/-     ">         10

 
 4 823 bytes in section .far_func.text
   100 bytes in section .near.bss
     3 bytes in section .near.data
   244 bytes in section .near.rodata
 
 4 823 bytes of CODE  memory
   244 bytes of CONST memory
   103 bytes of DATA  memory

Errors: none
Warnings: none
